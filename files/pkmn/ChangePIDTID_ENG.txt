@@ title = "Change Pokémon PID or TID"
@@ author = "Mettrich and final"
@@ exit = "Bootstrapped"
@@ filler0 = 0xbbbbbbbb
@@ filler1 = 0xbbbbbbff
@@ filler2 = 0xbbbbffff
@@ filler3 = 0xbbffffff
@@ filler4 = 0xffffffff

// For emulator users:
// This code requires an official GBA BIOS. You must set a BIOS for
// your emulator, in order for this code to work properly.

// This code does not use the Certificate Exit Bootstrap.
// It uses the wallpaper exit documented at:
// https://gist.github.com/claydolwithexplosion/017f1784deebcd118b61d3ad917edb3c#making-long-codes-with-wallpapers

// This code targets the Pokémon stored in Box 10, Slot 2.

// This code must be executed twice back to back.

// Do not view Box 10 in between these executions!

// For the first execution, Box 6 should have its name set as the
// following:
// Box 6: C D n           [CDn]
// instead of what CodeGenerator has outputted.

// For the second execution, rename Box 6 to what CodeGenerator has
// outputted.

option = 1  // 0 for PID, 1 for TID

// PID (personality value), also determines the substructure order of
// the Pokémon! Make sure that the new PID of the Pokémon gives the
// Pokémon the same substructure order as what it currently has.
//
// i.e. newPID % 24 == oldPID % 24
//
// Other stuff might change with PID such as nature, or gender.

aligned_pc = 0  // Set to 1 for old emulators

// Input the desired values here.

pid = 0
tid = 0
sid = 0

// Do not touch the below variables

otid = ((sid & 0xffff) << 16) | (tid & 0xffff)

@@

SBC r10, pc, #0x2f40
ADC r0, r10, #{0xa9 - (!aligned_pc << 1)}

MOV r12, #{option ? otid : pid} ? 5

; ADC r12, lr, #{0x0806a24d-0x080069e7} ?
; Moving &DecryptBoxMon to r12
ADCS r11, lr, #0x3fc0
STR r12, [r10, #{0xa9 - (!aligned_pc << 1) + (!!option << 2)}]!  ; Store in PID or OTID
ADCS r12, r11, #0x37000
0xE1FFBACD  ; MVNS r11, sp, ASR #21
STR lr, [sp, r11, ROR #3]!  ; Store lr in sp-4
ADCS r12, #0x28800
ADCS r12, #0xa6

MOVS r11, #0x3fc  ; Clear N flag, BX r12 jump part 1
ADCGTS lr, pc, sp, LSR #29
BICS pc, r11, #0x290  ; BX r12 jump part 2, pc = 0x16C

0xffffffff  ; Returns here with C set
0xbbffffff  ; (filler)
0xffffffff  ; (filler)
0xffffffff  ; (filler)

LDR lr, [sp, sp, LSR #29]!
ADCS sp, sp, #3 ; sp = sp+4, due to carry
