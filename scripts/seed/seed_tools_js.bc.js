//# 1 "seed_tools_js.bc.runtime.js"
// Generated by js_of_ocaml 3.9.1
(function(joo_global_object)
   {"use strict";
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    var caml_global_data=[0];
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_expm1_float(x)
     {var y=Math.exp(x),z=y - 1;
      return Math.abs(x) > 1?z:z == 0?x:x * z / Math.log(y)}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_bytes_of_string(s){return s}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_ml_bytes_length(s){return s.l}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
          caml_raise_sys_error
           (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try
       {return this.fs.existsSync(this.nm(name))?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.readdir
    =
    function(name)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_sys_is_directory(name)
     {var root=resolve_fs_device(name),a=root.device.is_dir(root.rest);
      return a?1:0}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_string_of_jsstring(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function shift_right_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=len1 - 1;i >= 0;i--)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a >>> nbits | wrap;
        wrap = a << 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    var caml_gr_state;
    function caml_gr_state_get()
     {if(caml_gr_state)return caml_gr_state;
      throw [0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]}
    function caml_gr_point_color(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.getImageData(x,s.height - y,1,1),
       d=im.data;
      return (d[0] << 16) + (d[1] << 8) + d[2]}
    var MlObjectTable;
    if(typeof joo_global_object.WeakMap === "undefined")
     MlObjectTable
     =
     function()
       {function NaiveLookup(objs){this.objs = objs}
        NaiveLookup.prototype.get
        =
        function(v)
         {for(var i=0;i < this.objs.length;i++)if(this.objs[i] === v)return i};
        NaiveLookup.prototype.set = function(){};
        return function()
         {this.objs = [];this.lookup = new NaiveLookup(this.objs)}}
      ();
    else
     MlObjectTable
     =
     function()
      {this.objs = [];this.lookup = new (joo_global_object.WeakMap)()};
    MlObjectTable.prototype.store
    =
    function(v){this.lookup.set(v,this.objs.length);this.objs.push(v)};
    MlObjectTable.prototype.recall
    =
    function(v)
     {var i=this.lookup.get(v);
      return i === undefined?undefined:this.objs.length - i};
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_sys_rename(o,n)
     {var o_root=resolve_fs_device(o),n_root=resolve_fs_device(n);
      if(o_root.device != n_root.device)
       caml_failwith
        ("caml_sys_rename: cannot move file between two filesystem");
      if(! o_root.device.rename)
       caml_failwith("caml_sys_rename: no implemented");
      o_root.device.rename(o_root.rest,n_root.rest)}
    function caml_log10_float(x){return Math.LOG10E * Math.log(x)}
    var caml_runtime_warnings=0;
    function caml_ml_enable_runtime_warnings(bool)
     {caml_runtime_warnings = bool;return 0}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    var caml_ml_channels=new Array();
    function caml_ml_may_refill_input(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill == null)return;
      if(chan.file.length() != chan.offset)return;
      caml_ml_refill_input(chan)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_ml_input_scan_line(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      var p=chan.offset,len=chan.file.length();
      if(p >= len)return 0;
      while(true)
       {if(p >= len)return - (p - chan.offset);
        if(chan.file.read_one(p) == 10)return p - chan.offset + 1;
        p++}}
    function caml_gc_minor(){return 0}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_ba_uint8_get64(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3),
       b5=ba.get(ofs + 4),
       b6=ba.get(ofs + 5),
       b7=ba.get(ofs + 6),
       b8=ba.get(ofs + 7);
      return caml_int64_of_bytes([b8,b7,b6,b5,b4,b3,b2,b1])}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_ba_num_dims(ba){return ba.dims.length}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_create_file(name,content)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       content=
        typeof content == "string"?caml_string_of_jsbytes(content):content,
       root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_set_parser_trace(){return 0}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function unix_gettimeofday(){return new Date().getTime() / 1000}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function num_digits_nat(nat,ofs,len)
     {for(var i=len - 1;i >= 0;i--)if(nat.data[ofs + i] != 0)return i + 1;
      return 1}
    function caml_hash_nat(x)
     {var len=num_digits_nat(x,0,x.data.length),h=0;
      for(var i=0;i < len;i++)h = caml_hash_mix_int(h,x.data[i]);
      return h}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_js_wrap_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,[args])}}
    function caml_sys_chdir(dir)
     {var root=resolve_fs_device(dir);
      if(root.device.exists(root.rest))
       {if(root.rest)
         caml_current_dir = root.path + root.rest + "/";
        else
         caml_current_dir = root.path;
        return 0}
      else
       caml_raise_no_such_file(dir)}
    function caml_gc_counters(){return [254,0,0,0]}
    function caml_gr_synchronize()
     {caml_failwith("caml_gr_synchronize not Implemented")}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function div_helper(a,b,c)
     {var
       x=a * 65536 + (b >>> 16),
       y=Math.floor(x / c) * 65536,
       z=x % c * 65536,
       w=z + (b & 0x0000FFFF);
      return [y + Math.floor(w / c),w % c]}
    function div_digit_nat(natq,ofsq,natr,ofsr,nat1,ofs1,len,nat2,ofs2)
     {var rem=nat1.data[ofs1 + len - 1] >>> 0;
      for(var i=len - 2;i >= 0;i--)
       {var x=div_helper(rem,nat1.data[ofs1 + i] >>> 0,nat2.data[ofs2] >>> 0);
        natq.data[ofsq + i] = x[0];
        rem = x[1]}
      natr.data[ofsr] = rem;
      return 0}
    function num_leading_zero_bits_in_digit(nat,ofs)
     {var a=nat.data[ofs],b=0;
      if(a & 0xFFFF0000){b += 16;a >>>= 16}
      if(a & 0xFF00){b += 8;a >>>= 8}
      if(a & 0xF0){b += 4;a >>>= 4}
      if(a & 12){b += 2;a >>>= 2}
      if(a & 2){b += 1;a >>>= 1}
      if(a & 1)b += 1;
      return 32 - b}
    function shift_left_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=0;i < len1;i++)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a << nbits | wrap;
        wrap = a >>> 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    function MlNat(x)
     {this.data = new (joo_global_object.Int32Array)(x);
      this.length = this.data.length + 2}
    MlNat.prototype.caml_custom = "_nat";
    function create_nat(size)
     {var arr=new MlNat(size);
      for(var i=0;i < size;i++)arr.data[i] = - 1;
      return arr}
    function set_to_zero_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)nat.data[ofs + i] = 0;return 0}
    function incr_nat(nat,ofs,len,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) + carry;
        nat.data[ofs + i] = x | 0;
        if(x == x >>> 0){carry = 0;break}else carry = 1}
      return carry}
    function add_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
        nat1.data[ofs1 + i] = x;
        if(x == x >>> 0)carry = 0;else carry = 1}
      return incr_nat(nat1,ofs1 + len2,len1 - len2,carry)}
    function nat_of_array(l){return new MlNat(l)}
    function mult_digit_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3)
     {var carry=0,a=nat3.data[ofs3] >>> 0;
      for(var i=0;i < len2;i++)
       {var
         x1=
          (nat1.data[ofs1 + i] >>> 0)
          +
          (nat2.data[ofs2 + i] >>> 0)
          *
          (a & 0x0000FFFF)
          +
          carry,
         x2=(nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
        carry = Math.floor(x2 / 65536);
        var x3=x1 + x2 % 65536 * 65536;
        nat1.data[ofs1 + i] = x3;
        carry += Math.floor(x3 / 4294967296)}
      return len2 < len1 && carry
              ?add_nat
                (nat1,ofs1 + len2,len1 - len2,nat_of_array([carry]),0,1,0)
              :carry}
    function decr_nat(nat,ofs,len,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) - borrow;
        nat.data[ofs + i] = x;
        if(x >= 0){borrow = 0;break}else borrow = 1}
      return borrow == 1?0:1}
    function sub_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
        nat1.data[ofs1 + i] = x;
        if(x >= 0)borrow = 0;else borrow = 1}
      return decr_nat(nat1,ofs1 + len2,len1 - len2,borrow == 1?0:1)}
    function compare_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var a=num_digits_nat(nat1,ofs1,len1),b=num_digits_nat(nat2,ofs2,len2);
      if(a > b)return 1;
      if(a < b)return - 1;
      for(var i=len1 - 1;i >= 0;i--)
       {if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0)return 1;
        if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0)return - 1}
      return 0}
    function div_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {if(len2 == 1)
       {div_digit_nat(nat1,ofs1 + 1,nat1,ofs1,nat1,ofs1,len1,nat2,ofs2);
        return 0}
      var s=num_leading_zero_bits_in_digit(nat2,ofs2 + len2 - 1);
      shift_left_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      shift_left_nat(nat1,ofs1,len1,nat_of_array([0]),0,s);
      var d=(nat2.data[ofs2 + len2 - 1] >>> 0) + 1,a=create_nat(len2 + 1);
      for(var i=len1 - 1;i >= len2;i--)
       {var
         quo=
          d == 4294967296
           ?nat1.data[ofs1 + i] >>> 0
           :div_helper
              (nat1.data[ofs1 + i] >>> 0,nat1.data[ofs1 + i - 1] >>> 0,d)
             [0];
        set_to_zero_nat(a,0,len2 + 1);
        mult_digit_nat(a,0,len2 + 1,nat2,ofs2,len2,nat_of_array([quo]),0);
        sub_nat(nat1,ofs1 + i - len2,len2 + 1,a,0,len2 + 1,1);
        while
         (nat1.data[ofs1 + i]
          !=
          0
          ||
          compare_nat(nat1,ofs1 + i - len2,len2,nat2,ofs2,len2)
          >=
          0)
         {quo = quo + 1;
          sub_nat(nat1,ofs1 + i - len2,len2 + 1,nat2,ofs2,len2,1)}
        nat1.data[ofs1 + i] = quo}
      shift_right_nat(nat1,ofs1,len2,nat_of_array([0]),0,s);
      shift_right_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      return 0}
    function caml_ba_blit(src,dst)
     {if(dst.dims.length != src.dims.length)
       caml_invalid_argument("Bigarray.blit: dimension mismatch");
      for(var i=0;i < dst.dims.length;i++)
       if(dst.dims[i] != src.dims[i])
        caml_invalid_argument("Bigarray.blit: dimension mismatch");
      dst.data.set(src.data);
      return 0}
    function is_digit_int(nat,ofs){if(nat.data[ofs] >= 0)return 1;return 0}
    function caml_int64_div(x,y){return x.div(y)}
    function caml_js_html_entities(s)
     {var entity=/^&#?[0-9a-zA-Z]+;$/;
      if(s.match(entity))
       {var str,temp=document.createElement("p");
        temp.innerHTML = s;
        str = temp.textContent || temp.innerText;
        temp = null;
        return str}
      else
       caml_failwith("Invalid entity " + s)}
    function caml_string_unsafe_set(s,i,c)
     {return caml_bytes_unsafe_set(s,i,c)}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return new
              MlInt64
              (x & 0xffffff,
               Math.floor(x * caml_int64_offset) & 0xffffff,
               Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff)}
    function caml_ml_channel_size_64(chanid)
     {var chan=caml_ml_channels[chanid];
      return caml_int64_of_float(chan.file.length())}
    function caml_ba_set_2(ba,i0,i1,v){ba.set(ba.offset([i0,i1]),v);return 0}
    var
     caml_argv=
      function()
        {var g=joo_global_object,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;main = argv[1];args = argv.slice(2)}
         var p=caml_string_of_jsstring(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_string_of_jsstring(args[i]));
         return args2}
       (),
     caml_executable_name=caml_argv[1];
    function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s))}
    function caml_CamlinternalMod_init_mod(loc,shape)
     {function undef_module(_x)
       {caml_raise_with_arg(caml_global_data.Undefined_recursive_module,loc)}
      function loop(shape,struct,idx)
       {if(typeof shape === "number")
         switch(shape)
          {case 0:struct[idx] = {fun:undef_module};break;
           case 1:struct[idx] = [246,undef_module];break;
           default:struct[idx] = []}
        else
         switch(shape[0])
          {case 0:
            struct[idx] = [0];
            for(var i=1;i < shape[1].length;i++)
             loop(shape[1][i],struct[idx],i);
            break;
           default:struct[idx] = shape[1]}}
      var res=[];
      loop(shape,res,0);
      return res[0]}
    function serialize_nat(writer,nat,sz)
     {var len=nat.data.length;
      writer.write(32,len);
      for(var i=0;i < len;i++)writer.write(32,nat.data[i]);
      sz[0] = len * 4;
      sz[1] = len * 8}
    function caml_memprof_set(_control){return 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_channel_descriptor(chanid)
     {var chan=caml_ml_channels[chanid];return chan.fd}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_reshape(ba,vind)
     {vind = caml_js_from_array(vind);
      var new_dim=[],num_dims=vind.length;
      if(num_dims < 0 || num_dims > 16)
       caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
      var num_elts=1;
      for(var i=0;i < num_dims;i++)
       {new_dim[i] = vind[i];
        if(new_dim[i] < 0)
         caml_invalid_argument("Bigarray.reshape: negative dimension");
        num_elts = num_elts * new_dim[i]}
      var size=caml_ba_get_size(ba.dims);
      if(num_elts != size)
       caml_invalid_argument("Bigarray.reshape: size mismatch");
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dim,ba.data)}
    var caml_oo_last_id=0;
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_gr_fill_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.fillRect(x,s.height - y,w,- h);
      return 0}
    function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_string(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function caml_gr_set_window_title(name)
     {var s=caml_gr_state_get();
      s.title = name;
      var jsname=caml_jsstring_of_string(name);
      if(s.set_title)s.set_title(jsname);
      return 0}
    function caml_get_global_data(){return caml_global_data}
    function caml_int64_shift_right_unsigned(x,s)
     {return x.shift_right_unsigned(s)}
    function caml_ba_uint8_get16(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      var b1=ba.get(ofs),b2=ba.get(ofs + 1);
      return b1 | b2 << 8}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_int64_to_float(x){return x.toFloat()}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_bigstring_memcmp(s1,pos1,s2,pos2,len)
     {for(var i=0;i < len;i++)
       {var a=caml_ba_get_1(s1,pos1 + i),b=caml_ba_get_1(s2,pos2 + i);
        if(a < b)return - 1;
        if(a > b)return 1}
      return 0}
    function caml_new_string(s){return caml_string_of_jsbytes(s)}
    function caml_ba_uint8_get32(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3);
      return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24}
    function caml_raw_backtrace_length(){return 0}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_gr_clear_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = s.width;
      s.canvas.height = s.height;
      return 0}
    function bigstring_to_array_buffer(bs){return bs.data.buffer}
    function caml_sys_const_naked_pointers_checked(_unit){return 0}
    function lxor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] ^= nat2.data[ofs2];return 0}
    function caml_final_release(){return 0}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_gr_plot(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.createImageData(1,1),
       d=im.data,
       color=s.color;
      d[0] = color >> 16 & 0xff;
      d[1] = color >> 8 & 0xff,d[2] = color >> 0 & 0xff;
      d[3] = 0xFF;
      s.x = x;
      s.y = y;
      s.context.putImageData(im,x,s.height - y);
      return 0}
    function caml_bytes_set64(s,i,i64)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=caml_int64_to_bytes(i64);
      for(var j=0;j < 8;j++)caml_bytes_unsafe_set(s,i + 7 - j,a[j]);
      return 0}
    function caml_bytes_set16(s,i,i16)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b2=0xFF & i16 >> 8,b1=0xFF & i16;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      return 0}
    function caml_string_set16(s,i,i16){return caml_bytes_set16(s,i,i16)}
    function caml_int64_bswap(x)
     {var y=caml_int64_to_bytes(x);
      return caml_int64_of_bytes([y[7],y[6],y[5],y[4],y[3],y[2],y[1],y[0]])}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_string=caml_fill_bytes;
    function caml_gc_major(){return 0}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_sys_file_exists(name)
     {var root=resolve_fs_device(name);return root.device.exists(root.rest)}
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_gr_size_x(){var s=caml_gr_state_get();return s.width}
    function caml_ml_debug_info_status(){return 0}
    function caml_sys_const_ostype_cygwin(){return 0}
    function caml_cosh_float(x){return (Math.exp(x) + Math.exp(- x)) / 2}
    var caml_ephe_key_offset=3;
    function caml_weak_check(x,i)
     {return x[caml_ephe_key_offset + i]
              !==
              undefined
              &&
              x[caml_ephe_key_offset + i]
              !==
              0
              ?1
              :0}
    var caml_ephe_check_key=caml_weak_check;
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_gr_text_size(txt)
     {var
       s=caml_gr_state_get(),
       w=s.context.measureText(caml_jsstring_of_string(txt)).width;
      return [0,w,s.text_size]}
    function caml_lex_run_mem(s,i,mem,curr_pos)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)
         mem[dst + 1] = curr_pos;
        else
         mem[dst + 1] = mem[src + 1]}}
    function caml_lex_run_tag(s,i,mem)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)mem[dst + 1] = - 1;else mem[dst + 1] = mem[src + 1]}}
    function caml_new_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_mem=10,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5,
       lex_base_code=6,
       lex_backtrk_code=7,
       lex_default_code=8,
       lex_trans_code=9,
       lex_check_code=10,
       lex_code=11;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      if(! tbl.lex_default_code)
       {tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
        tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
        tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
        tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
        tbl.lex_default_code = caml_lex_array(tbl[lex_default_code])}
      if(tbl.lex_code == null)
       tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)
         {var pc_off=tbl.lex_base_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          return - base - 1}
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {var pc_off=tbl.lex_backtrk_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        var pstate=state;
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         {var base_code=tbl.lex_base_code[pstate],pc_off;
          if(tbl.lex_check_code[base_code + c] == pstate)
           pc_off = tbl.lex_trans_code[base_code + c];
          else
           pc_off = tbl.lex_default_code[pstate];
          if(pc_off > 0)
           caml_lex_run_mem
            (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
          if(c == 256)lexbuf[lex_eof_reached] = 0}}}
    function caml_ba_uint8_set64(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var v=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)ba.set(ofs + i,v[7 - i]);
      return 0}
    function caml_sys_executable_name(a){return caml_executable_name}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_seek_out_64(chanid,pos)
     {caml_ml_flush(chanid);
      caml_ml_channels[chanid].offset = caml_int64_to_float(pos);
      return 0}
    function compare_nat_real(nat1,nat2)
     {return compare_nat(nat1,0,nat1.data.length,nat2,0,nat2.data.length)}
    function caml_gc_set(_control){return 0}
    function caml_js_get(o,f){return o[f]}
    function caml_gc_compaction(){return 0}
    function caml_weak_get(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_key");
      return x[caml_ephe_key_offset + i] === undefined
              ?0
              :x[caml_ephe_key_offset + i]}
    var caml_ephe_get_key=caml_weak_get;
    function caml_bigstring_blit_bytes_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_bytes_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_bytes(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function win_cleanup(){}
    function caml_sys_close(fd){delete caml_global_data.fds[fd];return 0}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_flush(chanid);
      chan.opened = false;
      chan.file.close();
      caml_sys_close(chan.fd);
      return 0}
    function caml_exn_with_js_backtrace(exn,force)
     {if(! exn.js_error || force || exn[0] == 248)
       exn.js_error
       =
       new (joo_global_object.Error)("Js exception containing backtrace");
      return exn}
    function caml_sys_isatty(_chan){return 0}
    function is_digit_zero(nat,ofs){if(nat.data[ofs] == 0)return 1;return 0}
    function unix_inet_addr_of_string(){return 0}
    function caml_js_set(o,f,v){o[f] = v;return 0}
    function caml_array_get(array,index)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      return array[index + 1]}
    function caml_spacetime_only_works_for_native_code()
     {caml_failwith("Spacetime profiling only works for native code")}
    function caml_int64_sub(x,y){return x.sub(y)}
    function caml_ml_seek_in_64(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = caml_int64_to_float(pos);
      return 0}
    function caml_int64_shift_left(x,s){return x.shift_left(s)}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_sys_const_int_size(){return 32}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_is_js(){return 1}
    function caml_ba_dim(ba,i)
     {if(i < 0 || i >= ba.dims.length)caml_invalid_argument("Bigarray.dim");
      return ba.dims[i]}
    function caml_ba_dim_1(ba){return caml_ba_dim(ba,0)}
    function unix_localtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(d.getFullYear(),0,1).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000),
       jan=new Date(d.getFullYear(),0,1),
       jul=new Date(d.getFullYear(),6,1),
       stdTimezoneOffset=
        Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());
      return [0,
              d.getSeconds(),
              d.getMinutes(),
              d.getHours(),
              d.getDate(),
              d.getMonth(),
              d.getFullYear() - 1900,
              d.getDay(),
              doy,
              d.getTimezoneOffset() < stdTimezoneOffset | 0]}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    var caml_ephe_create=caml_weak_create;
    function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s)}
    function unix_mktime(tm)
     {var
       d=new Date(tm[6] + 1900,tm[5],tm[4],tm[3],tm[2],tm[1]).getTime(),
       t=Math.floor(d / 1000),
       tm2=unix_localtime(t);
      return [0,t,tm2]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_bytes_get64(s,i)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_bytes_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_weak_set(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_sys_remove(name)
     {var root=resolve_fs_device(name),ok=root.device.unlink(root.rest);
      if(ok == 0)caml_raise_no_such_file(name);
      return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get32(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 3)caml_string_bound_error();
      var
       b1=caml_string_unsafe_get(s,i),
       b2=caml_string_unsafe_get(s,i + 1),
       b3=caml_string_unsafe_get(s,i + 2),
       b4=caml_string_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_hypot_float(x,y)
     {var
       x=Math.abs(x),
       y=Math.abs(y),
       a=Math.max(x,y),
       b=Math.min(x,y) / (a?a:1);
      return a * Math.sqrt(1 + b * b)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_ephe_unset_key(x,i){return caml_weak_set(x,i,0)}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_bytes(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_jsbytes(h,v.c);break;
        case 2:h = caml_hash_mix_bytes_arr(h,v.c)
        }
      return h}
    function caml_bytes_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_gr_fill_poly(ar)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(ar[1][1],s.height - ar[1][2]);
      for(var i=2;i < ar.length;i++)
       s.context.lineTo(ar[i][1],s.height - ar[i][2]);
      s.context.lineTo(ar[1][1],s.height - ar[1][2]);
      s.context.fill();
      return 0}
    function caml_gc_quick_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_ml_input_int(chanid)
     {var chan=caml_ml_channels[chanid],file=chan.file;
      while(chan.offset + 3 >= file.length())
       {var l=caml_ml_refill_input(chan);if(l == 0)caml_raise_end_of_file()}
      var
       o=chan.offset,
       r=
        file.read_one(o)
        <<
        24
        |
        file.read_one(o + 1)
        <<
        16
        |
        file.read_one(o + 2)
        <<
        8
        |
        file.read_one(o + 3);
      chan.offset += 4;
      return r}
    function caml_gr_display_mode()
     {caml_failwith("caml_gr_display_mode not Implemented")}
    function nth_digit_nat(nat,ofs){return nat.data[ofs]}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_sys_getcwd()
     {return caml_string_of_jsbytes(caml_current_dir)}
    function caml_sys_const_big_endian(){return 0}
    function caml_list_to_js_array(l)
     {var a=[];for(;l !== 0;l = l[2])a.push(l[1]);return a}
    var
     caml_legacy_custom_code=false,
     caml_output_val=
      function()
        {function Writer(){this.chunk = []}
         Writer.prototype
         =
         {chunk_idx:20,
          block_len:0,
          obj_counter:0,
          size_32:0,
          size_64:0,
          write:
          function(size,value)
           {for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_at:
          function(pos,size,value)
           {var pos=pos;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[pos++] = value >> i & 0xFF},
          write_code:
          function(size,code,value)
           {this.chunk[this.chunk_idx++] = code;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_shared:
          function(offset)
           {if(offset < 1 << 8)
             this.write_code(8,0x04,offset);
            else
             if(offset < 1 << 16)
              this.write_code(16,0x05,offset);
             else
              this.write_code(32,0x06,offset)},
          pos:function(){return this.chunk_idx},
          finalize:
          function()
           {this.block_len = this.chunk_idx - 20;
            this.chunk_idx = 0;
            this.write(32,0x8495A6BE);
            this.write(32,this.block_len);
            this.write(32,this.obj_counter);
            this.write(32,this.size_32);
            this.write(32,this.size_64);
            return this.chunk}};
         return function(v,flags)
          {flags = caml_list_to_js_array(flags);
           var
            no_sharing=flags.indexOf(0) !== - 1,
            closures=flags.indexOf(1) !== - 1;
           if(closures)
            joo_global_object.console.warn
             ("in caml_output_val: flag Marshal.Closures is not supported.");
           var
            writer=new Writer(),
            stack=[],
            intern_obj_table=no_sharing?null:new MlObjectTable();
           function memo(v)
            {if(no_sharing)return false;
             var existing_offset=intern_obj_table.recall(v);
             if(existing_offset)
              {writer.write_shared(existing_offset);return true}
             else
              {intern_obj_table.store(v);return false}}
           function extern_rec(v)
            {if(v.caml_custom)
              {if(memo(v))return;
               var
                name=v.caml_custom,
                ops=caml_custom_ops[name],
                sz_32_64=[0,0];
               if(! ops.serialize)
                caml_invalid_argument("output_value: abstract value (Custom)");
               if(caml_legacy_custom_code)
                {writer.write(8,0x12);
                 for(var i=0;i < name.length;i++)
                  writer.write(8,name.charCodeAt(i));
                 writer.write(8,0);
                 ops.serialize(writer,v,sz_32_64)}
               else
                if(ops.fixed_length == undefined)
                 {writer.write(8,0x18);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var header_pos=writer.pos();
                  for(var i=0;i < 12;i++)writer.write(8,0);
                  ops.serialize(writer,v,sz_32_64);
                  writer.write_at(header_pos,32,sz_32_64[0]);
                  writer.write_at(header_pos + 4,32,0);
                  writer.write_at(header_pos + 8,32,sz_32_64[1])}
                else
                 {writer.write(8,0x19);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var old_pos=writer.pos();
                  ops.serialize(writer,v,sz_32_64);
                  if(ops.fixed_length != writer.pos() - old_pos)
                   caml_failwith
                    ("output_value: incorrect fixed sizes specified by " + name)}
               writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
               writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3)}
             else
              if(v instanceof Array && v[0] === (v[0] | 0))
               {if(v[0] == 251)
                 caml_failwith("output_value: abstract value (Abstract)");
                if(v.length > 1 && memo(v))return;
                if(v[0] < 16 && v.length - 1 < 8)
                 writer.write(8,0x80 + v[0] + (v.length - 1 << 4));
                else
                 writer.write_code(32,0x08,v.length - 1 << 10 | v[0]);
                writer.size_32 += v.length;
                writer.size_64 += v.length;
                if(v.length > 1)stack.push(v,1)}
              else
               if(caml_is_ml_bytes(v))
                {if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
                  caml_failwith
                   ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
                 if(memo(v))return;
                 var len=caml_ml_bytes_length(v);
                 if(len < 0x20)
                  writer.write(8,0x20 + len);
                 else
                  if(len < 0x100)
                   writer.write_code(8,0x09,len);
                  else
                   writer.write_code(32,0x0A,len);
                 for(var i=0;i < len;i++)
                  writer.write(8,caml_bytes_unsafe_get(v,i));
                 writer.size_32 += 1 + ((len + 4) / 4 | 0);
                 writer.size_64 += 1 + ((len + 8) / 8 | 0)}
               else
                if(caml_is_ml_string(v))
                 {var len=caml_ml_string_length(v);
                  if(len < 0x20)
                   writer.write(8,0x20 + len);
                  else
                   if(len < 0x100)
                    writer.write_code(8,0x09,len);
                   else
                    writer.write_code(32,0x0A,len);
                  for(var i=0;i < len;i++)
                   writer.write(8,caml_string_unsafe_get(v,i));
                  writer.size_32 += 1 + ((len + 4) / 4 | 0);
                  writer.size_64 += 1 + ((len + 8) / 8 | 0)}
                else
                 if(v != (v | 0))
                  {var type_of_v=typeof v;
                   caml_failwith
                    ("output_value: abstract value (" + type_of_v + ")")}
                 else
                  if(v >= 0 && v < 0x40)
                   writer.write(8,0X40 + v);
                  else
                   if(v >= - (1 << 7) && v < 1 << 7)
                    writer.write_code(8,0x00,v);
                   else
                    if(v >= - (1 << 15) && v < 1 << 15)
                     writer.write_code(16,0x01,v);
                    else
                     writer.write_code(32,0x02,v)}
           extern_rec(v);
           while(stack.length > 0)
            {var i=stack.pop(),v=stack.pop();
             if(i + 1 < v.length)stack.push(v,i + 1);
             extern_rec(v[i])}
           if(intern_obj_table)
            writer.obj_counter = intern_obj_table.objs.length;
           writer.finalize();
           return writer.chunk}}
       ();
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    function caml_output_value_to_string(v,flags)
     {return caml_string_of_array(caml_output_val(v,flags))}
    function caml_raise_not_a_dir(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": Not a directory")}
    function caml_sys_system_command(cmd)
     {var cmd=caml_jsstring_of_string(cmd);
      if
       (typeof require
        !=
        "undefined"
        &&
        require("child_process")
        &&
        require("child_process").execSync)
       try
        {require("child_process").execSync(cmd,{stdio:"inherit"});return 0}
       catch(e){return 1}
      else
       return 127}
    function unix_isatty(fileDescriptor)
     {if(fs_node_supported())
       {var tty=require("tty");return tty.isatty(fileDescriptor)}
      else
       return false}
    function caml_js_error_of_exception(exn)
     {if(exn.js_error)return exn.js_error;return null}
    function deserialize_nat(reader,sz)
     {var len=reader.read32s(),nat=new MlNat(len);
      for(var i=0;i < len;i++)nat.data[i] = reader.read32s();
      sz[0] = len * 4;
      return nat}
    function initialize_nat()
     {caml_custom_ops["_nat"]
      =
      {deserialize:deserialize_nat,serialize:serialize_nat,hash:caml_hash_nat}}
    function caml_gr_open_subwindow(a,b,c,d)
     {caml_failwith("caml_gr_open_subwindow not Implemented")}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_copysign_float(x,y)
     {if(y == 0)y = 1 / y;x = Math.abs(x);return y < 0?- x:x}
    function caml_gr_set_text_size(size)
     {var s=caml_gr_state_get();
      s.text_size = size;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    var
     caml_md5_bytes=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ba_set_generic(ba,i,v)
     {ba.set(ba.offset(caml_js_from_array(i)),v);return 0}
    function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
    function caml_bytes_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_string_lessequal(s1,s2){return caml_bytes_lessequal(s1,s2)}
    function caml_string_greaterequal(s1,s2)
     {return caml_string_lessequal(s2,s1)}
    function caml_int64_add(x,y){return x.add(y)}
    function caml_nextafter_float(x,y)
     {if(isNaN(x) || isNaN(y))return NaN;
      if(x == y)return y;
      if(x == 0)return y < 0?- Math.pow(2,- 1074):Math.pow(2,- 1074);
      var bits=caml_int64_bits_of_float(x),one=caml_int64_of_int32(1);
      if(x < y == x > 0)
       bits = caml_int64_add(bits,one);
      else
       bits = caml_int64_sub(bits,one);
      return caml_int64_float_of_bits(bits)}
    function caml_gr_size_y(){var s=caml_gr_state_get();return s.height}
    function caml_ml_pos_in(chanid){return caml_ml_channels[chanid].offset}
    function caml_int64_and(x,y){return x.and(y)}
    function caml_sys_const_word_size(){return 32}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function MlStringReader(s,i)
     {this.s = caml_jsbytes_of_string(s);this.i = i}
    MlStringReader.prototype
    =
    {read8u:function(){return this.s.charCodeAt(this.i++)},
     read8s:function(){return this.s.charCodeAt(this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (s.charCodeAt(i)
               <<
               24
               |
               s.charCodeAt(i + 1)
               <<
               16
               |
               s.charCodeAt(i + 2)
               <<
               8
               |
               s.charCodeAt(i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return s.charCodeAt(i)
              <<
              24
              |
              s.charCodeAt(i + 1)
              <<
              16
              |
              s.charCodeAt(i + 2)
              <<
              8
              |
              s.charCodeAt(i + 3)},
     readstr:
     function(len)
      {var i=this.i;
       this.i = i + len;
       return caml_string_of_jsbytes(this.s.substring(i,i + len))}};
    function caml_float_of_bytes(a)
     {return caml_int64_float_of_bits(caml_int64_of_bytes(a))}
    function caml_input_value_from_reader(reader,ofs)
     {var
       _magic=reader.read32u(),
       _block_len=reader.read32u(),
       num_objects=reader.read32u(),
       _size_32=reader.read32u(),
       _size_64=reader.read32u(),
       stack=[],
       intern_obj_table=num_objects > 0?[]:null,
       obj_counter=0;
      function intern_rec()
       {var code=reader.read8u();
        if(code >= 0x40)
         if(code >= 0x80)
          {var tag=code & 0xF,size=code >> 4 & 0x7,v=[tag];
           if(size == 0)return v;
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           stack.push(v,size);
           return v}
         else
          return code & 0x3F;
        else
         if(code >= 0x20)
          {var len=code & 0x1F,v=reader.readstr(len);
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           return v}
         else
          switch(code)
           {case 0x00:return reader.read8s();
            case 0x01:return reader.read16s();
            case 0x02:return reader.read32s();
            case 0x03:caml_failwith("input_value: integer too large");break;
            case 0x04:
             var offset=reader.read8u();
             return intern_obj_table[obj_counter - offset];
            case 0x05:
             var offset=reader.read16u();
             return intern_obj_table[obj_counter - offset];
            case 0x06:
             var offset=reader.read32u();
             return intern_obj_table[obj_counter - offset];
            case 0x08:
             var
              header=reader.read32u(),
              tag=header & 0xFF,
              size=header >> 10,
              v=[tag];
             if(size == 0)return v;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             stack.push(v,size);
             return v;
            case 0x13:
             caml_failwith("input_value: data block too large");break;
            case 0x09:
             var len=reader.read8u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0A:
             var len=reader.read32u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0C:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[7 - i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0B:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0E:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0D:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x07:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0F:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x10:
            case 0x11:caml_failwith("input_value: code pointer");break;
            case 0x12:
            case 0x18:
            case 0x19:
             var c,s="";
             while((c = reader.read8u()) != 0)s += String.fromCharCode(c);
             var ops=caml_custom_ops[s],expected_size;
             if(! ops)
              caml_failwith("input_value: unknown custom block identifier");
             switch(code)
              {case 0x12:break;
               case 0x19:
                if(! ops.fixed_length)
                 caml_failwith
                  ("input_value: expected a fixed-size custom block");
                expected_size = ops.fixed_length;
                break;
               case 0x18:
                expected_size = reader.read32u();
                reader.read32s();
                reader.read32s();
                break
               }
             var old_pos=reader.i,size=[0],v=ops.deserialize(reader,size);
             if(expected_size != undefined)
              if(expected_size != size[0])
               caml_failwith
                ("input_value: incorrect length of serialized custom block");
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            default:caml_failwith("input_value: ill-formed message")}}
      var res=intern_rec();
      while(stack.length > 0)
       {var size=stack.pop(),v=stack.pop(),d=v.length;
        if(d < size)stack.push(v,size);
        v[d] = intern_rec()}
      if(typeof ofs != "number")ofs[0] = reader.i;
      return res}
    function caml_string_of_bytes(s){return s}
    function caml_input_value_from_bytes(s,ofs)
     {var
       reader=
        new
         MlStringReader
         (caml_string_of_bytes(s),typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    var
     re_match=
      function()
        {var
          re_word_letters=
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
          opcodes=
           {CHAR:0,
            CHARNORM:1,
            STRING:2,
            STRINGNORM:3,
            CHARCLASS:4,
            BOL:5,
            EOL:6,
            WORDBOUNDARY:7,
            BEGGROUP:8,
            ENDGROUP:9,
            REFGROUP:10,
            ACCEPT:11,
            SIMPLEOPT:12,
            SIMPLESTAR:13,
            SIMPLEPLUS:14,
            GOTO:15,
            PUSHBACK:16,
            SETMARK:17,
            CHECKPROGRESS:18};
         function is_word_letter(c)
          {return re_word_letters[c >> 3] >> (c & 7) & 1}
         function in_bitset(s,i)
          {return caml_string_get(s,i >> 3) >> (i & 7) & 1}
         function re_match_impl(re,s,pos,partial)
          {var
            prog=caml_js_from_array(re[1]),
            cpool=caml_js_from_array(re[2]),
            normtable=caml_jsbytes_of_string(re[3]),
            numgroups=re[4] | 0,
            numregisters=re[5] | 0,
            startchars=re[6] | 0,
            s=caml_array_of_string(s),
            pc=0,
            quit=false,
            stack=[],
            groups=new Array(numgroups),
            re_register=new Array(numregisters);
           for(var i=0;i < groups.length;i++)groups[i] = {start:- 1,end:- 1};
           groups[0].start = pos;
           function backtrack()
            {while(stack.length)
              {var item=stack.pop();
               if(item.undo)
                item.undo.obj[item.undo.prop] = item.undo.value;
               else
                if(item.pos){pc = item.pos.pc;pos = item.pos.txt;return}}
             quit = true}
           function push(item){stack.push(item)}
           function accept()
            {groups[0].end = pos;
             var result=new Array(1 + groups.length * 2);
             result[0] = 0;
             for(var i=0;i < groups.length;i++)
              {var g=groups[i];
               if(g.start < 0 || g.end < 0)g.start = g.end = - 1;
               result[2 * i + 1] = g.start;
               result[2 * i + 1 + 1] = g.end}
             return result}
           function prefix_match()
            {if(partial)return accept();else backtrack()}
           while(! quit)
            {var
              op=prog[pc] & 0xff,
              sarg=prog[pc] >> 8,
              uarg=sarg & 0xff,
              c=s[pos],
              group;
             pc++;
             switch(op)
              {case opcodes.CHAR:
                if(pos === s.length){prefix_match();break}
                if(c === uarg)pos++;else backtrack();
                break;
               case opcodes.CHARNORM:
                if(pos === s.length){prefix_match();break}
                if(normtable.charCodeAt(c) === uarg)pos++;else backtrack();
                break;
               case opcodes.STRING:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(c === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.STRINGNORM:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(normtable.charCodeAt(c) === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.CHARCLASS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))pos++;else backtrack();
                break;
               case opcodes.BOL:
                if(pos > 0 && s[pos - 1] != 10)backtrack();break;
               case opcodes.EOL:
                if(pos < s.length && s[pos] != 10)backtrack();break;
               case opcodes.WORDBOUNDARY:
                if(pos == 0)
                 {if(pos === s.length){prefix_match();break}
                  if(is_word_letter(s[0]))break;
                  backtrack()}
                else
                 if(pos === s.length)
                  {if(is_word_letter(s[pos - 1]))break;backtrack()}
                 else
                  {if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos]))
                    break;
                   backtrack()}
                break;
               case opcodes.BEGGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"start",value:group.start}});
                group.start = pos;
                break;
               case opcodes.ENDGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"end",value:group.end}});
                group.end = pos;
                break;
               case opcodes.REFGROUP:
                group = groups[uarg];
                if(group.start < 0 || group.end < 0){backtrack();break}
                for(var i=group.start;i < group.end;i++)
                 {if(pos === s.length){prefix_match();break}
                  if(s[i] != s[pos]){backtrack();break}
                  pos++}
                break;
               case opcodes.SIMPLEOPT:if(in_bitset(cpool[uarg],c))pos++;break;
               case opcodes.SIMPLESTAR:
                while(in_bitset(cpool[uarg],c))c = s[++pos];break;
               case opcodes.SIMPLEPLUS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))
                 do c = s[++pos];while(in_bitset(cpool[uarg],c));
                else
                 backtrack();
                break;
               case opcodes.ACCEPT:return accept();
               case opcodes.GOTO:pc = pc + sarg;break;
               case opcodes.PUSHBACK:push({pos:{pc:pc + sarg,txt:pos}});break;
               case opcodes.SETMARK:
                push
                 ({undo:{obj:re_register,prop:uarg,value:re_register[uarg]}});
                re_register[uarg] = pos;
                break;
               case opcodes.CHECKPROGRESS:
                if(re_register[uarg] === pos)backtrack();break;
               default:throw new Error("Invalid bytecode")}}
           return 0}
         return re_match_impl}
       ();
    function re_search_backward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_backward");
      while(pos >= 0){var res=re_match(re,s,pos,0);if(res)return res;pos--}
      return [0]}
    function caml_js_from_string(s){return caml_jsstring_of_string(s)}
    function caml_ba_sub(ba,ofs,len)
     {var changed_dim,mul=1;
      if(ba.layout == 0)
       {for(var i=1;i < ba.dims.length;i++)mul = mul * ba.dims[i];
        changed_dim = 0}
      else
       {for(var i=0;i < ba.dims.length - 1;i++)mul = mul * ba.dims[i];
        changed_dim = ba.dims.length - 1;
        ofs = ofs - 1}
      if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
       caml_invalid_argument("Bigarray.sub: bad sub-array");
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)new_dims[i] = ba.dims[i];
      new_dims[changed_dim] = len;
      mul *= caml_ba_get_size_per_element(ba.kind);
      var new_data=ba.data.subarray(ofs * mul,(ofs + len) * mul);
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dims,new_data)}
    function caml_gc_full_major(){return 0}
    function caml_bytes_set32(s,i,i32)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b4=0xFF & i32 >> 24,
       b3=0xFF & i32 >> 16,
       b2=0xFF & i32 >> 8,
       b1=0xFF & i32;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      caml_bytes_unsafe_set(s,i + 2,b3);
      caml_bytes_unsafe_set(s,i + 3,b4);
      return 0}
    function caml_gr_sigio_signal(){return 0}
    function caml_ba_uint8_set32(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      ba.set(ofs + 2,v >>> 16 & 0xff);
      ba.set(ofs + 3,v >>> 24 & 0xff);
      return 0}
    function caml_sys_const_ostype_unix(){return 1}
    function caml_signbit_float(x){if(x == 0)x = 1 / x;return x < 0?1:0}
    function caml_gr_current_x(){var s=caml_gr_state_get();return s.x}
    function caml_gr_set_line_width(w)
     {var s=caml_gr_state_get();
      s.line_width = w;
      s.context.lineWidth = w;
      return 0}
    function caml_gr_set_font(f)
     {var s=caml_gr_state_get();
      s.font = f;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    function caml_gr_set_color(color)
     {var s=caml_gr_state_get();
      function convert(number)
       {var str="" + number.toString(16);
        while(str.length < 2)str = "0" + str;
        return str}
      var r=color >> 16 & 0xff,g=color >> 8 & 0xff,b=color >> 0 & 0xff;
      s.color = color;
      var c_str="#" + convert(r) + convert(g) + convert(b);
      s.context.fillStyle = c_str;
      s.context.strokeStyle = c_str;
      return 0}
    function caml_gr_moveto(x,y)
     {var s=caml_gr_state_get();s.x = x;s.y = y;return 0}
    function caml_gr_resize_window(w,h)
     {var s=caml_gr_state_get();
      s.width = w;
      s.height = h;
      s.canvas.width = w;
      s.canvas.height = h;
      return 0}
    function caml_gr_state_init()
     {caml_gr_moveto(caml_gr_state.x,caml_gr_state.y);
      caml_gr_resize_window(caml_gr_state.width,caml_gr_state.height);
      caml_gr_set_line_width(caml_gr_state.line_width);
      caml_gr_set_text_size(caml_gr_state.text_size);
      caml_gr_set_font(caml_gr_state.font);
      caml_gr_set_color(caml_gr_state.color);
      caml_gr_set_window_title(caml_gr_state.title);
      caml_gr_state.context.textBaseline = "bottom"}
    function caml_ba_kind_of_typed_array(ta)
     {var g=joo_global_object,kind;
      if(ta instanceof g.Float32Array)
       kind = 0;
      else
       if(ta instanceof g.Float64Array)
        kind = 1;
       else
        if(ta instanceof g.Int8Array)
         kind = 2;
        else
         if(ta instanceof g.Uint8Array)
          kind = 3;
         else
          if(ta instanceof g.Int16Array)
           kind = 4;
          else
           if(ta instanceof g.Uint16Array)
            kind = 5;
           else
            if(ta instanceof g.Int32Array)
             kind = 6;
            else
             if(ta instanceof g.Uint32Array)
              kind = 6;
             else
              caml_invalid_argument
               ("caml_ba_kind_of_typed_array: unsupported kind");
      return kind}
    function caml_ba_from_typed_array(ta)
     {var kind=caml_ba_kind_of_typed_array(ta);
      return caml_ba_create_unsafe(kind,0,[ta.length],ta)}
    function caml_ml_seek_out(chanid,pos)
     {caml_ml_flush(chanid);caml_ml_channels[chanid].offset = pos;return 0}
    function caml_js_typeof(o){return typeof o}
    function caml_restore_raw_backtrace(exn,bt){return 0}
    function caml_gr_lineto(x,y)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(s.x,s.height - s.y);
      s.context.lineTo(x,s.height - y);
      s.context.stroke();
      s.x = x;
      s.y = y;
      return 0}
    function caml_js_wrap_meth_callback_unsafe(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return f.apply(null,args)}}
    function caml_ba_dim_3(ba){return caml_ba_dim(ba,2)}
    var caml_ephe_data_offset=2;
    function caml_ephe_check_data(x)
     {return x[caml_ephe_data_offset] === undefined?0:1}
    function caml_bytes_get16(s,i)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b1=caml_bytes_unsafe_get(s,i),b2=caml_bytes_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_obj_make_forward(b,v){b[0] = 250;b[1] = v;return 0}
    function caml_js_from_bool(x){return ! ! x}
    function caml_ml_set_channel_name(){return 0}
    function caml_gr_close_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = 0;
      s.canvas.height = 0;
      return 0}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    function caml_md5_chan(chanid,len)
     {var chan=caml_ml_channels[chanid],chan_len=chan.file.length();
      if(len < 0)len = chan_len - chan.offset;
      if(chan.offset + len > chan_len)caml_raise_end_of_file();
      var buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      return caml_md5_string(caml_string_of_bytes(buf),0,len)}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_weak_get_copy(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_copy");
      var y=caml_weak_get(x,i);
      if(y === 0)return y;
      var z=y[1];
      if(z instanceof Array)return [0,caml_obj_dup(z)];
      return y}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ephe_get_data(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,x[caml_ephe_data_offset]]}
    function caml_xmlhttprequest_create(unit)
     {var g=joo_global_object;
      if(typeof g.XMLHttpRequest !== "undefined")
       try {return new (g.XMLHttpRequest)()}catch(e){}
      if(typeof g.activeXObject !== "undefined")
       {try {return new (g.activeXObject)("Msxml2.XMLHTTP")}catch(e){}
        try {return new (g.activeXObject)("Msxml3.XMLHTTP")}catch(e){}
        try {return new (g.activeXObject)("Microsoft.XMLHTTP")}catch(e){}}
      caml_failwith("Cannot create a XMLHttpRequest")}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_array_append(a1,a2)
     {var l1=a1.length,l2=a2.length,l=l1 + l2 - 1,a=new Array(l);
      a[0] = 0;
      var i=1,j=1;
      for(;i < l1;i++)a[i] = a1[i];
      for(;i < l;i++,j++)a[i] = a2[j];
      return a}
    function caml_ml_set_channel_refill(chanid,f)
     {caml_ml_channels[chanid].refill = f;return 0}
    function caml_js_expr(s)
     {js_print_stderr("caml_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function caml_int64_mul(x,y){return x.mul(y)}
    function caml_ml_runtime_warnings_enabled(_unit)
     {return caml_runtime_warnings}
    function caml_output_value_to_bytes(v,flags)
     {return caml_bytes_of_array(caml_output_val(v,flags))}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(caml_is_ml_bytes(obj))
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(caml_is_ml_string(obj))
           {var jsbytes=caml_jsbytes_of_string(obj);
            for(var b=jsbytes,l=jsbytes.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0}
          else
           if(typeof obj === "string")
            for(var b=obj,l=obj.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
           else
            if(obj === (obj | 0))
             {count--;hash_accu = hash_accu * 65599 + obj | 0}
            else
             if(obj === + obj)
              {count--;
               var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
               for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
             else
              if(obj && obj.caml_custom)
               if
                (caml_custom_ops[obj.caml_custom]
                 &&
                 caml_custom_ops[obj.caml_custom].hash)
                {var h=caml_custom_ops[obj.caml_custom].hash(obj) | 0;
                 hash_accu = hash_accu * 65599 + h | 0}}
      hash_aux(obj);
      return hash_accu & 0x3FFFFFFF}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_output_value_to_buffer(s,ofs,len,v,flags)
     {var t=caml_output_val(v,flags);
      if(t.length > len)caml_failwith("Marshal.to_buffer: buffer overflow");
      caml_blit_bytes(t,0,s,ofs,t.length);
      return 0}
    function re_replacement_text(repl,groups,orig)
     {var
       repl=caml_jsbytes_of_string(repl),
       len=repl.length,
       orig=caml_jsbytes_of_string(orig),
       res="",
       n=0,
       cur,
       start,
       end,
       c;
      while(n < len)
       {cur = repl.charAt(n++);
        if(cur != "\\")
         res += cur;
        else
         {if(n == len)
           caml_failwith("Str.replace: illegal backslash sequence");
          cur = repl.charAt(n++);
          switch(cur)
           {case "\\":res += cur;break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
             c = + cur;
             if(c * 2 >= groups.length - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             start = caml_array_get(groups,c * 2);
             end = caml_array_get(groups,c * 2 + 1);
             if(start == - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             res += orig.slice(start,end);
             break;
            default:res += "\\" + cur}}}
      return caml_string_of_jsbytes(res)}
    function caml_pure_js_expr(s)
     {js_print_stderr("caml_pure_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function blit_nat(nat1,ofs1,nat2,ofs2,len)
     {for(var i=0;i < len;i++)nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
      return 0}
    function caml_int64_ult(x,y){return x.ucompare(y) < 0}
    function caml_int64_xor(x,y){return x.xor(y)}
    function caml_bigstring_blit_ba_to_bytes(ba1,pos1,bytes2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(pos2 + len > caml_ml_bytes_length(bytes2))caml_array_bound_error();
      var slice=ba1.data.slice(ofs1,ofs1 + len);
      caml_blit_bytes(caml_bytes_of_array(slice),0,bytes2,pos2,len);
      return 0}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_to_js_string(s){return caml_jsstring_of_string(s)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=
        new MlInt64(0xffffff,0xfffffff,0xffff).udivmod(base64).quotient,
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(base == 10 && caml_int64_ult(new MlInt64(0,0,0x8000),res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function re_search_forward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_forward");
      while(pos <= caml_ml_string_length(s))
       {var res=re_match(re,s,pos,0);if(res)return res;pos++}
      return [0]}
    var caml_blit_string_to_bigstring=caml_bigstring_blit_string_to_ba;
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_seek_in(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = pos;
      return 0}
    function caml_sys_read_directory(name)
     {var
       root=resolve_fs_device(name),
       a=root.device.readdir(root.rest),
       l=new Array(a.length + 1);
      l[0] = 0;
      for(var i=0;i < a.length;i++)l[i + 1] = caml_string_of_jsbytes(a[i]);
      return l}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_sys_const_ostype_win32(){return 0}
    function caml_obj_is_block(x){return + (x instanceof Array)}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      if(chan.offset >= chan.file.length())caml_raise_end_of_file();
      var res=chan.file.read_one(chan.offset);
      chan.offset++;
      return res}
    function caml_obj_set_raw_field(o,i,v){return o[i + 1] = v}
    function caml_js_var(x)
     {var x=caml_jsstring_of_string(x);
      if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
       js_print_stderr
        ('caml_js_var: "'
         +
         x
         +
         '" is not a valid JavaScript variable. continuing ..');
      return eval(x)}
    function caml_trunc_float(x){return Math.trunc(x)}
    function caml_ephe_blit_data(src,dst)
     {dst[caml_ephe_data_offset] = src[caml_ephe_data_offset];return 0}
    function caml_is_printable(c){return + (c > 31 && c < 127)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function re_partial_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.partial_match");
      var res=re_match(re,s,pos,1);
      return res?res:[0]}
    function caml_sys_random_seed()
     {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_final_register_called_without_value(){return 0}
    function caml_ba_get_2(ba,i0,i1){return ba.get(ba.offset([i0,i1]))}
    function win_handle_fd(x){return x}
    function caml_ba_uint8_set16(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      return 0}
    function caml_js_delete(o,f){delete o[f];return 0}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_list_mount_point()
     {var prev=0;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var old=prev;
        prev = [0,caml_string_of_jsbytes(jsoo_mount_point[i].path),old]}
      return prev}
    var
     caml_marshal_constants=
      {PREFIX_SMALL_BLOCK:0x80,
       PREFIX_SMALL_INT:0x40,
       PREFIX_SMALL_STRING:0x20,
       CODE_INT8:0x00,
       CODE_INT16:0x01,
       CODE_INT32:0x02,
       CODE_INT64:0x03,
       CODE_SHARED8:0x04,
       CODE_SHARED16:0x05,
       CODE_SHARED32:0x06,
       CODE_BLOCK32:0x08,
       CODE_BLOCK64:0x13,
       CODE_STRING8:0x09,
       CODE_STRING32:0x0A,
       CODE_DOUBLE_BIG:0x0B,
       CODE_DOUBLE_LITTLE:0x0C,
       CODE_DOUBLE_ARRAY8_BIG:0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE:0x0E,
       CODE_DOUBLE_ARRAY32_BIG:0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE:0x07,
       CODE_CODEPOINTER:0x10,
       CODE_INFIXPOINTER:0x11,
       CODE_CUSTOM:0x12,
       CODE_CUSTOM_LEN:0x18,
       CODE_CUSTOM_FIXED:0x19};
    function caml_obj_raw_field(o,i){return o[i + 1]}
    function caml_js_equals(x,y){return + (x == y)}
    function bigstring_to_typed_array(bs){return bs.data}
    function caml_gr_arc_aux(ctx,cx,cy,ry,rx,a1,a2)
     {while(a1 > a2)a2 += 360;
      a1 /= 180;
      a2 /= 180;
      var
       rot=0,
       xPos,
       yPos,
       xPos_prev,
       yPos_prev,
       space=2,
       num=(a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
       delta=(a2 - a1) * Math.PI / num,
       i=a1 * Math.PI;
      for(var j=0;j <= num;j++)
       {xPos
        =
        cx
        -
        rx
        *
        Math.sin(i)
        *
        Math.sin(rot * Math.PI)
        +
        ry
        *
        Math.cos(i)
        *
        Math.cos(rot * Math.PI);
        xPos = xPos.toFixed(2);
        yPos
        =
        cy
        +
        ry
        *
        Math.cos(i)
        *
        Math.sin(rot * Math.PI)
        +
        rx
        *
        Math.sin(i)
        *
        Math.cos(rot * Math.PI);
        yPos = yPos.toFixed(2);
        if(j == 0)
         ctx.moveTo(xPos,yPos);
        else
         if(xPos_prev != xPos || yPos_prev != yPos)ctx.lineTo(xPos,yPos);
        xPos_prev = xPos;
        yPos_prev = yPos;
        i -= delta}
      return 0}
    function caml_gr_fill_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.fill();
      return 0}
    function caml_ba_slice(ba,vind)
     {vind = caml_js_from_array(vind);
      var num_inds=vind.length,index=[],sub_dims=[],ofs;
      if(num_inds > ba.dims.length)
       caml_invalid_argument("Bigarray.slice: too many indices");
      if(ba.layout == 0)
       {for(var i=0;i < num_inds;i++)index[i] = vind[i];
        for(;i < ba.dims.length;i++)index[i] = 0;
        sub_dims = ba.dims.slice(num_inds)}
      else
       {for(var i=0;i < num_inds;i++)
         index[ba.dims.length - num_inds + i] = vind[i];
        for(var i=0;i < ba.dims.length - num_inds;i++)index[i] = 1;
        sub_dims = ba.dims.slice(0,ba.dims.length - num_inds)}
      ofs = ba.offset(index);
      var
       size=caml_ba_get_size(sub_dims),
       size_per_element=caml_ba_get_size_per_element(ba.kind),
       new_data=
        ba.data.subarray
         (ofs * size_per_element,(ofs + size) * size_per_element);
      return caml_ba_create_unsafe(ba.kind,ba.layout,sub_dims,new_data)}
    function caml_marshal_data_size(s,ofs)
     {function get32(s,i)
       {return caml_bytes_unsafe_get(s,i)
               <<
               24
               |
               caml_bytes_unsafe_get(s,i + 1)
               <<
               16
               |
               caml_bytes_unsafe_get(s,i + 2)
               <<
               8
               |
               caml_bytes_unsafe_get(s,i + 3)}
      if(get32(s,ofs) != (0x8495A6BE | 0))
       caml_failwith("Marshal.data_size: bad object");
      return get32(s,ofs + 4)}
    function caml_input_value(chanid)
     {var chan=caml_ml_channels[chanid],buf=caml_create_bytes(8);
      chan.file.read(chan.offset,buf,0,8);
      var len=caml_marshal_data_size(buf,0) + 20,buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      var offset=[0],res=caml_input_value_from_bytes(buf,offset);
      chan.offset = chan.offset + offset[0];
      return res}
    function caml_ba_kind(ba){return ba.kind}
    function caml_js_fun_call(f,a)
     {switch(a.length)
       {case 1:return f();
        case 2:return f(a[1]);
        case 3:return f(a[1],a[2]);
        case 4:return f(a[1],a[2],a[3]);
        case 5:return f(a[1],a[2],a[3],a[4]);
        case 6:return f(a[1],a[2],a[3],a[4],a[5]);
        case 7:return f(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return f(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      return f.apply(null,caml_js_from_array(a))}
    function caml_js_pure_expr(f){return f()}
    function compare_digits_nat(nat1,ofs1,nat2,ofs2)
     {if(nat1.data[ofs1] > nat2.data[ofs2])return 1;
      if(nat1.data[ofs1] < nat2.data[ofs2])return - 1;
      return 0}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_gr_wait_event(_evl)
     {caml_failwith
       ("caml_gr_wait_event not Implemented: use Graphics_js instead")}
    function caml_gr_sigio_handler(){return 0}
    function caml_hash_mix_bigstring(h,bs)
     {return caml_hash_mix_bytes_arr(h,bs.data)}
    function caml_record_backtrace(){return 0}
    function unix_gmtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(Date.UTC(d.getUTCFullYear(),0,1)).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000);
      return [0,
              d.getUTCSeconds(),
              d.getUTCMinutes(),
              d.getUTCHours(),
              d.getUTCDate(),
              d.getUTCMonth(),
              d.getUTCFullYear() - 1900,
              d.getUTCDay(),
              doy,
              false | 0]}
    function caml_sys_get_config()
     {return [0,caml_string_of_jsbytes("Unix"),32,0]}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function bigstring_of_array_buffer(ab)
     {var ta=new (joo_global_object.Uint8Array)(ab);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_ba_init(){return 0}
    function re_string_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.string_match");
      var res=re_match(re,s,pos,0);
      return res?res:[0]}
    function BigStringReader(bs,i){this.s = bs;this.i = i}
    BigStringReader.prototype
    =
    {read8u:function(){return caml_ba_get_1(this.s,this.i++)},
     read8s:function(){return caml_ba_get_1(this.s,this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 8 | caml_ba_get_1(s,i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 24 >> 16 | caml_ba_get_1(s,i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (caml_ba_get_1(s,i)
               <<
               24
               |
               caml_ba_get_1(s,i + 1)
               <<
               16
               |
               caml_ba_get_1(s,i + 2)
               <<
               8
               |
               caml_ba_get_1(s,i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return caml_ba_get_1(s,i)
              <<
              24
              |
              caml_ba_get_1(s,i + 1)
              <<
              16
              |
              caml_ba_get_1(s,i + 2)
              <<
              8
              |
              caml_ba_get_1(s,i + 3)},
     readstr:
     function(len)
      {var i=this.i,arr=new Array(len);
       for(var j=0;j < len;j++)arr[j] = caml_ba_get_1(this.s,i + j);
       this.i = i + len;
       return caml_string_of_array(arr)}};
    function caml_gr_dump_image(im)
     {var data=[0];
      for(var i=0;i < im.height;i++)
       {data[i + 1] = [0];
        for(var j=0;j < im.width;j++)
         {var
           o=i * (im.width * 4) + j * 4,
           r=im.data[o + 0],
           g=im.data[o + 1],
           b=im.data[o + 2];
          data[i + 1][j + 1] = (r << 16) + (g << 8) + b}}
      return data}
    function caml_ba_get_generic(ba,i)
     {var ofs=ba.offset(caml_js_from_array(i));return ba.get(ofs)}
    function caml_get_exception_backtrace(){return 0}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_mount_autoload(name,f)
     {var path=caml_make_path(name),name=path.join("/") + "/";
      jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)});
      return 0}
    function caml_bigstring_blit_ba_to_ba(ba1,pos1,ba2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(12 != ba2.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1),ofs2=ba2.offset(pos2);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=ba1.data.subarray(ofs1,ofs1 + len);
      ba2.data.set(slice,pos2);
      return 0}
    var caml_blit_bigstring_to_bigstring=caml_bigstring_blit_ba_to_ba;
    function caml_string_lessthan(s1,s2){return caml_bytes_lessthan(s1,s2)}
    function caml_string_greaterthan(s1,s2)
     {return caml_string_lessthan(s2,s1)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_ephe_get_data_copy(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,caml_obj_dup(x[caml_ephe_data_offset])]}
    function caml_memprof_start(rate,stack_size,tracker){return 0}
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_js_to_bool(x){return + x}
    function caml_gr_create_image(x,y)
     {var s=caml_gr_state_get();return s.context.createImageData(x,y)}
    var caml_ephe_get_key_copy=caml_weak_get_copy;
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_raw_backtrace_next_slot(){return 0}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3,len3)
     {var carry=0;
      for(var i=0;i < len3;i++)
       carry
       +=
       mult_digit_nat(nat1,ofs1 + i,len1 - i,nat2,ofs2,len2,nat3,ofs3 + i);
      return carry}
    function square_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var carry=0;
      carry += add_nat(nat1,ofs1,len1,nat1,ofs1,len1,0);
      carry += mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat2,ofs2,len2);
      return carry}
    function caml_js_from_float(x){return x}
    function caml_floatarray_create(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_gc_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_sys_modify_argv(arg){caml_argv = arg;return 0}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === undefined)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name)}
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function bigstring_of_typed_array(ba)
     {var
       ta=
        new
         (joo_global_object.Uint8Array)
         (ba.buffer,ba.byteOffset,ba.length * ba.BYTES_PER_ELEMENT);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_round_float(x){return Math.round(x)}
    function caml_ojs_new_arr(c,a)
     {switch(a.length)
       {case 0:return new c();
        case 1:return new c(a[0]);
        case 2:return new c(a[0],a[1]);
        case 3:return new c(a[0],a[1],a[2]);
        case 4:return new c(a[0],a[1],a[2],a[3]);
        case 5:return new c(a[0],a[1],a[2],a[3],a[4]);
        case 6:return new c(a[0],a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[0],a[1],a[2],a[3],a[4],a[5],a[6])
        }
      function F(){return c.apply(this,a)}
      F.prototype = c.prototype;
      return new F()}
    function complement_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)
       nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0)}
    var caml_js_regexps={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
    function caml_js_html_escape(s)
     {if(! caml_js_regexps.all.test(s))return s;
      return s.replace(caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;")}
    function caml_ba_dim_2(ba){return caml_ba_dim(ba,1)}
    function caml_js_wrap_meth_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,[this,args])}}
    function caml_sinh_float(x){return (Math.exp(x) - Math.exp(- x)) / 2}
    function caml_ldexp_float(x,exp)
     {exp |= 0;
      if(exp > 1023)
       {exp -= 1023;
        x *= Math.pow(2,1023);
        if(exp > 1023){exp -= 1023;x *= Math.pow(2,1023)}}
      if(exp < - 1023){exp += 1023;x *= Math.pow(2,- 1023)}
      x *= Math.pow(2,exp);
      return x}
    function caml_gr_state_set(ctx)
     {caml_gr_state = ctx;caml_gr_state_init();return 0}
    function caml_js_wrap_callback_strict(arity,f)
     {return function()
       {var n=arguments.length;
        if(n == arity && f.length == arity)return f.apply(null,arguments);
        var args=new Array(arity),len=Math.min(arguments.length,arity);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
    function caml_get_current_callstack(){return [0]}
    function land_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] &= nat2.data[ofs2];return 0}
    function caml_int64_mod(x,y){return x.mod(y)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_create_file_extern(name,content)
     {if(joo_global_object.caml_create_file)
       joo_global_object.caml_create_file(name,content);
      else
       {if(! joo_global_object.caml_fs_tmp)joo_global_object.caml_fs_tmp = [];
        joo_global_object.caml_fs_tmp.push({name:name,content:content})}
      return 0}
    function caml_int32_bswap(x)
     {return (x & 0x000000FF)
             <<
             24
             |
             (x & 0x0000FF00)
             <<
             8
             |
             (x & 0x00FF0000)
             >>>
             8
             |
             (x & 0xFF000000)
             >>>
             24}
    function win_startup(){}
    function caml_ba_set_3(ba,i0,i1,i2,v)
     {ba.set(ba.offset([i0,i1,i2]),v);return 0}
    function caml_js_instanceof(o,c){return o instanceof c}
    var caml_blit_bigstring_to_string=caml_bigstring_blit_ba_to_bytes;
    function nth_digit_nat_native(nat,ofs){return nat.data[ofs]}
    function set_digit_nat_native(nat,ofs,digit)
     {nat.data[ofs] = digit;return 0}
    function caml_string_set64(s,i,i64){return caml_bytes_set64(s,i,i64)}
    function caml_gr_state_create(canvas,w,h)
     {var context=canvas.getContext("2d");
      return {context:context,
              canvas:canvas,
              x:0,
              y:0,
              width:w,
              height:h,
              line_width:1,
              font:caml_string_of_jsbytes("fixed"),
              text_size:26,
              color:0x000000,
              title:caml_string_of_jsbytes("")}}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i];
          return caml_call_gen(f,args)}
        else
         return caml_call_gen(f,[undefined])}}
    function caml_gr_draw_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.stroke();
      return 0}
    function caml_ba_map_file(vfd,kind,layout,shared,dims,pos)
     {caml_failwith("caml_ba_map_file not implemented")}
    function caml_ba_map_file_bytecode(argv,argn)
     {return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5])}
    function caml_ba_create_from(data1,data2,jstyp,kind,layout,dims)
     {if(data2 || caml_ba_get_size_per_element(kind) == 2)
       caml_invalid_argument
        ("caml_ba_create_from: use return caml_ba_create_unsafe");
      return caml_ba_create_unsafe(kind,layout,dims,data1)}
    function caml_tanh_float(x)
     {var y=Math.exp(x),z=Math.exp(- x);return (y - z) / (y + z)}
    function caml_gr_draw_str(str)
     {var s=caml_gr_state_get(),m=s.context.measureText(str),dx=m.width;
      s.context.fillText(str,s.x,s.height - s.y);
      s.x += dx | 0;
      return 0}
    function caml_gr_draw_string(str)
     {caml_gr_draw_str(caml_jsstring_of_string(str));return 0}
    function caml_gr_draw_char(c)
     {caml_gr_draw_str(String.fromCharCode(c));return 0}
    function caml_unmount(name)
     {var path=caml_make_path(name),name=path.join("/") + "/",idx=- 1;
      for(var i=0;i < jsoo_mount_point.length;i++)
       if(jsoo_mount_point[i].path == name)idx = i;
      if(idx > - 1)jsoo_mount_point.splice(idx,1);
      return 0}
    function caml_input_value_from_string(s,ofs)
     {var reader=new MlStringReader(s,typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_ml_pos_in_64(chanid)
     {return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_gr_draw_image(im,x,y)
     {var s=caml_gr_state_get();
      if(! im.image)
       {var canvas=document.createElement("canvas");
        canvas.width = s.width;
        canvas.height = s.height;
        canvas.getContext("2d").putImageData(im,0,0);
        var image=new (joo_global_object.Image)();
        image.onload
        =
        function()
         {s.context.drawImage(image,x,s.height - im.height - y);
          im.image = image};
        image.src = canvas.toDataURL("image/png")}
      else
       s.context.drawImage(im.image,x,s.height - im.height - y);
      return 0}
    function caml_register_channel_for_spacetime(_channel){return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    function caml_ml_pos_out(chanid)
     {caml_ml_flush(chanid);return caml_ml_channels[chanid].offset}
    function caml_spacetime_enabled(_unit){return 0}
    function caml_bytes_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("")}
    function caml_js_object(a)
     {var o={};
      for(var i=1;i < a.length;i++)
       {var p=a[i];o[caml_jsstring_of_string(p[1])] = p[2]}
      return o}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_weak_blit(a1,i1,a2,i2,len)
     {caml_array_blit
       (a1,caml_ephe_key_offset + i1 - 1,a2,caml_ephe_key_offset + i2 - 1,len);
      return 0}
    function caml_gr_remember_mode()
     {caml_failwith("caml_gr_remember_mode not Implemented")}
    function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8}
    function caml_ml_set_binary_mode(chanid,mode)
     {var chan=caml_ml_channels[chanid],data=caml_global_data.fds[chan.fd];
      data.flags.text = ! mode;
      data.flags.binary = mode;
      return 0}
    function caml_final_register(){return 0}
    function caml_gr_draw_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.strokeRect(x,s.height - y,w,- h);
      return 0}
    function caml_string_get16(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 1)caml_string_bound_error();
      var b1=caml_string_unsafe_get(s,i),b2=caml_string_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_ephe_unset_data(x,data)
     {x[caml_ephe_data_offset] = undefined;return 0}
    function caml_output_value(chanid,v,flags)
     {var s=caml_output_value_to_string(v,flags);
      caml_ml_output(chanid,s,0,caml_ml_string_length(s));
      return 0}
    function caml_ba_get_3(ba,i0,i1,i2){return ba.get(ba.offset([i0,i1,i2]))}
    var
     caml_ephe_blit_key=caml_weak_blit,
     caml_initial_time=new Date().getTime() * 0.001;
    function caml_sys_time()
     {var now=new Date().getTime();return now * 0.001 - caml_initial_time}
    function caml_sys_time_include_children(b){return caml_sys_time()}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_ba_to_typed_array(ba){return ba.data}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_bytes_get32(s,i)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b1=caml_bytes_unsafe_get(s,i),
       b2=caml_bytes_unsafe_get(s,i + 1),
       b3=caml_bytes_unsafe_get(s,i + 2),
       b4=caml_bytes_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_frexp_float(x)
     {if(x == 0 || ! isFinite(x))return [0,x,0];
      var neg=x < 0;
      if(neg)x = - x;
      var exp=Math.max(- 1023,jsoo_floor_log2(x) + 1);
      x *= Math.pow(2,- exp);
      while(x < 0.5){x *= 2;exp--}
      while(x >= 1){x *= 0.5;exp++}
      if(neg)x = - x;
      return [0,x,exp]}
    function caml_string_get64(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 7)caml_string_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_string_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_ml_pos_out_64(chanid)
     {caml_ml_flush(chanid);
      return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_gr_close_subwindow(a)
     {caml_failwith("caml_gr_close_subwindow not Implemented")}
    function caml_floatarray_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_set_static_env(k,v)
     {if(! joo_global_object.jsoo_static_env)
       joo_global_object.jsoo_static_env = {};
      joo_global_object.jsoo_static_env[k] = v;
      return 0}
    function caml_ba_change_layout(ba,layout)
     {if(ba.layout == layout)return ba;
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)
       new_dims[i] = ba.dims[ba.dims.length - i - 1];
      return caml_ba_create_unsafe(ba.kind,layout,new_dims,ba.data)}
    function caml_js_new(c,a)
     {switch(a.length)
       {case 1:return new c();
        case 2:return new c(a[1]);
        case 3:return new c(a[1],a[2]);
        case 4:return new c(a[1],a[2],a[3]);
        case 5:return new c(a[1],a[2],a[3],a[4]);
        case 6:return new c(a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return new c(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      function F(){return c.apply(this,caml_js_from_array(a))}
      F.prototype = c.prototype;
      return new F()}
    function caml_gr_current_y(){var s=caml_gr_state_get();return s.y}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    function caml_obj_truncate(x,s)
     {if(s <= 0 || s + 1 > x.length)caml_invalid_argument("Obj.truncate");
      if(x.length != s + 1)x.length = s + 1;
      return 0}
    function caml_js_to_string(s){return caml_string_of_jsstring(s)}
    function is_digit_odd(nat,ofs){if(nat.data[ofs] & 1)return 1;return 0}
    function caml_runtime_variant(_unit){return caml_string_of_jsbytes("")}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_array_concat(l)
     {var a=[0];
      while(l !== 0)
       {var b=l[1];for(var i=1;i < b.length;i++)a.push(b[i]);l = l[2]}
      return a}
    function caml_gr_open_graph(info)
     {var g=joo_global_object,info=caml_jsstring_of_string(info);
      function get(name)
       {var res=info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
        if(res)return res[2]}
      var specs=[];
      if(! (info == ""))specs.push(info);
      var target=get("target");
      if(! target)target = "";
      var status=get("status");
      if(! status)specs.push("status=1");
      var w=get("width");
      w = w?parseInt(w):200;
      specs.push("width=" + w);
      var h=get("height");
      h = h?parseInt(h):200;
      specs.push("height=" + h);
      var win=g.open("about:blank",target,specs.join(","));
      if(! win)caml_failwith("Graphics.open_graph: cannot open the window");
      var doc=win.document,canvas=doc.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var ctx=caml_gr_state_create(canvas,w,h);
      ctx.set_title = function(title){doc.title = title};
      caml_gr_state_set(ctx);
      var body=doc.body;
      body.style.margin = "0px";
      body.appendChild(canvas);
      return 0}
    function caml_ephe_set_data(x,data)
     {x[caml_ephe_data_offset] = data;return 0}
    function caml_make_float_vect(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_memprof_stop(unit){return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_log1p_float(x)
     {var y=1 + x,z=y - 1;return z == 0?x:x * Math.log(y) / z}
    function caml_int64_or(x,y){return x.or(y)}
    function caml_lazy_make_forward(v){return [250,v]}
    function lor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] |= nat2.data[ofs2];return 0}
    function caml_gr_blit_image(im,x,y)
     {var
       s=caml_gr_state_get(),
       im2=
        s.context.getImageData(x,s.height - im.height - y,im.width,im.height);
      for(var i=0;i < im2.data.length;i += 4)
       {im.data[i] = im2.data[i];
        im.data[i + 1] = im2.data[i + 1];
        im.data[i + 2] = im2.data[i + 2];
        im.data[i + 3] = im2.data[i + 3]}
      return 0}
    function caml_gr_window_id(a)
     {caml_failwith("caml_gr_window_id not Implemented")}
    function caml_js_on_ie()
     {var
       ua=
        joo_global_object.navigator?joo_global_object.navigator.userAgent:"";
      return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0}
    function caml_int64_shift_right(x,s){return x.shift_right(s)}
    function caml_ba_layout(ba){return ba.layout}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_array_set(array,index,newval)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      array[index + 1] = newval;
      return 0}
    function caml_bytes_greaterequal(s1,s2)
     {return caml_bytes_lessequal(s2,s1)}
    function set_digit_nat(nat,ofs,digit){nat.data[ofs] = digit;return 0}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_CamlinternalMod_update_mod(shape,real,x)
     {if(typeof shape === "number")
       switch(shape){case 0:case 1:case 2:default:caml_update_dummy(real,x)}
      else
       switch(shape[0])
        {case 0:
          for(var i=1;i < shape[1].length;i++)
           caml_CamlinternalMod_update_mod(shape[1][i],real[i],x[i]);
          break
         }
      return 0}
    function caml_gr_doc_of_state(state)
     {if(state.canvas.ownerDocument)return state.canvas.ownerDocument}
    function caml_ml_output_int(chanid,i)
     {var
       arr=[i >> 24 & 0xFF,i >> 16 & 0xFF,i >> 8 & 0xFF,i & 0xFF],
       s=caml_string_of_array(arr);
      caml_ml_output(chanid,s,0,4);
      return 0}
    function caml_obj_with_tag(tag,x)
     {var l=x.length,a=new Array(l);
      a[0] = tag;
      for(var i=1;i < l;i++)a[i] = x[i];
      return a}
    function caml_ml_channel_size(chanid)
     {var chan=caml_ml_channels[chanid];return chan.file.length()}
    function caml_raw_backtrace_slot()
     {caml_invalid_argument
       ("Printexc.get_raw_backtrace_slot: index out of bounds")}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_js_wrap_meth_callback_strict(arity,f)
     {return function()
       {var args=new Array(arity + 1),len=Math.min(arguments.length,arity);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_backtrace_status(){return 0}
    function caml_install_signal_handler(){return 0}
    function caml_sys_argv(a){return caml_argv}
    function caml_ba_fill(ba,v){ba.fill(v);return 0}
    function caml_modf_float(x)
     {if(isFinite(x))
       {var neg=1 / x < 0;
        x = Math.abs(x);
        var i=Math.floor(x),f=x - i;
        if(neg){i = - i;f = - f}
        return [0,f,i]}
      if(isNaN(x))return [0,NaN,NaN];
      return [0,1 / x,x]}
    function caml_gc_get(){return [0,0,0,0,0,0,0,0,0]}
    function caml_float_compare(x,y)
     {if(x === y)return 0;
      if(x < y)return - 1;
      if(x > y)return 1;
      if(x === x)return 1;
      if(y === y)return - 1;
      return 0}
    function caml_string_set32(s,i,i32){return caml_bytes_set32(s,i,i32)}
    function caml_parse_engine(tables,env,cmd,arg)
     {var
       ERRCODE=256,
       loop=6,
       testshift=7,
       shift=8,
       shift_recover=9,
       reduce=10,
       READ_TOKEN=0,
       RAISE_PARSE_ERROR=1,
       GROW_STACKS_1=2,
       GROW_STACKS_2=3,
       COMPUTE_SEMANTIC_ACTION=4,
       CALL_ERROR_FUNCTION=5,
       env_s_stack=1,
       env_v_stack=2,
       env_symb_start_stack=3,
       env_symb_end_stack=4,
       env_stacksize=5,
       env_stackbase=6,
       env_curr_char=7,
       env_lval=8,
       env_symb_start=9,
       env_symb_end=10,
       env_asp=11,
       env_rule_len=12,
       env_rule_number=13,
       env_sp=14,
       env_state=15,
       env_errflag=16,
       tbl_transl_const=2,
       tbl_transl_block=3,
       tbl_lhs=4,
       tbl_len=5,
       tbl_defred=6,
       tbl_dgoto=7,
       tbl_sindex=8,
       tbl_rindex=9,
       tbl_gindex=10,
       tbl_tablesize=11,
       tbl_table=12,
       tbl_check=13;
      if(! tables.dgoto)
       {tables.defred = caml_lex_array(tables[tbl_defred]);
        tables.sindex = caml_lex_array(tables[tbl_sindex]);
        tables.check = caml_lex_array(tables[tbl_check]);
        tables.rindex = caml_lex_array(tables[tbl_rindex]);
        tables.table = caml_lex_array(tables[tbl_table]);
        tables.len = caml_lex_array(tables[tbl_len]);
        tables.lhs = caml_lex_array(tables[tbl_lhs]);
        tables.gindex = caml_lex_array(tables[tbl_gindex]);
        tables.dgoto = caml_lex_array(tables[tbl_dgoto])}
      var
       res=0,
       n,
       n1,
       n2,
       state1,
       sp=env[env_sp],
       state=env[env_state],
       errflag=env[env_errflag];
      exit:
      for(;;)
       switch(cmd)
        {case 0:state = 0;errflag = 0;
         case 6:
          n = tables.defred[state];
          if(n != 0){cmd = reduce;break}
          if(env[env_curr_char] >= 0){cmd = testshift;break}
          res = READ_TOKEN;
          break exit;
         case 1:
          if(arg instanceof Array)
           {env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
            env[env_lval] = arg[1]}
          else
           {env[env_curr_char] = tables[tbl_transl_const][arg + 1];
            env[env_lval] = 0}
         case 7:
          n1 = tables.sindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {cmd = shift;break}
          n1 = tables.rindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {n = tables.table[n2];cmd = reduce;break}
          if(errflag <= 0){res = CALL_ERROR_FUNCTION;break exit}
         case 5:
          if(errflag < 3)
           {errflag = 3;
            for(;;)
             {state1 = env[env_s_stack][sp + 1];
              n1 = tables.sindex[state1];
              n2 = n1 + ERRCODE;
              if
               (n1
                !=
                0
                &&
                n2
                >=
                0
                &&
                n2
                <=
                tables[tbl_tablesize]
                &&
                tables.check[n2]
                ==
                ERRCODE)
               {cmd = shift_recover;break}
              else
               {if(sp <= env[env_stackbase])return RAISE_PARSE_ERROR;sp--}}}
          else
           {if(env[env_curr_char] == 0)return RAISE_PARSE_ERROR;
            env[env_curr_char] = - 1;
            cmd = loop;
            break}
         case 8:env[env_curr_char] = - 1;if(errflag > 0)errflag--;
         case 9:
          state = tables.table[n2];
          sp++;
          if(sp >= env[env_stacksize]){res = GROW_STACKS_1;break exit}
         case 2:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = env[env_lval];
          env[env_symb_start_stack][sp + 1] = env[env_symb_start];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end];
          cmd = loop;
          break;
         case 10:
          var m=tables.len[n];
          env[env_asp] = sp;
          env[env_rule_number] = n;
          env[env_rule_len] = m;
          sp = sp - m + 1;
          m = tables.lhs[n];
          state1 = env[env_s_stack][sp];
          n1 = tables.gindex[m];
          n2 = n1 + state1;
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            state1)
           state = tables.table[n2];
          else
           state = tables.dgoto[m];
          if(sp >= env[env_stacksize]){res = GROW_STACKS_2;break exit}
         case 3:res = COMPUTE_SEMANTIC_ACTION;break exit;
         case 4:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = arg;
          var asp=env[env_asp];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
          if(sp > asp)
           env[env_symb_start_stack][sp + 1]
           =
           env[env_symb_end_stack][asp + 1];
          cmd = loop;
          break;
         default:return RAISE_PARSE_ERROR}
      env[env_sp] = sp;
      env[env_state] = state;
      env[env_errflag] = errflag;
      return res}
    function caml_array_fill(array,ofs,len,v)
     {for(var i=0;i < len;i++)array[ofs + i + 1] = v;return 0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_bytes_greaterthan(s1,s2){return caml_bytes_lessthan(s2,s1)}
    function caml_gr_make_image(arr)
     {var
       s=caml_gr_state_get(),
       h=arr.length - 1,
       w=arr[1].length - 1,
       im=s.context.createImageData(w,h);
      for(var i=0;i < h;i++)
       for(var j=0;j < w;j++)
        {var c=arr[i + 1][j + 1],o=i * (w * 4) + j * 4;
         if(c == - 1)
          {im.data[o + 0] = 0;
           im.data[o + 1] = 0;
           im.data[o + 2] = 0;
           im.data[o + 3] = 0}
         else
          {im.data[o + 0] = c >> 16 & 0xff;
           im.data[o + 1] = c >> 8 & 0xff;
           im.data[o + 2] = c >> 0 & 0Xff;
           im.data[o + 3] = 0xff}}
      return im}
    function caml_ml_set_channel_output(chanid,f)
     {var chan=caml_ml_channels[chanid];
      caml_global_data.fds[chan.fd].output = f;
      return 0}
    function caml_read_file_content(name)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       root=resolve_fs_device(name);
      if(root.device.exists(root.rest))
       {var
         file=root.device.open(root.rest,{rdonly:1}),
         len=file.length(),
         buf=caml_create_bytes(len);
        file.read(0,buf,0,len);
        return caml_string_of_bytes(buf)}
      caml_raise_no_such_file(name)}
    function caml_js_to_float(x){return x}
    joo_global_object.jsoo_runtime
    =
    {caml_ephe_check_data:caml_ephe_check_data,
     caml_ephe_unset_data:caml_ephe_unset_data,
     caml_ephe_set_data:caml_ephe_set_data,
     caml_ephe_get_data_copy:caml_ephe_get_data_copy,
     caml_ephe_get_data:caml_ephe_get_data,
     caml_ephe_blit_data:caml_ephe_blit_data,
     caml_ephe_unset_key:caml_ephe_unset_key,
     caml_ephe_set_key:caml_ephe_set_key,
     caml_ephe_check_key:caml_ephe_check_key,
     caml_ephe_get_key_copy:caml_ephe_get_key_copy,
     caml_ephe_get_key:caml_ephe_get_key,
     caml_ephe_blit_key:caml_ephe_blit_key,
     caml_ephe_create:caml_ephe_create,
     caml_weak_blit:caml_weak_blit,
     caml_weak_check:caml_weak_check,
     caml_weak_get_copy:caml_weak_get_copy,
     caml_weak_get:caml_weak_get,
     caml_weak_set:caml_weak_set,
     caml_weak_create:caml_weak_create,
     caml_ephe_data_offset:caml_ephe_data_offset,
     caml_ephe_key_offset:caml_ephe_key_offset,
     unix_isatty:unix_isatty,
     win_handle_fd:win_handle_fd,
     win_cleanup:win_cleanup,
     win_startup:win_startup,
     unix_mktime:unix_mktime,
     unix_localtime:unix_localtime,
     unix_gmtime:unix_gmtime,
     unix_time:unix_time,
     unix_gettimeofday:unix_gettimeofday,
     re_replacement_text:re_replacement_text,
     re_partial_match:re_partial_match,
     re_string_match:re_string_match,
     re_search_backward:re_search_backward,
     re_search_forward:re_search_forward,
     re_match:re_match,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_register_channel_for_spacetime:caml_register_channel_for_spacetime,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_spacetime_enabled:caml_spacetime_enabled,
     caml_ml_runtime_warnings_enabled:caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings:caml_ml_enable_runtime_warnings,
     caml_runtime_warnings:caml_runtime_warnings,
     unix_inet_addr_of_string:unix_inet_addr_of_string,
     caml_install_signal_handler:caml_install_signal_handler,
     caml_runtime_parameters:caml_runtime_parameters,
     caml_runtime_variant:caml_runtime_variant,
     caml_sys_isatty:caml_sys_isatty,
     caml_sys_get_config:caml_sys_get_config,
     caml_sys_const_backend_type:caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin:caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32:caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix:caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize:caml_sys_const_max_wosize,
     caml_sys_const_int_size:caml_sys_const_int_size,
     caml_sys_const_word_size:caml_sys_const_word_size,
     caml_sys_const_big_endian:caml_sys_const_big_endian,
     caml_sys_random_seed:caml_sys_random_seed,
     caml_sys_time_include_children:caml_sys_time_include_children,
     caml_sys_time:caml_sys_time,
     caml_sys_system_command:caml_sys_system_command,
     caml_sys_executable_name:caml_sys_executable_name,
     caml_sys_modify_argv:caml_sys_modify_argv,
     caml_sys_argv:caml_sys_argv,
     caml_sys_get_argv:caml_sys_get_argv,
     caml_executable_name:caml_executable_name,
     caml_argv:caml_argv,
     caml_sys_unsafe_getenv:caml_sys_unsafe_getenv,
     caml_sys_getenv:caml_sys_getenv,
     caml_set_static_env:caml_set_static_env,
     caml_sys_exit:caml_sys_exit,
     caml_raise_sys_error:caml_raise_sys_error,
     caml_is_printable:caml_is_printable,
     caml_get_global_data:caml_get_global_data,
     caml_register_global:caml_register_global,
     caml_global_data:caml_global_data,
     caml_named_value:caml_named_value,
     caml_register_named_value:caml_register_named_value,
     caml_named_values:caml_named_values,
     caml_call_gen:caml_call_gen,
     caml_set_parser_trace:caml_set_parser_trace,
     caml_parse_engine:caml_parse_engine,
     caml_obj_set_raw_field:caml_obj_set_raw_field,
     caml_obj_raw_field:caml_obj_raw_field,
     caml_fresh_oo_id:caml_fresh_oo_id,
     caml_set_oo_id:caml_set_oo_id,
     caml_oo_last_id:caml_oo_last_id,
     caml_get_public_method:caml_get_public_method,
     caml_lazy_make_forward:caml_lazy_make_forward,
     caml_obj_make_forward:caml_obj_make_forward,
     caml_obj_truncate:caml_obj_truncate,
     caml_obj_dup:caml_obj_dup,
     caml_obj_with_tag:caml_obj_with_tag,
     caml_obj_block:caml_obj_block,
     caml_obj_set_tag:caml_obj_set_tag,
     caml_obj_tag:caml_obj_tag,
     caml_obj_is_block:caml_obj_is_block,
     caml_update_dummy:caml_update_dummy,
     deserialize_nat:deserialize_nat,
     serialize_nat:serialize_nat,
     lxor_digit_nat:lxor_digit_nat,
     lor_digit_nat:lor_digit_nat,
     land_digit_nat:land_digit_nat,
     compare_nat_real:compare_nat_real,
     compare_nat:compare_nat,
     compare_digits_nat:compare_digits_nat,
     shift_right_nat:shift_right_nat,
     div_nat:div_nat,
     div_digit_nat:div_digit_nat,
     div_helper:div_helper,
     shift_left_nat:shift_left_nat,
     square_nat:square_nat,
     mult_nat:mult_nat,
     mult_digit_nat:mult_digit_nat,
     sub_nat:sub_nat,
     decr_nat:decr_nat,
     complement_nat:complement_nat,
     add_nat:add_nat,
     incr_nat:incr_nat,
     is_digit_odd:is_digit_odd,
     is_digit_zero:is_digit_zero,
     is_digit_int:is_digit_int,
     num_leading_zero_bits_in_digit:num_leading_zero_bits_in_digit,
     num_digits_nat:num_digits_nat,
     nth_digit_nat_native:nth_digit_nat_native,
     set_digit_nat_native:set_digit_nat_native,
     nth_digit_nat:nth_digit_nat,
     set_digit_nat:set_digit_nat,
     blit_nat:blit_nat,
     set_to_zero_nat:set_to_zero_nat,
     create_nat:create_nat,
     nat_of_array:nat_of_array,
     caml_hash_nat:caml_hash_nat,
     MlNat:MlNat,
     initialize_nat:initialize_nat,
     caml_js_to_string:caml_js_to_string,
     caml_to_js_string:caml_to_js_string,
     caml_js_from_string:caml_js_from_string,
     caml_new_string:caml_new_string,
     caml_js_to_byte_string:caml_js_to_byte_string,
     caml_is_ml_string:caml_is_ml_string,
     caml_is_ml_bytes:caml_is_ml_bytes,
     caml_string_of_jsstring:caml_string_of_jsstring,
     caml_jsstring_of_string:caml_jsstring_of_string,
     caml_jsbytes_of_string:caml_jsbytes_of_string,
     caml_string_of_jsbytes:caml_string_of_jsbytes,
     caml_bytes_of_string:caml_bytes_of_string,
     caml_string_of_bytes:caml_string_of_bytes,
     caml_string_lessthan:caml_string_lessthan,
     caml_string_lessequal:caml_string_lessequal,
     caml_string_equal:caml_string_equal,
     caml_string_compare:caml_string_compare,
     caml_ml_string_length:caml_ml_string_length,
     caml_string_unsafe_set:caml_string_unsafe_set,
     caml_string_unsafe_get:caml_string_unsafe_get,
     caml_bytes_of_jsbytes:caml_bytes_of_jsbytes,
     caml_ml_bytes_length:caml_ml_bytes_length,
     caml_blit_string:caml_blit_string,
     caml_blit_bytes:caml_blit_bytes,
     caml_fill_string:caml_fill_string,
     caml_fill_bytes:caml_fill_bytes,
     caml_bytes_greaterthan:caml_bytes_greaterthan,
     caml_string_greaterthan:caml_string_greaterthan,
     caml_bytes_greaterequal:caml_bytes_greaterequal,
     caml_string_greaterequal:caml_string_greaterequal,
     caml_bytes_lessthan:caml_bytes_lessthan,
     caml_bytes_lessequal:caml_bytes_lessequal,
     caml_bytes_notequal:caml_bytes_notequal,
     caml_string_notequal:caml_string_notequal,
     caml_bytes_equal:caml_bytes_equal,
     caml_bytes_compare:caml_bytes_compare,
     caml_bytes_of_array:caml_bytes_of_array,
     caml_string_of_array:caml_string_of_array,
     caml_create_bytes:caml_create_bytes,
     caml_create_string:caml_create_string,
     caml_array_of_string:caml_array_of_string,
     caml_array_of_bytes:caml_array_of_bytes,
     caml_convert_bytes_to_array:caml_convert_bytes_to_array,
     caml_convert_string_to_bytes:caml_convert_string_to_bytes,
     MlBytes:MlBytes,
     caml_bytes_of_utf16_jsstring:caml_bytes_of_utf16_jsstring,
     caml_bytes_set:caml_bytes_set,
     caml_string_set64:caml_string_set64,
     caml_bytes_set64:caml_bytes_set64,
     caml_string_set32:caml_string_set32,
     caml_bytes_set32:caml_bytes_set32,
     caml_string_set16:caml_string_set16,
     caml_bytes_set16:caml_bytes_set16,
     caml_string_set:caml_string_set,
     caml_bytes_get:caml_bytes_get,
     caml_bytes_get64:caml_bytes_get64,
     caml_string_get64:caml_string_get64,
     caml_bytes_get32:caml_bytes_get32,
     caml_string_get32:caml_string_get32,
     caml_bytes_get16:caml_bytes_get16,
     caml_string_get16:caml_string_get16,
     caml_string_get:caml_string_get,
     caml_bytes_bound_error:caml_bytes_bound_error,
     caml_string_bound_error:caml_string_bound_error,
     caml_bytes_unsafe_set:caml_bytes_unsafe_set,
     caml_bytes_unsafe_get:caml_bytes_unsafe_get,
     jsoo_is_ascii:jsoo_is_ascii,
     caml_utf16_of_utf8:caml_utf16_of_utf8,
     caml_utf8_of_utf16:caml_utf8_of_utf16,
     caml_subarray_to_jsbytes:caml_subarray_to_jsbytes,
     caml_str_repeat:caml_str_repeat,
     caml_md5_bytes:caml_md5_bytes,
     caml_md5_string:caml_md5_string,
     caml_md5_chan:caml_md5_chan,
     caml_output_value_to_buffer:caml_output_value_to_buffer,
     caml_output_value_to_bytes:caml_output_value_to_bytes,
     caml_output_value_to_string:caml_output_value_to_string,
     caml_output_val:caml_output_val,
     caml_legacy_custom_code:caml_legacy_custom_code,
     MlObjectTable:MlObjectTable,
     caml_marshal_data_size:caml_marshal_data_size,
     caml_input_value_from_reader:caml_input_value_from_reader,
     caml_custom_ops:caml_custom_ops,
     caml_nativeint_unmarshal:caml_nativeint_unmarshal,
     caml_int32_unmarshal:caml_int32_unmarshal,
     caml_int64_marshal:caml_int64_marshal,
     caml_int64_unmarshal:caml_int64_unmarshal,
     caml_input_value_from_bytes:caml_input_value_from_bytes,
     caml_input_value_from_string:caml_input_value_from_string,
     caml_float_of_bytes:caml_float_of_bytes,
     BigStringReader:BigStringReader,
     MlStringReader:MlStringReader,
     caml_marshal_constants:caml_marshal_constants,
     caml_new_lex_engine:caml_new_lex_engine,
     caml_lex_engine:caml_lex_engine,
     caml_lex_array:caml_lex_array,
     caml_xmlhttprequest_create:caml_xmlhttprequest_create,
     caml_js_export_var:caml_js_export_var,
     caml_js_object:caml_js_object,
     caml_pure_js_expr:caml_pure_js_expr,
     caml_js_expr:caml_js_expr,
     caml_js_eval_string:caml_js_eval_string,
     caml_js_equals:caml_js_equals,
     caml_js_wrap_meth_callback_unsafe:caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict:caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback:caml_js_wrap_meth_callback,
     caml_js_wrap_callback_strict:caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments:caml_js_wrap_callback_arguments,
     caml_js_wrap_callback:caml_js_wrap_callback,
     caml_ojs_new_arr:caml_ojs_new_arr,
     caml_js_new:caml_js_new,
     caml_js_meth_call:caml_js_meth_call,
     caml_js_fun_call:caml_js_fun_call,
     caml_js_call:caml_js_call,
     caml_js_var:caml_js_var,
     caml_list_to_js_array:caml_list_to_js_array,
     caml_list_of_js_array:caml_list_of_js_array,
     caml_js_to_array:caml_js_to_array,
     caml_js_from_array:caml_js_from_array,
     caml_js_to_float:caml_js_to_float,
     caml_js_from_float:caml_js_from_float,
     caml_js_to_bool:caml_js_to_bool,
     caml_js_from_bool:caml_js_from_bool,
     caml_js_error_of_exception:caml_js_error_of_exception,
     caml_exn_with_js_backtrace:caml_exn_with_js_backtrace,
     caml_wrap_exception:caml_wrap_exception,
     caml_is_js:caml_is_js,
     js_print_stderr:js_print_stderr,
     js_print_stdout:js_print_stdout,
     caml_trampoline_return:caml_trampoline_return,
     caml_trampoline:caml_trampoline,
     caml_js_get_console:caml_js_get_console,
     caml_js_html_entities:caml_js_html_entities,
     caml_js_html_escape:caml_js_html_escape,
     caml_js_on_ie:caml_js_on_ie,
     caml_js_typeof:caml_js_typeof,
     caml_js_instanceof:caml_js_instanceof,
     caml_js_delete:caml_js_delete,
     caml_js_get:caml_js_get,
     caml_js_set:caml_js_set,
     caml_js_pure_expr:caml_js_pure_expr,
     caml_ml_output_int:caml_ml_output_int,
     caml_ml_pos_out_64:caml_ml_pos_out_64,
     caml_ml_pos_out:caml_ml_pos_out,
     caml_ml_seek_out_64:caml_ml_seek_out_64,
     caml_ml_seek_out:caml_ml_seek_out,
     caml_output_value:caml_output_value,
     caml_ml_output_char:caml_ml_output_char,
     caml_ml_output:caml_ml_output,
     caml_ml_output_bytes:caml_ml_output_bytes,
     caml_ml_flush:caml_ml_flush,
     caml_ml_input_scan_line:caml_ml_input_scan_line,
     caml_ml_pos_in_64:caml_ml_pos_in_64,
     caml_ml_pos_in:caml_ml_pos_in,
     caml_ml_seek_in_64:caml_ml_seek_in_64,
     caml_ml_seek_in:caml_ml_seek_in,
     caml_ml_input_int:caml_ml_input_int,
     caml_ml_input_char:caml_ml_input_char,
     caml_input_value:caml_input_value,
     caml_ml_input:caml_ml_input,
     caml_ml_may_refill_input:caml_ml_may_refill_input,
     caml_ml_refill_input:caml_ml_refill_input,
     caml_ml_set_channel_refill:caml_ml_set_channel_refill,
     caml_ml_set_channel_output:caml_ml_set_channel_output,
     caml_ml_channel_size_64:caml_ml_channel_size_64,
     caml_ml_channel_size:caml_ml_channel_size,
     caml_ml_close_channel:caml_ml_close_channel,
     caml_ml_set_binary_mode:caml_ml_set_binary_mode,
     caml_channel_descriptor:caml_channel_descriptor,
     caml_ml_open_descriptor_in:caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out:caml_ml_open_descriptor_out,
     caml_ml_out_channels_list:caml_ml_out_channels_list,
     caml_ml_channels:caml_ml_channels,
     caml_ml_set_channel_name:caml_ml_set_channel_name,
     caml_sys_open:caml_sys_open,
     caml_std_output:caml_std_output,
     caml_sys_close:caml_sys_close,
     caml_int64_bswap:caml_int64_bswap,
     caml_int32_bswap:caml_int32_bswap,
     caml_bswap16:caml_bswap16,
     caml_mod:caml_mod,
     caml_div:caml_div,
     caml_mul:caml_mul,
     caml_int_of_string:caml_int_of_string,
     caml_parse_digit:caml_parse_digit,
     caml_parse_sign_and_base:caml_parse_sign_and_base,
     caml_format_int:caml_format_int,
     caml_CamlinternalMod_update_mod:caml_CamlinternalMod_update_mod,
     caml_CamlinternalMod_init_mod:caml_CamlinternalMod_init_mod,
     caml_int64_hash:caml_int64_hash,
     caml_int64_to_bytes:caml_int64_to_bytes,
     caml_int64_of_bytes:caml_int64_of_bytes,
     caml_int64_hi32:caml_int64_hi32,
     caml_int64_lo32:caml_int64_lo32,
     caml_int64_create_lo_hi:caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi:caml_int64_create_lo_mi_hi,
     caml_int64_of_string:caml_int64_of_string,
     caml_int64_format:caml_int64_format,
     caml_int64_of_float:caml_int64_of_float,
     caml_int64_to_float:caml_int64_to_float,
     caml_int64_to_int32:caml_int64_to_int32,
     caml_int64_of_int32:caml_int64_of_int32,
     caml_int64_mod:caml_int64_mod,
     caml_int64_div:caml_int64_div,
     caml_int64_shift_right:caml_int64_shift_right,
     caml_int64_shift_right_unsigned:caml_int64_shift_right_unsigned,
     caml_int64_shift_left:caml_int64_shift_left,
     caml_int64_xor:caml_int64_xor,
     caml_int64_or:caml_int64_or,
     caml_int64_and:caml_int64_and,
     caml_int64_is_negative:caml_int64_is_negative,
     caml_int64_is_zero:caml_int64_is_zero,
     caml_int64_mul:caml_int64_mul,
     caml_int64_sub:caml_int64_sub,
     caml_int64_add:caml_int64_add,
     caml_int64_neg:caml_int64_neg,
     caml_int64_compare:caml_int64_compare,
     caml_int64_ult:caml_int64_ult,
     MlInt64:MlInt64,
     caml_int64_offset:caml_int64_offset,
     caml_float_of_string:caml_float_of_string,
     caml_format_float:caml_format_float,
     caml_round_float:caml_round_float,
     caml_tanh_float:caml_tanh_float,
     caml_sinh_float:caml_sinh_float,
     caml_cosh_float:caml_cosh_float,
     caml_log10_float:caml_log10_float,
     caml_hypot_float:caml_hypot_float,
     caml_log1p_float:caml_log1p_float,
     caml_expm1_float:caml_expm1_float,
     caml_signbit_float:caml_signbit_float,
     caml_copysign_float:caml_copysign_float,
     caml_float_compare:caml_float_compare,
     caml_frexp_float:caml_frexp_float,
     caml_ldexp_float:caml_ldexp_float,
     caml_modf_float:caml_modf_float,
     caml_classify_float:caml_classify_float,
     caml_int32_float_of_bits:caml_int32_float_of_bits,
     caml_trunc_float:caml_trunc_float,
     caml_nextafter_float:caml_nextafter_float,
     caml_int64_float_of_bits:caml_int64_float_of_bits,
     caml_hexstring_of_float:caml_hexstring_of_float,
     caml_int32_bits_of_float:caml_int32_bits_of_float,
     caml_int64_bits_of_float:caml_int64_bits_of_float,
     jsoo_floor_log2:jsoo_floor_log2,
     caml_hash:caml_hash,
     caml_hash_mix_string:caml_hash_mix_string,
     caml_hash_mix_bytes:caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr:caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes:caml_hash_mix_jsbytes,
     caml_hash_mix_int64:caml_hash_mix_int64,
     caml_hash_mix_float:caml_hash_mix_float,
     caml_hash_mix_final:caml_hash_mix_final,
     caml_hash_mix_int:caml_hash_mix_int,
     caml_hash_univ_param:caml_hash_univ_param,
     caml_gr_close_subwindow:caml_gr_close_subwindow,
     caml_gr_open_subwindow:caml_gr_open_subwindow,
     caml_gr_window_id:caml_gr_window_id,
     caml_gr_display_mode:caml_gr_display_mode,
     caml_gr_remember_mode:caml_gr_remember_mode,
     caml_gr_synchronize:caml_gr_synchronize,
     caml_gr_wait_event:caml_gr_wait_event,
     caml_gr_sigio_signal:caml_gr_sigio_signal,
     caml_gr_sigio_handler:caml_gr_sigio_handler,
     caml_gr_blit_image:caml_gr_blit_image,
     caml_gr_create_image:caml_gr_create_image,
     caml_gr_draw_image:caml_gr_draw_image,
     caml_gr_dump_image:caml_gr_dump_image,
     caml_gr_make_image:caml_gr_make_image,
     caml_gr_text_size:caml_gr_text_size,
     caml_gr_set_text_size:caml_gr_set_text_size,
     caml_gr_set_font:caml_gr_set_font,
     caml_gr_draw_string:caml_gr_draw_string,
     caml_gr_draw_char:caml_gr_draw_char,
     caml_gr_draw_str:caml_gr_draw_str,
     caml_gr_fill_arc:caml_gr_fill_arc,
     caml_gr_fill_poly:caml_gr_fill_poly,
     caml_gr_fill_rect:caml_gr_fill_rect,
     caml_gr_set_line_width:caml_gr_set_line_width,
     caml_gr_draw_arc:caml_gr_draw_arc,
     caml_gr_arc_aux:caml_gr_arc_aux,
     caml_gr_draw_rect:caml_gr_draw_rect,
     caml_gr_lineto:caml_gr_lineto,
     caml_gr_current_y:caml_gr_current_y,
     caml_gr_current_x:caml_gr_current_x,
     caml_gr_moveto:caml_gr_moveto,
     caml_gr_point_color:caml_gr_point_color,
     caml_gr_plot:caml_gr_plot,
     caml_gr_set_color:caml_gr_set_color,
     caml_gr_size_y:caml_gr_size_y,
     caml_gr_size_x:caml_gr_size_x,
     caml_gr_clear_graph:caml_gr_clear_graph,
     caml_gr_resize_window:caml_gr_resize_window,
     caml_gr_set_window_title:caml_gr_set_window_title,
     caml_gr_close_graph:caml_gr_close_graph,
     caml_gr_doc_of_state:caml_gr_doc_of_state,
     caml_gr_state_create:caml_gr_state_create,
     caml_gr_state_init:caml_gr_state_init,
     caml_gr_open_graph:caml_gr_open_graph,
     caml_gr_state_set:caml_gr_state_set,
     caml_gr_state_get:caml_gr_state_get,
     caml_gr_state:caml_gr_state,
     caml_memprof_stop:caml_memprof_stop,
     caml_memprof_start:caml_memprof_start,
     caml_final_release:caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register:caml_final_register,
     caml_memprof_set:caml_memprof_set,
     caml_gc_get:caml_gc_get,
     caml_gc_set:caml_gc_set,
     caml_gc_stat:caml_gc_stat,
     caml_gc_quick_stat:caml_gc_quick_stat,
     caml_gc_counters:caml_gc_counters,
     caml_gc_compaction:caml_gc_compaction,
     caml_gc_full_major:caml_gc_full_major,
     caml_gc_major:caml_gc_major,
     caml_gc_minor:caml_gc_minor,
     MlNodeFile:MlNodeFile,
     MlNodeDevice:MlNodeDevice,
     fs_node_supported:fs_node_supported,
     MlFakeFile:MlFakeFile,
     MlFakeDevice:MlFakeDevice,
     caml_read_file_content:caml_read_file_content,
     caml_create_file:caml_create_file,
     caml_fs_init:caml_fs_init,
     caml_create_file_extern:caml_create_file_extern,
     caml_ba_map_file_bytecode:caml_ba_map_file_bytecode,
     caml_ba_map_file:caml_ba_map_file,
     caml_sys_rename:caml_sys_rename,
     caml_sys_is_directory:caml_sys_is_directory,
     caml_sys_remove:caml_sys_remove,
     caml_sys_read_directory:caml_sys_read_directory,
     caml_sys_file_exists:caml_sys_file_exists,
     caml_raise_not_a_dir:caml_raise_not_a_dir,
     caml_raise_no_such_file:caml_raise_no_such_file,
     caml_sys_chdir:caml_sys_chdir,
     caml_sys_getcwd:caml_sys_getcwd,
     caml_unmount:caml_unmount,
     caml_mount_autoload:caml_mount_autoload,
     resolve_fs_device:resolve_fs_device,
     caml_list_mount_point:caml_list_mount_point,
     jsoo_mount_point:jsoo_mount_point,
     caml_make_path:caml_make_path,
     MlFile:MlFile,
     caml_root:caml_root,
     caml_current_dir:caml_current_dir,
     caml_finish_formatting:caml_finish_formatting,
     caml_parse_format:caml_parse_format,
     caml_array_bound_error:caml_array_bound_error,
     caml_raise_not_found:caml_raise_not_found,
     caml_raise_zero_divide:caml_raise_zero_divide,
     caml_raise_end_of_file:caml_raise_end_of_file,
     caml_invalid_argument:caml_invalid_argument,
     caml_failwith:caml_failwith,
     caml_raise_with_string:caml_raise_with_string,
     caml_raise_with_arg:caml_raise_with_arg,
     caml_return_exn_constant:caml_return_exn_constant,
     caml_raise_constant:caml_raise_constant,
     caml_lessthan:caml_lessthan,
     caml_lessequal:caml_lessequal,
     caml_greaterthan:caml_greaterthan,
     caml_greaterequal:caml_greaterequal,
     caml_notequal:caml_notequal,
     caml_equal:caml_equal,
     caml_int_compare:caml_int_compare,
     caml_compare:caml_compare,
     caml_compare_val:caml_compare_val,
     caml_compare_val_number_custom:caml_compare_val_number_custom,
     caml_compare_val_get_custom:caml_compare_val_get_custom,
     caml_compare_val_tag:caml_compare_val_tag,
     caml_blit_string_to_bigstring:caml_blit_string_to_bigstring,
     caml_blit_bigstring_to_string:caml_blit_bigstring_to_string,
     caml_blit_bigstring_to_bigstring:caml_blit_bigstring_to_bigstring,
     caml_bigstring_blit_ba_to_bytes:caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba:caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba:caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba:caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp:caml_bigstring_memcmp,
     bigstring_of_typed_array:bigstring_of_typed_array,
     bigstring_of_array_buffer:bigstring_of_array_buffer,
     bigstring_to_typed_array:bigstring_to_typed_array,
     bigstring_to_array_buffer:bigstring_to_array_buffer,
     caml_hash_mix_bigstring:caml_hash_mix_bigstring,
     caml_ba_from_typed_array:caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array:caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array:caml_ba_to_typed_array,
     caml_ba_hash:caml_ba_hash,
     caml_ba_create_from:caml_ba_create_from,
     caml_ba_deserialize:caml_ba_deserialize,
     caml_ba_serialize:caml_ba_serialize,
     caml_ba_reshape:caml_ba_reshape,
     caml_ba_slice:caml_ba_slice,
     caml_ba_sub:caml_ba_sub,
     caml_ba_blit:caml_ba_blit,
     caml_ba_fill:caml_ba_fill,
     caml_ba_set_3:caml_ba_set_3,
     caml_ba_set_2:caml_ba_set_2,
     caml_ba_set_1:caml_ba_set_1,
     caml_ba_uint8_set64:caml_ba_uint8_set64,
     caml_ba_uint8_set32:caml_ba_uint8_set32,
     caml_ba_uint8_set16:caml_ba_uint8_set16,
     caml_ba_set_generic:caml_ba_set_generic,
     caml_ba_get_3:caml_ba_get_3,
     caml_ba_get_2:caml_ba_get_2,
     caml_ba_get_1:caml_ba_get_1,
     caml_ba_uint8_get64:caml_ba_uint8_get64,
     caml_ba_uint8_get32:caml_ba_uint8_get32,
     caml_ba_uint8_get16:caml_ba_uint8_get16,
     caml_ba_get_generic:caml_ba_get_generic,
     caml_ba_dim_3:caml_ba_dim_3,
     caml_ba_dim_2:caml_ba_dim_2,
     caml_ba_dim_1:caml_ba_dim_1,
     caml_ba_dim:caml_ba_dim,
     caml_ba_num_dims:caml_ba_num_dims,
     caml_ba_layout:caml_ba_layout,
     caml_ba_kind:caml_ba_kind,
     caml_ba_change_layout:caml_ba_change_layout,
     caml_ba_create:caml_ba_create,
     caml_ba_create_unsafe:caml_ba_create_unsafe,
     caml_ba_compare:caml_ba_compare,
     Ml_Bigarray_c_1_1:Ml_Bigarray_c_1_1,
     Ml_Bigarray:Ml_Bigarray,
     caml_ba_custom_name:caml_ba_custom_name,
     caml_ba_create_buffer:caml_ba_create_buffer,
     caml_ba_get_size_per_element:caml_ba_get_size_per_element,
     caml_ba_get_size:caml_ba_get_size,
     caml_ba_init:caml_ba_init,
     caml_convert_raw_backtrace_slot:caml_convert_raw_backtrace_slot,
     caml_get_current_callstack:caml_get_current_callstack,
     caml_restore_raw_backtrace:caml_restore_raw_backtrace,
     caml_raw_backtrace_slot:caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot:caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length:caml_raw_backtrace_length,
     caml_convert_raw_backtrace:caml_convert_raw_backtrace,
     caml_record_backtrace:caml_record_backtrace,
     caml_get_exception_raw_backtrace:caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace:caml_get_exception_backtrace,
     caml_backtrace_status:caml_backtrace_status,
     caml_ml_debug_info_status:caml_ml_debug_info_status,
     caml_floatarray_create:caml_floatarray_create,
     caml_make_float_vect:caml_make_float_vect,
     caml_make_vect:caml_make_vect,
     caml_check_bound:caml_check_bound,
     caml_array_fill:caml_array_fill,
     caml_array_get:caml_array_get,
     caml_array_set:caml_array_set,
     caml_floatarray_blit:caml_floatarray_blit,
     caml_array_blit:caml_array_blit,
     caml_array_concat:caml_array_concat,
     caml_array_append:caml_array_append,
     caml_array_sub:caml_array_sub};
    caml_fs_init();
    caml_register_global
     (0,[248,caml_string_of_jsbytes("Out_of_memory"),0],"Out_of_memory");
    caml_register_global
     (1,[248,caml_string_of_jsbytes("Sys_error"),-1],"Sys_error");
    caml_register_global
     (2,[248,caml_string_of_jsbytes("Failure"),-2],"Failure");
    caml_register_global
     (3,
      [248,caml_string_of_jsbytes("Invalid_argument"),-3],
      "Invalid_argument");
    caml_register_global
     (4,[248,caml_string_of_jsbytes("End_of_file"),-4],"End_of_file");
    caml_register_global
     (5,
      [248,caml_string_of_jsbytes("Division_by_zero"),-5],
      "Division_by_zero");
    caml_register_global
     (6,[248,caml_string_of_jsbytes("Not_found"),-6],"Not_found");
    caml_register_global
     (7,[248,caml_string_of_jsbytes("Match_failure"),-7],"Match_failure");
    caml_register_global
     (8,[248,caml_string_of_jsbytes("Stack_overflow"),-8],"Stack_overflow");
    caml_register_global
     (9,[248,caml_string_of_jsbytes("Sys_blocked_io"),-9],"Sys_blocked_io");
    caml_register_global
     (10,[248,caml_string_of_jsbytes("Assert_failure"),-10],"Assert_failure");
    caml_register_global
     (11,
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-11],
      "Undefined_recursive_module");
    return}
  (function(){return this}()));


//# 1 ".js/stdlib/stdlib.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_array_concat=runtime.caml_array_concat,
     caml_array_get=runtime.caml_array_get,
     caml_array_set=runtime.caml_array_set,
     caml_array_sub=runtime.caml_array_sub,
     caml_ba_change_layout=runtime.caml_ba_change_layout,
     caml_ba_create=runtime.caml_ba_create,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_dim_2=runtime.caml_ba_dim_2,
     caml_ba_kind=runtime.caml_ba_kind,
     caml_ba_num_dims=runtime.caml_ba_num_dims,
     caml_ba_reshape=runtime.caml_ba_reshape,
     caml_ba_slice=runtime.caml_ba_slice,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_blit_string=runtime.caml_blit_string,
     caml_bswap16=runtime.caml_bswap16,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_get16=runtime.caml_bytes_get16,
     caml_bytes_get32=runtime.caml_bytes_get32,
     caml_bytes_get64=runtime.caml_bytes_get64,
     caml_bytes_of_string=runtime.caml_bytes_of_string,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_set16=runtime.caml_bytes_set16,
     caml_bytes_set32=runtime.caml_bytes_set32,
     caml_bytes_set64=runtime.caml_bytes_set64,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_div=runtime.caml_div,
     caml_ephe_set_key=runtime.caml_ephe_set_key,
     caml_ephe_unset_key=runtime.caml_ephe_unset_key,
     caml_equal=runtime.caml_equal,
     caml_fill_bytes=runtime.caml_fill_bytes,
     caml_float_compare=runtime.caml_float_compare,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_floatarray_create=runtime.caml_floatarray_create,
     caml_format_float=runtime.caml_format_float,
     caml_format_int=runtime.caml_format_int,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_get_exception_raw_backtra=runtime.caml_get_exception_raw_backtrace,
     caml_get_public_method=runtime.caml_get_public_method,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_hash=runtime.caml_hash,
     caml_input_value=runtime.caml_input_value,
     caml_int32_bswap=runtime.caml_int32_bswap,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_bswap=runtime.caml_int64_bswap,
     caml_int64_compare=runtime.caml_int64_compare,
     caml_int64_float_of_bits=runtime.caml_int64_float_of_bits,
     caml_int64_format=runtime.caml_int64_format,
     caml_int64_mul=runtime.caml_int64_mul,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_of_string=runtime.caml_int64_of_string,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int_compare=runtime.caml_int_compare,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_make_vect=runtime.caml_make_vect,
     caml_marshal_data_size=runtime.caml_marshal_data_size,
     caml_md5_string=runtime.caml_md5_string,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_channel_size=runtime.caml_ml_channel_size,
     caml_ml_channel_size_64=runtime.caml_ml_channel_size_64,
     caml_ml_close_channel=runtime.caml_ml_close_channel,
     caml_ml_flush=runtime.caml_ml_flush,
     caml_ml_input=runtime.caml_ml_input,
     caml_ml_input_char=runtime.caml_ml_input_char,
     caml_ml_open_descriptor_in=runtime.caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out=runtime.caml_ml_open_descriptor_out,
     caml_ml_output=runtime.caml_ml_output,
     caml_ml_output_bytes=runtime.caml_ml_output_bytes,
     caml_ml_output_char=runtime.caml_ml_output_char,
     caml_ml_set_binary_mode=runtime.caml_ml_set_binary_mode,
     caml_ml_set_channel_name=runtime.caml_ml_set_channel_name,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_nextafter_float=runtime.caml_nextafter_float,
     caml_notequal=runtime.caml_notequal,
     caml_obj_block=runtime.caml_obj_block,
     caml_obj_make_forward=runtime.caml_obj_make_forward,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_output_value=runtime.caml_output_value,
     caml_register_global=runtime.caml_register_global,
     caml_register_named_value=runtime.caml_register_named_value,
     caml_restore_raw_backtrace=runtime.caml_restore_raw_backtrace,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_signbit_float=runtime.caml_signbit_float,
     caml_spacetime_enabled=runtime.caml_spacetime_enabled,
     caml_spacetime_only_works_for_=
      runtime.caml_spacetime_only_works_for_native_code,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_bytes=runtime.caml_string_of_bytes,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_sys_getenv=runtime.caml_sys_getenv,
     caml_sys_open=runtime.caml_sys_open,
     caml_sys_random_seed=runtime.caml_sys_random_seed,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_string_of_jsbytes("%,"),
     cst_really_input=caml_string_of_jsbytes("really_input"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_output_substring=caml_string_of_jsbytes("output_substring"),
     cst_output=caml_string_of_jsbytes("output"),
     cst_12g=caml_string_of_jsbytes("%.12g"),
     cst=caml_string_of_jsbytes("."),
     cst_false$1=caml_string_of_jsbytes("false"),
     cst_true$1=caml_string_of_jsbytes("true"),
     cst_false$0=caml_string_of_jsbytes("false"),
     cst_true$0=caml_string_of_jsbytes("true"),
     cst_bool_of_string=caml_string_of_jsbytes("bool_of_string"),
     cst_true=caml_string_of_jsbytes("true"),
     cst_false=caml_string_of_jsbytes("false"),
     cst_char_of_int=caml_string_of_jsbytes("char_of_int"),
     cst_Stdlib_Exit=caml_string_of_jsbytes("Stdlib.Exit"),
     cst_Stdlib_Pervasives_Exit=
      caml_string_of_jsbytes("Stdlib.Pervasives.Exit"),
     cst_option_is_None=caml_string_of_jsbytes("option is None"),
     cst_result_is_Ok=caml_string_of_jsbytes("result is Ok _"),
     cst_result_is_Error=caml_string_of_jsbytes("result is Error _"),
     cst_true$2=caml_string_of_jsbytes("true"),
     cst_false$2=caml_string_of_jsbytes("false"),
     cst$1=caml_string_of_jsbytes("\\\\"),
     cst$2=caml_string_of_jsbytes("\\'"),
     cst_b=caml_string_of_jsbytes("\\b"),
     cst_t=caml_string_of_jsbytes("\\t"),
     cst_n=caml_string_of_jsbytes("\\n"),
     cst_r=caml_string_of_jsbytes("\\r"),
     cst_Char_chr=caml_string_of_jsbytes("Char.chr"),
     cst_is_not_a_latin1_character=
      caml_string_of_jsbytes(" is not a latin1 character"),
     cst_04X=caml_string_of_jsbytes("%04X"),
     cst_U=caml_string_of_jsbytes("U+"),
     cst_is_not_an_Unicode_scalar_v=
      caml_string_of_jsbytes(" is not an Unicode scalar value"),
     cst_X=caml_string_of_jsbytes("%X"),
     err_no_pred=caml_string_of_jsbytes("U+0000 has no predecessor"),
     err_no_succ=caml_string_of_jsbytes("U+10FFFF has no successor"),
     cst_Stdlib_Sys_Break=caml_string_of_jsbytes("Stdlib.Sys.Break"),
     ocaml_version=caml_string_of_jsbytes("4.11.2"),
     cst_List_map2=caml_string_of_jsbytes("List.map2"),
     cst_List_iter2=caml_string_of_jsbytes("List.iter2"),
     cst_List_fold_left2=caml_string_of_jsbytes("List.fold_left2"),
     cst_List_fold_right2=caml_string_of_jsbytes("List.fold_right2"),
     cst_List_for_all2=caml_string_of_jsbytes("List.for_all2"),
     cst_List_exists2=caml_string_of_jsbytes("List.exists2"),
     cst_List_combine=caml_string_of_jsbytes("List.combine"),
     cst_List_rev_map2=caml_string_of_jsbytes("List.rev_map2"),
     cst_List_init=caml_string_of_jsbytes("List.init"),
     cst_List_nth$0=caml_string_of_jsbytes("List.nth"),
     cst_nth=caml_string_of_jsbytes("nth"),
     cst_List_nth=caml_string_of_jsbytes("List.nth"),
     cst_tl=caml_string_of_jsbytes("tl"),
     cst_hd=caml_string_of_jsbytes("hd"),
     cst_Bytes_of_seq_cannot_grow_b=
      caml_string_of_jsbytes("Bytes.of_seq: cannot grow bytes"),
     cst_String_rcontains_from_Byte=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst_Bytes_concat=caml_string_of_jsbytes("Bytes.concat"),
     cst_String_blit_Bytes_blit_str=
      caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     cst_Bytes_blit=caml_string_of_jsbytes("Bytes.blit"),
     cst_String_fill_Bytes_fill=
      caml_string_of_jsbytes("String.fill / Bytes.fill"),
     cst_Bytes_extend=caml_string_of_jsbytes("Bytes.extend"),
     cst_String_sub_Bytes_sub=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     cst_String_rcontains_from_Byte$0=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes$0=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt$0=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r$0=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte$0=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in$0=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_String_concat=caml_string_of_jsbytes("String.concat"),
     cst$5=caml_string_of_jsbytes("()"),
     cst_Marshal_from_bytes=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_from_bytes$0=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_data_size=caml_string_of_jsbytes("Marshal.data_size"),
     cst_Marshal_to_buffer_substrin=
      caml_string_of_jsbytes("Marshal.to_buffer: substring out of bounds"),
     cst_Obj_Ephemeron_blit_key=
      caml_string_of_jsbytes("Obj.Ephemeron.blit_key"),
     cst_Obj_Ephemeron_check_key=
      caml_string_of_jsbytes("Obj.Ephemeron.check_key"),
     cst_Obj_Ephemeron_unset_key=
      caml_string_of_jsbytes("Obj.Ephemeron.unset_key"),
     cst_Obj_Ephemeron_set_key=caml_string_of_jsbytes("Obj.Ephemeron.set_key"),
     cst_Obj_Ephemeron_get_key_copy=
      caml_string_of_jsbytes("Obj.Ephemeron.get_key_copy"),
     cst_Obj_Ephemeron_get_key=caml_string_of_jsbytes("Obj.Ephemeron.get_key"),
     cst_Obj_Ephemeron_create=caml_string_of_jsbytes("Obj.Ephemeron.create"),
     cst_Obj_extension_constructor$0=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Obj_extension_constructor=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Array_exists2=caml_string_of_jsbytes("Array.exists2"),
     cst_Array_for_all2=caml_string_of_jsbytes("Array.for_all2"),
     cst_Array_map2_arrays_must_hav=
      caml_string_of_jsbytes("Array.map2: arrays must have the same length"),
     cst_Array_iter2_arrays_must_ha=
      caml_string_of_jsbytes("Array.iter2: arrays must have the same length"),
     cst_Array_blit=caml_string_of_jsbytes("Array.blit"),
     cst_Array_fill=caml_string_of_jsbytes("Array.fill"),
     cst_Array_sub=caml_string_of_jsbytes("Array.sub"),
     cst_Array_init=caml_string_of_jsbytes("Array.init"),
     cst_Stdlib_Array_Bottom=caml_string_of_jsbytes("Stdlib.Array.Bottom"),
     cst_Float_Array_map2_arrays_mu=
      caml_string_of_jsbytes
       ("Float.Array.map2: arrays must have the same length"),
     cst_Float_Array_iter2_arrays_m=
      caml_string_of_jsbytes
       ("Float.Array.iter2: arrays must have the same length"),
     cst_Float_array_blit=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_array_blit$0=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_Array_fill=caml_string_of_jsbytes("Float.Array.fill"),
     cst_Float_Array_sub=caml_string_of_jsbytes("Float.Array.sub"),
     cst_Float_Array_concat=caml_string_of_jsbytes("Float.Array.concat"),
     cst_Float_Array_init=caml_string_of_jsbytes("Float.Array.init"),
     cst_Stdlib_Float_Array_Bottom=
      caml_string_of_jsbytes("Stdlib.Float.Array.Bottom"),
     cst_d=caml_string_of_jsbytes("%d"),
     cst_d$0=caml_string_of_jsbytes("%d"),
     zero$2=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     one$2=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     minus_one$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     min_int$2=runtime.caml_int64_create_lo_mi_hi(0,0,32768),
     max_int$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32767),
     cst_d$1=caml_string_of_jsbytes("%d"),
     cst_Lexing_lex_refill_cannot_g=
      caml_string_of_jsbytes("Lexing.lex_refill: cannot grow buffer"),
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     cst_syntax_error=caml_string_of_jsbytes("syntax error"),
     cst_Stdlib_Parsing_YYexit=caml_string_of_jsbytes("Stdlib.Parsing.YYexit"),
     cst_Stdlib_Parsing_Parse_error=
      caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
     cst_Set_remove_min_elt=caml_string_of_jsbytes("Set.remove_min_elt"),
     cst_Set_bal=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$0=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$1=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$2=caml_string_of_jsbytes("Set.bal"),
     cst_Map_remove_min_elt=caml_string_of_jsbytes("Map.remove_min_elt"),
     cst_Map_bal=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$0=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$1=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$2=caml_string_of_jsbytes("Map.bal"),
     cst_Stdlib_Stack_Empty=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
     cst_Stdlib_Queue_Empty=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     cst_CamlinternalLazy_Undefined=
      caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     cst_count=caml_string_of_jsbytes("{count = "),
     cst_data=caml_string_of_jsbytes("; data = "),
     cst$6=caml_string_of_jsbytes("}"),
     cst_Sempty=caml_string_of_jsbytes("Sempty"),
     cst_Scons=caml_string_of_jsbytes("Scons ("),
     cst$7=caml_string_of_jsbytes(", "),
     cst$8=caml_string_of_jsbytes(")"),
     cst_Sapp=caml_string_of_jsbytes("Sapp ("),
     cst$9=caml_string_of_jsbytes(", "),
     cst$10=caml_string_of_jsbytes(")"),
     cst_Slazy=caml_string_of_jsbytes("Slazy"),
     cst_Sgen=caml_string_of_jsbytes("Sgen"),
     cst_Sbuffio=caml_string_of_jsbytes("Sbuffio"),
     cst_Stdlib_Stream_Failure=caml_string_of_jsbytes("Stdlib.Stream.Failure"),
     cst_Stdlib_Stream_Error=caml_string_of_jsbytes("Stdlib.Stream.Error"),
     cst_Buffer_truncate=caml_string_of_jsbytes("Buffer.truncate"),
     cst_Buffer_add_channel=caml_string_of_jsbytes("Buffer.add_channel"),
     cst_Buffer_add_substring_add_s=
      caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     cst_Buffer_add_cannot_grow_buf=
      caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     cst_Buffer_nth=caml_string_of_jsbytes("Buffer.nth"),
     cst_Buffer_blit=caml_string_of_jsbytes("Buffer.blit"),
     cst_Buffer_sub=caml_string_of_jsbytes("Buffer.sub"),
     cst_c=caml_string_of_jsbytes("%c"),
     cst_s=caml_string_of_jsbytes("%s"),
     cst_i=caml_string_of_jsbytes("%i"),
     cst_li=caml_string_of_jsbytes("%li"),
     cst_ni=caml_string_of_jsbytes("%ni"),
     cst_Li=caml_string_of_jsbytes("%Li"),
     cst_f=caml_string_of_jsbytes("%f"),
     cst_B=caml_string_of_jsbytes("%B"),
     cst$21=caml_string_of_jsbytes("%{"),
     cst$22=caml_string_of_jsbytes("%}"),
     cst$23=caml_string_of_jsbytes("%("),
     cst$24=caml_string_of_jsbytes("%)"),
     cst_a=caml_string_of_jsbytes("%a"),
     cst_t$0=caml_string_of_jsbytes("%t"),
     cst$25=caml_string_of_jsbytes("%?"),
     cst_r$0=caml_string_of_jsbytes("%r"),
     cst_r$1=caml_string_of_jsbytes("%_r"),
     cst_u$0=caml_string_of_jsbytes("%u"),
     cst_Printf_bad_conversion=
      caml_string_of_jsbytes("Printf: bad conversion %["),
     cst_Printf_bad_conversion$0=
      caml_string_of_jsbytes("Printf: bad conversion %_"),
     cst$30=caml_string_of_jsbytes("@{"),
     cst$31=caml_string_of_jsbytes("@["),
     cst$32=caml_string_of_jsbytes("@{"),
     cst$33=caml_string_of_jsbytes("@["),
     cst$34=caml_string_of_jsbytes("@{"),
     cst$35=caml_string_of_jsbytes("@["),
     cst_0=caml_string_of_jsbytes("0"),
     cst_padding=caml_string_of_jsbytes("padding"),
     cst_precision=caml_string_of_jsbytes("precision"),
     cst$40=caml_string_of_jsbytes("'*'"),
     cst$38=caml_string_of_jsbytes("'-'"),
     cst_0$2=caml_string_of_jsbytes("'0'"),
     cst$39=caml_string_of_jsbytes("'*'"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_0$1=caml_string_of_jsbytes("0"),
     cst_precision$0=caml_string_of_jsbytes("precision"),
     cst_precision$1=caml_string_of_jsbytes("precision"),
     cst$41=caml_string_of_jsbytes("'+'"),
     cst$42=caml_string_of_jsbytes("'#'"),
     cst$43=caml_string_of_jsbytes("' '"),
     cst_padding$0=caml_string_of_jsbytes("`padding'"),
     cst_precision$2=caml_string_of_jsbytes("`precision'"),
     cst$44=caml_string_of_jsbytes("'+'"),
     cst$45=caml_string_of_jsbytes("'_'"),
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     cst_digit=caml_string_of_jsbytes("digit"),
     cst_character=caml_string_of_jsbytes("character ')'"),
     cst_character$0=caml_string_of_jsbytes("character '}'"),
     cst$49=caml_string_of_jsbytes("'#'"),
     cst$46=caml_string_of_jsbytes("'+'"),
     cst$47=caml_string_of_jsbytes("'+'"),
     cst$48=caml_string_of_jsbytes("' '"),
     cst$50=caml_string_of_jsbytes("'+'"),
     cst_non_zero_widths_are_unsupp=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     cst_unexpected_end_of_format=
      caml_string_of_jsbytes("unexpected end of format"),
     cst$36=caml_string_of_jsbytes(""),
     cst$37=caml_string_of_jsbytes(""),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_hov=caml_string_of_jsbytes("hov"),
     cst_hv=caml_string_of_jsbytes("hv"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_nan=caml_string_of_jsbytes("nan"),
     cst_neg_infinity=caml_string_of_jsbytes("neg_infinity"),
     cst_infinity=caml_string_of_jsbytes("infinity"),
     cst$29=caml_string_of_jsbytes("."),
     cst_nd$0=caml_string_of_jsbytes("%+nd"),
     cst_nd$1=caml_string_of_jsbytes("% nd"),
     cst_ni$1=caml_string_of_jsbytes("%+ni"),
     cst_ni$2=caml_string_of_jsbytes("% ni"),
     cst_nx=caml_string_of_jsbytes("%nx"),
     cst_nx$0=caml_string_of_jsbytes("%#nx"),
     cst_nX=caml_string_of_jsbytes("%nX"),
     cst_nX$0=caml_string_of_jsbytes("%#nX"),
     cst_no=caml_string_of_jsbytes("%no"),
     cst_no$0=caml_string_of_jsbytes("%#no"),
     cst_nd=caml_string_of_jsbytes("%nd"),
     cst_ni$0=caml_string_of_jsbytes("%ni"),
     cst_nu=caml_string_of_jsbytes("%nu"),
     cst_ld$0=caml_string_of_jsbytes("%+ld"),
     cst_ld$1=caml_string_of_jsbytes("% ld"),
     cst_li$1=caml_string_of_jsbytes("%+li"),
     cst_li$2=caml_string_of_jsbytes("% li"),
     cst_lx=caml_string_of_jsbytes("%lx"),
     cst_lx$0=caml_string_of_jsbytes("%#lx"),
     cst_lX=caml_string_of_jsbytes("%lX"),
     cst_lX$0=caml_string_of_jsbytes("%#lX"),
     cst_lo=caml_string_of_jsbytes("%lo"),
     cst_lo$0=caml_string_of_jsbytes("%#lo"),
     cst_ld=caml_string_of_jsbytes("%ld"),
     cst_li$0=caml_string_of_jsbytes("%li"),
     cst_lu=caml_string_of_jsbytes("%lu"),
     cst_Ld$0=caml_string_of_jsbytes("%+Ld"),
     cst_Ld$1=caml_string_of_jsbytes("% Ld"),
     cst_Li$1=caml_string_of_jsbytes("%+Li"),
     cst_Li$2=caml_string_of_jsbytes("% Li"),
     cst_Lx=caml_string_of_jsbytes("%Lx"),
     cst_Lx$0=caml_string_of_jsbytes("%#Lx"),
     cst_LX=caml_string_of_jsbytes("%LX"),
     cst_LX$0=caml_string_of_jsbytes("%#LX"),
     cst_Lo=caml_string_of_jsbytes("%Lo"),
     cst_Lo$0=caml_string_of_jsbytes("%#Lo"),
     cst_Ld=caml_string_of_jsbytes("%Ld"),
     cst_Li$0=caml_string_of_jsbytes("%Li"),
     cst_Lu=caml_string_of_jsbytes("%Lu"),
     cst_d$3=caml_string_of_jsbytes("%+d"),
     cst_d$4=caml_string_of_jsbytes("% d"),
     cst_i$1=caml_string_of_jsbytes("%+i"),
     cst_i$2=caml_string_of_jsbytes("% i"),
     cst_x=caml_string_of_jsbytes("%x"),
     cst_x$0=caml_string_of_jsbytes("%#x"),
     cst_X$0=caml_string_of_jsbytes("%X"),
     cst_X$1=caml_string_of_jsbytes("%#X"),
     cst_o=caml_string_of_jsbytes("%o"),
     cst_o$0=caml_string_of_jsbytes("%#o"),
     cst_d$2=caml_string_of_jsbytes("%d"),
     cst_i$0=caml_string_of_jsbytes("%i"),
     cst_u=caml_string_of_jsbytes("%u"),
     cst$26=caml_string_of_jsbytes("%!"),
     cst$27=caml_string_of_jsbytes("@{"),
     cst$28=caml_string_of_jsbytes("@["),
     cst_0c=caml_string_of_jsbytes("0c"),
     cst$20=caml_string_of_jsbytes("%%"),
     cst$12=caml_string_of_jsbytes("@]"),
     cst$13=caml_string_of_jsbytes("@}"),
     cst$14=caml_string_of_jsbytes("@?"),
     cst$15=caml_string_of_jsbytes("@\n"),
     cst$16=caml_string_of_jsbytes("@."),
     cst$17=caml_string_of_jsbytes("@@"),
     cst$18=caml_string_of_jsbytes("@%"),
     cst$19=caml_string_of_jsbytes("@"),
     cst$11=caml_string_of_jsbytes(".*"),
     cst_CamlinternalFormat_Type_mi=
      caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     cst$58=caml_string_of_jsbytes(""),
     cst$59=caml_string_of_jsbytes("\n"),
     cst_a_boolean=caml_string_of_jsbytes("a boolean"),
     cst_an_integer=caml_string_of_jsbytes("an integer"),
     cst_an_integer$0=caml_string_of_jsbytes("an integer"),
     cst_a_float=caml_string_of_jsbytes("a float"),
     cst_a_float$0=caml_string_of_jsbytes("a float"),
     cst$55=caml_string_of_jsbytes(""),
     cst$56=caml_string_of_jsbytes(" "),
     cst$57=caml_string_of_jsbytes(""),
     cst_one_of=caml_string_of_jsbytes("one of: "),
     cst_Arg_Expand_is_is_only_allo=
      caml_string_of_jsbytes
       ("Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic"),
     cst_no_argument=caml_string_of_jsbytes("no argument"),
     cst$54=caml_string_of_jsbytes("(?)"),
     cst_help$3=caml_string_of_jsbytes("--help"),
     cst_help$4=caml_string_of_jsbytes("-help"),
     cst_help$2=caml_string_of_jsbytes("-help"),
     cst_Display_this_list_of_optio=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help=caml_string_of_jsbytes("-help"),
     cst_help$1=caml_string_of_jsbytes("--help"),
     cst_Display_this_list_of_optio$0=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help$0=caml_string_of_jsbytes("--help"),
     cst$51=caml_string_of_jsbytes("}"),
     cst$52=caml_string_of_jsbytes("|"),
     cst$53=caml_string_of_jsbytes("{"),
     cst_none=caml_string_of_jsbytes("<none>"),
     cst_Stdlib_Arg_Bad=caml_string_of_jsbytes("Stdlib.Arg.Bad"),
     cst_Stdlib_Arg_Help=caml_string_of_jsbytes("Stdlib.Arg.Help"),
     cst_Stdlib_Arg_Stop=caml_string_of_jsbytes("Stdlib.Arg.Stop"),
     cst$61=caml_string_of_jsbytes(""),
     cst$65=caml_string_of_jsbytes(""),
     cst_Program_not_linked_with_g_=
      caml_string_of_jsbytes
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     cst_Raised_at=caml_string_of_jsbytes("Raised at"),
     cst_Re_raised_at=caml_string_of_jsbytes("Re-raised at"),
     cst_Raised_by_primitive_operat=
      caml_string_of_jsbytes("Raised by primitive operation at"),
     cst_Called_from=caml_string_of_jsbytes("Called from"),
     cst_inlined=caml_string_of_jsbytes(" (inlined)"),
     cst$64=caml_string_of_jsbytes(""),
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     cst_Out_of_memory=caml_string_of_jsbytes("Out of memory"),
     cst_Stack_overflow=caml_string_of_jsbytes("Stack overflow"),
     cst_Pattern_matching_failed=
      caml_string_of_jsbytes("Pattern matching failed"),
     cst_Assertion_failed=caml_string_of_jsbytes("Assertion failed"),
     cst_Undefined_recursive_module=
      caml_string_of_jsbytes("Undefined recursive module"),
     cst$62=caml_string_of_jsbytes(""),
     cst$63=caml_string_of_jsbytes(""),
     cst$60=caml_string_of_jsbytes("_"),
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     cst_Fun_Finally_raised=caml_string_of_jsbytes("Fun.Finally_raised: "),
     cst_Stdlib_Fun_Finally_raised=
      caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     cst_Digest_from_hex$0=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_from_hex=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_to_hex=caml_string_of_jsbytes("Digest.to_hex"),
     cst_Digest_substring=caml_string_of_jsbytes("Digest.substring"),
     cst_Random_int64=caml_string_of_jsbytes("Random.int64"),
     cst_Random_int32=caml_string_of_jsbytes("Random.int32"),
     cst_Random_int=caml_string_of_jsbytes("Random.int"),
     cst_x$1=caml_string_of_jsbytes("x"),
     cst_OCAMLRUNPARAM=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     cst_CAMLRUNPARAM=caml_string_of_jsbytes("CAMLRUNPARAM"),
     cst$66=caml_string_of_jsbytes(""),
     cst_Weak_Make_hash_bucket_cann=
      caml_string_of_jsbytes("Weak.Make: hash bucket cannot grow more"),
     cst_Weak_fill=caml_string_of_jsbytes("Weak.fill"),
     cst_Weak_blit=caml_string_of_jsbytes("Weak.blit"),
     cst_Weak_check=caml_string_of_jsbytes("Weak.check"),
     cst_Weak_get_copy=caml_string_of_jsbytes("Weak.get_copy"),
     cst_Weak_get=caml_string_of_jsbytes("Weak.get"),
     cst_Weak_set=caml_string_of_jsbytes("Weak.set"),
     cst_Weak_create=caml_string_of_jsbytes("Weak.create"),
     cst$84=caml_string_of_jsbytes(""),
     cst$85=caml_string_of_jsbytes(""),
     cst$83=caml_string_of_jsbytes("."),
     cst$80=caml_string_of_jsbytes(">"),
     cst$81=caml_string_of_jsbytes("<\/"),
     cst$82=caml_string_of_jsbytes(""),
     cst$77=caml_string_of_jsbytes(">"),
     cst$78=caml_string_of_jsbytes("<"),
     cst$79=caml_string_of_jsbytes(""),
     cst$76=caml_string_of_jsbytes("\n"),
     cst_Format_pp_set_geometry=
      caml_string_of_jsbytes("Format.pp_set_geometry: "),
     cst$72=caml_string_of_jsbytes(""),
     cst$73=caml_string_of_jsbytes(""),
     cst$74=caml_string_of_jsbytes(""),
     cst$75=caml_string_of_jsbytes(""),
     cst$68=caml_string_of_jsbytes(""),
     cst$69=caml_string_of_jsbytes(""),
     cst$70=caml_string_of_jsbytes(""),
     cst$71=caml_string_of_jsbytes(""),
     cst$67=caml_string_of_jsbytes(""),
     cst_Stdlib_Format_String_tag=
      caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     cst_end_of_input_not_found=
      caml_string_of_jsbytes("end of input not found"),
     cst_scanf_bad_conversion_a=
      caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     cst_scanf_bad_conversion_t=
      caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     cst_scanf_missing_reader=caml_string_of_jsbytes("scanf: missing reader"),
     cst_scanf_bad_conversion_custo=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     cst_scanf_bad_conversion=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$0=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$1=
      caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     cst_scanf_bad_conversion$2=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst$91=caml_string_of_jsbytes('"'),
     cst$92=caml_string_of_jsbytes('"'),
     cst$89=caml_string_of_jsbytes('"'),
     cst$90=caml_string_of_jsbytes('"'),
     cst$88=caml_string_of_jsbytes('"'),
     cst_in_format=caml_string_of_jsbytes(' in format "'),
     cst_an=caml_string_of_jsbytes("an"),
     cst_x$2=caml_string_of_jsbytes("x"),
     cst_nfinity=caml_string_of_jsbytes("nfinity"),
     cst_digits=caml_string_of_jsbytes("digits"),
     cst_decimal_digits=caml_string_of_jsbytes("decimal digits"),
     cst_0b=caml_string_of_jsbytes("0b"),
     cst_0o=caml_string_of_jsbytes("0o"),
     cst_0u=caml_string_of_jsbytes("0u"),
     cst_0x=caml_string_of_jsbytes("0x"),
     cst_false$3=caml_string_of_jsbytes("false"),
     cst_true$3=caml_string_of_jsbytes("true"),
     cst_not_a_valid_float_in_hexad=
      caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     cst_no_dot_or_exponent_part_fo=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     cst$87=caml_string_of_jsbytes("-"),
     cst_unnamed_function=caml_string_of_jsbytes("unnamed function"),
     cst_unnamed_character_string=
      caml_string_of_jsbytes("unnamed character string"),
     cst_unnamed_Stdlib_input_chann=
      caml_string_of_jsbytes("unnamed Stdlib input channel"),
     cst$86=caml_string_of_jsbytes("-"),
     cst_Stdlib_Scanf_Scan_failure=
      caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     cst_binary=caml_string_of_jsbytes("binary"),
     cst_octal=caml_string_of_jsbytes("octal"),
     cst_hexadecimal=caml_string_of_jsbytes("hexadecimal"),
     cst_a_Char=caml_string_of_jsbytes("a Char"),
     cst_a_String=caml_string_of_jsbytes("a String"),
     cst$93=caml_string_of_jsbytes(""),
     cst$94=caml_string_of_jsbytes(""),
     cst$95=caml_string_of_jsbytes(""),
     cst$96=caml_string_of_jsbytes(""),
     cst$97=caml_string_of_jsbytes(""),
     cst$99=caml_string_of_jsbytes(""),
     cst$98=caml_string_of_jsbytes(""),
     cst_Illegal_character=caml_string_of_jsbytes("Illegal character "),
     cst_Filename_chop_extension=
      caml_string_of_jsbytes("Filename.chop_extension"),
     cst$127=caml_string_of_jsbytes(""),
     cst_Filename_chop_suffix=caml_string_of_jsbytes("Filename.chop_suffix"),
     cst$126=caml_string_of_jsbytes(""),
     cst_2_1$0=caml_string_of_jsbytes(" 2>&1"),
     cst_2$0=caml_string_of_jsbytes(" 2>"),
     cst$125=caml_string_of_jsbytes(""),
     cst$117=caml_string_of_jsbytes(" >"),
     cst$124=caml_string_of_jsbytes(""),
     cst$118=caml_string_of_jsbytes(" <"),
     cst$123=caml_string_of_jsbytes(""),
     cst$119=caml_string_of_jsbytes(" "),
     cst$120=caml_string_of_jsbytes(" "),
     cst$121=caml_string_of_jsbytes('"'),
     cst$122=caml_string_of_jsbytes(""),
     cst_Filename_quote_command_bad=
      caml_string_of_jsbytes("Filename.quote_command: bad file name "),
     cst$115=caml_string_of_jsbytes('"'),
     cst$116=caml_string_of_jsbytes('"'),
     cst$113=caml_string_of_jsbytes("./"),
     cst$112=caml_string_of_jsbytes(".\\"),
     cst$111=caml_string_of_jsbytes("../"),
     cst$110=caml_string_of_jsbytes("..\\"),
     cst_2_1=caml_string_of_jsbytes(" 2>&1"),
     cst_2=caml_string_of_jsbytes(" 2>"),
     cst$109=caml_string_of_jsbytes(""),
     cst$104=caml_string_of_jsbytes(" >"),
     cst$108=caml_string_of_jsbytes(""),
     cst$105=caml_string_of_jsbytes(" <"),
     cst$107=caml_string_of_jsbytes(""),
     cst$106=caml_string_of_jsbytes(" "),
     cst$103=caml_string_of_jsbytes("./"),
     cst$102=caml_string_of_jsbytes("../"),
     cst$101=caml_string_of_jsbytes(""),
     cst$100=caml_string_of_jsbytes(""),
     null$0=caml_string_of_jsbytes("/dev/null"),
     current_dir_name=caml_string_of_jsbytes("."),
     parent_dir_name=caml_string_of_jsbytes(".."),
     dir_sep=caml_string_of_jsbytes("/"),
     cst_TMPDIR=caml_string_of_jsbytes("TMPDIR"),
     cst_tmp=caml_string_of_jsbytes("/tmp"),
     quotequote=caml_string_of_jsbytes("'\\''"),
     null$1=caml_string_of_jsbytes("NUL"),
     current_dir_name$0=caml_string_of_jsbytes("."),
     parent_dir_name$0=caml_string_of_jsbytes(".."),
     dir_sep$0=caml_string_of_jsbytes("\\"),
     cst_TEMP=caml_string_of_jsbytes("TEMP"),
     cst$114=caml_string_of_jsbytes("."),
     null$2=caml_string_of_jsbytes("/dev/null"),
     current_dir_name$1=caml_string_of_jsbytes("."),
     parent_dir_name$1=caml_string_of_jsbytes(".."),
     dir_sep$1=caml_string_of_jsbytes("/"),
     cst_Cygwin=caml_string_of_jsbytes("Cygwin"),
     cst_Win32=caml_string_of_jsbytes("Win32"),
     zero$4=[254,0.,0.],
     one$4=[254,1.,0.],
     i=[254,0.,1.],
     cst_Series_is_closed$0=caml_string_of_jsbytes("Series is closed"),
     cst_Series_is_closed=caml_string_of_jsbytes("Series is closed"),
     cst_Bigarray_array3_of_genarra=
      caml_string_of_jsbytes("Bigarray.array3_of_genarray"),
     cst_Bigarray_array2_of_genarra=
      caml_string_of_jsbytes("Bigarray.array2_of_genarray"),
     cst_Bigarray_array1_of_genarra=
      caml_string_of_jsbytes("Bigarray.array1_of_genarray"),
     cst_Bigarray_array0_of_genarra=
      caml_string_of_jsbytes("Bigarray.array0_of_genarray"),
     cst_Bigarray_Array3_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array3_of_array_n$0=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array2_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array2.of_array: non-rectangular data"),
     Invalid_argument=global_data.Invalid_argument,
     Failure=global_data.Failure,
     Match_failure=global_data.Match_failure,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     Out_of_memory=global_data.Out_of_memory,
     Stack_overflow=global_data.Stack_overflow,
     Sys_error=global_data.Sys_error,
     End_of_file=global_data.End_of_file,
     Division_by_zero=global_data.Division_by_zero,
     Sys_blocked_io=global_data.Sys_blocked_io,
     Undefined_recursive_module=global_data.Undefined_recursive_module,
     _l_=[0,0,[0,6,0]],
     _k_=[0,0,[0,7,0]],
     _j_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _i_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _g_=[0,1],
     _h_=[0,0],
     _a_=runtime.caml_int64_create_lo_mi_hi(0,0,32752),
     _b_=runtime.caml_int64_create_lo_mi_hi(0,0,65520),
     _c_=runtime.caml_int64_create_lo_mi_hi(1,0,32752),
     _d_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32751),
     _e_=runtime.caml_int64_create_lo_mi_hi(0,0,16),
     _f_=runtime.caml_int64_create_lo_mi_hi(0,0,15536),
     _p_=[0,0,0],
     _t_=[0,caml_string_of_jsbytes("array.ml"),258,4],
     _v_=[0,caml_string_of_jsbytes("float.ml"),381,6],
     _u_=[0,caml_string_of_jsbytes("float.ml"),208,14],
     _G_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     _F_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _E_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _D_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _H_=[0,0,0,0],
     _I_=[0,0,0],
     _J_=[0,caml_string_of_jsbytes("set.ml"),569,18],
     _K_=[0,0,0,0],
     _L_=[0,caml_string_of_jsbytes("map.ml"),399,10],
     _M_=[0,0,0],
     _N_=[0,caml_string_of_jsbytes("stream.ml"),53,12],
     _O_=[0,0],
     _P_=[0,caml_string_of_jsbytes("stream.ml"),82,12],
     _Z_=[0,caml_string_of_jsbytes("buffer.ml"),282,9],
     _Y_=[0,caml_string_of_jsbytes("buffer.ml"),263,2],
     _X_=[0,caml_string_of_jsbytes("buffer.ml"),195,19],
     _W_=[0,caml_string_of_jsbytes("buffer.ml"),213,8],
     _V_=[0,caml_string_of_jsbytes("buffer.ml"),174,19],
     _U_=[0,caml_string_of_jsbytes("buffer.ml"),192,8],
     _T_=[0,caml_string_of_jsbytes("buffer.ml"),138,19],
     _S_=[0,caml_string_of_jsbytes("buffer.ml"),171,8],
     _R_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _Q_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _at_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _au_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1830,8],
     _aY_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _aX_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _aA_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _aB_=[0,1,0],
     _aC_=[0,0],
     _aD_=[1,0],
     _aE_=[1,1],
     _aG_=[1,1],
     _aF_=[1,1],
     _aK_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _aH_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _aI_=[0,0],
     _aJ_=[0,0],
     _aL_=[0,[12,64,0]],
     _aM_=[0,caml_string_of_jsbytes("@ "),1,0],
     _aN_=[0,caml_string_of_jsbytes("@,"),0,0],
     _aO_=[2,60],
     _aP_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _aQ_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _aR_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2837,11],
     _aS_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _aT_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2899,34],
     _aU_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2935,28],
     _aV_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2957,11],
     _aW_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _az_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _ay_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _ax_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _aw_=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     _av_=[0,0,4],
     _ap_=[0,103],
     ___=[0,0,0],
     _bi_=[0,[2,0,[0,0]],caml_string_of_jsbytes("%s%c")],
     _bc_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bd_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _ba_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bb_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a__=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a$_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a4_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": unknown option '"),
         [2,0,[11,caml_string_of_jsbytes("'.\n"),0]]]],
       caml_string_of_jsbytes("%s: unknown option '%s'.\n")],
     _a7_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": wrong argument '"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("'; option '"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("' expects "),
             [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]]]]]],
       caml_string_of_jsbytes
        ("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _a8_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": option '"),
         [2,0,[11,caml_string_of_jsbytes("' needs an argument.\n"),0]]]],
       caml_string_of_jsbytes("%s: option '%s' needs an argument.\n")],
     _a9_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": "),
         [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]],
       caml_string_of_jsbytes("%s: %s.\n")],
     _a5_=[0,caml_string_of_jsbytes("-help")],
     _a6_=[0,caml_string_of_jsbytes("--help")],
     _a3_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a2_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _a1_=[0,caml_string_of_jsbytes("-help")],
     _aZ_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("  %s %s\n")],
     _a0_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_string_of_jsbytes("  %s %s%s\n")],
     _bn_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bx_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bw_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bu_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bv_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bs_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _bt_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _br_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bq_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bo_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bp_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bm_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bl_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bF_=
      [0,
       [11,caml_string_of_jsbytes("minor_collections: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("minor_collections: %d\n")],
     _bG_=
      [0,
       [11,caml_string_of_jsbytes("major_collections: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("major_collections: %d\n")],
     _bH_=
      [0,
       [11,caml_string_of_jsbytes("compactions:       "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("compactions:       %d\n")],
     _bI_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bJ_=[0,[8,[0,0,0],0,[0,0],0],caml_string_of_jsbytes("%.0f")],
     _bK_=
      [0,
       [11,
        caml_string_of_jsbytes("minor_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("minor_words:    %*.0f\n")],
     _bL_=
      [0,
       [11,
        caml_string_of_jsbytes("promoted_words: "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("promoted_words: %*.0f\n")],
     _bM_=
      [0,
       [11,
        caml_string_of_jsbytes("major_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("major_words:    %*.0f\n")],
     _bN_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bO_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bP_=
      [0,
       [11,caml_string_of_jsbytes("top_heap_words: "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("top_heap_words: %*d\n")],
     _bQ_=
      [0,
       [11,caml_string_of_jsbytes("heap_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("heap_words:     %*d\n")],
     _bR_=
      [0,
       [11,caml_string_of_jsbytes("live_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("live_words:     %*d\n")],
     _bS_=
      [0,
       [11,caml_string_of_jsbytes("free_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("free_words:     %*d\n")],
     _bT_=
      [0,
       [11,caml_string_of_jsbytes("largest_free:   "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("largest_free:   %*d\n")],
     _bU_=
      [0,
       [11,caml_string_of_jsbytes("fragments:      "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("fragments:      %*d\n")],
     _bV_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bW_=
      [0,
       [11,caml_string_of_jsbytes("live_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("live_blocks: %d\n")],
     _bX_=
      [0,
       [11,caml_string_of_jsbytes("free_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("free_blocks: %d\n")],
     _bY_=
      [0,
       [11,caml_string_of_jsbytes("heap_chunks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("heap_chunks: %d\n")],
     _b6_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _b7_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _b8_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _ca_=[0,0],
     _b$_=[0,caml_string_of_jsbytes("hashtbl.ml"),102,23],
     _cg_=[3,0,3],
     _cf_=[1,caml_string_of_jsbytes("max_indent < 2")],
     _cd_=[1,caml_string_of_jsbytes("margin <= max_indent")],
     _ce_=[0,0],
     _cc_=[0,caml_string_of_jsbytes("")],
     _cb_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _cw_=[0,91],
     _cv_=[0,123],
     _cx_=[0,caml_string_of_jsbytes("scanf.ml"),1453,13],
     _cy_=[0,[3,0,[10,0]],caml_string_of_jsbytes("%S%!")],
     _cu_=[0,37,caml_string_of_jsbytes("")],
     _ct_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _cs_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _cr_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _cq_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _cp_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _co_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _cn_=[0,caml_string_of_jsbytes("scanf.ml"),555,9],
     _cm_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _cl_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _ck_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _cj_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _ci_=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _cF_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),438,17],
     _cE_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),420,13],
     _cD_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),417,13],
     _cC_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),414,13],
     _cB_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),411,13],
     _cA_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),408,13],
     _cz_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),281,50],
     _cI_=[0,0],
     _cH_=[0,0],
     _cG_=[0,0],
     _cN_=[0,7,0],
     _cM_=[0,1,[0,3,[0,5,0]]],
     _cL_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_string_of_jsbytes("%s%06x%s")],
     _cK_=[0,caml_string_of_jsbytes('"'),0],
     _cO_=[254,0.,0.];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    var CamlinternalFormatBasics=[0,concat_fmtty,erase_rel,concat_fmt];
    caml_register_global
     (740,CamlinternalFormatBasics,"CamlinternalFormatBasics");
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,cst_Stdlib_Exit,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     infinity=caml_int64_float_of_bits(_a_),
     neg_infinity=caml_int64_float_of_bits(_b_),
     nan=caml_int64_float_of_bits(_c_),
     max_float=caml_int64_float_of_bits(_d_),
     min_float=caml_int64_float_of_bits(_e_),
     epsilon=caml_int64_float_of_bits(_f_),
     max_int=2147483647,
     min_int=-2147483648;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_char_of_int)}
    function string_of_bool(b){return b?cst_true:cst_false}
    function bool_of_string(param)
     {return caml_string_notequal(param,cst_false$0)
              ?caml_string_notequal(param,cst_true$0)
                ?invalid_arg(cst_bool_of_string)
                :1
              :0}
    function bool_of_string_opt(param)
     {return caml_string_notequal(param,cst_false$1)
              ?caml_string_notequal(param,cst_true$1)?0:_g_
              :_h_}
    function string_of_int(n){return caml_string_of_jsbytes("" + n)}
    function int_of_string_opt(s)
     {try
       {var _AP_=[0,caml_int_of_string(s)];return _AP_}
      catch(_AQ_)
       {_AQ_ = caml_wrap_exception(_AQ_);
        if(_AQ_[1] === Failure)return 0;
        throw _AQ_}}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return symbol(s,cst);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function to_string(f)
     {return valid_float_lexem(caml_format_float(cst_12g,f))}
    function of_string_opt(s)
     {try
       {var _AN_=[0,caml_float_of_string(s)];return _AN_}
      catch(_AO_)
       {_AO_ = caml_wrap_exception(_AO_);
        if(_AO_[1] === Failure)return 0;
        throw _AO_}}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_out_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_out(name){return open_out_gen(_i_,438,name)}
    function open_out_bin(name){return open_out_gen(_j_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_AM_)
             {_AM_ = caml_wrap_exception(_AM_);
              if(_AM_[1] !== Sys_error)throw _AM_;
              var _AL_=_AM_}
            var param$0=l;
            continue}
          return 0}}
      return iter(runtime.caml_ml_out_channels_list(0))}
    function output_bytes(oc,s)
     {return caml_ml_output_bytes(oc,s,0,caml_ml_bytes_length(s))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output(oc,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_output_bytes(oc,s,ofs,len);
      return invalid_arg(cst_output)}
    function output_substring(oc,s,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(s) - len | 0) < ofs))
       return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output_substring)}
    function output_value(chan,v){return caml_output_value(chan,v,0)}
    function close_out(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function close_out_noerr(oc)
     {try {caml_ml_flush(oc)}catch(_AK_){}
      try
       {var _AI_=caml_ml_close_channel(oc);return _AI_}
      catch(_AJ_){return 0}}
    function open_in_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_in(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_in(name){return open_in_gen(_k_,0,name)}
    function open_in_bin(name){return open_in_gen(_l_,0,name)}
    function input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(cst_input)}
    function unsafe_really_input(ic,s,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 < len$0)
         {var r=caml_ml_input(ic,s,ofs$0,len$0);
          if(0 === r)throw End_of_file;
          var len$1=len$0 - r | 0,ofs$1=ofs$0 + r | 0,ofs$0=ofs$1,len$0=len$1;
          continue}
        return 0}}
    function really_input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return unsafe_really_input(ic,s,ofs,len);
      return invalid_arg(cst_really_input)}
    function really_input_string(ic,len)
     {var s=caml_create_bytes(len);
      really_input(ic,s,0,len);
      return caml_string_of_bytes(s)}
    function input_line(chan)
     {function build_result(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1],len=caml_ml_bytes_length(hd);
            caml_blit_bytes(hd,0,buf,pos$0 - len | 0,len);
            var pos$1=pos$0 - len | 0,pos$0=pos$1,param$0=tl;
            continue}
          return buf}}
      var accu=0,len=0;
      for(;;)
       {var n=runtime.caml_ml_input_scan_line(chan);
        if(0 === n)
         {if(! accu)throw End_of_file;
          var _AH_=build_result(caml_create_bytes(len),len,accu)}
        else
         {if(! (0 < n))
           {var beg=caml_create_bytes(- n | 0);
            caml_ml_input(chan,beg,0,- n | 0);
            var len$1=len - n | 0,accu$0=[0,beg,accu],accu=accu$0,len=len$1;
            continue}
          var res=caml_create_bytes(n - 1 | 0);
          caml_ml_input(chan,res,0,n - 1 | 0);
          caml_ml_input_char(chan);
          if(accu)
           var
            len$0=(len + n | 0) - 1 | 0,
            _AH_=build_result(caml_create_bytes(len$0),len$0,[0,res,accu]);
          else
           var _AH_=res}
        return caml_string_of_bytes(_AH_)}}
    function close_in_noerr(ic)
     {try
       {var _AF_=caml_ml_close_channel(ic);return _AF_}
      catch(_AG_){return 0}}
    function print_char(c){return caml_ml_output_char(stdout,c)}
    function print_string(s){return output_string(stdout,s)}
    function print_bytes(s){return output_bytes(stdout,s)}
    function print_int(i)
     {return output_string(stdout,caml_string_of_jsbytes("" + i))}
    function print_float(f){return output_string(stdout,to_string(f))}
    function print_endline(s)
     {output_string(stdout,s);
      caml_ml_output_char(stdout,10);
      return caml_ml_flush(stdout)}
    function print_newline(param)
     {caml_ml_output_char(stdout,10);return caml_ml_flush(stdout)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_bytes(s){return output_bytes(stderr,s)}
    function prerr_int(i)
     {return output_string(stderr,caml_string_of_jsbytes("" + i))}
    function prerr_float(f){return output_string(stderr,to_string(f))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function prerr_newline(param)
     {caml_ml_output_char(stderr,10);return caml_ml_flush(stderr)}
    function read_line(param){caml_ml_flush(stdout);return input_line(stdin)}
    function read_int(param){return caml_int_of_string(read_line(0))}
    function read_int_opt(param){return int_of_string_opt(read_line(0))}
    function read_float(param){return caml_float_of_string(read_line(0))}
    function read_float_opt(param){return of_string_opt(read_line(0))}
    function string_of_format(param){var str=param[2];return str}
    function symbol$0(param,_AD_)
     {var
       str2=_AD_[2],
       fmt2=_AD_[1],
       str1=param[2],
       fmt1=param[1],
       _AE_=symbol(str1,symbol(cst$0,str2));
      return [0,concat_fmt(fmt1,fmt2),_AE_]}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1],f_already_ran=[0,0];
      exit_function[1]
      =
      function(param)
       {if(1 - f_already_ran[1]){f_already_ran[1] = 1;caml_call1(f,0)}
        return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function exit(retcode)
     {do_at_exit(0);return runtime.caml_sys_exit(retcode)}
    var
     set_binary_mode_in=caml_ml_set_binary_mode,
     close_in=caml_ml_close_channel,
     in_channel_length=caml_ml_channel_size,
     pos_in=runtime.caml_ml_pos_in,
     seek_in=runtime.caml_ml_seek_in,
     input_value=caml_input_value,
     input_binary_int=runtime.caml_ml_input_int,
     input_byte=caml_ml_input_char,
     input_char=caml_ml_input_char,
     set_binary_mode_out=caml_ml_set_binary_mode,
     out_channel_length=caml_ml_channel_size,
     pos_out=runtime.caml_ml_pos_out,
     seek_out=runtime.caml_ml_seek_out,
     output_binary_int=runtime.caml_ml_output_int,
     output_byte=caml_ml_output_char,
     output_char=caml_ml_output_char,
     flush=caml_ml_flush,
     Stdlib=
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
    caml_register_global(753,Stdlib,"Stdlib");
    var
     Exit$0=[248,cst_Stdlib_Pervasives_Exit,caml_fresh_oo_id(0)],
     Stdlib_pervasives=
      [0,
       invalid_arg,
       failwith,
       Exit$0,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string,
       bool_of_string_opt,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_int_opt,
       read_float,
       read_float_opt,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       do_at_exit];
    caml_register_global(754,Stdlib_pervasives,"Stdlib__pervasives");
    function empty(param){return 0}
    function return$0(x,param){return [0,x,empty]}
    function cons(x,next,param){return [0,x,next]}
    function append$0(seq1,seq2,param)
     {var match=caml_call1(seq1,0);
      if(match)
       {var next=match[2],x=match[1];
        return [0,x,function(_AC_){return append$0(next,seq2,_AC_)}]}
      return caml_call1(seq2,0)}
    function map(f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _AA_=function(_AB_){return map(f,next,_AB_)};
        return [0,caml_call1(f,x),_AA_]}
      return 0}
    function filter_map(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1],match$0=caml_call1(f,x);
          if(match$0)
           {var y=match$0[1];
            return [0,y,function(_Az_){return filter_map(f,next,_Az_)}]}
          var seq$0=next;
          continue}
        return 0}}
    function filter(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          if(caml_call1(f,x))
           return [0,x,function(_Ay_){return filter(f,next,_Ay_)}];
          var seq$0=next;
          continue}
        return 0}}
    function flat_map$0(counter,f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1],_Ax_=caml_call1(f,x),_Aw_=0;
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return flat_map_app$0(counter$0,f,_Ax_,next,_Aw_)}
        return caml_trampoline_return(flat_map_app$0,[0,f,_Ax_,next,_Aw_])}
      return 0}
    function flat_map_app$0(counter,f,seq,tail,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1];
        return [0,x,function(_Av_){return flat_map_app(f,next,tail,_Av_)}]}
      var _Au_=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return flat_map$0(counter$0,f,tail,_Au_)}
      return caml_trampoline_return(flat_map$0,[0,f,tail,_Au_])}
    function flat_map(f,seq,param)
     {return caml_trampoline(flat_map$0(0,f,seq,param))}
    function flat_map_app(f,seq,tail,param)
     {return caml_trampoline(flat_map_app$0(0,f,seq,tail,param))}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var
           next=match[2],
           x=match[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           seq$0=next;
          continue}
        return acc$0}}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          caml_call1(f,x);
          var seq$0=next;
          continue}
        return 0}}
    function unfold(f,u,param)
     {var match=caml_call1(f,u);
      if(match)
       {var match$0=match[1],u$0=match$0[2],x=match$0[1];
        return [0,x,function(_At_){return unfold(f,u$0,_At_)}]}
      return 0}
    var
     Stdlib_seq=
      [0,
       empty,
       return$0,
       cons,
       append$0,
       map,
       filter,
       filter_map,
       flat_map,
       fold_left,
       iter,
       unfold];
    caml_register_global(755,Stdlib_seq,"Stdlib__seq");
    var none=0;
    function some(v){return [0,v]}
    function value(o,default$0){if(o){var v=o[1];return v}return default$0}
    function get(param)
     {if(param){var v=param[1];return v}
      return invalid_arg(cst_option_is_None)}
    function bind(o,f){if(o){var v=o[1];return caml_call1(f,v)}return 0}
    function join(param){if(param){var o=param[1];return o}return 0}
    function map$0(f,o){if(o){var v=o[1];return [0,caml_call1(f,v)]}return 0}
    function fold(none,some,param)
     {if(param){var v=param[1];return caml_call1(some,v)}return none}
    function iter$0(f,param)
     {if(param){var v=param[1];return caml_call1(f,v)}return 0}
    function is_none(param){return param?0:1}
    function is_some(param){return param?1:0}
    function equal(eq,o0,o1)
     {if(o0)
       {if(o1){var v1=o1[1],v0=o0[1];return caml_call2(eq,v0,v1)}}
      else
       if(! o1)return 1;
      return 0}
    function compare(cmp,o0,o1)
     {if(o0)
       {var _As_=o0[1];
        if(o1){var v1=o1[1];return caml_call2(cmp,_As_,v1)}
        return 1}
      return o1?-1:0}
    function to_result(none,param)
     {if(param){var v=param[1];return [0,v]}return [1,none]}
    function to_list(param){if(param){var v=param[1];return [0,v,0]}return 0}
    function to_seq(param)
     {if(param){var v=param[1];return function(_Ar_){return return$0(v,_Ar_)}}
      return empty}
    var
     Stdlib_option=
      [0,
       none,
       some,
       value,
       get,
       bind,
       join,
       map$0,
       fold,
       iter$0,
       is_none,
       is_some,
       equal,
       compare,
       to_result,
       to_list,
       to_seq];
    caml_register_global(756,Stdlib_option,"Stdlib__option");
    function ok(v){return [0,v]}
    function error(e){return [1,e]}
    function value$0(r,default$0)
     {if(0 === r[0]){var v=r[1];return v}return default$0}
    function get_ok(param)
     {if(0 === param[0]){var v=param[1];return v}
      return invalid_arg(cst_result_is_Error)}
    function get_error(param)
     {if(0 === param[0])return invalid_arg(cst_result_is_Ok);
      var e=param[1];
      return e}
    function bind$0(r,f)
     {if(0 === r[0]){var v=r[1];return caml_call1(f,v)}return r}
    function join$0(e){if(0 === e[0]){var r=e[1];return r}return e}
    function map$1(f,e)
     {if(0 === e[0]){var v=e[1];return [0,caml_call1(f,v)]}return e}
    function map_error(f,v)
     {if(0 === v[0])return v;var e=v[1];return [1,caml_call1(f,e)]}
    function fold$0(ok,error,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(ok,v)}
      var e=param[1];
      return caml_call1(error,e)}
    function iter$1(f,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(f,v)}return 0}
    function iter_error(f,param)
     {if(0 === param[0])return 0;var e=param[1];return caml_call1(f,e)}
    function is_ok(param){return 0 === param[0]?1:0}
    function is_error(param){return 0 === param[0]?0:1}
    function equal$0(ok,error,r0,match)
     {if(0 === r0[0])
       {var _Ap_=r0[1];
        if(0 === match[0]){var v1=match[1];return caml_call2(ok,_Ap_,v1)}}
      else
       {var _Aq_=r0[1];
        if(0 !== match[0]){var e1=match[1];return caml_call2(error,_Aq_,e1)}}
      return 0}
    function compare$0(ok,error,r0,match)
     {if(0 === r0[0])
       {var _An_=r0[1];
        if(0 === match[0]){var v1=match[1];return caml_call2(ok,_An_,v1)}
        return -1}
      var _Ao_=r0[1];
      if(0 === match[0])return 1;
      var e1=match[1];
      return caml_call2(error,_Ao_,e1)}
    function to_option(param)
     {if(0 === param[0]){var v=param[1];return [0,v]}return 0}
    function to_list$0(param)
     {if(0 === param[0]){var v=param[1];return [0,v,0]}return 0}
    function to_seq$0(param)
     {if(0 === param[0])
       {var v=param[1];return function(_Am_){return return$0(v,_Am_)}}
      return empty}
    var
     Stdlib_result=
      [0,
       ok,
       error,
       value$0,
       get_ok,
       get_error,
       bind$0,
       join$0,
       map$1,
       map_error,
       fold$0,
       iter$1,
       iter_error,
       is_ok,
       is_error,
       equal$0,
       compare$0,
       to_option,
       to_list$0,
       to_seq$0];
    caml_register_global(757,Stdlib_result,"Stdlib__result");
    function equal$1(_Al_,_Ak_){return _Al_ === _Ak_?1:0}
    var compare$1=caml_int_compare;
    function to_float(param){return param?1.:0.}
    function to_string$0(param){return param?cst_true$2:cst_false$2}
    function _m_(_Aj_){return _Aj_}
    var
     Stdlib_bool=
      [0,
       function(_Ai_){return 1 - _Ai_},
       equal$1,
       compare$1,
       _m_,
       to_float,
       to_string$0];
    caml_register_global(758,Stdlib_bool,"Stdlib__bool");
    function chr(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_Char_chr)}
    function escaped(c)
     {var switch$0=0;
      if(40 <= c)
       {if(92 === c)return cst$1;if(! (127 <= c))switch$0 = 1}
      else
       if(32 <= c)
        {if(39 <= c)return cst$2;switch$0 = 1}
       else
        if(! (14 <= c))
         switch(c)
          {case 8:return cst_b;
           case 9:return cst_t;
           case 10:return cst_n;
           case 13:return cst_r
           }
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function lowercase(c)
     {var _Ah_=c - 192 | 0,switch$0=0;
      if(30 < _Ah_ >>> 0)
       {if(! (25 < (_Ah_ + 127 | 0) >>> 0))switch$0 = 1}
      else
       if(23 !== _Ah_)switch$0 = 1;
      return switch$0?c + 32 | 0:c}
    function uppercase(c)
     {var _Ag_=c - 224 | 0,switch$0=0;
      if(30 < _Ag_ >>> 0)
       {if(! (25 < (_Ag_ + 127 | 0) >>> 0))switch$0 = 1}
      else
       if(23 !== _Ag_)switch$0 = 1;
      return switch$0?c - 32 | 0:c}
    function lowercase_ascii(c)
     {var switcher=c - 65 | 0;return 25 < switcher >>> 0?c:c + 32 | 0}
    function uppercase_ascii(c)
     {var switcher=c - 97 | 0;return 25 < switcher >>> 0?c:c - 32 | 0}
    function compare$2(c1,c2){return c1 - c2 | 0}
    function equal$2(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
    var
     Stdlib_char=
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare$2,
       equal$2];
    caml_register_global(759,Stdlib_char,"Stdlib__char");
    var
     min$0=0,
     max$0=1114111,
     lo_bound=55295,
     hi_bound=57344,
     bom=65279,
     rep=65533;
    function succ(u)
     {return u === 55295
              ?hi_bound
              :u === 1114111?invalid_arg(err_no_succ):u + 1 | 0}
    function pred(u)
     {return u === 57344?lo_bound:u === 0?invalid_arg(err_no_pred):u - 1 | 0}
    function is_valid(i)
     {var _Ac_=0 <= i?1:0,_Ad_=_Ac_?i <= 55295?1:0:_Ac_;
      if(_Ad_)
       var _Ae_=_Ad_;
      else
       var _Af_=57344 <= i?1:0,_Ae_=_Af_?i <= 1114111?1:0:_Af_;
      return _Ae_}
    function of_int(i)
     {return is_valid(i)
              ?i
              :invalid_arg
                (symbol
                  (caml_format_int(cst_X,i),cst_is_not_an_Unicode_scalar_v))}
    function is_char(u){return u < 256?1:0}
    function of_char(c){return c}
    function to_char(u)
     {return 255 < u
              ?invalid_arg
                (symbol
                  (cst_U,
                   symbol
                    (caml_format_int(cst_04X,u),cst_is_not_a_latin1_character)))
              :u}
    function unsafe_to_char(_Ab_){return _Ab_}
    function equal$3(_Aa_,_z$_){return _Aa_ === _z$_?1:0}
    var compare$3=caml_int_compare;
    function hash(_z__){return _z__}
    function _n_(_z9_){return _z9_}
    var
     Stdlib_uchar=
      [0,
       min$0,
       max$0,
       bom,
       rep,
       succ,
       pred,
       is_valid,
       of_int,
       function(_z8_){return _z8_},
       _n_,
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal$3,
       compare$3,
       hash];
    caml_register_global(760,Stdlib_uchar,"Stdlib__uchar");
    var
     executable_name=runtime.caml_sys_executable_name(0),
     match=runtime.caml_sys_get_config(0),
     os_type=match[1],
     match$0=runtime.caml_sys_const_backend_type(0),
     unix=runtime.caml_sys_const_ostype_unix(0),
     win32=runtime.caml_sys_const_ostype_win32(0),
     cygwin=runtime.caml_sys_const_ostype_cygwin(0),
     max_array_length=runtime.caml_sys_const_max_wosize(0),
     max_floatarray_length=max_array_length / 2 | 0,
     max_string_length=(4 * max_array_length | 0) - 1 | 0,
     big_endian=0,
     match$1=32,
     int_size=32;
    function getenv_opt(s)
     {try
       {var _z6_=[0,caml_sys_getenv(s)];return _z6_}
      catch(_z7_)
       {_z7_ = caml_wrap_exception(_z7_);
        if(_z7_ === Not_found)return 0;
        throw _z7_}}
    var interactive=[0,0];
    function set_signal(sig_num,sig_beh){return 0}
    var
     Break=[248,cst_Stdlib_Sys_Break,caml_fresh_oo_id(0)],
     sigabrt=-1,
     sigalrm=-2,
     sigfpe=-3,
     sighup=-4,
     sigill=-5,
     sigint=-6,
     sigkill=-7,
     sigpipe=-8,
     sigquit=-9,
     sigsegv=-10,
     sigterm=-11,
     sigusr1=-12,
     sigusr2=-13,
     sigchld=-14,
     sigcont=-15,
     sigstop=-16,
     sigtstp=-17,
     sigttin=-18,
     sigttou=-19,
     sigvtalrm=-20,
     sigprof=-21,
     sigbus=-22,
     sigpoll=-23,
     sigsys=-24,
     sigtrap=-25,
     sigurg=-26,
     sigxcpu=-27,
     sigxfsz=-28;
    function catch_break(on){return on?0:0}
    function Make(_z5_,_z4_){return [0,1]}
    var
     Immediate64=[0,Make],
     Stdlib_sys=
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       match$0,
       unix,
       win32,
       cygwin,
       match$1,
       int_size,
       big_endian,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       sigabrt,
       sigalrm,
       sigfpe,
       sighup,
       sigill,
       sigint,
       sigkill,
       sigpipe,
       sigquit,
       sigsegv,
       sigterm,
       sigusr1,
       sigusr2,
       sigchld,
       sigcont,
       sigstop,
       sigtstp,
       sigttin,
       sigttou,
       sigvtalrm,
       sigprof,
       sigbus,
       sigpoll,
       sigsys,
       sigtrap,
       sigurg,
       sigxcpu,
       sigxfsz,
       Break,
       catch_break,
       ocaml_version,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
    caml_register_global(761,Stdlib_sys,"Stdlib__sys");
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons$0(a,l){return [0,a,l]}
    function hd(param)
     {if(param){var a=param[1];return a}return failwith(cst_hd)}
    function tl(param)
     {if(param){var l=param[2];return l}return failwith(cst_tl)}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(cst_nth)}}
      return invalid_arg(cst_List_nth)}
    function nth_opt(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return [0,a];
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return 0}}
      return invalid_arg(cst_List_nth$0)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function init_aux(i,n,f)
     {if(n <= i)return 0;
      var r=caml_call1(f,i);
      return [0,r,init_aux(i + 1 | 0,n,f)]}
    var rev_init_threshold=typeof match$0 === "number"?10000:50;
    function init(len,f)
     {if(0 <= len)
       {if(rev_init_threshold < len)
         {var acc=0,i=0;
          for(;;)
           {if(len <= i)return rev(acc);
            var i$0=i + 1 | 0,acc$0=[0,caml_call1(f,i),acc],acc=acc$0,i=i$0;
            continue}}
        return init_aux(0,len,f)}
      return invalid_arg(cst_List_init)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map$2(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$2(f,l)]}
      return 0}
    function _o_(i,f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call2(f,i,a);
        return [0,r,_o_(i + 1 | 0,f,l)]}
      return 0}
    function mapi(f,l){return _o_(0,f,l)}
    function rev_map(f,param)
     {var accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           a=param$0[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param$0=l;
          continue}
        return accu}}
    function iter$2(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function iteri(f,l$0)
     {var i=0,param=l$0;
      for(;;)
       {if(param)
         {var l=param[2],a=param[1];
          caml_call2(f,i,a);
          var i$0=i + 1 | 0,i=i$0,param=l;
          continue}
        return 0}}
    function fold_left$0(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function map2(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_map2)}
    function rev_map2(f,l1,l2)
     {var accu=0,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$0=[0,caml_call2(f,a1,a2),accu],
             accu=accu$0,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu;
        return invalid_arg(cst_List_rev_map2)}}
    function iter2(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_iter2)}}
    function fold_left2(f,accu,l1,l2)
     {var accu$0=accu,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$1=caml_call3(f,accu$0,a1,a2),
             accu$0=accu$1,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu$0;
        return invalid_arg(cst_List_fold_left2)}}
    function fold_right2(f,l1,l2,accu)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return caml_call3(f,a1,a2,fold_right2(f,l1$0,l2$0,accu))}}
      else
       if(! l2)return accu;
      return invalid_arg(cst_List_fold_right2)}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_z3_=caml_call1(p,a);
          if(_z3_){var param$0=l;continue}
          return _z3_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_z2_=caml_call1(p,a);
          if(_z2_)return _z2_;
          var param$0=l;
          continue}
        return 0}}
    function for_all2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _z1_=caml_call2(p,a1,a2);
            if(_z1_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _z1_}}
        else
         if(! l2$0)return 1;
        return invalid_arg(cst_List_for_all2)}}
    function exists2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _z0_=caml_call2(p,a1,a2);
            if(_z0_)return _z0_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_exists2)}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zZ_=0 === caml_compare(a,x)?1:0;
          if(_zZ_)return _zZ_;
          var param$0=l;
          continue}
        return 0}}
    function memq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zY_=a === x?1:0;
          if(_zY_)return _zY_;
          var param$0=l;
          continue}
        return 0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assoc_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assq_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function mem_assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           match=param$0[1],
           a=match[1],
           _zX_=0 === caml_compare(a,x)?1:0;
          if(_zX_)return _zX_;
          var param$0=l;
          continue}
        return 0}}
    function mem_assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],a=match[1],_zW_=a === x?1:0;
          if(_zW_)return _zW_;
          var param$0=l;
          continue}
        return 0}}
    function remove_assoc(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return 0 === caml_compare(a,x)?l:[0,pair,remove_assoc(x,l)]}
      return 0}
    function remove_assq(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return a === x?l:[0,pair,remove_assq(x,l)]}
      return 0}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_opt(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return [0,x];
          var param$0=l;
          continue}
        return 0}}
    function find_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1],result=caml_call1(f,x);
          if(result)return result;
          var param$0=l;
          continue}
        return 0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function filteri(p,param)
     {var i=0,acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           acc$0=caml_call2(p,i,x)?[0,x,acc]:acc,
           i$0=i + 1 | 0,
           i=i$0,
           acc=acc$0,
           param$0=l;
          continue}
        return rev(acc)}}
    function filter_map$0(f)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1],match=caml_call1(f,x);
            if(match)
             {var v=match[1],accu$1=[0,v,accu$0],accu$0=accu$1,param=l;
              continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function concat_map(f,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           xs=caml_call1(f,x),
           acc$0=rev_append(xs,acc),
           acc=acc$0,
           param$0=l;
          continue}
        return rev(acc)}}
    function fold_left_map(f,accu,param)
     {var accu$0=accu,l_accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           match=caml_call2(f,accu$0,x),
           x$0=match[2],
           accu$1=match[1],
           l_accu$0=[0,x$0,l_accu],
           accu$0=accu$1,
           l_accu=l_accu$0,
           param$0=l;
          continue}
        return [0,accu$0,rev(l_accu)]}}
    function partition(p,param)
     {var yes=0,no=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))
           {var yes$0=[0,x,yes],yes=yes$0,param$0=l;continue}
          var no$0=[0,x,no],no=no$0,param$0=l;
          continue}
        var _zV_=rev(no);
        return [0,rev(yes),_zV_]}}
    function split(param)
     {if(param)
       {var
         l=param[2],
         match=param[1],
         y=match[2],
         x=match[1],
         match$0=split(l),
         ry=match$0[2],
         rx=match$0[1];
        return [0,[0,x,rx],[0,y,ry]]}
      return _p_}
    function combine(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],combine(l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_combine)}
    function merge(cmp,l1,match)
     {if(l1)
       {if(match)
         {var t2=match[2],h2=match[1],t1=l1[2],h1=l1[1];
          return 0 < caml_call2(cmp,h1,h2)
                  ?[0,h2,merge(cmp,l1,t2)]
                  :[0,h1,merge(cmp,t1,match)]}
        return l1}
      return match}
    function fast_sort(cmp,l)
     {function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zR_=l[2];
            if(_zR_)
             {var
               tl=_zR_[2],
               x2=_zR_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zT_=l[2];
           if(_zT_)
            {var _zU_=_zT_[2];
             if(_zU_)
              {var
                tl$1=_zU_[2],
                x3=_zU_[1],
                x2$0=_zT_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x2$0,x3)
                    ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                      :[0,x3,[0,x1$0,[0,x2$0,0]]]
                  :0 < caml_call2(cmp,x1$0,x3)
                    ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                      :[0,x3,[0,x2$0,[0,x1$0,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
              var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
              continue}
            var _zS_=rev_append(l1,accu)}
          else
           var _zS_=rev_append(l2,accu);
          return [0,_zS_,tl$0]}}
      function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zN_=l[2];
            if(_zN_)
             {var
               tl=_zN_[2],
               x2=_zN_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zP_=l[2];
           if(_zP_)
            {var _zQ_=_zP_[2];
             if(_zQ_)
              {var
                tl$1=_zQ_[2],
                x3=_zQ_[1],
                x2$0=_zP_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x1$0,x3)
                    ?0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                      :[0,x2$0,[0,x3,[0,x1$0,0]]]
                    :[0,x2$0,[0,x1$0,[0,x3,0]]]
                  :0 < caml_call2(cmp,x2$0,x3)
                    ?0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                      :[0,x1$0,[0,x3,[0,x2$0,0]]]
                    :[0,x1$0,[0,x2$0,[0,x3,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
              var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
              continue}
            var _zO_=rev_append(l1,accu)}
          else
           var _zO_=rev_append(l2,accu);
          return [0,_zO_,tl$0]}}
      var len=length(l);
      return 2 <= len?sort(len,l)[1]:l}
    function sort_uniq(cmp,l)
     {function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zE_=l[2];
            if(_zE_)
             {var
               tl=_zE_[2],
               x2=_zE_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zG_=l[2];
           if(_zG_)
            {var _zH_=_zG_[2];
             if(_zH_)
              {var
                tl$1=_zH_[2],
                x3=_zH_[1],
                x2$0=_zG_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _zI_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]],
                 s$0=_zI_;
               else
                if(0 < c$1)
                 {var c$3=caml_call2(cmp,x2$0,x3);
                  if(0 === c$3)
                   var _zJ_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 < c$3)
                    var _zJ_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                   else
                    var
                     c$4=caml_call2(cmp,x1$0,x3),
                     _zK_=
                      0 === c$4
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 < c$4
                         ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                         :[0,x3,[0,x1$0,[0,x2$0,0]]],
                     _zJ_=_zK_;
                  var s$0=_zJ_}
                else
                 {var c$5=caml_call2(cmp,x1$0,x3);
                  if(0 === c$5)
                   var _zL_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 < c$5)
                    var _zL_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                   else
                    var
                     c$6=caml_call2(cmp,x2$0,x3),
                     _zM_=
                      0 === c$6
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 < c$6
                         ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x3,[0,x2$0,[0,x1$0,0]]],
                     _zL_=_zM_;
                  var s$0=_zL_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            var _zF_=rev_append(l1,accu)}
          else
           var _zF_=rev_append(l2,accu);
          return [0,_zF_,tl$0]}}
      function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zv_=l[2];
            if(_zv_)
             {var
               tl=_zv_[2],
               x2=_zv_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zx_=l[2];
           if(_zx_)
            {var _zy_=_zx_[2];
             if(_zy_)
              {var
                tl$1=_zy_[2],
                x3=_zy_[1],
                x2$0=_zx_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _zz_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]],
                 s$0=_zz_;
               else
                if(0 <= c$1)
                 {var c$3=caml_call2(cmp,x1$0,x3);
                  if(0 === c$3)
                   var _zA_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 <= c$3)
                    var
                     c$4=caml_call2(cmp,x2$0,x3),
                     _zB_=
                      0 === c$4
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 <= c$4
                         ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                         :[0,x2$0,[0,x3,[0,x1$0,0]]],
                     _zA_=_zB_;
                   else
                    var _zA_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                  var s$0=_zA_}
                else
                 {var c$5=caml_call2(cmp,x2$0,x3);
                  if(0 === c$5)
                   var _zC_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 <= c$5)
                    var
                     c$6=caml_call2(cmp,x1$0,x3),
                     _zD_=
                      0 === c$6
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 <= c$6
                         ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                         :[0,x1$0,[0,x3,[0,x2$0,0]]],
                     _zC_=_zD_;
                   else
                    var _zC_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                  var s$0=_zC_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            var _zw_=rev_append(l1,accu)}
          else
           var _zw_=rev_append(l2,accu);
          return [0,_zw_,tl$0]}}
      var len=length(l);
      return 2 <= len?sort(len,l)[1]:l}
    function compare_lengths(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0){var l2$1=l2$0[2],l1$1=l1$0[2],l1$0=l1$1,l2$0=l2$1;continue}
          return 1}
        return l2$0?-1:0}}
    function compare_length_with(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2];
          if(0 < n$0){var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;continue}
          return 1}
        return 0 === n$0?0:0 < n$0?-1:1}}
    function to_seq$1(l)
     {function aux(l,param)
       {if(l)
         {var tail=l[2],x=l[1];
          return [0,x,function(_zu_){return aux(tail,_zu_)}]}
        return 0}
      return function(_zt_){return aux(l,_zt_)}}
    function of_seq(seq)
     {function direct(depth,seq)
       {if(0 === depth)
         {var _zs_=0;
          return rev(fold_left(function(acc,x){return [0,x,acc]},_zs_,seq))}
        var match=caml_call1(seq,0);
        if(match)
         {var next=match[2],x=match[1];
          return [0,x,direct(depth - 1 | 0,next)]}
        return 0}
      return direct(500,seq)}
    var
     include=
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons$0,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$2,
       iteri,
       map$2,
       mapi,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left_map,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       filteri,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(762,include,"Stdlib__list");
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function init$0(n,f)
     {var s=caml_create_bytes(n),_zq_=n - 1 | 0,_zp_=0;
      if(! (_zq_ < 0))
       {var i=_zp_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
          var _zr_=i + 1 | 0;
          if(_zq_ !== i){var i=_zr_;continue}
          break}}
      return s}
    var empty$0=caml_create_bytes(0);
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function to_string$1(b){return caml_string_of_bytes(copy(b))}
    function of_string(s){return copy(caml_bytes_of_string(s))}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(cst_String_sub_Bytes_sub)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function symbol$1(a,b)
     {var c=a + b | 0,_zo_=b < 0?1:0,match=c < 0?1:0,switch$0=0;
      if(a < 0)
       {if(_zo_ && ! match)switch$0 = 1}
      else
       if(! _zo_ && match)switch$0 = 1;
      return switch$0?invalid_arg(cst_Bytes_extend):c}
    function extend(s,left,right)
     {var
       len=symbol$1(symbol$1(caml_ml_bytes_length(s),left),right),
       r=caml_create_bytes(len);
      if(0 <= left)
       var dstoff=left,srcoff=0;
      else
       var dstoff=0,srcoff=- left | 0;
      var cpylen=min(caml_ml_bytes_length(s) - srcoff | 0,len - dstoff | 0);
      if(0 < cpylen)caml_blit_bytes(s,srcoff,r,dstoff,cpylen);
      return r}
    function fill(s,ofs,len,c)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_fill_bytes(s,ofs,len,c);
      return invalid_arg(cst_String_fill_Bytes_fill)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_Bytes_blit)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_String_blit_Bytes_blit_str)}
    function iter$3(f,a)
     {var _zm_=caml_ml_bytes_length(a) - 1 | 0,_zl_=0;
      if(! (_zm_ < 0))
       {var i=_zl_;
        for(;;)
         {caml_call1(f,caml_bytes_unsafe_get(a,i));
          var _zn_=i + 1 | 0;
          if(_zm_ !== i){var i=_zn_;continue}
          break}}
      return 0}
    function iteri$0(f,a)
     {var _zj_=caml_ml_bytes_length(a) - 1 | 0,_zi_=0;
      if(! (_zj_ < 0))
       {var i=_zi_;
        for(;;)
         {caml_call2(f,i,caml_bytes_unsafe_get(a,i));
          var _zk_=i + 1 | 0;
          if(_zj_ !== i){var i=_zk_;continue}
          break}}
      return 0}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_bytes_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _zf_=param[1];
            if(param[2])
             {var
               tl=param[2],
               x=(caml_ml_bytes_length(_zf_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_Bytes_concat),
               acc=acc$0,
               param=tl;
              continue}
            var _zh_=caml_ml_bytes_length(_zf_) + acc | 0}
          else
           var _zh_=acc;
          var dst=caml_create_bytes(_zh_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _zg_=param$0[1];
              if(param$0[2])
               {var tl$0=param$0[2];
                caml_blit_bytes(_zg_,0,dst,pos,caml_ml_bytes_length(_zg_));
                caml_blit_bytes
                 (sep,0,dst,pos + caml_ml_bytes_length(_zg_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_bytes_length(_zg_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=tl$0;
                continue}
              caml_blit_bytes(_zg_,0,dst,pos,caml_ml_bytes_length(_zg_));
              return dst}
            return dst}}}
      return empty$0}
    function cat(s1,s2)
     {var
       l1=caml_ml_bytes_length(s1),
       l2=caml_ml_bytes_length(s2),
       r=caml_create_bytes(l1 + l2 | 0);
      caml_blit_bytes(s1,0,r,0,l1);
      caml_blit_bytes(s2,0,r,l1,l2);
      return r}
    function is_space(param)
     {var _ze_=param - 9 | 0,switch$0=0;
      if(4 < _ze_ >>> 0)
       {if(23 === _ze_)switch$0 = 1}
      else
       if(2 !== _ze_)switch$0 = 1;
      return switch$0?1:0}
    function trim(s)
     {var len=caml_ml_bytes_length(s),i=[0,0];
      for(;;)
       {if(i[1] < len && is_space(caml_bytes_unsafe_get(s,i[1])))
         {i[1]++;continue}
        var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s,j[1])))
           {j[1] += -1;continue}
          return i[1] <= j[1]?sub(s,i[1],(j[1] - i[1] | 0) + 1 | 0):empty$0}}}
    function escaped$0(s)
     {var n=[0,0],_y9_=caml_ml_bytes_length(s) - 1 | 0,_y8_=0;
      if(! (_y9_ < 0))
       {var i$0=_y8_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _zb_=match - 34 | 0,switch$1=0;
            if(58 < _zb_ >>> 0)
             {if(93 <= _zb_)switch$1 = 1}
            else
             if(56 < (_zb_ - 1 | 0) >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _zc_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _zc_=4;break;case 1:var _zc_=2;break}
          n[1] = n[1] + _zc_ | 0;
          var _zd_=i$0 + 1 | 0;
          if(_y9_ !== i$0){var i$0=_zd_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return copy(s);
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _y$_=caml_ml_bytes_length(s) - 1 | 0,_y__=0;
      if(! (_y$_ < 0))
       {var i=_y__;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _za_=i + 1 | 0;
          if(_y$_ !== i){var i=_za_;continue}
          break}}
      return s$0}
    function map$3(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_y6_=l - 1 | 0,_y5_=0;
      if(! (_y6_ < 0))
       {var i=_y5_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _y7_=i + 1 | 0;
          if(_y6_ !== i){var i=_y7_;continue}
          break}}
      return r}
    function mapi$0(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_y3_=l - 1 | 0,_y2_=0;
      if(! (_y3_ < 0))
       {var i=_y2_;
        for(;;)
         {caml_bytes_unsafe_set
           (r,i,caml_call2(f,i,caml_bytes_unsafe_get(s,i)));
          var _y4_=i + 1 | 0;
          if(_y3_ !== i){var i=_y4_;continue}
          break}}
      return r}
    function uppercase_ascii$0(s){return map$3(uppercase_ascii,s)}
    function lowercase_ascii$0(s){return map$3(lowercase_ascii,s)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function capitalize_ascii(s){return apply1(uppercase_ascii,s)}
    function uncapitalize_ascii(s){return apply1(lowercase_ascii,s)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index(s,c){return index_rec(s,caml_ml_bytes_length(s),0,c)}
    function index_rec_opt(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt(s,c)
     {return index_rec_opt(s,caml_ml_bytes_length(s),0,c)}
    function index_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in)}
    function index_from_opt(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte)}
    function rindex_rec(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex(s,c)
     {return rindex_rec(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))return rindex_rec(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r)}
    function rindex_rec_opt(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt(s,c)
     {return rindex_rec_opt(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from_opt(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))
       return rindex_rec_opt(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt)}
    function contains_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _y0_=1;return _y0_}
       catch(_y1_)
        {_y1_ = caml_wrap_exception(_y1_);
         if(_y1_ === Not_found)return 0;
         throw _y1_}
      return invalid_arg(cst_String_contains_from_Bytes)}
    function contains(s,c){return contains_from(s,0,c)}
    function rcontains_from(s,i,c)
     {if(0 <= i && ! (caml_ml_bytes_length(s) <= i))
       try
        {rindex_rec(s,i,c);var _yY_=1;return _yY_}
       catch(_yZ_)
        {_yZ_ = caml_wrap_exception(_yZ_);
         if(_yZ_ === Not_found)return 0;
         throw _yZ_}
      return invalid_arg(cst_String_rcontains_from_Byte)}
    function compare$4(x,y){return runtime.caml_bytes_compare(x,y)}
    function uppercase$0(s){return map$3(uppercase,s)}
    function lowercase$0(s){return map$3(lowercase,s)}
    function capitalize(s){return apply1(uppercase,s)}
    function uncapitalize(s){return apply1(lowercase,s)}
    function to_seq$2(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_yW_=i + 1 | 0;
        return [0,x,function(_yX_){return aux(_yW_,_yX_)}]}
      var _yU_=0;
      return function(_yV_){return aux(_yU_,_yV_)}}
    function to_seqi(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_yS_=i + 1 | 0;
        return [0,[0,i,x],function(_yT_){return aux(_yS_,_yT_)}]}
      var _yQ_=0;
      return function(_yR_){return aux(_yQ_,_yR_)}}
    function of_seq$0(i)
     {var n=[0,0],buf=[0,make(256,0)];
      iter
       (function(c)
         {if(n[1] === caml_ml_bytes_length(buf[1]))
           {var
             new_len=
              min(2 * caml_ml_bytes_length(buf[1]) | 0,max_string_length);
            if(caml_ml_bytes_length(buf[1]) === new_len)
             failwith(cst_Bytes_of_seq_cannot_grow_b);
            var new_buf=make(new_len,0);
            blit(buf[1],0,new_buf,0,n[1]);
            buf[1] = new_buf}
          caml_bytes_set(buf[1],n[1],c);
          n[1]++;
          return 0},
        i);
      return sub(buf[1],0,n[1])}
    function get_int8(b,i){return caml_bytes_get(b,i) << 24 >> 24}
    function get_uint16_le(b,i){return caml_bytes_get16(b,i)}
    function get_uint16_be(b,i){return caml_bswap16(caml_bytes_get16(b,i))}
    function get_int16_ne(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_le(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_be(b,i){return get_uint16_be(b,i) << 16 >> 16}
    function get_int32_le(b,i){return caml_bytes_get32(b,i)}
    function get_int32_be(b,i){return caml_int32_bswap(caml_bytes_get32(b,i))}
    function get_int64_le(b,i){return caml_bytes_get64(b,i)}
    function get_int64_be(b,i){return caml_int64_bswap(caml_bytes_get64(b,i))}
    function set_int16_le(b,i,x){return caml_bytes_set16(b,i,x)}
    function set_int16_be(b,i,x){return caml_bytes_set16(b,i,caml_bswap16(x))}
    function set_int32_le(b,i,x){return caml_bytes_set32(b,i,x)}
    function set_int32_be(b,i,x)
     {return caml_bytes_set32(b,i,caml_int32_bswap(x))}
    function set_int64_le(b,i,x){return caml_bytes_set64(b,i,x)}
    function set_int64_be(b,i,x)
     {return caml_bytes_set64(b,i,caml_int64_bswap(x))}
    var
     set_uint8=caml_bytes_set,
     set_uint16_ne=caml_bytes_set16,
     set_int64_ne=caml_bytes_set64,
     set_int32_ne=caml_bytes_set32,
     set_int16_ne=caml_bytes_set16,
     set_int8=caml_bytes_set,
     get_int64_ne=caml_bytes_get64,
     get_int32_ne=caml_bytes_get32,
     get_uint16_ne=caml_bytes_get16,
     get_uint8=caml_bytes_get,
     unsafe_of_string=caml_bytes_of_string,
     unsafe_to_string=caml_string_of_bytes,
     equal$4=runtime.caml_bytes_equal,
     include$0=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string$1,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$3,
       iteri$0,
       map$3,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$4,
       equal$4,
       unsafe_to_string,
       unsafe_of_string,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le];
    caml_register_global(763,include$0,"Stdlib__bytes");
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function init$1(n,f){return caml_string_of_bytes(init$0(n,f))}
    function copy$0(s)
     {return caml_string_of_bytes(copy(caml_bytes_of_string(s)))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat$0(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _yN_=param[1];
            if(param[2])
             {var
               tl=param[2],
               x=(caml_ml_string_length(_yN_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_String_concat),
               acc=acc$0,
               param=tl;
              continue}
            var _yP_=caml_ml_string_length(_yN_) + acc | 0}
          else
           var _yP_=acc;
          var dst=caml_create_bytes(_yP_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _yO_=param$0[1];
              if(param$0[2])
               {var tl$0=param$0[2];
                caml_blit_string(_yO_,0,dst,pos,caml_ml_string_length(_yO_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_yO_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_yO_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=tl$0;
                continue}
              caml_blit_string(_yO_,0,dst,pos,caml_ml_string_length(_yO_))}
            return caml_string_of_bytes(dst)}}}
      return cst$3}
    function iter$4(f,s)
     {var _yL_=caml_ml_string_length(s) - 1 | 0,_yK_=0;
      if(! (_yL_ < 0))
       {var i=_yK_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _yM_=i + 1 | 0;
          if(_yL_ !== i){var i=_yM_;continue}
          break}}
      return 0}
    function iteri$1(f,s)
     {var _yI_=caml_ml_string_length(s) - 1 | 0,_yH_=0;
      if(! (_yI_ < 0))
       {var i=_yH_;
        for(;;)
         {caml_call2(f,i,caml_string_unsafe_get(s,i));
          var _yJ_=i + 1 | 0;
          if(_yI_ !== i){var i=_yJ_;continue}
          break}}
      return 0}
    function map$4(f,s)
     {return caml_string_of_bytes(map$3(f,caml_bytes_of_string(s)))}
    function mapi$1(f,s)
     {return caml_string_of_bytes(mapi$0(f,caml_bytes_of_string(s)))}
    function is_space$0(param)
     {var _yG_=param - 9 | 0,switch$0=0;
      if(4 < _yG_ >>> 0)
       {if(23 === _yG_)switch$0 = 1}
      else
       if(2 !== _yG_)switch$0 = 1;
      return switch$0?1:0}
    function trim$0(s)
     {if(caml_string_equal(s,cst$4))return s;
      if
       (!
        is_space$0(caml_string_unsafe_get(s,0))
        &&
        !
        is_space$0(caml_string_unsafe_get(s,caml_ml_string_length(s) - 1 | 0)))
       return s;
      return caml_string_of_bytes(trim(caml_bytes_of_string(s)))}
    function escaped$1(s)
     {var n=caml_ml_string_length(s),i=0;
      for(;;)
       {if(n <= i)return s;
        var match=caml_string_unsafe_get(s,i),_yF_=match - 32 | 0,switch$0=0;
        if(59 < _yF_ >>> 0)
         {if(33 < (_yF_ - 61 | 0) >>> 0)switch$0 = 1}
        else
         if(2 === _yF_)switch$0 = 1;
        if(switch$0)
         return caml_string_of_bytes(escaped$0(caml_bytes_of_string(s)));
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function index_rec$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index$0(s,c){return index_rec$0(s,caml_ml_string_length(s),0,c)}
    function index_rec_opt$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt$0(s,c)
     {return index_rec_opt$0(s,caml_ml_string_length(s),0,c)}
    function index_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in$0)}
    function index_from_opt$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte$0)}
    function rindex_rec$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex$0(s,c)
     {return rindex_rec$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r$0)}
    function rindex_rec_opt$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt$0(s,c)
     {return rindex_rec_opt$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from_opt$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec_opt$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt$0)}
    function contains_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec$0(s,l,i,c);var _yD_=1;return _yD_}
       catch(_yE_)
        {_yE_ = caml_wrap_exception(_yE_);
         if(_yE_ === Not_found)return 0;
         throw _yE_}
      return invalid_arg(cst_String_contains_from_Bytes$0)}
    function contains$0(s,c){return contains_from$0(s,0,c)}
    function rcontains_from$0(s,i,c)
     {if(0 <= i && ! (caml_ml_string_length(s) <= i))
       try
        {rindex_rec$0(s,i,c);var _yB_=1;return _yB_}
       catch(_yC_)
        {_yC_ = caml_wrap_exception(_yC_);
         if(_yC_ === Not_found)return 0;
         throw _yC_}
      return invalid_arg(cst_String_rcontains_from_Byte$0)}
    function uppercase_ascii$1(s)
     {return caml_string_of_bytes(uppercase_ascii$0(caml_bytes_of_string(s)))}
    function lowercase_ascii$1(s)
     {return caml_string_of_bytes(lowercase_ascii$0(caml_bytes_of_string(s)))}
    function capitalize_ascii$0(s)
     {return caml_string_of_bytes(capitalize_ascii(caml_bytes_of_string(s)))}
    function uncapitalize_ascii$0(s)
     {return caml_string_of_bytes(uncapitalize_ascii(caml_bytes_of_string(s)))}
    function compare$5(x,y){return caml_string_compare(x,y)}
    function split_on_char(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _yx_=caml_ml_string_length(s) - 1 | 0;
      if(! (_yx_ < 0))
       {var i=_yx_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === sep)
           {var _yz_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_yz_];
            j[1] = i}
          var _yA_=i - 1 | 0;
          if(0 !== i){var i=_yA_;continue}
          break}}
      var _yy_=r[1];
      return [0,sub$0(s,0,j[1]),_yy_]}
    function uppercase$1(s)
     {return caml_string_of_bytes(uppercase$0(caml_bytes_of_string(s)))}
    function lowercase$1(s)
     {return caml_string_of_bytes(lowercase$0(caml_bytes_of_string(s)))}
    function capitalize$0(s)
     {return caml_string_of_bytes(capitalize(caml_bytes_of_string(s)))}
    function uncapitalize$0(s)
     {return caml_string_of_bytes(uncapitalize(caml_bytes_of_string(s)))}
    function to_seq$3(s){return to_seq$2(caml_bytes_of_string(s))}
    function to_seqi$0(s){return to_seqi(caml_bytes_of_string(s))}
    function of_seq$1(g){return caml_string_of_bytes(of_seq$0(g))}
    var
     equal$5=caml_string_equal,
     include$1=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$4,
       iteri$1,
       map$4,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$5,
       equal$5,
       split_on_char,
       to_seq$3,
       to_seqi$0,
       of_seq$1];
    caml_register_global(764,include$1,"Stdlib__string");
    function equal$6(param,_yw_){return 1}
    function compare$6(param,_yv_){return 0}
    function to_string$2(param){return cst$5}
    var Stdlib_unit=[0,equal$6,compare$6,to_string$2];
    caml_register_global(765,Stdlib_unit,"Stdlib__unit");
    function to_buffer(buff,ofs,len,v,flags)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buff) - len | 0) < ofs))
       return runtime.caml_output_value_to_buffer(buff,ofs,len,v,flags);
      return invalid_arg(cst_Marshal_to_buffer_substrin)}
    var header_size=20;
    function data_size(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       return caml_marshal_data_size(buff,ofs);
      return invalid_arg(cst_Marshal_data_size)}
    function total_size(buff,ofs){return 20 + data_size(buff,ofs) | 0}
    function from_bytes(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       {var len=caml_marshal_data_size(buff,ofs);
        return (caml_ml_bytes_length(buff) - (20 + len | 0) | 0) < ofs
                ?invalid_arg(cst_Marshal_from_bytes$0)
                :runtime.caml_input_value_from_bytes(buff,ofs)}
      return invalid_arg(cst_Marshal_from_bytes)}
    function from_string(buff,ofs)
     {return from_bytes(caml_bytes_of_string(buff),ofs)}
    var
     Stdlib_marshal=
      [0,
       caml_output_value,
       to_buffer,
       caml_input_value,
       from_bytes,
       from_string,
       header_size,
       data_size,
       total_size];
    caml_register_global(766,Stdlib_marshal,"Stdlib__marshal");
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    function double_field(x,i){return caml_array_get(x,i)}
    function set_double_field(x,i,v){return caml_array_set(x,i,v)}
    function marshal(obj){return runtime.caml_output_value_to_bytes(obj,0)}
    function unmarshal(str,pos)
     {var _yu_=pos + total_size(str,pos) | 0;
      return [0,from_bytes(str,pos),_yu_]}
    var
     first_non_constant_constructor=0,
     last_non_constant_constructor_=245,
     lazy_tag=246,
     closure_tag=247,
     object_tag=248,
     infix_tag=249,
     forward_tag=250,
     no_scan_tag=251,
     abstract_tag=251,
     string_tag=252,
     double_tag=253,
     double_array_tag=254,
     custom_tag=255,
     int_tag=1000,
     out_of_heap_tag=1001,
     unaligned_tag=1002;
    function of_val(x)
     {var switch$0=0;
      if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1)
       {var slot=x[1];switch$0 = 1}
      if(! switch$0)var slot=x;
      var switch$1=0;
      if(is_block(slot) && caml_obj_tag(slot) === 248)
       {var name=slot[1];switch$1 = 1}
      if(! switch$1)var name=invalid_arg(cst_Obj_extension_constructor$0);
      return caml_obj_tag(name) === 252
              ?slot
              :invalid_arg(cst_Obj_extension_constructor)}
    function name(slot){return slot[1]}
    function id(slot){return slot[2]}
    var
     Extension_constructor=[0,of_val,name,id],
     extension_constructor=Extension_constructor[1],
     extension_name=Extension_constructor[2],
     extension_id=Extension_constructor[3],
     max_ephe_length=max_array_length - 2 | 0;
    function create(l)
     {var _ys_=0 <= l?1:0,_yt_=_ys_?l <= max_ephe_length?1:0:_ys_;
      if(1 - _yt_)invalid_arg(cst_Obj_Ephemeron_create);
      return runtime.caml_ephe_create(l)}
    function length$0(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset(e,o,msg)
     {var _yp_=0 <= o?1:0,_yq_=_yp_?o < length$0(e)?1:0:_yp_,_yr_=1 - _yq_;
      return _yr_?invalid_arg(msg):_yr_}
    function get_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key);
      return runtime.caml_ephe_get_key(e,o)}
    function get_key_copy(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key_copy);
      return runtime.caml_ephe_get_key_copy(e,o)}
    function set_key(e,o,x)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_set_key);
      return caml_ephe_set_key(e,o,x)}
    function unset_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_unset_key);
      return caml_ephe_unset_key(e,o)}
    function check_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_check_key);
      return runtime.caml_ephe_check_key(e,o)}
    function blit_key(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$0(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$0(e2) - l | 0) < o2))
       {var
         _yn_=0 !== l?1:0,
         _yo_=_yn_?runtime.caml_ephe_blit_key(e1,o1,e2,o2,l):_yn_;
        return _yo_}
      return invalid_arg(cst_Obj_Ephemeron_blit_key)}
    var
     _q_=runtime.caml_ephe_blit_data,
     _r_=runtime.caml_ephe_check_data,
     _s_=
      [0,
       create,
       length$0,
       get_key,
       get_key_copy,
       set_key,
       unset_key,
       check_key,
       blit_key,
       runtime.caml_ephe_get_data,
       runtime.caml_ephe_get_data_copy,
       runtime.caml_ephe_set_data,
       function(_ym_){return runtime.caml_ephe_unset_data(_ym_)},
       _r_,
       _q_,
       max_ephe_length],
     Stdlib_obj=
      [0,
       is_block,
       double_field,
       set_double_field,
       first_non_constant_constructor,
       last_non_constant_constructor_,
       lazy_tag,
       closure_tag,
       object_tag,
       infix_tag,
       forward_tag,
       no_scan_tag,
       abstract_tag,
       string_tag,
       double_tag,
       double_array_tag,
       custom_tag,
       custom_tag,
       int_tag,
       out_of_heap_tag,
       unaligned_tag,
       Extension_constructor,
       extension_constructor,
       extension_name,
       extension_id,
       marshal,
       unmarshal,
       _s_];
    caml_register_global(767,Stdlib_obj,"Stdlib__obj");
    var make_float=runtime.caml_make_float_vect,Floatarray=[0];
    function init$2(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_yk_=l - 1 | 0,_yj_=1;
        if(! (_yk_ < 1))
         {var i=_yj_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _yl_=i + 1 | 0;
            if(_yk_ !== i){var i=_yl_;continue}
            break}}
        return res}
      return invalid_arg(cst_Array_init)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_yh_=sx - 1 | 0,_yg_=0;
      if(! (_yh_ < 0))
       {var x=_yg_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _yi_=x + 1 | 0;
          if(_yh_ !== x){var x=_yi_;continue}
          break}}
      return res}
    function copy$1(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function append$1(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?copy$1(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :runtime.caml_array_append(a1,a2)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return caml_array_sub(a,ofs,len);
      return invalid_arg(cst_Array_sub)}
    function fill$0(a,ofs,len,v)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return runtime.caml_array_fill(a,ofs,len,v);
      return invalid_arg(cst_Array_fill)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((a1.length - 1 - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((a2.length - 1 - len | 0) < ofs2))
       return runtime.caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(cst_Array_blit)}
    function iter$5(f,a)
     {var _ye_=a.length - 1 - 1 | 0,_yd_=0;
      if(! (_ye_ < 0))
       {var i=_yd_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _yf_=i + 1 | 0;
          if(_ye_ !== i){var i=_yf_;continue}
          break}}
      return 0}
    function iter2$0(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Array_iter2_arrays_must_ha);
      var _yb_=a.length - 1 - 1 | 0,_ya_=0;
      if(! (_yb_ < 0))
       {var i=_ya_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _yc_=i + 1 | 0;
          if(_yb_ !== i){var i=_yc_;continue}
          break}}
      return 0}
    function map$5(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_x__=l - 1 | 0,_x9_=1;
      if(! (_x__ < 1))
       {var i=_x9_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _x$_=i + 1 | 0;
          if(_x__ !== i){var i=_x$_;continue}
          break}}
      return r}
    function map2$0(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Array_map2_arrays_must_hav);
      if(0 === la)return [0];
      var r=caml_make_vect(la,caml_call2(f,a[1],b[1])),_x7_=la - 1 | 0,_x6_=1;
      if(! (_x7_ < 1))
       {var i=_x6_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _x8_=i + 1 | 0;
          if(_x7_ !== i){var i=_x8_;continue}
          break}}
      return r}
    function iteri$2(f,a)
     {var _x4_=a.length - 1 - 1 | 0,_x3_=0;
      if(! (_x4_ < 0))
       {var i=_x3_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _x5_=i + 1 | 0;
          if(_x4_ !== i){var i=_x5_;continue}
          break}}
      return 0}
    function mapi$2(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_x1_=l - 1 | 0,_x0_=1;
      if(! (_x1_ < 1))
       {var i=_x0_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _x2_=i + 1 | 0;
          if(_x1_ !== i){var i=_x2_;continue}
          break}}
      return r}
    function to_list$1(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function list_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function of_list(l)
     {if(l)
       {var
         tl=l[2],
         hd=l[1],
         a=caml_make_vect(list_length(0,l),hd),
         i=1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i + 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    function fold_left$1(f,x,a)
     {var r=[0,x],_xY_=a.length - 1 - 1 | 0,_xX_=0;
      if(! (_xY_ < 0))
       {var i=_xX_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _xZ_=i + 1 | 0;
          if(_xY_ !== i){var i=_xZ_;continue}
          break}}
      return r[1]}
    function fold_right$0(f,a,x)
     {var r=[0,x],_xV_=a.length - 1 - 1 | 0;
      if(! (_xV_ < 0))
       {var i=_xV_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _xW_=i - 1 | 0;
          if(0 !== i){var i=_xW_;continue}
          break}}
      return r[1]}
    function exists$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function for_all2$0(p,l1,l2)
     {var n1=l1.length - 1,n2=l2.length - 1;
      if(n1 !== n2)return invalid_arg(cst_Array_for_all2);
      var i=0;
      for(;;)
       {if(i === n1)return 1;
        if(caml_call2(p,l1[1 + i],l2[1 + i]))
         {var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function exists2$0(p,l1,l2)
     {var n1=l1.length - 1,n2=l2.length - 1;
      if(n1 !== n2)return invalid_arg(cst_Array_exists2);
      var i=0;
      for(;;)
       {if(i === n1)return 0;
        if(caml_call2(p,l1[1 + i],l2[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function mem$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function memq$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x === a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom=[248,cst_Stdlib_Array_Bottom,caml_fresh_oo_id(0)];
    function sort(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _xO_=i31 + 1 | 0,_xP_=caml_check_bound(a,_xO_)[1 + _xO_];
          if(caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_xP_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _xQ_=i31 + 2 | 0,
           _xR_=caml_check_bound(a,_xQ_)[1 + _xQ_],
           _xS_=x[1];
          if(caml_call2(cmp,caml_check_bound(a,_xS_)[1 + _xS_],_xR_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _xT_=i31 + 1 | 0,_xU_=caml_check_bound(a,_xT_)[1 + _xT_];
          if(! (0 <= caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_xU_)))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_check_bound(a,j)[1 + j],e))
           {var _xN_=caml_check_bound(a,j)[1 + j];
            caml_check_bound(a,i$0)[1 + i$0] = _xN_;
            var i$0=j;
            continue}
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function trickle(l,i,e)
       {try
         {var _xM_=trickledown(l,i,e);return _xM_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom)
           {var i$0=exn[2];caml_check_bound(a,i$0)[1 + i$0] = e;return 0}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_xL_=caml_check_bound(a,i$1)[1 + i$1];
          caml_check_bound(a,i$0)[1 + i$0] = _xL_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _xK_=bubbledown(l,i);return _xK_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_xC_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_xC_ < 0))
       {var i$2=_xC_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[1 + i$2]);
          var _xJ_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_xJ_;continue}
          break}}
      var _xD_=l - 1 | 0;
      if(! (_xD_ < 2))
       {var i$0=_xD_;
        a:
        for(;;)
         {var
           e$0=caml_check_bound(a,i$0)[1 + i$0],
           _xH_=caml_check_bound(a,0)[1];
          caml_check_bound(a,i$0)[1 + i$0] = _xH_;
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_t_];
            if
             (0 <= caml_call2(cmp,caml_check_bound(a,father)[1 + father],e$0))
             caml_check_bound(a,i)[1 + i] = e$0;
            else
             {var _xB_=caml_check_bound(a,father)[1 + father];
              caml_check_bound(a,i)[1 + i] = _xB_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _xI_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_xI_;continue a}
            break}
          break}}
      var _xE_=1 < l?1:0;
      if(_xE_)
       {var e=caml_check_bound(a,1)[2],_xF_=caml_check_bound(a,0)[1];
        caml_check_bound(a,1)[2] = _xF_;
        caml_check_bound(a,0)[1] = e;
        var _xG_=0}
      else
       var _xG_=_xE_;
      return _xG_}
    function fast_sort$0(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_check_bound(src2,src2ofs)[1 + src2ofs],
         s1$1=caml_check_bound(a,src1ofs)[1 + src1ofs],
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_check_bound(dst,d)[1 + d] = s2;
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_check_bound(src2,i2$0)[1 + i2$0],
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$1(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_check_bound(dst,d)[1 + d] = s1;
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_check_bound(a,i1$0)[1 + i1$0],
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$1(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _xt_=len - 1 | 0,_xs_=0;
        if(! (_xt_ < 0))
         {var i=_xs_;
          a:
          for(;;)
           {var
             _xu_=srcofs + i | 0,
             e=caml_check_bound(a,_xu_)[1 + _xu_],
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if(dstofs <= j[1])
               {var _xv_=j[1];
                if(0 < caml_call2(cmp,caml_check_bound(dst,_xv_)[1 + _xv_],e))
                 {var
                   _xw_=j[1],
                   _xx_=caml_check_bound(dst,_xw_)[1 + _xw_],
                   _xy_=j[1] + 1 | 0;
                  caml_check_bound(dst,_xy_)[1 + _xy_] = _xx_;
                  j[1] += -1;
                  continue}}
              var _xz_=j[1] + 1 | 0;
              caml_check_bound(dst,_xz_)[1 + _xz_] = e;
              var _xA_=i + 1 | 0;
              if(_xt_ !== i){var i=_xA_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var
       l1=l / 2 | 0,
       l2=l - l1 | 0,
       t=caml_make_vect(l2,caml_check_bound(a,0)[1]);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$4(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_xq_=i + 1 | 0;
          return [0,x,function(_xr_){return aux(_xq_,_xr_)}]}
        return 0}
      var _xo_=0;
      return function(_xp_){return aux(_xo_,_xp_)}}
    function to_seqi$1(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_xm_=i + 1 | 0;
          return [0,[0,i,x],function(_xn_){return aux(_xm_,_xn_)}]}
        return 0}
      var _xk_=0;
      return function(_xl_){return aux(_xk_,_xl_)}}
    function of_seq$2(i$2)
     {var _xj_=0,l=fold_left(function(acc,x){return [0,x,acc]},_xj_,i$2);
      if(l)
       {var
         tl=l[2],
         hd=l[1],
         len=list_length(0,l),
         a=caml_make_vect(len,hd),
         i$1=len - 2 | 0,
         i=i$1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i - 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    var
     concat$1=caml_array_concat,
     include$2=
      [0,
       make_float,
       init$2,
       create_matrix,
       create_matrix,
       append$1,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       iteri$2,
       map$5,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       for_all$0,
       exists$0,
       for_all2$0,
       exists2$0,
       mem$0,
       memq$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(768,include$2,"Stdlib__array");
    var zero=0.,one=1.,minus_one=-1.;
    function is_finite(x){return x - x == 0.?1:0}
    function is_infinite(x){return 1. / x == 0.?1:0}
    function is_nan(x){return x != x?1:0}
    var pi=3.14159265358979312;
    function is_integer(x)
     {var _xi_=x == runtime.caml_trunc_float(x)?1:0;
      return _xi_?is_finite(x):_xi_}
    function succ$0(x){return caml_nextafter_float(x,infinity)}
    function pred$0(x){return caml_nextafter_float(x,neg_infinity)}
    function equal$7(x,y){return 0 === caml_float_compare(x,y)?1:0}
    function min$1(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?x:y}
      return y != y?y:x}
    function max$1(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?y:x}
      return x != x?x:y}
    function min_max(x,y)
     {if(x == x && y == y)
       {if(! (x < y))
         {var switch$0=0;
          if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
          if(switch$0)return [0,y,x]}
        return [0,x,y]}
      return [0,nan,nan]}
    function min_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?x:y}
      return x != x?y:x}
    function max_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?y:x}
      return y != y?x:y}
    function min_max_num(x,y)
     {if(x != x)return [0,y,y];
      if(y != y)return [0,x,x];
      if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return [0,y,x]}
      return [0,x,y]}
    function hash$0(x){return caml_hash(10,100,0,x)}
    function unsafe_fill(a,ofs,len,v)
     {var _xg_=(ofs + len | 0) - 1 | 0;
      if(! (_xg_ < ofs))
       {var i=ofs;
        for(;;)
         {a[1 + i] = v;
          var _xh_=i + 1 | 0;
          if(_xg_ !== i){var i=_xh_;continue}
          break}}
      return 0}
    function unsafe_blit(src,sofs,dst,dofs,len)
     {var _xe_=len - 1 | 0,_xd_=0;
      if(! (_xe_ < 0))
       {var i=_xd_;
        for(;;)
         {dst[1 + (dofs + i | 0)] = src[1 + (sofs + i | 0)];
          var _xf_=i + 1 | 0;
          if(_xe_ !== i){var i=_xf_;continue}
          break}}
      return 0}
    function check(a,ofs,len,msg)
     {var _w$_=ofs < 0?1:0;
      if(_w$_)
       var _xa_=_w$_;
      else
       {var _xb_=len < 0?1:0;
        if(_xb_)
         var _xa_=_xb_;
        else
         var
          _xc_=(ofs + len | 0) < 0?1:0,
          _xa_=_xc_ || (a.length - 1 < (ofs + len | 0)?1:0)}
      return _xa_?invalid_arg(msg):_xa_}
    function make$1(n,v)
     {var result=caml_floatarray_create(n);
      unsafe_fill(result,0,n,v);
      return result}
    function init$3(l,f)
     {if(0 <= l)
       {var res=caml_floatarray_create(l),_w9_=l - 1 | 0,_w8_=0;
        if(! (_w9_ < 0))
         {var i=_w8_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _w__=i + 1 | 0;
            if(_w9_ !== i){var i=_w__;continue}
            break}}
        return res}
      return invalid_arg(cst_Float_Array_init)}
    function append$2(a1,a2)
     {var
       l1=a1.length - 1,
       l2=a2.length - 1,
       result=caml_floatarray_create(l1 + l2 | 0);
      unsafe_blit(a1,0,result,0,l1);
      unsafe_blit(a2,0,result,l1,l2);
      return result}
    function concat$2(l)
     {var acc=0,param=l;
      for(;;)
       {if(param)
         {var
           tl=param[2],
           hd=param[1],
           x=hd.length - 1 + acc | 0,
           acc$0=acc <= x?x:invalid_arg(cst_Float_Array_concat),
           acc=acc$0,
           param=tl;
          continue}
        var result=caml_floatarray_create(acc),l$0=l,i=0;
        for(;;)
         {if(l$0)
           {var tl$0=l$0[2],hd$0=l$0[1],hlen=hd$0.length - 1;
            unsafe_blit(hd$0,0,result,i,hlen);
            var i$0=i + hlen | 0,l$0=tl$0,i=i$0;
            continue}
          if(i === acc)return result;
          throw [0,Assert_failure,_u_]}}}
    function sub$2(a,ofs,len)
     {check(a,ofs,len,cst_Float_Array_sub);
      var result=caml_floatarray_create(len);
      unsafe_blit(a,ofs,result,0,len);
      return result}
    function copy$2(a)
     {var l=a.length - 1,result=caml_floatarray_create(l);
      unsafe_blit(a,0,result,0,l);
      return result}
    function fill$1(a,ofs,len,v)
     {check(a,ofs,len,cst_Float_Array_fill);return unsafe_fill(a,ofs,len,v)}
    function blit$2(src,sofs,dst,dofs,len)
     {check(src,sofs,len,cst_Float_array_blit);
      check(dst,dofs,len,cst_Float_array_blit$0);
      return unsafe_blit(src,sofs,dst,dofs,len)}
    function to_list$2(a)
     {return init(a.length - 1,function(_w7_){return a[1 + _w7_]})}
    function of_list$0(l)
     {var result=caml_floatarray_create(length(l)),i=0,l$0=l;
      for(;;)
       {if(l$0)
         {var t=l$0[2],h=l$0[1];
          result[1 + i] = h;
          var i$0=i + 1 | 0,i=i$0,l$0=t;
          continue}
        return result}}
    function iter$6(f,a)
     {var _w5_=a.length - 1 - 1 | 0,_w4_=0;
      if(! (_w5_ < 0))
       {var i=_w4_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _w6_=i + 1 | 0;
          if(_w5_ !== i){var i=_w6_;continue}
          break}}
      return 0}
    function iter2$1(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Float_Array_iter2_arrays_m);
      var _w2_=a.length - 1 - 1 | 0,_w1_=0;
      if(! (_w2_ < 0))
       {var i=_w1_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _w3_=i + 1 | 0;
          if(_w2_ !== i){var i=_w3_;continue}
          break}}
      return 0}
    function map$6(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wZ_=l - 1 | 0,_wY_=0;
      if(! (_wZ_ < 0))
       {var i=_wY_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _w0_=i + 1 | 0;
          if(_wZ_ !== i){var i=_w0_;continue}
          break}}
      return r}
    function map2$1(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Float_Array_map2_arrays_mu);
      var r=caml_floatarray_create(la),_wW_=la - 1 | 0,_wV_=0;
      if(! (_wW_ < 0))
       {var i=_wV_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _wX_=i + 1 | 0;
          if(_wW_ !== i){var i=_wX_;continue}
          break}}
      return r}
    function iteri$3(f,a)
     {var _wT_=a.length - 1 - 1 | 0,_wS_=0;
      if(! (_wT_ < 0))
       {var i=_wS_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _wU_=i + 1 | 0;
          if(_wT_ !== i){var i=_wU_;continue}
          break}}
      return 0}
    function mapi$3(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wQ_=l - 1 | 0,_wP_=0;
      if(! (_wQ_ < 0))
       {var i=_wP_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _wR_=i + 1 | 0;
          if(_wQ_ !== i){var i=_wR_;continue}
          break}}
      return r}
    function fold_left$2(f,x,a)
     {var r=[0,x],_wN_=a.length - 1 - 1 | 0,_wM_=0;
      if(! (_wN_ < 0))
       {var i=_wM_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _wO_=i + 1 | 0;
          if(_wN_ !== i){var i=_wO_;continue}
          break}}
      return r[1]}
    function fold_right$1(f,a,x)
     {var r=[0,x],_wK_=a.length - 1 - 1 | 0;
      if(! (_wK_ < 0))
       {var i=_wK_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _wL_=i - 1 | 0;
          if(0 !== i){var i=_wL_;continue}
          break}}
      return r[1]}
    function exists$1(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$1(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function mem$1(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_float_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function mem_ieee(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x == a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom$0=[248,cst_Stdlib_Float_Array_Bottom,caml_fresh_oo_id(0)];
    function sort$0(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {if
           (caml_call2
             (cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))
            <
            0)
           x[1] = i31 + 1 | 0;
          if
           (caml_call2
             (cmp,caml_array_get(a,x[1]),caml_array_get(a,i31 + 2 | 0))
            <
            0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if
         ((i31 + 1 | 0)
          <
          l
          &&
          !
          (0
           <=
           caml_call2(cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))))
         return i31 + 1 | 0;
        if(i31 < l)return i31;
        throw [0,Bottom$0,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_array_get(a,j),e))
           {caml_array_set(a,i$0,caml_array_get(a,j));var i$0=j;continue}
          return caml_array_set(a,i$0,e)}}
      function trickle(l,i,e)
       {try
         {var _wJ_=trickledown(l,i,e);return _wJ_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0)
           {var i$0=exn[2];return caml_array_set(a,i$0,e)}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0);
          caml_array_set(a,i$0,caml_array_get(a,i$1));
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _wI_=bubbledown(l,i);return _wI_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_wC_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_wC_ < 0))
       {var i$2=_wC_;
        for(;;)
         {trickle(l,i$2,caml_array_get(a,i$2));
          var _wH_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_wH_;continue}
          break}}
      var _wD_=l - 1 | 0;
      if(! (_wD_ < 2))
       {var i$0=_wD_;
        a:
        for(;;)
         {var e$0=caml_array_get(a,i$0);
          caml_array_set(a,i$0,caml_array_get(a,0));
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_v_];
            if(0 <= caml_call2(cmp,caml_array_get(a,father),e$0))
             caml_array_set(a,i,e$0);
            else
             {caml_array_set(a,i,caml_array_get(a,father));
              if(0 < father){var i=father;continue}
              caml_array_set(a,0,e$0)}
            var _wG_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_wG_;continue a}
            break}
          break}}
      var _wE_=1 < l?1:0;
      if(_wE_)
       {var e=caml_array_get(a,1);
        caml_array_set(a,1,caml_array_get(a,0));
        var _wF_=caml_array_set(a,0,e)}
      else
       var _wF_=_wE_;
      return _wF_}
    function stable_sort(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_array_get(src2,src2ofs),
         s1$1=caml_array_get(a,src1ofs),
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_array_set(dst,d,s2);
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_array_get(src2,i2$0),
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$2(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_array_set(dst,d,s1);
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_array_get(a,i1$0),
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$2(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _wA_=len - 1 | 0,_wz_=0;
        if(! (_wA_ < 0))
         {var i=_wz_;
          a:
          for(;;)
           {var
             e=caml_array_get(a,srcofs + i | 0),
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if
               (dstofs
                <=
                j[1]
                &&
                0
                <
                caml_call2(cmp,caml_array_get(dst,j[1]),e))
               {caml_array_set(dst,j[1] + 1 | 0,caml_array_get(dst,j[1]));
                j[1] += -1;
                continue}
              caml_array_set(dst,j[1] + 1 | 0,e);
              var _wB_=i + 1 | 0;
              if(_wA_ !== i){var i=_wB_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var l1=l / 2 | 0,l2=l - l1 | 0,t=caml_floatarray_create(l2);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$5(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_wx_=i + 1 | 0;
          return [0,x,function(_wy_){return aux(_wx_,_wy_)}]}
        return 0}
      var _wv_=0;
      return function(_ww_){return aux(_wv_,_ww_)}}
    function to_seqi$2(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_wt_=i + 1 | 0;
          return [0,[0,i,x],function(_wu_){return aux(_wt_,_wu_)}]}
        return 0}
      var _wr_=0;
      return function(_ws_){return aux(_wr_,_ws_)}}
    function of_seq$3(i$2)
     {var
       _wq_=0,
       param$0=fold_left(function(acc,x){return [0,x,acc]},_wq_,i$2),
       len=length(param$0),
       a=caml_floatarray_create(len),
       i$1=len - 1 | 0,
       i=i$1,
       param=param$0;
      for(;;)
       {if(param)
         {var tl=param[2],hd=param[1];
          a[1 + i] = hd;
          var i$0=i - 1 | 0,i=i$0,param=tl;
          continue}
        return a}}
    function map_to_array(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_wo_=l - 1 | 0,_wn_=1;
      if(! (_wo_ < 1))
       {var i=_wn_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _wp_=i + 1 | 0;
          if(_wo_ !== i){var i=_wp_;continue}
          break}}
      return r}
    function map_from_array(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wl_=l - 1 | 0,_wk_=0;
      if(! (_wl_ < 0))
       {var i=_wk_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _wm_=i + 1 | 0;
          if(_wl_ !== i){var i=_wm_;continue}
          break}}
      return r}
    var
     _w_=caml_floatarray_create,
     _x_=caml_array_set,
     _y_=caml_array_get,
     _z_=
      [0,
       function(_wj_){return _wj_.length - 1},
       _y_,
       _x_,
       make$1,
       _w_,
       init$3,
       append$2,
       concat$2,
       sub$2,
       copy$2,
       fill$1,
       blit$2,
       to_list$2,
       of_list$0,
       iter$6,
       iteri$3,
       map$6,
       mapi$3,
       fold_left$2,
       fold_right$1,
       iter2$1,
       map2$1,
       for_all$1,
       exists$1,
       mem$1,
       mem_ieee,
       sort$0,
       stable_sort,
       stable_sort,
       to_seq$5,
       to_seqi$2,
       of_seq$3,
       map_to_array,
       map_from_array],
     _A_=caml_floatarray_create,
     _B_=caml_array_set,
     _C_=caml_array_get,
     Stdlib_float=
      [0,
       zero,
       one,
       minus_one,
       succ$0,
       pred$0,
       infinity,
       neg_infinity,
       nan,
       pi,
       max_float,
       min_float,
       epsilon,
       is_finite,
       is_infinite,
       is_nan,
       is_integer,
       of_string_opt,
       to_string,
       caml_float_compare,
       equal$7,
       min$1,
       max$1,
       min_max,
       min_num,
       max_num,
       min_max_num,
       hash$0,
       [0,
        function(_wi_){return _wi_.length - 1},
        _C_,
        _B_,
        make$1,
        _A_,
        init$3,
        append$2,
        concat$2,
        sub$2,
        copy$2,
        fill$1,
        blit$2,
        to_list$2,
        of_list$0,
        iter$6,
        iteri$3,
        map$6,
        mapi$3,
        fold_left$2,
        fold_right$1,
        iter2$1,
        map2$1,
        for_all$1,
        exists$1,
        mem$1,
        mem_ieee,
        sort$0,
        stable_sort,
        stable_sort,
        to_seq$5,
        to_seqi$2,
        of_seq$3,
        map_to_array,
        map_from_array],
       _z_];
    caml_register_global(769,Stdlib_float,"Stdlib__float");
    var zero$0=0,one$0=1,minus_one$0=-1;
    function abs$0(x){return 0 <= x?x:- x | 0}
    var max_int$0=2147483647,min_int$0=-2147483648;
    function lognot(x){return x ^ -1}
    function equal$8(_wh_,_wg_){return _wh_ === _wg_?1:0}
    var compare$7=caml_int_compare;
    function to_string$3(x){return caml_string_of_jsbytes("" + x)}
    var
     Stdlib_int=
      [0,
       zero$0,
       one$0,
       minus_one$0,
       abs$0,
       max_int$0,
       min_int$0,
       lognot,
       equal$8,
       compare$7,
       to_string$3];
    caml_register_global(770,Stdlib_int,"Stdlib__int");
    var zero$1=0,one$1=1,minus_one$1=-1;
    function succ$1(n){return n + 1 | 0}
    function pred$1(n){return n - 1 | 0}
    function abs$1(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$1=-2147483648,max_int$1=2147483647;
    function lognot$0(n){return n ^ -1}
    function unsigned_to_int(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$4(n){return caml_format_int(cst_d,n)}
    function of_string_opt$0(s)
     {try
       {var _we_=[0,caml_int_of_string(s)];return _we_}
      catch(_wf_)
       {_wf_ = caml_wrap_exception(_wf_);
        if(_wf_[1] === Failure)return 0;
        throw _wf_}}
    function compare$8(x,y){return caml_int_compare(x,y)}
    function equal$9(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function unsigned_div(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare(n,d)?one$1:zero$1;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare(r,d)?q + 1 | 0:q}
    function unsigned_rem(n,d){return n - caml_mul(unsigned_div(n,d),d) | 0}
    var
     Stdlib_int32=
      [0,
       zero$1,
       one$1,
       minus_one$1,
       unsigned_div,
       unsigned_rem,
       succ$1,
       pred$1,
       abs$1,
       max_int$1,
       min_int$1,
       lognot$0,
       unsigned_to_int,
       of_string_opt$0,
       to_string$4,
       compare$8,
       unsigned_compare,
       equal$9];
    caml_register_global(771,Stdlib_int32,"Stdlib__int32");
    function succ$2(n){return caml_int64_add(n,_D_)}
    function pred$2(n){return caml_int64_sub(n,_E_)}
    function abs$2(n)
     {return caml_greaterequal(n,_F_)?n:runtime.caml_int64_neg(n)}
    function lognot$1(n){return runtime.caml_int64_xor(n,_G_)}
    var max_int$3=caml_int64_of_int32(2147483647);
    function unsigned_to_int$0(n)
     {if
       (!
        (0 < caml_int64_compare(zero$2,n))
        &&
        !
        (0 < caml_int64_compare(n,max_int$3)))
       return [0,runtime.caml_int64_to_int32(n)];
      return 0}
    function to_string$5(n){return caml_int64_format(cst_d$0,n)}
    function of_string_opt$1(s)
     {try
       {var _wc_=[0,caml_int64_of_string(s)];return _wc_}
      catch(_wd_)
       {_wd_ = caml_wrap_exception(_wd_);
        if(_wd_[1] === Failure)return 0;
        throw _wd_}}
    function compare$9(x,y){return caml_int64_compare(x,y)}
    function equal$10(x,y){return 0 === caml_int64_compare(x,y)?1:0}
    function unsigned_compare$0(n,m)
     {return caml_int64_compare
              (caml_int64_sub(n,min_int$2),caml_int64_sub(m,min_int$2))}
    function unsigned_div$0(n,d)
     {if(caml_lessthan(d,zero$2))
       return 0 <= unsigned_compare$0(n,d)?one$2:zero$2;
      var
       q=
        caml_int64_shift_left
         (runtime.caml_int64_div
           (runtime.caml_int64_shift_right_unsigned(n,1),d),
          1),
       r=caml_int64_sub(n,caml_int64_mul(q,d));
      return 0 <= unsigned_compare$0(r,d)?succ$2(q):q}
    function unsigned_rem$0(n,d)
     {return caml_int64_sub(n,caml_int64_mul(unsigned_div$0(n,d),d))}
    var
     Stdlib_int64=
      [0,
       zero$2,
       one$2,
       minus_one$2,
       unsigned_div$0,
       unsigned_rem$0,
       succ$2,
       pred$2,
       abs$2,
       max_int$2,
       min_int$2,
       lognot$1,
       unsigned_to_int$0,
       of_string_opt$1,
       to_string$5,
       compare$9,
       unsigned_compare$0,
       equal$10];
    caml_register_global(772,Stdlib_int64,"Stdlib__int64");
    var zero$3=0,one$3=1,minus_one$3=-1;
    function succ$3(n){return n + 1 | 0}
    function pred$3(n){return n - 1 | 0}
    function abs$3(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$3=-2147483648,max_int$4=2147483647;
    function lognot$2(n){return n ^ -1}
    function unsigned_to_int$1(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$6(n){return caml_format_int(cst_d$1,n)}
    function of_string_opt$2(s)
     {try
       {var _wa_=[0,caml_int_of_string(s)];return _wa_}
      catch(_wb_)
       {_wb_ = caml_wrap_exception(_wb_);
        if(_wb_[1] === Failure)return 0;
        throw _wb_}}
    function compare$10(x,y){return caml_int_compare(x,y)}
    function equal$11(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare$1(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function unsigned_div$1(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare$1(n,d)?one$3:zero$3;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare$1(r,d)?q + 1 | 0:q}
    function unsigned_rem$1(n,d)
     {return n - caml_mul(unsigned_div$1(n,d),d) | 0}
    var
     Stdlib_nativeint=
      [0,
       zero$3,
       one$3,
       minus_one$3,
       unsigned_div$1,
       unsigned_rem$1,
       succ$3,
       pred$3,
       abs$3,
       match$1,
       max_int$4,
       min_int$3,
       lognot$2,
       unsigned_to_int$1,
       of_string_opt$2,
       to_string$6,
       compare$10,
       unsigned_compare$1,
       equal$11];
    caml_register_global(773,Stdlib_nativeint,"Stdlib__nativeint");
    function engine(tbl,state,buf)
     {var
       result=runtime.caml_lex_engine(tbl,state,buf),
       _v9_=0 <= result?1:0,
       _v__=_v9_?buf[12] !== dummy_pos?1:0:_v9_;
      if(_v__)
       {buf[11] = buf[12];
        var _v$_=buf[12];
        buf[12] = [0,_v$_[1],_v$_[2],_v$_[3],buf[4] + buf[6] | 0]}
      return result}
    function new_engine(tbl,state,buf)
     {var
       result=runtime.caml_new_lex_engine(tbl,state,buf),
       _v6_=0 <= result?1:0,
       _v7_=_v6_?buf[12] !== dummy_pos?1:0:_v6_;
      if(_v7_)
       {buf[11] = buf[12];
        var _v8_=buf[12];
        buf[12] = [0,_v8_[1],_v8_[2],_v8_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_function(opt,f)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _vS_=with_positions?zero_pos:dummy_pos,
       _vT_=with_positions?zero_pos:dummy_pos,
       aux_buffer=caml_create_bytes(512),
       _vU_=[0],
       _vV_=0,
       _vW_=0,
       _vX_=0,
       _vY_=0,
       _vZ_=0,
       _v0_=0,
       _v1_=0,
       _v2_=caml_create_bytes(1024);
      return [0,
              function(lexbuf)
               {var
                 read=
                  caml_call2(f,aux_buffer,caml_ml_bytes_length(aux_buffer)),
                 n=0 < read?read:(lexbuf[9] = 1,0);
                if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0))
                 {if
                   (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                    <=
                    caml_ml_bytes_length(lexbuf[2]))
                   blit
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   {var
                     newlen=
                      min
                       (2 * caml_ml_bytes_length(lexbuf[2]) | 0,max_string_length);
                    if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                     failwith(cst_Lexing_lex_refill_cannot_g);
                    var newbuf=caml_create_bytes(newlen);
                    blit(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                    lexbuf[2] = newbuf}
                  var s=lexbuf[5];
                  lexbuf[4] = lexbuf[4] + s | 0;
                  lexbuf[6] = lexbuf[6] - s | 0;
                  lexbuf[5] = 0;
                  lexbuf[7] = lexbuf[7] - s | 0;
                  lexbuf[3] = lexbuf[3] - s | 0;
                  var t=lexbuf[10],_v4_=t.length - 1 - 1 | 0,_v3_=0;
                  if(! (_v4_ < 0))
                   {var i=_v3_;
                    for(;;)
                     {var v=caml_check_bound(t,i)[1 + i];
                      if(0 <= v)caml_check_bound(t,i)[1 + i] = v - s | 0;
                      var _v5_=i + 1 | 0;
                      if(_v4_ !== i){var i=_v5_;continue}
                      break}}}
                blit(aux_buffer,0,lexbuf[2],lexbuf[3],n);
                lexbuf[3] = lexbuf[3] + n | 0;
                return 0},
              _v2_,
              _v1_,
              _v0_,
              _vZ_,
              _vY_,
              _vX_,
              _vW_,
              _vV_,
              _vU_,
              _vT_,
              _vS_]}
    function from_channel(with_positions,ic)
     {return from_function
              (with_positions,function(buf,n){return input(ic,buf,0,n)})}
    function from_string$0(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _vH_=with_positions?zero_pos:dummy_pos,
       _vI_=with_positions?zero_pos:dummy_pos,
       _vJ_=[0],
       _vK_=1,
       _vL_=0,
       _vM_=0,
       _vN_=0,
       _vO_=0,
       _vP_=0,
       _vQ_=caml_ml_string_length(s),
       _vR_=of_string(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _vR_,
              _vQ_,
              _vP_,
              _vO_,
              _vN_,
              _vM_,
              _vL_,
              _vK_,
              _vJ_,
              _vI_,
              _vH_]}
    function set_position(lexbuf,position)
     {lexbuf[12] = [0,lexbuf[12][1],position[2],position[3],position[4]];
      lexbuf[4] = position[4];
      return 0}
    function set_filename(lexbuf,fname)
     {var _vG_=lexbuf[12];
      lexbuf[12] = [0,fname,_vG_[2],_vG_[3],_vG_[4]];
      return 0}
    function with_positions(lexbuf){return lexbuf[12] !== dummy_pos?1:0}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_opt(lexbuf,i1,i2)
     {if(0 <= i1){var len=i2 - i1 | 0;return [0,sub_string(lexbuf[2],i1,len)]}
      return 0}
    function sub_lexeme_char(lexbuf,i){return caml_bytes_get(lexbuf[2],i)}
    function sub_lexeme_char_opt(lexbuf,i)
     {return 0 <= i?[0,caml_bytes_get(lexbuf[2],i)]:0}
    function lexeme_char(lexbuf,i)
     {return caml_bytes_get(lexbuf[2],lexbuf[5] + i | 0)}
    function lexeme_start(lexbuf){return lexbuf[11][4]}
    function lexeme_end(lexbuf){return lexbuf[12][4]}
    function lexeme_start_p(lexbuf){return lexbuf[11]}
    function lexeme_end_p(lexbuf){return lexbuf[12]}
    function new_line(lexbuf)
     {var
       lcp=lexbuf[12],
       _vE_=lcp !== dummy_pos?1:0,
       _vF_=_vE_?(lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]],0):_vE_;
      return _vF_}
    function flush_input(lb)
     {lb[6] = 0;
      lb[4] = 0;
      var lcp=lb[12];
      if(lcp !== dummy_pos)
       lb[12] = [0,lcp[1],zero_pos[2],zero_pos[3],zero_pos[4]];
      lb[3] = 0;
      return 0}
    var
     Stdlib_lexing=
      [0,
       dummy_pos,
       from_channel,
       from_string$0,
       from_function,
       set_position,
       set_filename,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
    caml_register_global(774,Stdlib_lexing,"Stdlib__lexing");
    var
     YYexit=[248,cst_Stdlib_Parsing_YYexit,caml_fresh_oo_id(0)],
     Parse_error=[248,cst_Stdlib_Parsing_Parse_error,caml_fresh_oo_id(0)],
     env=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,dummy_pos),
       caml_make_vect(100,dummy_pos),
       100,
       0,
       0,
       0,
       dummy_pos,
       dummy_pos,
       0,
       0,
       0,
       0,
       0,
       0];
    function grow_stacks(param)
     {var
       oldsize=env[5],
       newsize=oldsize * 2 | 0,
       new_s=caml_make_vect(newsize,0),
       new_v=caml_make_vect(newsize,0),
       new_start=caml_make_vect(newsize,dummy_pos),
       new_end=caml_make_vect(newsize,dummy_pos);
      blit$1(env[1],0,new_s,0,oldsize);
      env[1] = new_s;
      blit$1(env[2],0,new_v,0,oldsize);
      env[2] = new_v;
      blit$1(env[3],0,new_start,0,oldsize);
      env[3] = new_start;
      blit$1(env[4],0,new_end,0,oldsize);
      env[4] = new_end;
      env[5] = newsize;
      return 0}
    function clear_parser(param)
     {fill$0(env[2],0,env[5],0);env[8] = 0;return 0}
    var current_lookahead_fun=[0,function(param){return 0}];
    function yyparse(tables,start,lexer,lexbuf)
     {var
       init_asp=env[11],
       init_sp=env[14],
       init_stackbase=env[6],
       init_state=env[15],
       init_curr_char=env[7],
       init_lval=env[8],
       init_errflag=env[16];
      env[6] = env[14] + 1 | 0;
      env[7] = start;
      env[10] = lexbuf[12];
      try
       {var cmd=0,arg=0;
        for(;;)
         {var match=runtime.caml_parse_engine(tables,env,cmd,arg);
          switch(match)
           {case 0:
             var arg$0=caml_call1(lexer,lexbuf);
             env[9] = lexbuf[11];
             env[10] = lexbuf[12];
             var cmd=1,arg=arg$0;
             continue;
            case 1:throw Parse_error;
            case 2:grow_stacks(0);var cmd=2,arg=0;continue;
            case 3:grow_stacks(0);var cmd=3,arg=0;continue;
            case 4:
             try
              {var
                _vy_=env[13],
                _vz_=
                 caml_call1(caml_check_bound(tables[1],_vy_)[1 + _vy_],env),
                _vA_=4,
                arg$1=_vz_,
                cmd$0=_vA_}
             catch(_vD_)
              {_vD_ = caml_wrap_exception(_vD_);
               if(_vD_ !== Parse_error)throw _vD_;
               var arg$1=0,cmd$0=5,_vB_=_vD_}
             var cmd=cmd$0,arg=arg$1;
             continue;
            default:
             caml_call1(tables[14],cst_syntax_error);var cmd=5,arg=0;continue}}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var curr_char=env[7];
        env[11] = init_asp;
        env[14] = init_sp;
        env[6] = init_stackbase;
        env[15] = init_state;
        env[7] = init_curr_char;
        env[8] = init_lval;
        env[16] = init_errflag;
        if(exn[1] === YYexit){var v=exn[2];return v}
        current_lookahead_fun[1]
        =
        function(tok)
         {if(is_block(tok))
           {var _vC_=caml_obj_tag(tok);
            return caml_check_bound(tables[3],_vC_)[1 + _vC_] === curr_char
                    ?1
                    :0}
          return caml_check_bound(tables[2],tok)[1 + tok] === curr_char?1:0};
        throw exn}}
    function peek_val(env,n)
     {var _vx_=env[11] - n | 0;return caml_check_bound(env[2],_vx_)[1 + _vx_]}
    function symbol_start_pos(param)
     {var i=env[12];
      for(;;)
       {if(0 < i)
         {var
           _vu_=(env[11] - i | 0) + 1 | 0,
           st=caml_check_bound(env[3],_vu_)[1 + _vu_],
           _vv_=(env[11] - i | 0) + 1 | 0,
           en=caml_check_bound(env[4],_vv_)[1 + _vv_];
          if(caml_notequal(st,en))return st;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        var _vw_=env[11];
        return caml_check_bound(env[4],_vw_)[1 + _vw_]}}
    function symbol_end_pos(param)
     {var _vt_=env[11];return caml_check_bound(env[4],_vt_)[1 + _vt_]}
    function rhs_start_pos(n)
     {var _vs_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[3],_vs_)[1 + _vs_]}
    function rhs_end_pos(n)
     {var _vr_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[4],_vr_)[1 + _vr_]}
    function symbol_start(param){return symbol_start_pos(0)[4]}
    function symbol_end(param){return symbol_end_pos(0)[4]}
    function rhs_start(n){return rhs_start_pos(n)[4]}
    function rhs_end(n){return rhs_end_pos(n)[4]}
    function is_current_lookahead(tok)
     {return caml_call1(current_lookahead_fun[1],tok)}
    function parse_error(param){return 0}
    var
     Stdlib_parsing=
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       function(_vq_){return runtime.caml_set_parser_trace(_vq_)},
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
    caml_register_global(775,Stdlib_parsing,"Stdlib__parsing");
    var
     Stdlib_set=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[4];return h}return 0}
         function create(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           var _vp_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_vp_]}
         function bal(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[3],lv=l[2],ll=l[1],_vk_=height(lr);
               if(_vk_ <= height(ll))return create(ll,lv,create(lr,v,r));
               if(lr)
                {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_vl_=create(lrr,v,r);
                 return create(create(ll,lv,lrl),lrv,_vl_)}
               return invalid_arg(cst_Set_bal)}
             return invalid_arg(cst_Set_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[3],rv=r[2],rl=r[1],_vm_=height(rl);
               if(_vm_ <= height(rr))return create(create(l,v,rl),rv,rr);
               if(rl)
                {var rlr=rl[3],rlv=rl[2],rll=rl[1],_vn_=create(rlr,rv,rr);
                 return create(create(l,v,rll),rlv,_vn_)}
               return invalid_arg(cst_Set_bal$1)}
             return invalid_arg(cst_Set_bal$2)}
           var _vo_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_vo_]}
         function add(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return t;
             if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=add(x,l);
             return l === ll?t:bal(ll,v,r)}
           return [0,0,x,0,1]}
         function singleton(x){return [0,0,x,0,1]}
         function add_min_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(add_min_element(x,l),v,r)}
           return singleton(x)}
         function add_max_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(l,v,add_max_element(x,r))}
           return singleton(x)}
         function join(l,v,r)
          {if(l)
            {if(r)
              {var
                rh=r[4],
                rr=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[4],
                lr=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,join(lr,v,r))
                       :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
             return add_max_element(v,l)}
           return add_min_element(v,r)}
         function min_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _vj_=param$0[1];
               if(_vj_){var param$0=_vj_;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function min_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _vi_=param$0[1];
               if(_vi_){var param$0=_vi_;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function max_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function max_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function remove_min_elt(param)
          {if(param)
            {var _vh_=param[1];
             if(_vh_)
              {var r=param[3],v=param[2];return bal(remove_min_elt(_vh_),v,r)}
             var r$0=param[3];
             return r$0}
           return invalid_arg(cst_Set_remove_min_elt)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var _vg_=remove_min_elt(match);
               return join(t,min_elt(match),_vg_)}
             return t}
           return match}
         function split(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,1,r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,r)]}
           return _H_}
         var empty=0;
         function is_empty(param){return param?0:1}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _vf_=0 === c?1:0;
               if(_vf_)return _vf_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function remove(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {if(l)
                {if(r)
                  {var _ve_=remove_min_elt(r);return bal(l,min_elt(r),_ve_)}
                 return l}
               return r}
             if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=remove(x,l);
             return l === ll?t:bal(ll,v,r)}
           return 0}
         function union(t1,match)
          {if(t1)
            {if(match)
              {var
                h2=match[4],
                r2=match[3],
                v2=match[2],
                l2=match[1],
                h1=t1[4],
                r1=t1[3],
                v1=t1[2],
                l1=t1[1];
               if(h2 <= h1)
                {if(1 === h2)return add(v2,t1);
                 var
                  match$0=split(v1,match),
                  r2$0=match$0[3],
                  l2$0=match$0[1],
                  _vc_=union(r1,r2$0);
                 return join(union(l1,l2$0),v1,_vc_)}
               if(1 === h1)return add(v1,match);
               var
                match$1=split(v2,t1),
                r1$0=match$1[3],
                l1$0=match$1[1],
                _vd_=union(r1$0,r2);
               return join(union(l1$0,l2),v2,_vd_)}
             return t1}
           return match}
         function inter(s1,match)
          {if(s1)
            {if(match)
              {var
                r1=s1[3],
                v1=s1[2],
                l1=s1[1],
                _u__=split(v1,match),
                _u$_=_u__[1];
               if(_u__[2])
                {var r2=_u__[3],_va_=inter(r1,r2);
                 return join(inter(l1,_u$_),v1,_va_)}
               var r2$0=_u__[3],_vb_=inter(r1,r2$0);
               return concat(inter(l1,_u$_),_vb_)}
             return 0}
           return 0}
         function split_bis(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return 0;
             if(0 <= c)
              {var match=split_bis(x,r);
               if(match)
                {var rr=match[2],lr=match[1];return [0,join(l,v,lr),rr]}
               return 0}
             var match$0=split_bis(x,l);
             if(match$0)
              {var rl=match$0[2],ll=match$0[1];
               return [0,
                       ll,
                       function(param){return join(caml_call1(rl,0),v,r)}]}
             return 0}
           return [0,0,function(param){return 0}]}
         function disjoint(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0 && s2$0)
              {var r1=s1$0[3],v1=s1$0[2],l1=s1$0[1];
               if(s1$0 === s2$0)return 0;
               var match=split_bis(v1,s2$0);
               if(match)
                {var r2=match[2],l2=match[1],_u9_=disjoint(l1,l2);
                 if(_u9_)
                  {var s2$1=caml_call1(r2,0),s1$0=r1,s2$0=s2$1;continue}
                 return _u9_}
               return 0}
             return 1}}
         function diff(t1,match)
          {if(t1)
            {if(match)
              {var
                r1=t1[3],
                v1=t1[2],
                l1=t1[1],
                _u5_=split(v1,match),
                _u6_=_u5_[1];
               if(_u5_[2])
                {var r2=_u5_[3],_u7_=diff(r1,r2);
                 return concat(diff(l1,_u6_),_u7_)}
               var r2$0=_u5_[3],_u8_=diff(r1,r2$0);
               return join(diff(l1,_u6_),v1,_u8_)}
             return t1}
           return 0}
         function cons_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                s$1=s$0[1],
                e$1=[0,v,r,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(s1,s2)
          {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[3],
                  r2=e2[2],
                  v2=e2[1],
                  e1$0=e1[3],
                  r1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var
                    e2$1=cons_enum(r2,e2$0),
                    e1$1=cons_enum(r1,e1$0),
                    e1=e1$1,
                    e2=e2$1;
                   continue}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
         function subset(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0)
              {if(s2$0)
                {var
                  r2=s2$0[3],
                  v2=s2$0[2],
                  l2=s2$0[1],
                  r1=s1$0[3],
                  v1=s1$0[2],
                  l1=s1$0[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var _u2_=subset(l1,l2);
                   if(_u2_){var s1$0=r1,s2$0=r2;continue}
                   return _u2_}
                 if(0 <= c)
                  {var _u3_=subset([0,0,v1,r1,0],r2);
                   if(_u3_){var s1$0=l1;continue}
                   return _u3_}
                 var _u4_=subset([0,l1,v1,0,0],l2);
                 if(_u4_){var s1$0=r1;continue}
                 return _u4_}
               return 0}
             return 1}}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call1(f,v);
               var param$0=r;
               continue}
             return 0}}
         function fold(f,s,accu)
          {var s$0=s,accu$0=accu;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                l=s$0[1],
                accu$1=caml_call2(f,v,fold(f,l,accu$0)),
                s$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uZ_=caml_call1(p,v);
               if(_uZ_)
                {var _u0_=for_all(p,l);
                 if(_u0_){var param$0=r;continue}
                 var _u1_=_u0_}
               else
                var _u1_=_uZ_;
               return _u1_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uW_=caml_call1(p,v);
               if(_uW_)
                var _uX_=_uW_;
               else
                {var _uY_=exists(p,l);
                 if(! _uY_){var param$0=r;continue}
                 var _uX_=_uY_}
               return _uX_}
             return 0}}
         function filter(p,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=filter(p,l),
              pv=caml_call1(p,v),
              r$0=filter(p,r);
             if(pv){if(l === l$0 && r === r$0)return t;return join(l$0,v,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pv=caml_call1(p,v),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pv){var _uU_=concat(lf,rf);return [0,join(lt,v,rt),_uU_]}
             var _uV_=join(lf,v,rf);
             return [0,concat(lt,rt),_uV_]}
           return _I_}
         function cardinal(param)
          {if(param)
            {var r=param[3],l=param[1],_uT_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _uT_ | 0}
           return 0}
         function elements_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,v,elements_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function elements(s){return elements_aux(0,s)}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return v;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return v0}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return v0}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,v];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function try_join(l,v,r)
          {var switch$0=0;
           if(0 !== l)
            {var _uS_=max_elt(l);
             if(0 <= caml_call2(Ord[1],_uS_,v))switch$0 = 1}
           if(! switch$0)
            {var switch$1=0;
             if(0 !== r)
              {var _uR_=min_elt(r);
               if(0 <= caml_call2(Ord[1],v,_uR_))switch$1 = 1}
             if(! switch$1)return join(l,v,r)}
           return union(l,add(v,r))}
         function map(f,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=map(f,l),
              v$0=caml_call1(f,v),
              r$0=map(f,r);
             if(l === l$0 && v === v$0 && r === r$0)return t;
             return try_join(l$0,v$0,r$0)}
           return 0}
         function filter_map(f,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              t$0=filter_map(f,l),
              v$0=caml_call1(f,v),
              match=filter_map(f,r);
             if(v$0)
              {var v$1=v$0[1];
               if(l === t$0 && v === v$1 && r === match)return t;
               return try_join(t$0,v$1,match)}
             if(t$0)
              {if(match)
                {var _uQ_=remove_min_elt(match);
                 return try_join(t$0,min_elt(match),_uQ_)}
               return t$0}
             return match}
           return 0}
         function of_list(l)
          {if(l)
            {var _uF_=l[2],_uG_=l[1];
             if(_uF_)
              {var _uH_=_uF_[2],_uI_=_uF_[1];
               if(_uH_)
                {var _uJ_=_uH_[2],_uK_=_uH_[1];
                 if(_uJ_)
                  {var _uL_=_uJ_[2],_uM_=_uJ_[1];
                   if(_uL_)
                    {if(_uL_[2])
                      {var
                        l$0=sort_uniq(Ord[1],l),
                        sub=
                         function(n,l)
                          {if(! (3 < n >>> 0))
                            switch(n)
                             {case 0:return [0,0,l];
                              case 1:
                               if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                               break;
                              case 2:
                               if(l)
                                {var _uN_=l[2];
                                 if(_uN_)
                                  {var l$4=_uN_[2],x1=_uN_[1],x0$0=l[1];
                                   return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                               break;
                              default:
                               if(l)
                                {var _uO_=l[2];
                                 if(_uO_)
                                  {var _uP_=_uO_[2];
                                   if(_uP_)
                                    {var l$5=_uP_[2],x2=_uP_[1],x1$0=_uO_[1],x0$1=l[1];
                                     return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                           var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                           if(l$0)
                            {var
                              l$1=l$0[2],
                              mid=l$0[1],
                              match$0=sub((n - nl | 0) - 1 | 0,l$1),
                              l$2=match$0[2],
                              right=match$0[1];
                             return [0,create(left,mid,right),l$2]}
                           throw [0,Assert_failure,_J_]};
                       return sub(length(l$0),l$0)[1]}
                     var x4=_uL_[1];
                     return add(x4,add(_uM_,add(_uK_,add(_uI_,singleton(_uG_)))))}
                   return add(_uM_,add(_uK_,add(_uI_,singleton(_uG_))))}
                 return add(_uK_,add(_uI_,singleton(_uG_)))}
               return add(_uI_,singleton(_uG_))}
             return singleton(_uG_)}
           return empty}
         function add_seq(i,m)
          {return fold_left(function(s,x){return add(x,s)},m,i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[3],t=c[2],x=c[1],_uD_=cons_enum(t,rest);
             return [0,x,function(_uE_){return seq_of_enum(_uD_,_uE_)}]}
           return 0}
         function to_seq(c)
          {var _uB_=cons_enum(c,0);
           return function(_uC_){return seq_of_enum(_uB_,_uC_)}}
         function to_seq_from(low,s)
          {var s$0=s,c=0;
           for(;;)
            {if(s$0)
              {var r=s$0[3],v=s$0[2],l=s$0[1],n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,r,c],s$0=l,c=c$0;continue}
                 var s$0=r;
                 continue}
               var _uz_=[0,v,r,c]}
             else
              var _uz_=c;
             return function(_uA_){return seq_of_enum(_uz_,_uA_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 singleton,
                 remove,
                 union,
                 inter,
                 disjoint,
                 diff,
                 compare,
                 equal,
                 subset,
                 iter,
                 map,
                 fold,
                 for_all,
                 exists,
                 filter,
                 filter_map,
                 partition,
                 cardinal,
                 elements,
                 min_elt,
                 min_elt_opt,
                 max_elt,
                 max_elt_opt,
                 min_elt,
                 min_elt_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 of_list,
                 to_seq_from,
                 to_seq,
                 add_seq,
                 of_seq]}];
    caml_register_global(776,Stdlib_set,"Stdlib__set");
    var
     Stdlib_map=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[5];return h}return 0}
         function create(l,x,d,r)
          {var hl=height(l),hr=height(r),_uy_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_uy_]}
         function singleton(x,d){return [0,0,x,d,0,1]}
         function bal(l,x,d,r)
          {if(l)var h=l[5],hl=h;else var hl=0;
           if(r)var h$0=r[5],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_ut_=height(lr);
               if(_ut_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
               if(lr)
                {var
                  lrr=lr[4],
                  lrd=lr[3],
                  lrv=lr[2],
                  lrl=lr[1],
                  _uu_=create(lrr,x,d,r);
                 return create(create(ll,lv,ld,lrl),lrv,lrd,_uu_)}
               return invalid_arg(cst_Map_bal)}
             return invalid_arg(cst_Map_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_uv_=height(rl);
               if(_uv_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
               if(rl)
                {var
                  rlr=rl[4],
                  rld=rl[3],
                  rlv=rl[2],
                  rll=rl[1],
                  _uw_=create(rlr,rv,rd,rr);
                 return create(create(l,x,d,rll),rlv,rld,_uw_)}
               return invalid_arg(cst_Map_bal$1)}
             return invalid_arg(cst_Map_bal$2)}
           var _ux_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_ux_]}
         var empty=0;
         function is_empty(param){return param?0:1}
         function add(x,data,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return d === data?m:[0,l,x,data,r,h];
             if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=add(x,data,l);
             return l === ll?m:bal(ll,v,d,r)}
           return [0,0,x,data,0,1]}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return d;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0,d0]}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0,d0]}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,d];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _us_=0 === c?1:0;
               if(_us_)return _us_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function min_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _ur_=param$0[1];
               if(_ur_){var param$0=_ur_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function min_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _uq_=param$0[1];
               if(_uq_){var param$0=_uq_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function max_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function max_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function remove_min_binding(param)
          {if(param)
            {var _up_=param[1];
             if(_up_)
              {var r=param[4],d=param[3],v=param[2];
               return bal(remove_min_binding(_up_),v,d,r)}
             var r$0=param[4];
             return r$0}
           return invalid_arg(cst_Map_remove_min_elt)}
         function _t4_(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return bal(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function remove(x,m)
          {if(m)
            {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return _t4_(l,r);
             if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=remove(x,l);
             return l === ll?m:bal(ll,v,d,r)}
           return 0}
         function update(x,f,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {var match=caml_call1(f,[0,d]);
               if(match)
                {var data=match[1];return d === data?m:[0,l,x,data,r,h]}
               return _t4_(l,r)}
             if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=update(x,f,l);
             return l === ll?m:bal(ll,v,d,r)}
           var match$0=caml_call1(f,0);
           if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
           return 0}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call2(f,v,d);
               var param$0=r;
               continue}
             return 0}}
         function map(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=map(f,l),
              d$0=caml_call1(f,d),
              r$0=map(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function mapi(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=mapi(f,l),
              d$0=caml_call2(f,v,d),
              r$0=mapi(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function fold(f,m,accu)
          {var m$0=m,accu$0=accu;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
                m$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _um_=caml_call2(p,v,d);
               if(_um_)
                {var _un_=for_all(p,l);
                 if(_un_){var param$0=r;continue}
                 var _uo_=_un_}
               else
                var _uo_=_um_;
               return _uo_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uj_=caml_call2(p,v,d);
               if(_uj_)
                var _uk_=_uj_;
               else
                {var _ul_=exists(p,l);
                 if(! _ul_){var param$0=r;continue}
                 var _uk_=_ul_}
               return _uk_}
             return 0}}
         function add_min_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(add_min_binding(k,x,l),v,d,r)}
           return singleton(k,x)}
         function add_max_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(l,v,d,add_max_binding(k,x,r))}
           return singleton(k,x)}
         function join(l,v,d,r)
          {if(l)
            {if(r)
              {var
                rh=r[5],
                rr=r[4],
                rd=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[5],
                lr=l[4],
                ld=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,ld,join(lr,v,d,r))
                       :(lh + 2 | 0) < rh
                         ?bal(join(l,v,d,rl),rv,rd,rr)
                         :create(l,v,d,r)}
             return add_max_binding(v,d,l)}
           return add_min_binding(v,d,r)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return join(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function concat_or_join(t1,v,d,t2)
          {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
         function split(x,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,[0,d],r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,d,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,d,r)]}
           return _K_}
         function merge(f,s1,s2)
          {if(s1)
            {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
             if(height(s2) <= h1)
              {var
                match=split(v1,s2),
                r2=match[3],
                d2=match[2],
                l2=match[1],
                _uf_=merge(f,r1,r2),
                _ug_=caml_call3(f,v1,[0,d1],d2);
               return concat_or_join(merge(f,l1,l2),v1,_ug_,_uf_)}}
           else
            if(! s2)return 0;
           if(s2)
            {var
              r2$0=s2[4],
              d2$0=s2[3],
              v2=s2[2],
              l2$0=s2[1],
              match$0=split(v2,s1),
              r1$0=match$0[3],
              d1$0=match$0[2],
              l1$0=match$0[1],
              _uh_=merge(f,r1$0,r2$0),
              _ui_=caml_call3(f,v2,d1$0,[0,d2$0]);
             return concat_or_join(merge(f,l1$0,l2$0),v2,_ui_,_uh_)}
           throw [0,Assert_failure,_L_]}
         function union(f,s1,s2)
          {if(s1)
            {if(s2)
              {var
                h2=s2[5],
                r2=s2[4],
                d2=s2[3],
                v2=s2[2],
                l2=s2[1],
                h1=s1[5],
                r1=s1[4],
                d1=s1[3],
                v1=s1[2],
                l1=s1[1];
               if(h2 <= h1)
                {var
                  match=split(v1,s2),
                  r2$0=match[3],
                  d2$0=match[2],
                  l2$0=match[1],
                  l=union(f,l1,l2$0),
                  r=union(f,r1,r2$0);
                 if(d2$0)
                  {var d2$1=d2$0[1];
                   return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
                 return join(l,v1,d1,r)}
               var
                match$0=split(v2,s1),
                r1$0=match$0[3],
                d1$0=match$0[2],
                l1$0=match$0[1],
                l$0=union(f,l1$0,l2),
                r$0=union(f,r1$0,r2);
               if(d1$0)
                {var d1$1=d1$0[1];
                 return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
               return join(l$0,v2,d2,r$0)}
             var s=s1}
           else
            var s=s2;
           return s}
         function filter(p,m)
          {if(m)
            {var
              r=m[4],
              d=m[3],
              v=m[2],
              l=m[1],
              l$0=filter(p,l),
              pvd=caml_call2(p,v,d),
              r$0=filter(p,r);
             if(pvd)
              {if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function filter_map(f,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=filter_map(f,l),
              fvd=caml_call2(f,v,d),
              r$0=filter_map(f,r);
             if(fvd){var d$0=fvd[1];return join(l$0,v,d$0,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pvd=caml_call2(p,v,d),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pvd){var _ud_=concat(lf,rf);return [0,join(lt,v,d,rt),_ud_]}
             var _ue_=join(lf,v,d,rf);
             return [0,concat(lt,rt),_ue_]}
           return _M_}
         function cons_enum(m,e)
          {var m$0=m,e$0=e;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                m$1=m$0[1],
                e$1=[0,v,d,r,e$0],
                m$0=m$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var c$0=caml_call2(cmp,d1,d2);
                   if(0 === c$0)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   return c$0}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  _ua_=0 === caml_call2(Ord[1],v1,v2)?1:0;
                 if(_ua_)
                  {var _ub_=caml_call2(cmp,d1,d2);
                   if(_ub_)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   var _uc_=_ub_}
                 else
                  var _uc_=_ua_;
                 return _uc_}
               return 0}
             return e2?0:1}}
         function cardinal(param)
          {if(param)
            {var r=param[4],l=param[1],_t$_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _t$_ | 0}
           return 0}
         function bindings_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function bindings(s){return bindings_aux(0,s)}
         function add_seq(i,m)
          {return fold_left
                   (function(m,param)
                     {var v=param[2],k=param[1];return add(k,v,m)},
                    m,
                    i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[4],t=c[3],v=c[2],k=c[1],_t9_=cons_enum(t,rest);
             return [0,[0,k,v],function(_t__){return seq_of_enum(_t9_,_t__)}]}
           return 0}
         function to_seq(m)
          {var _t7_=cons_enum(m,0);
           return function(_t8_){return seq_of_enum(_t7_,_t8_)}}
         function to_seq_from(low,m)
          {var m$0=m,c=0;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
                 var m$0=r;
                 continue}
               var _t5_=[0,v,d,r,c]}
             else
              var _t5_=c;
             return function(_t6_){return seq_of_enum(_t5_,_t6_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 update,
                 singleton,
                 remove,
                 merge,
                 union,
                 compare,
                 equal,
                 iter,
                 fold,
                 for_all,
                 exists,
                 filter,
                 filter_map,
                 partition,
                 cardinal,
                 bindings,
                 min_binding,
                 min_binding_opt,
                 max_binding,
                 max_binding_opt,
                 min_binding,
                 min_binding_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 map,
                 mapi,
                 to_seq,
                 to_seq_from,
                 add_seq,
                 of_seq]}];
    caml_register_global(777,Stdlib_map,"Stdlib__map");
    var Empty=[248,cst_Stdlib_Stack_Empty,caml_fresh_oo_id(0)];
    function create$0(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function copy$3(s){return [0,s[1],s[2]]}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop(s)
     {var _t3_=s[1];
      if(_t3_)
       {var tl=_t3_[2],hd=_t3_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return hd}
      throw Empty}
    function pop_opt(s)
     {var _t2_=s[1];
      if(_t2_)
       {var tl=_t2_[2],hd=_t2_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
      return 0}
    function top(s)
     {var _t1_=s[1];if(_t1_){var hd=_t1_[1];return hd}throw Empty}
    function top_opt(s)
     {var _t0_=s[1];if(_t0_){var hd=_t0_[1];return [0,hd]}return 0}
    function is_empty(s){return 0 === s[1]?1:0}
    function length$1(s){return s[2]}
    function iter$7(f,s){return iter$2(f,s[1])}
    function fold$1(f,acc,s){return fold_left$0(f,acc,s[1])}
    function to_seq$6(s){return to_seq$1(s[1])}
    function add_seq(q,i){return iter(function(x){return push(x,q)},i)}
    function of_seq$4(g){var s=create$0(0);add_seq(s,g);return s}
    var
     Stdlib_stack=
      [0,
       Empty,
       create$0,
       push,
       pop,
       pop_opt,
       top,
       top_opt,
       clear,
       copy$3,
       is_empty,
       length$1,
       iter$7,
       fold$1,
       to_seq$6,
       add_seq,
       of_seq$4];
    caml_register_global(778,Stdlib_stack,"Stdlib__stack");
    var Empty$0=[248,cst_Stdlib_Queue_Empty,caml_fresh_oo_id(0)];
    function create$1(param){return [0,0,0,0]}
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_tZ_=q[3];
      return _tZ_
              ?(q[1] = q[1] + 1 | 0,_tZ_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function peek(q)
     {var _tY_=q[2];if(_tY_){var content=_tY_[1];return content}throw Empty$0}
    function peek_opt(q)
     {var _tX_=q[2];if(_tX_){var content=_tX_[1];return [0,content]}return 0}
    function take(q)
     {var _tV_=q[2];
      if(_tV_)
       {var _tW_=_tV_[1];
        if(_tV_[2])
         {var next=_tV_[2];q[1] = q[1] - 1 | 0;q[2] = next;return _tW_}
        clear$0(q);
        return _tW_}
      throw Empty$0}
    function take_opt(q)
     {var _tT_=q[2];
      if(_tT_)
       {var _tU_=_tT_[1];
        if(_tT_[2])
         {var next=_tT_[2];q[1] = q[1] - 1 | 0;q[2] = next;return [0,_tU_]}
        clear$0(q);
        return [0,_tU_]}
      return 0}
    function copy$4(q)
     {var q_res=[0,q[1],0,0],prev=0,cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2],res=[0,content,0];
          if(prev)prev[2] = res;else q_res[2] = res;
          var prev=res,cell=next;
          continue}
        q_res[3] = prev;
        return q_res}}
    function is_empty$0(q){return 0 === q[1]?1:0}
    function length$2(q){return q[1]}
    function iter$8(f,q)
     {var cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2];
          caml_call1(f,content);
          var cell=next;
          continue}
        return 0}}
    function fold$2(f,accu$1,q)
     {var accu=accu$1,cell=q[2];
      for(;;)
       {if(cell)
         {var
           content=cell[1],
           next=cell[2],
           accu$0=caml_call2(f,accu,content),
           accu=accu$0,
           cell=next;
          continue}
        return accu}}
    function transfer(q1,q2)
     {var _tR_=0 < q1[1]?1:0;
      if(_tR_)
       {var _tS_=q2[3];
        return _tS_
                ?(q2[1]
                  =
                  q2[1]
                  +
                  q1[1]
                  |
                  0,
                  _tS_[2]
                  =
                  q1[2],
                  q2[3]
                  =
                  q1[3],
                  clear$0(q1))
                :(q2[1] = q1[1],q2[2] = q1[2],q2[3] = q1[3],clear$0(q1))}
      return _tR_}
    function to_seq$7(q)
     {function aux(c,param)
       {if(c)
         {var x=c[1],next=c[2];
          return [0,x,function(_tQ_){return aux(next,_tQ_)}]}
        return 0}
      var _tO_=q[2];
      return function(_tP_){return aux(_tO_,_tP_)}}
    function add_seq$0(q,i){return iter(function(x){return add(x,q)},i)}
    function of_seq$5(g){var q=create$1(0);add_seq$0(q,g);return q}
    var
     Stdlib_queue=
      [0,
       Empty$0,
       create$1,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       clear$0,
       copy$4,
       is_empty$0,
       length$2,
       iter$8,
       fold$2,
       transfer,
       to_seq$7,
       add_seq$0,
       of_seq$5];
    caml_register_global(779,Stdlib_queue,"Stdlib__queue");
    var Undefined=[248,cst_CamlinternalLazy_Undefined,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        caml_obj_make_forward(blk,result);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function force_val_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      var result=caml_call1(closure,0);
      caml_obj_make_forward(blk,result);
      return result}
    function force(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_lazy_block(lzv)}
    function force_val(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_val_lazy_block(lzv)}
    var
     CamlinternalLazy=
      [0,Undefined,force_lazy_block,force_val_lazy_block,force,force_val];
    caml_register_global(780,CamlinternalLazy,"CamlinternalLazy");
    function from_fun(f){var x=caml_obj_block(246,1);x[1] = f;return x}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250 && t !== 246 && t !== 253)return v;
      return runtime.caml_lazy_make_forward(v)}
    function is_val(l){return caml_obj_tag(l) !== 246?1:0}
    var
     Stdlib_lazy=
      [0,
       Undefined,
       force_val,
       from_fun,
       from_val,
       is_val,
       from_fun,
       from_val,
       is_val];
    caml_register_global(781,Stdlib_lazy,"Stdlib__lazy");
    var
     Failure$0=[248,cst_Stdlib_Stream_Failure,caml_fresh_oo_id(0)],
     Error=[248,cst_Stdlib_Stream_Error,caml_fresh_oo_id(0)];
    function count(param)
     {if(param){var match=param[1],count=match[1];return count}return 0}
    function data(param)
     {if(param){var match=param[1],data=match[2];return data}return 0}
    function fill_buff(b)
     {b[3] = input(b[1],b[2],0,caml_ml_bytes_length(b[2]));b[4] = 0;return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_N_]}
           case 2:
            var
             f=d$0[1],
             _tK_=caml_obj_tag(f),
             d$1=250 === _tK_?f[1]:246 === _tK_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _tL_=d$0[1],_tM_=_tL_[1];
            if(_tM_)
             {var _tN_=_tM_[1];
              if(_tN_){var a$0=_tN_[1];_tL_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_tL_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _tL_[1] = _O_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _tF_=s[2];
        if(typeof _tF_ === "number")
         return 0;
        else
         switch(_tF_[0])
          {case 0:var a=_tF_[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_P_]}
           case 2:
            var
             f=_tF_[1],
             _tG_=caml_obj_tag(f),
             _tH_=250 === _tG_?f[1]:246 === _tG_?force_lazy_block(f):f;
            s[2] = _tH_;
            continue;
           case 3:
            var _tI_=_tF_[1],_tJ_=_tI_[1];
            if(_tJ_){var a$1=_tJ_[1];return a$1}
            var x=caml_call1(_tI_[2],s[1]);
            _tI_[1] = [0,x];
            return x;
           default:
            var b=_tF_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek$0(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk_data(s)
     {for(;;)
       {var _tD_=s[2];
        if(typeof _tD_ !== "number")
         switch(_tD_[0])
          {case 0:var d=_tD_[2];s[1] = s[1] + 1 | 0;s[2] = d;return 0;
           case 3:
            var _tE_=_tD_[1];
            if(_tE_[1]){s[1] = s[1] + 1 | 0;_tE_[1] = 0;return 0}
            break;
           case 4:
            var b=_tD_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :(s[1] = s[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
           }
        var match=peek_data(s);
        if(match)continue;
        return 0}}
    function junk(param)
     {if(param){var data=param[1];return junk_data(data)}return 0}
    function nget_data(n,s)
     {if(0 < n)
       {var match=peek_data(s);
        if(match)
         {var a=match[1];
          junk_data(s);
          var
           match$0=nget_data(n - 1 | 0,s),
           k=match$0[3],
           d=match$0[2],
           al=match$0[1];
          return [0,[0,a,al],[0,a,d],k + 1 | 0]}
        return [0,0,s[2],0]}
      return [0,0,s[2],0]}
    function npeek(n,param)
     {if(param)
       {var
         d$0=param[1],
         match=nget_data(n,d$0),
         len=match[3],
         d=match[2],
         al=match[1];
        d$0[1] = d$0[1] - len | 0;
        d$0[2] = d;
        return al}
      return 0}
    function next(s)
     {var match=peek$0(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function empty$1(s){var match=peek$0(s);if(match)throw Failure$0;return 0}
    function iter$9(f,strm)
     {for(;;)
       {var match=peek$0(strm);
        if(match){var a=match[1];junk(strm);caml_call1(f,a);continue}
        return 0}}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    function of_list$1(l)
     {var _tC_=0;
      return [0,[0,0,fold_right(function(x,l){return [0,x,l]},l,_tC_)]]}
    function of_string$0(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_string_length(s)
                         ?(count[1]++,[0,caml_string_get(s,c)])
                         :0})}
    function of_bytes(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_bytes_length(s)
                         ?(count[1]++,[0,caml_bytes_get(s,c)])
                         :0})}
    function of_channel(ic)
     {return [0,[0,0,[4,[0,ic,caml_create_bytes(4096),0,0]]]]}
    function iapp(i,s){var _tB_=data(s);return [0,[0,0,[1,data(i),_tB_]]]}
    function icons(i,s){return [0,[0,0,[0,i,data(s)]]]}
    function ising(i){return [0,[0,0,[0,i,0]]]}
    function lapp(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_tz_)
                  {var _tA_=data(s);return [1,data(caml_call1(f,0)),_tA_]}]]]]}
    function lcons(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_tx_)
                  {var _ty_=data(s);return [0,caml_call1(f,0),_ty_]}]]]]}
    function lsing(f)
     {return [0,[0,0,[2,[246,function(_tw_){return [0,caml_call1(f,0),0]}]]]]}
    var sempty=0;
    function slazy(f)
     {return [0,[0,0,[2,[246,function(_tv_){return data(caml_call1(f,0))}]]]]}
    function dump_data(f,param)
     {if(typeof param === "number")
       return print_string(cst_Sempty);
      else
       switch(param[0])
        {case 0:
          var d=param[2],a=param[1];
          print_string(cst_Scons);
          caml_call1(f,a);
          print_string(cst$7);
          dump_data(f,d);
          return print_string(cst$8);
         case 1:
          var d2=param[2],d1=param[1];
          print_string(cst_Sapp);
          dump_data(f,d1);
          print_string(cst$9);
          dump_data(f,d2);
          return print_string(cst$10);
         case 2:return print_string(cst_Slazy);
         case 3:return print_string(cst_Sgen);
         default:return print_string(cst_Sbuffio)}}
    function dump(f,s)
     {print_string(cst_count);
      print_int(count(s));
      print_string(cst_data);
      dump_data(f,data(s));
      print_string(cst$6);
      return print_newline(0)}
    var
     Stdlib_stream=
      [0,
       Failure$0,
       Error,
       from,
       of_list$1,
       of_string$0,
       of_bytes,
       of_channel,
       iter$9,
       next,
       empty$1,
       peek$0,
       junk,
       count,
       npeek,
       iapp,
       icons,
       ising,
       lapp,
       lcons,
       lsing,
       sempty,
       slazy,
       dump];
    caml_register_global(782,Stdlib_stream,"Stdlib__stream");
    function create$2(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function to_bytes(b){return sub(b[1],0,b[2])}
    function sub$3(b,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((b[2] - len | 0) < ofs))
       return sub_string(b[1],ofs,len);
      return invalid_arg(cst_Buffer_sub)}
    function blit$3(src,srcoff,dst,dstoff,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        srcoff
        &&
        !
        ((src[2] - len | 0) < srcoff)
        &&
        0
        <=
        dstoff
        &&
        !
        ((caml_ml_bytes_length(dst) - len | 0) < dstoff))
       return caml_blit_bytes(src[1],srcoff,dst,dstoff,len);
      return invalid_arg(cst_Buffer_blit)}
    function nth$0(b,ofs)
     {if(0 <= ofs && ! (b[2] <= ofs))return caml_bytes_unsafe_get(b[1],ofs);
      return invalid_arg(cst_Buffer_nth)}
    function length$3(b){return b[2]}
    function clear$1(b){b[2] = 0;return 0}
    function reset(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(cst_Buffer_add_cannot_grow_buf);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_Q_]}
        throw [0,Assert_failure,_R_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_utf_8_uchar(b,u)
     {if(0 <= u)
       {if(127 < u)
         {if(2047 < u)
           {if(65535 < u)
             {if(1114111 < u)throw [0,Assert_failure,_S_];
              var pos=b[2];
              if(b[3] < (pos + 4 | 0))resize(b,4);
              caml_bytes_unsafe_set(b[1],pos,240 | u >>> 18 | 0);
              caml_bytes_unsafe_set
               (b[1],pos + 1 | 0,128 | (u >>> 12 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 2 | 0,128 | (u >>> 6 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 3 | 0,128 | u & 63);
              b[2] = pos + 4 | 0;
              return 0}
            var pos$0=b[2];
            if(b[3] < (pos$0 + 3 | 0))resize(b,3);
            caml_bytes_unsafe_set(b[1],pos$0,224 | u >>> 12 | 0);
            caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,128 | (u >>> 6 | 0) & 63);
            caml_bytes_unsafe_set(b[1],pos$0 + 2 | 0,128 | u & 63);
            b[2] = pos$0 + 3 | 0;
            return 0}
          var pos$1=b[2];
          if(b[3] < (pos$1 + 2 | 0))resize(b,2);
          caml_bytes_unsafe_set(b[1],pos$1,192 | u >>> 6 | 0);
          caml_bytes_unsafe_set(b[1],pos$1 + 1 | 0,128 | u & 63);
          b[2] = pos$1 + 2 | 0;
          return 0}
        return add_char(b,u)}
      throw [0,Assert_failure,_T_]}
    function add_utf_16be_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_U_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo & 255);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u >>> 8 | 0);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u & 255);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,_V_]}
    function add_utf_16le_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_W_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo & 255);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo >>> 8 | 0);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u & 255);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u >>> 8 | 0);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,_X_]}
    function add_substring(b,s,offset,len)
     {var _ts_=offset < 0?1:0;
      if(_ts_)
       var _tt_=_ts_;
      else
       var
        _tu_=len < 0?1:0,
        _tt_=_tu_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_tt_)invalid_arg(cst_Buffer_add_substring_add_s);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_subbytes(b,s,offset,len)
     {return add_substring(b,caml_string_of_bytes(s),offset,len)}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_bytes(b,s){return add_string(b,caml_string_of_bytes(s))}
    function add_buffer(b,bs){return add_subbytes(b,bs[1],0,bs[2])}
    function add_channel(b,ic,len)
     {var _tq_=len < 0?1:0,_tr_=_tq_ || (max_string_length < len?1:0);
      if(_tr_)invalid_arg(cst_Buffer_add_channel);
      if(b[3] < (b[2] + len | 0))resize(b,len);
      var already_read=0,ofs=b[2],to_read=len,_tp_=b[1];
      for(;;)
       {if(0 !== to_read)
         {var r=input(ic,_tp_,ofs,to_read);
          if(0 !== r)
           {var
             already_read$0=already_read + r | 0,
             ofs$0=ofs + r | 0,
             to_read$0=to_read - r | 0,
             already_read=already_read$0,
             ofs=ofs$0,
             to_read=to_read$0;
            continue}}
        if((b[2] + already_read | 0) <= b[3])
         {b[2] = b[2] + already_read | 0;
          if(already_read < len)throw End_of_file;
          return 0}
        throw [0,Assert_failure,_Y_]}}
    function output_buffer(oc,b){return output(oc,b[1],0,b[2])}
    function add_substitute(b,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
      for(;;)
       {if(i$7 < lim$1)
         {var current=caml_string_get(s,i$7);
          if(36 === current)
           {if(92 === previous)
             {add_char(b,current);
              var i$8=i$7 + 1 | 0,previous=32,i$7=i$8;
              continue}
            var start=i$7 + 1 | 0;
            if(lim$1 <= start)throw Not_found;
            var opening=caml_string_get(s,start),switch$0=0;
            if(40 !== opening && 123 !== opening)
             {var i$6=start + 1 | 0,lim$0=caml_ml_string_length(s),i$3=i$6;
              for(;;)
               {if(lim$0 <= i$3)
                 var stop=lim$0;
                else
                 {var match=caml_string_get(s,i$3),switch$1=0;
                  if(91 <= match)
                   {if(97 <= match)
                     {if(! (123 <= match))switch$1 = 1}
                    else
                     if(95 === match)switch$1 = 1}
                  else
                   if(58 <= match)
                    {if(65 <= match)switch$1 = 1}
                   else
                    if(48 <= match)switch$1 = 1;
                  if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
                  var stop=i$3}
                var match$0=[0,sub$0(s,start,stop - start | 0),stop];
                switch$0 = 1;
                break}}
            if(! switch$0)
             {var i$5=start + 1 | 0,k$2=0;
              if(40 === opening)
               var _tn_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_Z_];var _tn_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=i$5;
              for(;;)
               {if(lim <= i)throw Not_found;
                if(caml_string_get(s,i) === opening)
                 {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
                if(caml_string_get(s,i) !== _tn_)
                 {var i$2=i + 1 | 0,i=i$2;continue}
                if(0 !== k)
                 {var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
                var
                 match$0=
                  [0,sub$0(s,i$5,(i - start | 0) - 1 | 0),i + 1 | 0];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(b,caml_call1(f,ident));
            var previous=32,i$7=next_i;
            continue}
          if(92 === previous)
           {add_char(b,92);
            add_char(b,current);
            var i$9=i$7 + 1 | 0,previous=32,i$7=i$9;
            continue}
          if(92 === current)
           {var i$10=i$7 + 1 | 0,previous=current,i$7=i$10;continue}
          add_char(b,current);
          var i$11=i$7 + 1 | 0,previous=current,i$7=i$11;
          continue}
        var _to_=92 === previous?1:0;
        return _to_?add_char(b,previous):_to_}}
    function truncate(b,len)
     {if(0 <= len && ! (b[2] < len)){b[2] = len;return 0}
      return invalid_arg(cst_Buffer_truncate)}
    function to_seq$8(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_tl_=i + 1 | 0;
        return [0,x,function(_tm_){return aux(_tl_,_tm_)}]}
      var _tj_=0;
      return function(_tk_){return aux(_tj_,_tk_)}}
    function to_seqi$3(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_th_=i + 1 | 0;
        return [0,[0,i,x],function(_ti_){return aux(_th_,_ti_)}]}
      var _tf_=0;
      return function(_tg_){return aux(_tf_,_tg_)}}
    function add_seq$1(b,seq)
     {return iter(function(_te_){return add_char(b,_te_)},seq)}
    function of_seq$6(i){var b=create$2(32);add_seq$1(b,i);return b}
    function add_int8(b,x)
     {var new_position=b[2] + 1 | 0;
      if(b[3] < new_position)resize(b,1);
      caml_bytes_unsafe_set(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_ne(b,x)
     {var new_position=b[2] + 2 | 0;
      if(b[3] < new_position)resize(b,2);
      caml_bytes_set16(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int32_ne(b,x)
     {var new_position=b[2] + 4 | 0;
      if(b[3] < new_position)resize(b,4);
      caml_bytes_set32(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int64_ne(b,x)
     {var new_position=b[2] + 8 | 0;
      if(b[3] < new_position)resize(b,8);
      caml_bytes_set64(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_le(b,x){return add_int16_ne(b,x)}
    function add_int16_be(b,x)
     {var x$0=caml_bswap16(x);return add_int16_ne(b,x$0)}
    function add_int32_le(b,x){return add_int32_ne(b,x)}
    function add_int32_be(b,x)
     {var x$0=caml_int32_bswap(x);return add_int32_ne(b,x$0)}
    function add_int64_le(b,x){return add_int64_ne(b,x)}
    function add_int64_be(b,x)
     {var x$0=caml_int64_bswap(x);return add_int64_ne(b,x$0)}
    var
     Stdlib_buffer=
      [0,
       create$2,
       contents,
       to_bytes,
       sub$3,
       blit$3,
       nth$0,
       length$3,
       clear$1,
       reset,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       output_buffer,
       truncate,
       to_seq$8,
       to_seqi$3,
       add_seq$1,
       of_seq$6,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
    caml_register_global(783,Stdlib_buffer,"Stdlib__buffer");
    function create_char_set(param){return make(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function freeze_char_set(char_set){return to_string$1(char_set)}
    function rev_char_set(char_set)
     {var char_set$0=create_char_set(0),i=0;
      for(;;)
       {caml_bytes_set
         (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
        var _td_=i + 1 | 0;
        if(31 !== i){var i=_td_;continue}
        return caml_string_of_bytes(char_set$0)}}
    function is_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_tc_=[0,ndec];else var _tc_=0;
          return [0,[8,___,pad_of_pad_opt(pad_opt$5),_tc_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _ta_=len < min_len?1:0;
      if(_ta_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _tb_=0}
      else
       var _tb_=_ta_;
      return _tb_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function char_of_fconv(opt,fconv)
     {if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:return 102;
        case 1:return 101;
        case 2:return 69;
        case 3:return 103;
        case 4:return 71;
        case 5:return cF;
        case 6:return 104;
        case 7:return 72;
        default:return 70}}
    function bprint_padty(buf,padty)
     {switch(padty)
       {case 0:return buffer_add_char(buf,45);
        case 1:return 0;
        default:return buffer_add_char(buf,48)}}
    function bprint_ignored_flag(buf,ign_flag)
     {return ign_flag?buffer_add_char(buf,95):ign_flag}
    function bprint_pad_opt(buf,pad_opt)
     {if(pad_opt)
       {var width=pad_opt[1];
        return buffer_add_string(buf,caml_string_of_jsbytes("" + width))}
      return 0}
    function bprint_padding(buf,pad)
     {if(typeof pad === "number")
       return 0;
      else
       {if(0 === pad[0])
         {var n=pad[2],padty=pad[1];
          bprint_padty(buf,padty);
          return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
        var padty$0=pad[1];
        bprint_padty(buf,padty$0);
        return buffer_add_char(buf,42)}}
    function bprint_precision(buf,prec)
     {if(typeof prec === "number")return prec?buffer_add_string(buf,cst$11):0;
      var n=prec[1];
      buffer_add_char(buf,46);
      return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
    function bprint_iconv_flag(buf,iconv)
     {switch(iconv)
       {case 1:
        case 4:return buffer_add_char(buf,43);
        case 2:
        case 5:return buffer_add_char(buf,32);
        case 7:
        case 9:
        case 11:
        case 13:
        case 14:
        case 15:return buffer_add_char(buf,35);
        default:return 0}}
    function bprint_altint_fmt(buf,ign_flag,iconv,pad,prec,c)
     {buffer_add_char(buf,37);
      bprint_ignored_flag(buf,ign_flag);
      bprint_iconv_flag(buf,iconv);
      bprint_padding(buf,pad);
      bprint_precision(buf,prec);
      buffer_add_char(buf,c);
      return buffer_add_char(buf,char_of_iconv(iconv))}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      return 8 <= fconv[2]?buffer_add_char(buf,35):0}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return cst$12;
         case 1:return cst$13;
         case 2:return cst$14;
         case 3:return cst$15;
         case 4:return cst$16;
         case 5:return cst$17;
         default:return cst$18}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return symbol(cst$19,make$0(1,c))}}
    function bprint_char_literal(buf,chr)
     {return 37 === chr?buffer_add_string(buf,cst$20):buffer_add_char(buf,chr)}
    function bprint_string_literal(buf,str)
     {var _s__=caml_ml_string_length(str) - 1 | 0,_s9_=0;
      if(! (_s__ < 0))
       {var i=_s9_;
        for(;;)
         {bprint_char_literal(buf,caml_string_get(str,i));
          var _s$_=i + 1 | 0;
          if(_s__ !== i){var i=_s$_;continue}
          break}}
      return 0}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,cst_c);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,cst_s);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,cst_i);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,cst_li);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,cst_ni);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,cst_Li);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,cst_f);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,cst_B);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,cst$21);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,cst$22);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,cst$23);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,cst$24);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,cst_a);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,cst_t$0);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,cst$25);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,cst_r$0);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,cst_r$1);
           var fmtty$0=rest$13;
           continue}}
    function int_of_custom_arity(param)
     {if(param){var x=param[1];return 1 + int_of_custom_arity(x) | 0}return 0}
    function string_of_fmt(fmt$1)
     {var buf=buffer_create(16),fmt=fmt$1,ign_flag=0;
      a:
      for(;;)
       if(typeof fmt === "number")
        return buffer_contents(buf);
       else
        switch(fmt[0])
         {case 0:
           var rest=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,99);
           var fmt=rest,ign_flag=0;
           continue;
          case 1:
           var rest$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,67);
           var fmt=rest$0,ign_flag=0;
           continue;
          case 2:
           var rest$1=fmt[2],pad=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad);
           buffer_add_char(buf,115);
           var fmt=rest$1,ign_flag=0;
           continue;
          case 3:
           var rest$2=fmt[2],pad$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$0);
           buffer_add_char(buf,83);
           var fmt=rest$2,ign_flag=0;
           continue;
          case 4:
           var rest$3=fmt[4],prec=fmt[3],pad$1=fmt[2],iconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_iconv_flag(buf,iconv);
           bprint_padding(buf,pad$1);
           bprint_precision(buf,prec);
           buffer_add_char(buf,char_of_iconv(iconv));
           var fmt=rest$3,ign_flag=0;
           continue;
          case 5:
           var rest$4=fmt[4],prec$0=fmt[3],pad$2=fmt[2],iconv$0=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$0,pad$2,prec$0,108);
           var fmt=rest$4,ign_flag=0;
           continue;
          case 6:
           var rest$5=fmt[4],prec$1=fmt[3],pad$3=fmt[2],iconv$1=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$1,pad$3,prec$1,110);
           var fmt=rest$5,ign_flag=0;
           continue;
          case 7:
           var rest$6=fmt[4],prec$2=fmt[3],pad$4=fmt[2],iconv$2=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$2,pad$4,prec$2,76);
           var fmt=rest$6,ign_flag=0;
           continue;
          case 8:
           var rest$7=fmt[4],prec$3=fmt[3],pad$5=fmt[2],fconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_fconv_flag(buf,fconv);
           bprint_padding(buf,pad$5);
           bprint_precision(buf,prec$3);
           buffer_add_char(buf,char_of_fconv(0,fconv));
           var fmt=rest$7,ign_flag=0;
           continue;
          case 9:
           var rest$8=fmt[2],pad$6=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$6);
           buffer_add_char(buf,66);
           var fmt=rest$8,ign_flag=0;
           continue;
          case 10:
           var rest$9=fmt[1];
           buffer_add_string(buf,cst$26);
           var fmt=rest$9;
           continue;
          case 11:
           var rest$10=fmt[2],str=fmt[1];
           bprint_string_literal(buf,str);
           var fmt=rest$10;
           continue;
          case 12:
           var rest$11=fmt[2],chr$0=fmt[1];
           bprint_char_literal(buf,chr$0);
           var fmt=rest$11;
           continue;
          case 13:
           var rest$12=fmt[3],fmtty=fmt[2],pad_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt);
           buffer_add_char(buf,123);
           bprint_fmtty(buf,fmtty);
           buffer_add_char(buf,37);
           buffer_add_char(buf,125);
           var fmt=rest$12,ign_flag=0;
           continue;
          case 14:
           var rest$13=fmt[3],fmtty$0=fmt[2],pad_opt$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt$0);
           buffer_add_char(buf,40);
           bprint_fmtty(buf,fmtty$0);
           buffer_add_char(buf,37);
           buffer_add_char(buf,41);
           var fmt=rest$13,ign_flag=0;
           continue;
          case 15:
           var rest$14=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,97);
           var fmt=rest$14,ign_flag=0;
           continue;
          case 16:
           var rest$15=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,116);
           var fmt=rest$15,ign_flag=0;
           continue;
          case 17:
           var rest$16=fmt[2],fmting_lit=fmt[1];
           bprint_string_literal(buf,string_of_formatting_lit(fmting_lit));
           var fmt=rest$16;
           continue;
          case 18:
           var rest$17=fmt[2],fmting_gen=fmt[1];
           if(0 === fmting_gen[0])
            {var match$1=fmting_gen[1],str$0=match$1[2];
             buffer_add_string(buf,cst$27);
             buffer_add_string(buf,str$0)}
           else
            {var match$2=fmting_gen[1],str$1=match$2[2];
             buffer_add_string(buf,cst$28);
             buffer_add_string(buf,str$1)}
           var fmt=rest$17;
           continue;
          case 19:
           var rest$18=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,114);
           var fmt=rest$18,ign_flag=0;
           continue;
          case 20:
           var rest$19=fmt[3],char_set=fmt[2],width_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,width_opt);
           var
            print_char=
             function(buf,i)
              {var c=char_of_int(i);
               return 37 === c
                       ?(buffer_add_char(buf,37),buffer_add_char(buf,37))
                       :64 === c
                         ?(buffer_add_char(buf,37),buffer_add_char(buf,64))
                         :buffer_add_char(buf,c)};
           buffer_add_char(buf,91);
           var
            _sZ_=
             is_in_char_set(char_set,0)
              ?(buffer_add_char(buf,94),rev_char_set(char_set))
              :char_set,
            is_alone$0=
             function(_s4_)
              {function is_alone(c)
                {var
                  after=chr(c + 1 | 0),
                  before=chr(c - 1 | 0),
                  _s5_=is_in_char_set(_s4_,c);
                 if(_s5_)
                  var
                   _s6_=is_in_char_set(_s4_,before),
                   _s7_=_s6_?is_in_char_set(_s4_,after):_s6_,
                   _s8_=1 - _s7_;
                 else
                  var _s8_=_s5_;
                 return _s8_}
               return is_alone},
            is_alone=is_alone$0(_sZ_);
           if(is_alone(93))buffer_add_char(buf,93);
           var i=1;
           b:
           for(;;)
            {if(i < 256)
              {if(! is_in_char_set(_sZ_,char_of_int(i)))
                {var i$0=i + 1 | 0,i=i$0;continue}
               var match=char_of_int(i),switcher=match - 45 | 0,switch$0=0;
               if(48 < switcher >>> 0)
                if(210 <= switcher)print_char(buf,255);else switch$0 = 1;
               else
                {var switcher$0=switcher - 1 | 0;
                 if(46 < switcher$0 >>> 0){var i$2=i + 1 | 0,i=i$2;continue}
                 switch$0 = 1}
               if(switch$0)
                {var i$1=i + 1 | 0;
                 if(! is_in_char_set(_sZ_,char_of_int(i$1)))
                  {print_char(buf,i$1 - 1 | 0);
                   var i$6=i$1 + 1 | 0,i=i$6;
                   continue}
                 var
                  match$0=char_of_int(i$1),
                  switcher$1=match$0 - 45 | 0,
                  switch$1=0;
                 if(48 < switcher$1 >>> 0)
                  if(210 <= switcher$1)
                   {print_char(buf,254);print_char(buf,255)}
                  else
                   switch$1 = 1;
                 else
                  {var switcher$2=switcher$1 - 1 | 0;
                   if(46 < switcher$2 >>> 0)
                    {if(! is_in_char_set(_sZ_,char_of_int(i$1 + 1 | 0)))
                      {print_char(buf,i$1 - 1 | 0);
                       var i$5=i$1 + 1 | 0,i=i$5;
                       continue}
                     switch$1 = 1}
                   else
                    switch$1 = 1}
                 if(switch$1)
                  {if(! is_in_char_set(_sZ_,char_of_int(i$1 + 1 | 0)))
                    {print_char(buf,i$1 - 1 | 0);
                     print_char(buf,i$1);
                     var i$4=i$1 + 2 | 0,i=i$4;
                     continue}
                   var j=i$1 + 2 | 0,i$3=i$1 - 1 | 0,j$0=j;
                   for(;;)
                    {if(256 !== j$0 && is_in_char_set(_sZ_,char_of_int(j$0)))
                      {var j$1=j$0 + 1 | 0,j$0=j$1;continue}
                     print_char(buf,i$3);
                     print_char(buf,45);
                     print_char(buf,j$0 - 1 | 0);
                     if(j$0 < 256){var i$7=j$0 + 1 | 0,i=i$7;continue b}
                     break}}}}
             if(is_alone(45))buffer_add_char(buf,45);
             buffer_add_char(buf,93);
             var fmt=rest$19,ign_flag=0;
             continue a}
          case 21:
           var rest$20=fmt[2],counter=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           switch(counter)
            {case 0:var _s0_=108;break;
             case 1:var _s0_=110;break;
             default:var _s0_=78}
           buffer_add_char(buf,_s0_);
           var fmt=rest$20,ign_flag=0;
           continue;
          case 22:
           var rest$21=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_string_literal(buf,cst_0c);
           var fmt=rest$21,ign_flag=0;
           continue;
          case 23:
           var
            rest$22=fmt[2],
            ign=fmt[1],
            match$3=param_format_of_ignored_format(ign,rest$22),
            fmt$0=match$3[1],
            fmt=fmt$0,
            ign_flag=1;
           continue;
          default:
           var
            rest$23=fmt[3],
            arity=fmt[1],
            _s2_=int_of_custom_arity(arity),
            _s1_=1;
           if(! (_s2_ < 1))
            {var i$8=_s1_;
             for(;;)
              {buffer_add_char(buf,37);
               bprint_ignored_flag(buf,ign_flag);
               buffer_add_char(buf,63);
               var _s3_=i$8 + 1 | 0;
               if(_s2_ !== i$8){var i$8=_s3_;continue}
               break}}
           var fmt=rest$23,ign_flag=0;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_$_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_sG_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_sG_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_sH_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_sH_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_sI_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_sI_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_sJ_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_sJ_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_sK_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_sK_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_sL_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_sL_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_sM_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_sM_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_sN_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_sN_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_sO_=ty1[2],_sP_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_sQ_=trans(_sO_,rest2$7);
              return [8,trans(_sP_,ty2),_sQ_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_ai_];
          break;
         case 9:
          var switch$10=0,_sR_=ty1[3],_sS_=ty1[2],_sT_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_sS_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_sT_,ty22,trans(_sR_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_aj_];
          break;
         case 10:
          var _sU_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_sU_,rest2$9)]}
          throw [0,Assert_failure,_ak_];
         case 11:
          var switch$11=0,_sV_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_sV_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_al_];
          break;
         case 12:
          var switch$12=0,_sW_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_sW_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_am_];
          break;
         case 13:
          var switch$13=0,_sX_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_sX_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_an_];
          break;
         default:
          var switch$14=0,_sY_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_sY_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_ao_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ac_];
        case 1:throw [0,Assert_failure,_ad_];
        case 2:throw [0,Assert_failure,_ae_];
        case 3:throw [0,Assert_failure,_af_];
        case 4:throw [0,Assert_failure,_ag_];
        case 5:throw [0,Assert_failure,_aa_];
        case 6:throw [0,Assert_failure,_ab_];
        default:throw [0,Assert_failure,_ah_]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _si_=function(param){return 0},
         _sj_=function(param){return 0},
         _sk_=function(param){return 0};
        return [0,function(param){return 0},_sk_,_sj_,_si_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _sl_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_sl_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _sm_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _sm_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _sn_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _sn_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _so_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _so_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _sp_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _sp_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _sq_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _sq_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _sr_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _sr_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _ss_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _ss_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _st_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _st_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _su_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _sv_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _sw_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _sw_,
                  _sv_,
                  _su_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _sx_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _sx_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _sy_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _sy_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _sz_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _sz_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _sA_=function(param){caml_call1(de$12,0);return 0},
           _sB_=function(param){caml_call1(ed$12,0);return 0},
           _sC_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _sC_,
                  _sB_,
                  _sA_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _sD_=function(param){caml_call1(de$13,0);return 0},
           _sE_=function(param){caml_call1(ed$13,0);return 0},
           _sF_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _sF_,
                  _sE_,
                  _sD_]}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?prec?[2,fmtty]:fmtty:fmtty}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _sg_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_sh_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _sh_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_sh_,_sg_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$0=rest$18;continue;
              case 9:
               var fmtty$5=ign[2];
               return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
              case 10:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    var
     Type_mismatch=
      [248,cst_CamlinternalFormat_Type_mi,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _sf_=match[2];
          if(typeof _sf_ !== "number" && 2 === _sf_[0])
           {var rest=_sf_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _sd_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_sd_))
             throw Type_mismatch;
            var _se_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_se_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _rY_=match$1[2],
           _rX_=match$1[1];
          if(typeof _rY_ !== "number" && 1 === _rY_[0])
           {var
             fmtty_rest$1=_rY_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_rX_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _r0_=match$3[2],
           _rZ_=match$3[1];
          if(typeof _r0_ !== "number" && 1 === _r0_[0])
           {var
             fmtty_rest$2=_r0_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_rZ_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _r2_=match$5[3],
           _r1_=match$5[1];
          if(typeof _r2_ !== "number" && 2 === _r2_[0])
           {var
             fmtty_rest$3=_r2_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_r1_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _r4_=match$7[3],
           _r3_=match$7[1];
          if(typeof _r4_ !== "number" && 3 === _r4_[0])
           {var
             fmtty_rest$4=_r4_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_r3_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _r6_=match$9[3],
           _r5_=match$9[1];
          if(typeof _r6_ !== "number" && 4 === _r6_[0])
           {var
             fmtty_rest$5=_r6_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_r5_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _r8_=match$11[3],
           _r7_=match$11[1];
          if(typeof _r8_ !== "number" && 5 === _r8_[0])
           {var
             fmtty_rest$6=_r8_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_r7_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _r__=match$13[3],
           _r9_=match$13[1];
          if(typeof _r__ !== "number" && 6 === _r__[0])
           {var
             fmtty_rest$7=_r__[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_r9_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _sa_=match$15[2],
           _r$_=match$15[1];
          if(typeof _sa_ !== "number" && 7 === _sa_[0])
           {var
             fmtty_rest$8=_sa_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_r$_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _sb_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_sb_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _sc_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_sc_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_sc_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format(fmt,fmtty)
     {var _rW_=type_format_gen(fmt,fmtty);
      if(typeof _rW_[2] === "number"){var fmt$0=_rW_[1];return fmt$0}
      throw Type_mismatch}
    function recast(fmt,fmtty){return type_format(fmt,erase_rel(symm(fmtty)))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _rV_=2 === padty$0?48:32,res=make(width$0,_rV_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       res=make(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function format_of_fconv(fconv,prec)
     {var
       prec$0=abs(prec),
       symb=char_of_fconv(_ap_,fconv),
       buf=buffer_create(16);
      buffer_add_char(buf,37);
      bprint_fconv_flag(buf,fconv);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_rQ_=caml_ml_string_length(s) - 1 | 0,_rP_=0;
        if(! (_rQ_ < 0))
         {var i$0=_rP_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _rU_=i$0 + 1 | 0;
            if(_rQ_ !== i$0){var i$0=_rU_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _rS_=caml_ml_string_length(s) - 1 | 0,
         _rR_=0;
        if(! (_rS_ < 0))
         {var i=_rR_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _rT_=i + 1 | 0;
            if(_rS_ !== i){var i=_rT_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _rO_=cst_d$3;break;
        case 2:var _rO_=cst_d$4;break;
        case 4:var _rO_=cst_i$1;break;
        case 5:var _rO_=cst_i$2;break;
        case 6:var _rO_=cst_x;break;
        case 7:var _rO_=cst_x$0;break;
        case 8:var _rO_=cst_X$0;break;
        case 9:var _rO_=cst_X$1;break;
        case 10:var _rO_=cst_o;break;
        case 11:var _rO_=cst_o$0;break;
        case 0:
        case 13:var _rO_=cst_d$2;break;
        case 3:
        case 14:var _rO_=cst_i$0;break;
        default:var _rO_=cst_u}
      return transform_int_alt(iconv,caml_format_int(_rO_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _rN_=cst_ld$0;break;
        case 2:var _rN_=cst_ld$1;break;
        case 4:var _rN_=cst_li$1;break;
        case 5:var _rN_=cst_li$2;break;
        case 6:var _rN_=cst_lx;break;
        case 7:var _rN_=cst_lx$0;break;
        case 8:var _rN_=cst_lX;break;
        case 9:var _rN_=cst_lX$0;break;
        case 10:var _rN_=cst_lo;break;
        case 11:var _rN_=cst_lo$0;break;
        case 0:
        case 13:var _rN_=cst_ld;break;
        case 3:
        case 14:var _rN_=cst_li$0;break;
        default:var _rN_=cst_lu}
      return transform_int_alt(iconv,caml_format_int(_rN_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _rM_=cst_nd$0;break;
        case 2:var _rM_=cst_nd$1;break;
        case 4:var _rM_=cst_ni$1;break;
        case 5:var _rM_=cst_ni$2;break;
        case 6:var _rM_=cst_nx;break;
        case 7:var _rM_=cst_nx$0;break;
        case 8:var _rM_=cst_nX;break;
        case 9:var _rM_=cst_nX$0;break;
        case 10:var _rM_=cst_no;break;
        case 11:var _rM_=cst_no$0;break;
        case 0:
        case 13:var _rM_=cst_nd;break;
        case 3:
        case 14:var _rM_=cst_ni$0;break;
        default:var _rM_=cst_nu}
      return transform_int_alt(iconv,caml_format_int(_rM_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _rL_=cst_Ld$0;break;
        case 2:var _rL_=cst_Ld$1;break;
        case 4:var _rL_=cst_Li$1;break;
        case 5:var _rL_=cst_Li$2;break;
        case 6:var _rL_=cst_Lx;break;
        case 7:var _rL_=cst_Lx$0;break;
        case 8:var _rL_=cst_LX;break;
        case 9:var _rL_=cst_LX$0;break;
        case 10:var _rL_=cst_Lo;break;
        case 11:var _rL_=cst_Lo$0;break;
        case 0:
        case 13:var _rL_=cst_Ld;break;
        case 3:
        case 14:var _rL_=cst_Li$0;break;
        default:var _rL_=cst_Lu}
      return transform_int_alt(iconv,caml_int64_format(_rL_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return runtime.caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=runtime.caml_classify_float(x);
        return 3 === match
                ?x < 0.?cst_neg_infinity:cst_infinity
                :4 <= match?cst_nan:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i=0;
         for(;;)
          {if(i === len)
            var _rJ_=0;
           else
            {var match=caml_string_get(str,i),_rI_=match - 46 | 0,switch$0=0;
             if(23 < _rI_ >>> 0)
              {if(55 === _rI_)switch$0 = 1}
             else
              if(21 < (_rI_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
             var _rJ_=1}
           var _rK_=_rJ_?str:symbol(str,cst$29);
           return caml_special_val(_rK_)}
        case 6:return hex(0);
        case 7:return uppercase_ascii$1(hex(0));
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var
              str=escaped(c),
              l=caml_ml_string_length(str),
              res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _rF_=pad$5[2],_rG_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_rG_,_rF_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_rG_,_rF_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_rG_,_rF_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _rH_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_rH_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_rH_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_rH_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _rD_=fmt$0[1];
           if(0 === _rD_[0])
            {var
              rest$13=fmt$0[2],
              match=_rD_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_rD_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_aq_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,cst_Printf_bad_conversion];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(cst_u$0,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param$0(counter$1,k$0,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param$0,[0,k$0,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _rE_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_rE_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_rE_])}}
    function make_ignored_param$0(counter,k,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:throw [0,Assert_failure,_ar_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,acc,fmtty,fmt)}
          return caml_trampoline_return(make_from_fmtty$0,[0,k,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_rC_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_as_];
         default:throw [0,Assert_failure,_at_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _rB_=[8,acc,cst_Printf_bad_conversion$0];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_rB_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_rB_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _rA_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_rA_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_rA_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_ignored_param(k,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,acc,ign,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return match
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _rx_=pad[2],_ry_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_ry_,_rx_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_ry_,_rx_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_ry_,_rx_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _rz_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_rz_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_rz_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_rz_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,o);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_qO_=make_iprintf(k$0,o,rest);
           return function(_rw_){return _qO_};
          case 1:
           var rest$0=fmt$0[1],_qP_=make_iprintf(k$0,o,rest$0);
           return function(_rv_){return _qP_};
          case 2:
           var _qQ_=fmt$0[1];
           if(typeof _qQ_ === "number")
            {var rest$1=fmt$0[2],_qR_=make_iprintf(k$0,o,rest$1);
             return function(_rr_){return _qR_}}
           else
            {if(0 === _qQ_[0])
              {var rest$2=fmt$0[2],_qS_=make_iprintf(k$0,o,rest$2);
               return function(_ru_){return _qS_}}
             var
              rest$3=fmt$0[2],
              _qT_=make_iprintf(k$0,o,rest$3),
              _qU_=function(_rt_){return _qT_};
             return function(_rs_){return _qU_}}
          case 3:
           var _qV_=fmt$0[1];
           if(typeof _qV_ === "number")
            {var rest$4=fmt$0[2],_qW_=make_iprintf(k$0,o,rest$4);
             return function(_rn_){return _qW_}}
           else
            {if(0 === _qV_[0])
              {var rest$5=fmt$0[2],_qX_=make_iprintf(k$0,o,rest$5);
               return function(_rq_){return _qX_}}
             var
              rest$6=fmt$0[2],
              _qY_=make_iprintf(k$0,o,rest$6),
              _qZ_=function(_rp_){return _qY_};
             return function(_ro_){return _qZ_}}
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _q0_=fmt$0[1];
           if(typeof _q0_ === "number")
            {var rest$12=fmt$0[2],_q1_=make_iprintf(k$0,o,rest$12);
             return function(_rj_){return _q1_}}
           else
            {if(0 === _q0_[0])
              {var rest$13=fmt$0[2],_q2_=make_iprintf(k$0,o,rest$13);
               return function(_rm_){return _q2_}}
             var
              rest$14=fmt$0[2],
              _q3_=make_iprintf(k$0,o,rest$14),
              _q4_=function(_rl_){return _q3_};
             return function(_rk_){return _q4_}}
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_q5_=make_iprintf(k$0,o,rest$15);
           return function(_ri_){return _q5_};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _q6_=make_iprintf(k$0,o,rest$17),
            _q7_=function(_rh_){return _q6_};
           return function(_rg_){return _q7_};
          case 16:
           var rest$18=fmt$0[1],_q8_=make_iprintf(k$0,o,rest$18);
           return function(_rf_){return _q8_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _q9_=fmt$0[1];
           if(0 === _q9_[0])
            {var
              rest$19=fmt$0[2],
              match=_q9_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_q9_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_au_];
          case 20:
           var rest$21=fmt$0[3],_q__=make_iprintf(k$0,o,rest$21);
           return function(_re_){return _q__};
          case 21:
           var rest$22=fmt$0[2],_q$_=make_iprintf(k$0,o,rest$22);
           return function(_rd_){return _q$_};
          case 22:
           var rest$23=fmt$0[1],_ra_=make_iprintf(k$0,o,rest$23);
           return function(_rc_){return _ra_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_rb_=0;
           return make_ignored_param
                   (function(param){return caml_call1(k$0,o)},_rb_,ign,rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}
           return caml_trampoline_return
                   (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity])}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_qM_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_qN_){return _qM_}}
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_iprintf$0(counter$0,k,o,fmt)}
      return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt])}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)
           {var _qi_=make_iprintf(k,o,fmt),_qj_=function(_qA_){return _qi_};
            return function(_qz_){return _qj_}}
          var _qk_=make_iprintf(k,o,fmt);
          return function(_qy_){return _qk_}}
        var _ql_=make_iprintf(k,o,fmt);
        return function(_qx_){return _ql_}}
      else
       {if(0 === pad[0])
         {if(typeof prec === "number")
           {if(prec)
             {var _qm_=make_iprintf(k,o,fmt),_qn_=function(_qL_){return _qm_};
              return function(_qK_){return _qn_}}
            var _qo_=make_iprintf(k,o,fmt);
            return function(_qJ_){return _qo_}}
          var _qp_=make_iprintf(k,o,fmt);
          return function(_qI_){return _qp_}}
        if(typeof prec === "number")
         {if(prec)
           {var
             _qq_=make_iprintf(k,o,fmt),
             _qr_=function(_qH_){return _qq_},
             _qs_=function(_qG_){return _qr_};
            return function(_qF_){return _qs_}}
          var _qt_=make_iprintf(k,o,fmt),_qu_=function(_qE_){return _qt_};
          return function(_qD_){return _qu_}}
        var _qv_=make_iprintf(k,o,fmt),_qw_=function(_qC_){return _qv_};
        return function(_qB_){return _qw_}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _qg_=acc$0[2],_qh_=acc$0[1];
           if(0 === _qg_[0])
            {var acc$1=_qg_[1];
             output_acc(o,_qh_);
             output_string(o,cst$30);
             var acc$0=acc$1;
             continue}
           var acc$2=_qg_[1];
           output_acc(o,_qh_);
           output_string(o,cst$31);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _qe_=acc$0[2],_qf_=acc$0[1];
           if(0 === _qe_[0])
            {var acc$1=_qe_[1];
             bufput_acc(b,_qf_);
             add_string(b,cst$32);
             var acc$0=acc$1;
             continue}
           var acc$2=_qe_[1];
           bufput_acc(b,_qf_);
           add_string(b,cst$33);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _qc_=acc$0[2],_qd_=acc$0[1];
           if(0 === _qc_[0])
            {var acc$1=_qc_[1];
             strput_acc(b,_qd_);
             add_string(b,cst$34);
             var acc$0=acc$1;
             continue}
           var acc$2=_qc_[1];
           strput_acc(b,_qd_);
           add_string(b,cst$35);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$2(256);
      function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,cst$36))return _av_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_aw_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _qa_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_qa_}
       catch(_qb_)
        {_qb_ = caml_wrap_exception(_qb_);
         if(_qb_[1] !== Failure)throw _qb_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,cst$37)
        &&
        caml_string_notequal(box_name,cst_b$0))
       var
        box_type=
         caml_string_notequal(box_name,cst_h)
          ?caml_string_notequal(box_name,cst_hov)
            ?caml_string_notequal(box_name,cst_hv)
              ?caml_string_notequal(box_name,cst_v)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=prec?[0,1,fmt]:[0,0,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_ax_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,cst_unexpected_end_of_format)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_ay_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_az_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0),switcher=c - 48 | 0;
          if(9 < switcher >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_aQ_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0),switcher=c - 48 | 0;
           if(9 < switcher >>> 0)
            return expected_character(str_ind + 1 | 0,cst_digit,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_aR_]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_aW_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(plus$0)
           {if(hash$0)
             switch$0 = 1;
            else
             if(! space$0){if(100 === symb)return 1;if(105 === symb)return 4}}
          else
           if(hash$0)
            if(space$0)
             switch$0 = 1;
            else
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
           else
            if(space$0)
             {if(100 === symb)return 2;if(105 === symb)return 5}
            else
             {var switcher$1=symb - 88 | 0;
              if(! (32 < switcher$1 >>> 0))
               switch(switcher$1)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
          if(switch$0)
           {var switcher=symb - 88 | 0;
            if(! (32 < switcher >>> 0))
             switch(switcher)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,cst$49)
               }}
          if(plus$0)
           {if(space$0)
             {if(legacy_behavior$0){var space$0=0;continue}
              return incompatible_flag(pct_ind,str_ind,32,cst$46)}
            if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$47)}
          if(space$0)
           {if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$48)}
          throw [0,Assert_failure,_aU_]}}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_aS_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 {var switcher=match$0 - 123 | 0;
                  switch(switcher)
                   {case 0:
                     var
                      sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                      str_ind$2=sub_end + 2 | 0,
                      str_ind$0=str_ind$2;
                     continue;
                    case 1:break;
                    default:
                     return expected_character
                             (str_ind$0 + 1 | 0,cst_character,125)}}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,cst_character$0,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(! (58 <= match$2))switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _p__=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _p__=0;
          var _p9_=_p__}
        catch(_p$_)
         {_p$_ = caml_wrap_exception(_p$_);
          if(_p$_ !== Not_found && _p$_[1] !== Failure)throw _p$_;
          var _p9_=0}
        if(_p9_)
         {var
           match=_p9_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_aO_,fmt_rest$0]]}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _p2_=str_ind === end_ind?1:0,
           _p3_=_p2_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_p3_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(! (58 <= match$0))switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _p4_=[0,s,width,0],
             _p5_=str_ind_3 + 1 | 0,
             formatting_lit$0=_p4_,
             next_ind=_p5_;
           else
            switch$1 = 1;
          else
           {var switcher$0=switcher - 1 | 0;
            if(1 < switcher$0 >>> 0)
             {var
               match$3=parse_integer(str_ind_3,end_ind),
               offset=match$3[2],
               str_ind_4=match$3[1],
               str_ind_5=parse_spaces(str_ind_4,end_ind);
              if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
              var
               s$0=
                sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
               _p6_=[0,s$0,width,offset],
               _p7_=str_ind_5 + 1 | 0,
               formatting_lit$0=_p6_,
               next_ind=_p7_}
            else
             switch$1 = 1}
          if(switch$1)throw Not_found}
        catch(_p8_)
         {_p8_ = caml_wrap_exception(_p8_);
          if(_p8_ !== Not_found && _p8_[1] !== Failure)throw _p8_;
          var formatting_lit$0=formatting_lit,next_ind=str_ind}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=index_from$0(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str],
             formatting$0=is_open_tag?[0,sub_format$0]:[1,sub_format$0],
             _p0_=[0,[18,formatting$0,fmt_rest$0]];
            return _p0_}
          throw Not_found}
        catch(_p1_)
         {_p1_ = caml_wrap_exception(_p1_);
          if(_p1_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _p1_}}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _pX_=flag[1],_pY_=_pX_?1 - legacy_behavior$0:_pX_;
          if(_pY_)
           {var _pZ_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_aA_),str,str_ind,_pZ_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _pS_=space[1],
           _pT_=hash[1],
           _pU_=plus[1],
           _pV_=minus[1],
           _pW_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            _pW_
             ?_pV_
               ?legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,cst_0)
               :2
             :_pV_?0:1,
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _pV_,
                       _pU_,
                       _pT_,
                       _pS_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _pV_,
                     _pU_,
                     _pT_,
                     _pS_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,cst_padding);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_pV_,_pU_,_pT_,_pS_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_pV_,_pU_,_pT_,_pS_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_pV_,_pU_,_pT_,_pS_,ign,_aB_)}}}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            {var switcher=symb$0 - 42 | 0;
             switch(switcher)
              {case 0:
                return parse_after_precision
                        (pct_ind,
                         str_ind$0 + 1 | 0,
                         end_ind,
                         minus,
                         plus,
                         hash,
                         space,
                         ign,
                         pad,
                         1);
               case 1:
               case 3:
                if(legacy_behavior$0)
                 {var
                   _pR_=str_ind$0 + 1 | 0,
                   minus$0=minus || (45 === symb$0?1:0);
                  return parse_literal(minus$0,_pR_)}
                break
               }}
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     _aC_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,cst_precision)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,match)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   match,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof match === "number" && ! match)return parse_conv(0);
          if(minus)
           {if(typeof match === "number")return parse_conv(_aD_);
            var n=match[1];
            return parse_conv([0,0,n])}
          if(typeof match === "number")return parse_conv(_aE_);
          var n$0=match[1];
          return parse_conv([0,1,n$0])}
        return parse_conv(pad)}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number" && ! match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,cst_precision$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aF_
                      :incompatible_flag(pct_ind,str_ind,48,cst_precision$1)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,cst_0$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aG_
                      :incompatible_flag(pct_ind,str_ind,symb,cst_0$1)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,cst$38);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,cst_0$2)}
            return incompatible_flag(pct_ind,str_ind,c,cst$39)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _po_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _po_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_po_;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _pq_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_pq_;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_pw_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _pw_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_pw_;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _px_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _px_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_px_;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set,char_of_int(i));
                    var _pQ_=i + 1 | 0;
                    if(c !== i){var i=_pQ_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_aP_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _pP_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_pP_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_pP_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                  if(46 <= c$1)
                   {if(64 === c$1)
                     switch$0 = 1;
                    else
                     if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                  else
                   if(37 === c$1)
                    switch$0 = 1;
                   else
                    if(45 <= c$1)
                     {var str_ind$2=str_ind$0 + 1 | 0;
                      if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                      var c$2=caml_string_get(str,str_ind$2);
                      if(37 === c$2)
                       {if((str_ind$2 + 1 | 0) === end_ind)
                         unexpected_end_of_format(end_ind);
                        var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                        if(37 !== c$3 && 64 !== c$3)
                         return fail_single_percent(str_ind$2);
                        add_range(c$0,c$3);
                        var _pN_=str_ind$2 + 2 | 0;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return parse_char_set_content(counter$2,_pN_,end_ind)}
                        return caml_trampoline_return
                                (parse_char_set_content,[0,_pN_,end_ind])}
                      if(93 === c$2)
                       {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                      add_range(c$0,c$2);
                      var _pO_=str_ind$2 + 1 | 0;
                      if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return parse_char_set_content(counter$1,_pO_,end_ind)}
                      return caml_trampoline_return
                              (parse_char_set_content,[0,_pO_,end_ind])}
                  if(switch$0 && 37 === c$0)
                   {add_char(c$1);
                    var _pM_=str_ind$0 + 1 | 0;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return parse_char_set_content(counter$0,_pM_,end_ind)}
                    return caml_trampoline_return
                            (parse_char_set_content,[0,_pM_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,reverse=1,str_ind$1=str_ind$0;
            else
             var reverse=0,str_ind$1=str_ind;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set$0=freeze_char_set(char_set),
             char_set$1=reverse?rev_char_set(char_set$0):char_set$0,
             match$21=parse(next_ind,end_ind),
             fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$1],
              _pC_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _pC_=[0,[20,get_pad_opt(91),char_set$1,fmt_rest$19]];
            var fmt_result=_pC_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _pD_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _pE_=_pD_;
              else
               var
                _pE_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message
                    (str_ind,cst_non_zero_widths_are_unsupp);
              var _pF_=_pE_}
            else
             var _pF_=char_format(fmt_rest$21);
            var fmt_result=_pF_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _pG_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_pG_;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _pH_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _pH_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_pH_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _pI_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _pI_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_pI_;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _pp_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _pp_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_pp_;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var
               symb$0=caml_string_get(str,str_ind),
               _pJ_=symb$0 - 88 | 0,
               switch$2=0;
              if(! (32 < _pJ_ >>> 0))
               switch(_pJ_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _pv_=1;switch$2 = 1;break
                 }
              if(! switch$2)var _pv_=0;
              if(_pv_){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$15=parse(str_ind,end_ind),
               fmt_rest$13=match$15[1],
               switch$3=0;
              if(108 <= symb)
               {if(! (111 <= symb))
                 {var switcher$0=symb - 108 | 0;
                  switch(switcher$0)
                   {case 0:var counter=0;switch$3 = 1;break;
                    case 1:break;
                    default:var counter=1;switch$3 = 1}}}
              else
               if(76 === symb){var counter=2;switch$3 = 1}
              if(! switch$3)throw [0,Assert_failure,_aT_];
              if(get_ign(0))
               var ignored$5=[11,counter],_pu_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _pu_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_pu_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_aK_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _py_=get_space(0),
             _pz_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_pz_,_py_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _pA_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _pB_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_pB_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _pA_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_pA_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             hash$1=get_hash(0),
             plus$2=get_plus(0),
             flag=
              plus$2
               ?space$1
                 ?legacy_behavior$0
                   ?1
                   :incompatible_flag(pct_ind,str_ind,32,cst$50)
                 :1
               :space$1?2:0,
             switch$4=0;
            if(73 <= symb)
             {var switcher$1=symb - 101 | 0;
              if(3 < switcher$1 >>> 0)
               switch$4 = 1;
              else
               {switch(switcher$1)
                 {case 0:var _pK_=1;break;
                  case 1:var _pK_=0;break;
                  case 2:var _pK_=3;break;
                  default:var _pK_=6}
                var kind=_pK_}}
            else
             if(69 <= symb)
              {var switcher$2=symb - 69 | 0,switch$5=0;
               switch(switcher$2)
                {case 0:var _pL_=2;break;
                 case 1:switch$4 = 1;switch$5 = 1;break;
                 case 2:var _pL_=4;break;
                 default:var _pL_=7}
               if(! switch$5)var kind=_pL_}
             else
              switch$4 = 1;
            if(switch$4)
             {var switch$6=0;
              if(hash$1)
               if(70 === symb)var kind=8;else switch$6 = 1;
              else
               if(70 === symb)var kind=5;else switch$6 = 1;
              if(switch$6)throw [0,Assert_failure,_aV_]}
            var
             fconv=[0,flag,kind],
             match$13=parse(str_ind,end_ind),
             fmt_rest$11=match$13[1];
            if(get_ign(0))
             {var match=get_prec(0);
              if(typeof match === "number")
               var _pr_=match?incompatible_flag(pct_ind,str_ind,95,cst$40):0;
              else
               var ndec=match[1],_pr_=[0,ndec];
              var
               ignored$4=[6,get_pad_opt(95),_pr_],
               _ps_=[0,[23,ignored$4,fmt_rest$11]]}
            else
             var
              _pt_=get_prec(0),
              match$14=make_padprec_fmt_ebb(get_pad(0),_pt_,fmt_rest$11),
              fmt_rest$12=match$14[3],
              prec$3=match$14[2],
              pad$5=match$14[1],
              _ps_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_ps_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$7=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$7 = 1;
           else
            {var switcher=symb - 108 | 0,switch$8=0;
             switch(switcher)
              {case 0:
                var
                 _o__=caml_string_get(str,str_ind),
                 _o$_=get_space(0),
                 _pa_=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_pa_,_o$_,_o__),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _pb_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _pd_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_pd_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _pb_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _pc_=_pb_;
                break;
               case 1:switch$7 = 1;switch$8 = 1;break;
               default:
                var
                 _pe_=caml_string_get(str,str_ind),
                 _pf_=get_space(0),
                 _pg_=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_pg_,_pf_,_pe_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _ph_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _pi_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_pi_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _ph_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _pc_=_ph_}
             if(! switch$8)var fmt_result=_pc_}
          else
           if(76 === symb)
            {var
              _pj_=caml_string_get(str,str_ind),
              _pk_=get_space(0),
              _pl_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_pl_,_pk_,_pj_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _pm_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _pn_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_pn_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _pm_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_pm_}
           else
            switch$7 = 1;
          if(switch$7)
           var
            fmt_result=
             caml_call3(failwith_message(_aH_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _o1_=1 - plus_used[1],plus$0=_o1_?plus:_o1_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,cst$41);
          var _o2_=1 - hash_used[1],hash$0=_o2_?hash:_o2_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,cst$42);
          var _o3_=1 - space_used[1],space$0=_o3_?space:_o3_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,cst$43);
          var _o4_=1 - pad_used[1],_o5_=_o4_?caml_notequal([0,pad],_aI_):_o4_;
          if(_o5_)incompatible_flag(pct_ind,str_ind,symb,cst_padding$0);
          var
           _o6_=1 - prec_used[1],
           _o7_=_o6_?caml_notequal([0,prec],_aJ_):_o6_;
          if(_o7_)
           {var _o8_=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_o8_,cst_precision$2)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,cst$44)}
        var _o9_=1 - ign_used[1],ign$0=_o9_?ign:_o9_;
        if(ign$0)
         {var switch$9=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$9 = 1}
          else
           if(33 !== symb && ! (37 <= symb))switch$9 = 1;
          var switch$10=0;
          if(switch$9 || ! legacy_behavior$0)switch$10 = 1;
          if(switch$10)incompatible_flag(pct_ind,str_ind,symb,cst$45)}
        return fmt_result}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _o0_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_o0_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_aL_;
            else
             {var c=caml_string_get(str,str_ind$0),switch$0=0;
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  switch$0 = 1;
                 else
                  switch(switcher)
                   {case 0:
                     var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]]}}
               else
                if(91 <= c)
                 {var switcher$0=c - 91 | 0;
                  switch(switcher$0)
                   {case 0:
                     var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$4=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$3=match$4[1],
                      match$0=[0,[17,0,fmt_rest$3]]}}
                else
                 switch$0 = 1;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]];
               else
                if(32 <= c)
                 {var switcher$1=c - 32 | 0;
                  switch(switcher$1)
                   {case 0:
                     var
                      match$6=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$5=match$6[1],
                      match$0=[0,[17,_aM_,fmt_rest$5]];
                     break;
                    case 5:
                     var switch$1=0;
                     if
                      ((str_ind$0 + 1 | 0)
                       <
                       end_ind
                       &&
                       37
                       ===
                       caml_string_get(str,str_ind$0 + 1 | 0))
                      {var
                        match$7=parse(str_ind$0 + 2 | 0,end_ind),
                        fmt_rest$6=match$7[1],
                        match$0=[0,[17,6,fmt_rest$6]];
                       switch$1 = 1}
                     if(! switch$1)
                      var
                       match$8=parse(str_ind$0,end_ind),
                       fmt_rest$7=match$8[1],
                       match$0=[0,[12,64,fmt_rest$7]];
                     break;
                    case 12:
                     var
                      match$9=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$8=match$9[1],
                      match$0=[0,[17,_aN_,fmt_rest$8]];
                     break;
                    case 14:
                     var
                      match$10=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$9=match$10[1],
                      match$0=[0,[17,4,fmt_rest$9]];
                     break;
                    case 27:
                     var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 28:
                     var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 31:
                     var
                      match$11=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$10=match$11[1],
                      match$0=[0,[17,2,fmt_rest$10]];
                     break;
                    case 32:
                     var
                      match$12=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$11=match$12[1],
                      match$0=[0,[17,5,fmt_rest$11]];
                     break;
                    default:switch$0 = 1}}
                else
                 switch$0 = 1;
              if(switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      return parse(0,caml_ml_string_length(str))}
    function format_of_string_fmtty(str,fmtty)
     {var match=fmt_ebb_of_string(0,str),fmt=match[1];
      try
       {var _oY_=[0,type_format(fmt,fmtty),str];return _oY_}
      catch(_oZ_)
       {_oZ_ = caml_wrap_exception(_oZ_);
        if(_oZ_ === Type_mismatch)
         {var _oX_=string_of_fmtty(fmtty);
          return caml_call2(failwith_message(_aX_),str,_oX_)}
        throw _oZ_}}
    function format_of_string_format(str,param)
     {var
       str$0=param[2],
       fmt=param[1],
       match=fmt_ebb_of_string(0,str),
       fmt$0=match[1];
      try
       {var _oV_=[0,type_format(fmt$0,fmtty_of_fmt(fmt)),str];return _oV_}
      catch(_oW_)
       {_oW_ = caml_wrap_exception(_oW_);
        if(_oW_ === Type_mismatch)
         return caml_call2(failwith_message(_aY_),str,str$0);
        throw _oW_}}
    var
     CamlinternalFormat=
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
    caml_register_global(784,CamlinternalFormat,"CamlinternalFormat");
    function kfprintf(k,o,param)
     {var fmt=param[1],_oU_=0;
      return make_printf
              (function(acc){output_acc(o,acc);return caml_call1(k,o)},
               _oU_,
               fmt)}
    function kbprintf(k,b,param)
     {var fmt=param[1],_oT_=0;
      return make_printf
              (function(acc){bufput_acc(b,acc);return caml_call1(k,b)},
               _oT_,
               fmt)}
    function ikfprintf(k,oc,param)
     {var fmt=param[1];return make_iprintf(k,oc,fmt)}
    function fprintf(oc,fmt){return kfprintf(function(_oS_){return 0},oc,fmt)}
    function bprintf(b,fmt){return kbprintf(function(_oR_){return 0},b,fmt)}
    function ifprintf(oc,fmt)
     {return ikfprintf(function(_oQ_){return 0},oc,fmt)}
    function ibprintf(b,fmt){return ikfprintf(function(_oP_){return 0},b,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create$2(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Stdlib_printf=
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
    caml_register_global(785,Stdlib_printf,"Stdlib__printf");
    var
     Bad=[248,cst_Stdlib_Arg_Bad,caml_fresh_oo_id(0)],
     Help=[248,cst_Stdlib_Arg_Help,caml_fresh_oo_id(0)],
     Stop=[248,cst_Stdlib_Arg_Stop,caml_fresh_oo_id(0)];
    function assoc3(x,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var match=l$0[1],y2=match[2],y1=match[1];
          if(caml_equal(y1,x))return y2;
          var l$1=l$0[2],l$0=l$1;
          continue}
        throw Not_found}}
    function split$0(s)
     {var
       i=index$0(s,61),
       len=caml_ml_string_length(s),
       _oO_=sub$0(s,i + 1 | 0,len - (i + 1 | 0) | 0);
      return [0,sub$0(s,0,i),_oO_]}
    function make_symlist(prefix,sep,suffix,l)
     {if(l)
       {var t=l[2],h=l[1],_oN_=symbol(prefix,h);
        return symbol
                (fold_left$0
                  (function(x,y){return symbol(x,symbol(sep,y))},_oN_,t),
                 suffix)}
      return cst_none}
    function help_action(param){throw [0,Stop,_a1_]}
    function add_help(speclist)
     {try
       {assoc3(cst_help$2,speclist);var _oK_=0,_oI_=_oK_}
      catch(_oM_)
       {_oM_ = caml_wrap_exception(_oM_);
        if(_oM_ !== Not_found)throw _oM_;
        var
         _oI_=
          [0,[0,cst_help,[0,help_action],cst_Display_this_list_of_optio],0]}
      try
       {assoc3(cst_help$1,speclist);var _oJ_=0,add2=_oJ_}
      catch(_oL_)
       {_oL_ = caml_wrap_exception(_oL_);
        if(_oL_ !== Not_found)throw _oL_;
        var
         add2=
          [0,
           [0,cst_help$0,[0,help_action],cst_Display_this_list_of_optio$0],
           0]}
      return append(speclist,append(_oI_,add2))}
    function usage_b(buf,speclist,errmsg)
     {caml_call1(bprintf(buf,_a2_),errmsg);
      var _oF_=add_help(speclist);
      return iter$2
              (function(param)
                {var
                  doc=param[3],
                  spec=param[2],
                  key=param[1],
                  _oG_=0 < caml_ml_string_length(doc)?1:0;
                 if(_oG_)
                  {if(11 === spec[0])
                    {var l=spec[1],_oH_=make_symlist(cst$53,cst$52,cst$51,l);
                     return caml_call3(bprintf(buf,_a0_),key,_oH_,doc)}
                   return caml_call2(bprintf(buf,_aZ_),key,doc)}
                 return _oG_},
               _oF_)}
    function usage_string(speclist,errmsg)
     {var b=create$2(200);usage_b(b,speclist,errmsg);return contents(b)}
    function usage(speclist,errmsg)
     {var _oE_=usage_string(speclist,errmsg);
      return caml_call1(eprintf(_a3_),_oE_)}
    var current=[0,0];
    function bool_of_string_opt$0(x)
     {try
       {var _oC_=[0,bool_of_string(x)];return _oC_}
      catch(_oD_)
       {_oD_ = caml_wrap_exception(_oD_);
        if(_oD_[1] === Invalid_argument)return 0;
        throw _oD_}}
    function int_of_string_opt$0(x)
     {try
       {var _oA_=[0,caml_int_of_string(x)];return _oA_}
      catch(_oB_)
       {_oB_ = caml_wrap_exception(_oB_);
        if(_oB_[1] === Failure)return 0;
        throw _oB_}}
    function float_of_string_opt(x)
     {try
       {var _oy_=[0,caml_float_of_string(x)];return _oy_}
      catch(_oz_)
       {_oz_ = caml_wrap_exception(_oz_);
        if(_oz_[1] === Failure)return 0;
        throw _oz_}}
    function parse_and_expand_argv_dynamic_
     (allow_expand,current,argv,speclist,anonfun,errmsg)
     {var initpos=current[1];
      function convert_error(error)
       {var
         b=create$2(200),
         progname=
          initpos < argv[1].length - 1
           ?caml_check_bound(argv[1],initpos)[1 + initpos]
           :cst$54;
        switch(error[0])
         {case 0:
           var _ox_=error[1];
           if
            (caml_string_notequal(_ox_,cst_help$3)
             &&
             caml_string_notequal(_ox_,cst_help$4))
            caml_call2(bprintf(b,_a4_),progname,_ox_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(bprintf(b,_a7_),progname,arg,opt,expected);
           break;
          case 2:var s=error[1];caml_call2(bprintf(b,_a8_),progname,s);break;
          default:var s$0=error[1];caml_call2(bprintf(b,_a9_),progname,s$0)}
        usage_b(b,speclist[1],errmsg);
        if(! caml_equal(error,_a5_) && ! caml_equal(error,_a6_))
         return [0,Bad,contents(b)];
        return [0,Help,contents(b)]}
      current[1]++;
      for(;;)
       {if(current[1] < argv[1].length - 1)
         {try
           {var
             _oo_=current[1],
             s=caml_check_bound(argv[1],_oo_)[1 + _oo_],
             switch$0=0;
            if(1 <= caml_ml_string_length(s) && 45 === caml_string_get(s,0))
             {try
               {var
                 follow$1=0,
                 _oq_=assoc3(s,speclist[1]),
                 follow$0=follow$1,
                 action=_oq_}
              catch(_ov_)
               {_ov_ = caml_wrap_exception(_ov_);
                if(_ov_ !== Not_found)throw _ov_;
                try
                 {var
                   match=split$0(s),
                   arg=match[2],
                   keyword=match[1],
                   follow=[0,arg],
                   _op_=assoc3(keyword,speclist[1])}
                catch(_ow_)
                 {_ow_ = caml_wrap_exception(_ow_);
                  if(_ow_ === Not_found)throw [0,Stop,[0,s]];
                  throw _ow_;
                  var _or_=_ow_}
                var follow$0=follow,action=_op_,_os_=_ov_}
              var
               no_arg$0=
                function(s,follow)
                 {function no_arg(param)
                   {if(follow)
                     {var arg=follow[1];throw [0,Stop,[1,s,arg,cst_no_argument]]}
                    return 0}
                  return no_arg},
               no_arg=no_arg$0(s,follow$0),
               get_arg$0=
                function(s,follow)
                 {function get_arg(param)
                   {if(follow){var arg=follow[1];return arg}
                    if((current[1] + 1 | 0) < argv[1].length - 1)
                     {var _ou_=current[1] + 1 | 0;
                      return caml_check_bound(argv[1],_ou_)[1 + _ou_]}
                    throw [0,Stop,[2,s]]}
                  return get_arg},
               get_arg=get_arg$0(s,follow$0),
               consume_arg$0=
                function(follow)
                 {function consume_arg(param)
                   {return follow?0:(current[1]++,0)}
                  return consume_arg},
               consume_arg=consume_arg$0(follow$0),
               treat_action$0=
                function(s,no_arg,get_arg,consume_arg)
                 {function treat_action(param)
                   {switch(param[0])
                     {case 0:var f=param[1];no_arg(0);return caml_call1(f,0);
                      case 1:
                       var
                        f$0=param[1],
                        arg=get_arg(0),
                        match=bool_of_string_opt$0(arg);
                       if(match)
                        {var s$0=match[1];caml_call1(f$0,s$0);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg,cst_a_boolean]];
                      case 2:var r=param[1];no_arg(0);r[1] = 1;return 0;
                      case 3:var r$0=param[1];no_arg(0);r$0[1] = 0;return 0;
                      case 4:
                       var f$1=param[1],arg$0=get_arg(0);
                       caml_call1(f$1,arg$0);
                       return consume_arg(0);
                      case 5:
                       var r$1=param[1];r$1[1] = get_arg(0);return consume_arg(0);
                      case 6:
                       var
                        f$2=param[1],
                        arg$1=get_arg(0),
                        match$0=int_of_string_opt$0(arg$1);
                       if(match$0)
                        {var x=match$0[1];caml_call1(f$2,x);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$1,cst_an_integer]];
                      case 7:
                       var
                        r$2=param[1],
                        arg$2=get_arg(0),
                        match$1=int_of_string_opt$0(arg$2);
                       if(match$1)
                        {var x$0=match$1[1];r$2[1] = x$0;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$2,cst_an_integer$0]];
                      case 8:
                       var
                        f$3=param[1],
                        arg$3=get_arg(0),
                        match$2=float_of_string_opt(arg$3);
                       if(match$2)
                        {var x$1=match$2[1];
                         caml_call1(f$3,x$1);
                         return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$3,cst_a_float]];
                      case 9:
                       var
                        r$3=param[1],
                        arg$4=get_arg(0),
                        match$3=float_of_string_opt(arg$4);
                       if(match$3)
                        {var x$2=match$3[1];r$3[1] = x$2;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$4,cst_a_float$0]];
                      case 10:
                       var specs=param[1];
                       no_arg(0);
                       return iter$2(treat_action,specs);
                      case 11:
                       var f$4=param[2],symb=param[1],arg$5=get_arg(0);
                       if(mem(arg$5,symb))
                        {caml_call1(f$4,arg$5);return consume_arg(0)}
                       throw [0,
                              Stop,
                              [1,
                               s,
                               arg$5,
                               symbol(cst_one_of,make_symlist(cst$57,cst$56,cst$55,symb))]];
                      case 12:
                       var f$5=param[1];
                       no_arg(0);
                       for(;;)
                        {if(current[1] < (argv[1].length - 1 - 1 | 0))
                          {var _ot_=current[1] + 1 | 0;
                           caml_call1(f$5,caml_check_bound(argv[1],_ot_)[1 + _ot_]);
                           consume_arg(0);
                           continue}
                         return 0}
                      default:
                       var f$6=param[1];
                       if(1 - allow_expand)
                        throw [0,Invalid_argument,cst_Arg_Expand_is_is_only_allo];
                       var arg$6=get_arg(0),newarg=caml_call1(f$6,arg$6);
                       consume_arg(0);
                       var
                        before=sub$1(argv[1],0,current[1] + 1 | 0),
                        after=
                         sub$1
                          (argv[1],
                           current[1] + 1 | 0,
                           (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                       argv[1]
                       =
                       caml_array_concat([0,before,[0,newarg,[0,after,0]]]);
                       return 0}}
                  return treat_action},
               treat_action=treat_action$0(s,no_arg,get_arg,consume_arg);
              treat_action(action);
              switch$0 = 1}
            if(! switch$0)caml_call1(anonfun,s)}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            if(exn$0[1] === Bad){var m=exn$0[2];throw convert_error([3,m])}
            if(exn$0[1] === Stop){var e=exn$0[2];throw convert_error(e)}
            throw exn$0;
            var exn=exn$0}
          current[1]++;
          continue}
        return 0}}
    function parse_and_expand_argv_dynamic
     (current,argv,speclist,anonfun,errmsg)
     {return parse_and_expand_argv_dynamic_
              (1,current,argv,speclist,anonfun,errmsg)}
    function parse_argv_dynamic(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_and_expand_argv_dynamic_
              (0,current$0,[0,argv],speclist,anonfun,errmsg)}
    function parse_argv(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_argv_dynamic
              ([0,current$0],argv,[0,speclist],anonfun,errmsg)}
    function parse(l,f,msg)
     {try
       {var _on_=parse_argv(0,caml_sys_argv(0),l,f,msg);return _on_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_a__),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_a$_),msg$1);return exit(0)}
        throw exn}}
    function parse_dynamic(l,f,msg)
     {try
       {var _om_=parse_argv_dynamic(0,caml_sys_argv(0),l,f,msg);return _om_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_ba_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bb_),msg$1);return exit(0)}
        throw exn}}
    function parse_expand(l,f,msg)
     {try
       {var
         argv=[0,caml_sys_argv(0)],
         spec=[0,l],
         current$0=[0,current[1]],
         _ol_=parse_and_expand_argv_dynamic(current$0,argv,spec,f,msg);
        return _ol_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bc_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bd_),msg$1);return exit(0)}
        throw exn}}
    function second_word(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 === caml_string_get(s,n$0))
           {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
          return n$0}}
      try
       {var n$0=index$0(s,9)}
      catch(_oj_)
       {_oj_ = caml_wrap_exception(_oj_);
        if(_oj_ === Not_found)
         {try
           {var n=index$0(s,32)}
          catch(_ok_)
           {_ok_ = caml_wrap_exception(_ok_);
            if(_ok_ === Not_found)return len;
            throw _ok_}
          return loop(n + 1 | 0)}
        throw _oj_}
      return loop(n$0 + 1 | 0)}
    function max_arg_len(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max(cur,caml_ml_string_length(kwd))
              :max(cur,caml_ml_string_length(kwd) + second_word(doc) | 0)}
    function replace_leading_tab(s)
     {var seen=[0,0];
      return map$4
              (function(c)
                {if(9 === c && ! seen[1]){seen[1] = 1;return 32}return c},
               s)}
    function align(opt,speclist)
     {if(opt)var sth=opt[1],limit=sth;else var limit=max_int;
      var
       completed=add_help(speclist),
       len=fold_left$0(max_arg_len,0,completed),
       len$0=min(len,limit);
      return map$2
              (function(ksd)
                {var _oh_=ksd[1],_oi_=ksd[2];
                 if(caml_string_notequal(ksd[3],cst$58))
                  {if(11 === _oi_[0])
                    {var
                      msg$0=ksd[3],
                      cutcol$0=second_word(msg$0),
                      spaces$0=make$0(max(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                     return [0,
                             _oh_,
                             _oi_,
                             symbol(cst$59,symbol(spaces$0,replace_leading_tab(msg$0)))]}
                   var
                    msg=ksd[3],
                    spec=ksd[2],
                    cutcol=second_word(msg),
                    kwd_len=caml_ml_string_length(_oh_),
                    diff=(len$0 - kwd_len | 0) - cutcol | 0;
                   if(0 < diff)
                    {var
                      spaces=make$0(diff,32),
                      prefix=sub$0(replace_leading_tab(msg),0,cutcol),
                      suffix=
                       sub$0(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                     return [0,_oh_,spec,symbol(prefix,symbol(spaces,suffix))]}
                   return [0,_oh_,spec,replace_leading_tab(msg)]}
                 return ksd},
               completed)}
    function read_aux(trim,sep,file)
     {var ic=open_in_bin(file),buf=create$2(200),words=[0,0];
      function stash(param)
       {var s=contents(buf);
        if(trim)
         {var len=caml_ml_string_length(s),switch$0=0;
          if(0 < len && 13 === caml_string_get(s,len - 1 | 0))
           {var _og_=sub$0(s,0,len - 1 | 0);switch$0 = 1}
          if(! switch$0)var _og_=s;
          var word=_og_}
        else
         var word=s;
        words[1] = [0,word,words[1]];
        return clear$1(buf)}
      try
       {for(;;)
         {var c=caml_ml_input_char(ic);
          if(c === sep)stash(0);else add_char(buf,c);
          continue}}
      catch(_of_)
       {_of_ = caml_wrap_exception(_of_);
        if(_of_ === End_of_file)
         {if(0 < buf[2])stash(0);
          caml_ml_close_channel(ic);
          return of_list(rev(words[1]))}
        throw _of_}}
    var _be_=10,_bf_=1;
    function read_arg(_oe_){return read_aux(_bf_,_be_,_oe_)}
    var _bg_=0,_bh_=0;
    function read_arg0(_od_){return read_aux(_bh_,_bg_,_od_)}
    function write_aux(sep,file,args)
     {var oc=open_out_bin(file);
      iter$5(function(s){return caml_call2(fprintf(oc,_bi_),s,sep)},args);
      return close_out(oc)}
    var _bj_=10;
    function write_arg(_ob_,_oc_){return write_aux(_bj_,_ob_,_oc_)}
    var _bk_=0;
    function write_arg0(_n$_,_oa_){return write_aux(_bk_,_n$_,_oa_)}
    var
     Stdlib_arg=
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
    caml_register_global(786,Stdlib_arg,"Stdlib__arg");
    var printers=[0,0];
    function field(x,i)
     {var f=x[1 + i];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_bl_),f)
                :caml_obj_tag(f) === 253?to_string(f):cst$60
              :caml_call1(sprintf(_bm_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return cst$61;
      var _n9_=other_fields(x,i + 1 | 0),_n__=field(x,i);
      return caml_call2(sprintf(_bn_),_n__,_n9_)}
    function use_printers(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,x);switch$0 = 1}
            catch(_n8_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      return conv(printers[1])}
    function to_string_default(x)
     {if(x === Out_of_memory)return cst_Out_of_memory;
      if(x === Stack_overflow)return cst_Stack_overflow;
      if(x[1] === Match_failure)
       {var match$0=x[2],char$0=match$0[3],line=match$0[2],file=match$0[1];
        return caml_call5
                (sprintf(locfmt),
                 file,
                 line,
                 char$0,
                 char$0 + 5 | 0,
                 cst_Pattern_matching_failed)}
      if(x[1] === Assert_failure)
       {var
         match$1=x[2],
         char$1=match$1[3],
         line$0=match$1[2],
         file$0=match$1[1];
        return caml_call5
                (sprintf(locfmt),
                 file$0,
                 line$0,
                 char$1,
                 char$1 + 6 | 0,
                 cst_Assertion_failed)}
      if(x[1] === Undefined_recursive_module)
       {var
         match$2=x[2],
         char$2=match$2[3],
         line$1=match$2[2],
         file$1=match$2[1];
        return caml_call5
                (sprintf(locfmt),
                 file$1,
                 line$1,
                 char$2,
                 char$2 + 6 | 0,
                 cst_Undefined_recursive_module)}
      if(0 === caml_obj_tag(x))
       {var constructor=x[1][1],match=x.length - 1;
        if(2 < match >>> 0)
         var
          _n4_=other_fields(x,2),
          _n5_=field(x,1),
          _n7_=caml_call2(sprintf(_bo_),_n5_,_n4_);
        else
         switch(match)
          {case 0:var _n7_=cst$62;break;
           case 1:var _n7_=cst$63;break;
           default:var _n6_=field(x,1),_n7_=caml_call1(sprintf(_bp_),_n6_)}
        return symbol(constructor,_n7_)}
      return x[1]}
    function to_string$7(e)
     {var match=use_printers(e);
      if(match){var s=match[1];return s}
      return to_string_default(e)}
    function print(fct,arg)
     {try
       {var _n3_=caml_call1(fct,arg);return _n3_}
      catch(x)
       {x = caml_wrap_exception(x);
        var _n2_=to_string$7(x);
        caml_call1(eprintf(_bq_),_n2_);
        caml_ml_flush(stderr);
        throw x}}
    function catch$0(fct,arg)
     {try
       {var _n1_=caml_call1(fct,arg);return _n1_}
      catch(x)
       {x = caml_wrap_exception(x);
        caml_ml_flush(stdout);
        var _n0_=to_string$7(x);
        caml_call1(eprintf(_br_),_n0_);
        return exit(2)}}
    function convert_raw_backtrace(bt)
     {return [0,runtime.caml_convert_raw_backtrace(bt)]}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise
                ?0 === pos?cst_Raised_at:cst_Re_raised_at
                :0 === pos?cst_Raised_by_primitive_operat:cst_Called_from}
      if(0 === slot[0])
       {var
         _nS_=slot[5],
         _nT_=slot[4],
         _nU_=slot[3],
         _nV_=slot[6]?cst_inlined:cst$64,
         _nW_=slot[2],
         _nX_=slot[7],
         _nY_=info(slot[1]);
        return [0,
                caml_call7(sprintf(_bs_),_nY_,_nX_,_nW_,_nV_,_nU_,_nT_,_nS_)]}
      if(slot[1])return 0;
      var _nZ_=info(0);
      return [0,caml_call1(sprintf(_bt_),_nZ_)]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_nQ_=a.length - 1 - 1 | 0,_nP_=0;
        if(! (_nQ_ < 0))
         {var i=_nP_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bu_),str)}
            var _nR_=i + 1 | 0;
            if(_nQ_ !== i){var i=_nR_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bv_)}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtra(0))}
    function raw_backtrace_to_string(raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],b=create$2(1024),_nN_=a.length - 1 - 1 | 0,_nM_=0;
        if(! (_nN_ < 0))
         {var i=_nM_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(bprintf(b,_bw_),str)}
            var _nO_=i + 1 | 0;
            if(_nN_ !== i){var i=_nO_;continue}
            break}}
        return contents(b)}
      return cst_Program_not_linked_with_g_}
    function backtrace_slot_is_raise(param)
     {return 0 === param[0]?param[1]:param[1]}
    function backtrace_slot_is_inline(param){return 0 === param[0]?param[6]:0}
    function backtrace_slot_location(param)
     {return 0 === param[0]?[0,[0,param[2],param[3],param[4],param[5]]]:0}
    function backtrace_slot_defname(param)
     {if(0 === param[0] && caml_string_notequal(param[7],cst$65))
       return [0,param[7]];
      return 0}
    function backtrace_slots(raw_backtrace)
     {var match=convert_raw_backtrace(raw_backtrace);
      if(match)
       {var backtrace=match[1],i$1=backtrace.length - 1 - 1 | 0,i=i$1;
        for(;;)
         {if(-1 === i)
           var _nL_=0;
          else
           {var
             param=caml_check_bound(backtrace,i)[1 + i],
             _nK_=0 === param[0]?1:0;
            if(! _nK_){var i$0=i - 1 | 0,i=i$0;continue}
            var _nL_=_nK_}
          return _nL_?[0,backtrace]:0}}
      return 0}
    function get_backtrace(param)
     {return raw_backtrace_to_string(caml_get_exception_raw_backtra(0))}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function exn_slot(x){return 0 === caml_obj_tag(x)?x[1]:x}
    function exn_slot_id(x){var slot=exn_slot(x);return slot[2]}
    function exn_slot_name(x){var slot=exn_slot(x);return slot[1]}
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _nJ_=to_string$7(exn);
      caml_call1(eprintf(_bx_),_nJ_);
      print_raw_backtrace(stderr,raw_backtrace);
      return caml_ml_flush(stderr)}
    var uncaught_exception_handler=[0,default_uncaught_exception_han];
    function set_uncaught_exception_handler(fn)
     {uncaught_exception_handler[1] = fn;return 0}
    function _by_(_nI_){return runtime.caml_raw_backtrace_next_slot(_nI_)}
    function _bz_(_nH_){return runtime.caml_convert_raw_backtrace_slot(_nH_)}
    function _bA_(_nG_,_nF_)
     {return runtime.caml_raw_backtrace_slot(_nG_,_nF_)}
    function _bB_(_nE_){return runtime.caml_raw_backtrace_length(_nE_)}
    var
     _bC_=
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_is_inline,
       backtrace_slot_location,
       backtrace_slot_defname,
       format_backtrace_slot];
    function _bD_(_nD_){return caml_get_exception_raw_backtra(_nD_)}
    function _bE_(_nC_){return runtime.caml_backtrace_status(_nC_)}
    var
     Stdlib_printexc=
      [0,
       to_string$7,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       function(_nB_){return runtime.caml_record_backtrace(_nB_)},
       _bE_,
       register_printer,
       use_printers,
       _bD_,
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       _bC_,
       _bB_,
       _bA_,
       _bz_,
       _by_,
       exn_slot_id,
       exn_slot_name];
    caml_register_global(787,Stdlib_printexc,"Stdlib__printexc");
    function const$0(c,param){return c}
    function flip(f,x,y){return caml_call2(f,y,x)}
    function negate(p,v){return 1 - caml_call1(p,v)}
    var
     Finally_raised=
      [248,cst_Stdlib_Fun_Finally_raised,caml_fresh_oo_id(0)];
    register_printer
     (function(param)
       {if(param[1] === Finally_raised)
         {var exn=param[2];
          return [0,symbol(cst_Fun_Finally_raised,to_string$7(exn))]}
        return 0});
    function protect(finally$0,work)
     {function finally_no_exn(param)
       {try
         {var _nA_=caml_call1(finally$0,0);return _nA_}
        catch(e)
         {e = caml_wrap_exception(e);
          var bt=caml_get_exception_raw_backtra(0),exn=[0,Finally_raised,e];
          caml_restore_raw_backtrace(exn,bt);
          throw exn}}
      try
       {var result=caml_call1(work,0)}
      catch(work_exn)
       {work_exn = caml_wrap_exception(work_exn);
        var work_bt=caml_get_exception_raw_backtra(0);
        finally_no_exn(0);
        caml_restore_raw_backtrace(work_exn,work_bt);
        throw work_exn}
      finally_no_exn(0);
      return result}
    var Stdlib_fun=[0,const$0,flip,negate,protect,Finally_raised];
    caml_register_global(788,Stdlib_fun,"Stdlib__fun");
    function print_stat(c)
     {var st=runtime.caml_gc_stat(0),_nj_=st[4];
      caml_call1(fprintf(c,_bF_),_nj_);
      var _nk_=st[5];
      caml_call1(fprintf(c,_bG_),_nk_);
      var _nl_=st[14];
      caml_call1(fprintf(c,_bH_),_nl_);
      fprintf(c,_bI_);
      var
       _nm_=st[1],
       l1=caml_ml_string_length(caml_call1(sprintf(_bJ_),_nm_)),
       _nn_=st[1];
      caml_call2(fprintf(c,_bK_),l1,_nn_);
      var _no_=st[2];
      caml_call2(fprintf(c,_bL_),l1,_no_);
      var _np_=st[3];
      caml_call2(fprintf(c,_bM_),l1,_np_);
      fprintf(c,_bN_);
      var
       _nq_=st[15],
       l2=caml_ml_string_length(caml_call1(sprintf(_bO_),_nq_)),
       _nr_=st[15];
      caml_call2(fprintf(c,_bP_),l2,_nr_);
      var _ns_=st[6];
      caml_call2(fprintf(c,_bQ_),l2,_ns_);
      var _nt_=st[8];
      caml_call2(fprintf(c,_bR_),l2,_nt_);
      var _nu_=st[10];
      caml_call2(fprintf(c,_bS_),l2,_nu_);
      var _nv_=st[12];
      caml_call2(fprintf(c,_bT_),l2,_nv_);
      var _nw_=st[13];
      caml_call2(fprintf(c,_bU_),l2,_nw_);
      fprintf(c,_bV_);
      var _nx_=st[9];
      caml_call1(fprintf(c,_bW_),_nx_);
      var _ny_=st[11];
      caml_call1(fprintf(c,_bX_),_ny_);
      var _nz_=st[7];
      return caml_call1(fprintf(c,_bY_),_nz_)}
    function allocated_bytes(param)
     {var
       match=runtime.caml_gc_counters(0),
       ma=match[3],
       pro=match[2],
       mi=match[1];
      return (mi + ma - pro) * 4}
    function create_alarm(f){return [0,1]}
    function delete_alarm(a){a[1] = 0;return 0}
    function _bZ_(param){return 0}
    function _b0_(param){return 0}
    function _b1_(param){return 0}
    function _b2_(param){return 0}
    var null_tracker=[0,function(param){return 0},_b2_,_b1_,_b0_,_bZ_];
    function start(sampling_rate,opt,tracker)
     {if(opt)
       var sth=opt[1],callstack_size=sth;
      else
       var callstack_size=max_int;
      return runtime.caml_memprof_start(sampling_rate,callstack_size,tracker)}
    var _b3_=[0,null_tracker,start,runtime.caml_memprof_stop];
    function _b4_(_ni_){return runtime.caml_final_release(_ni_)}
    function _b5_(_nh_,_ng_)
     {return runtime.caml_final_register_called_without_value(_nh_,_ng_)}
    var
     Stdlib_gc=
      [0,
       print_stat,
       allocated_bytes,
       function(_nf_,_ne_){return runtime.caml_final_register(_nf_,_ne_)},
       _b5_,
       _b4_,
       create_alarm,
       delete_alarm,
       _b3_];
    caml_register_global(789,Stdlib_gc,"Stdlib__gc");
    function string(str)
     {return caml_md5_string(str,0,caml_ml_string_length(str))}
    function bytes(b){return string(caml_string_of_bytes(b))}
    function substring(str,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(str) - len | 0) < ofs))
       return caml_md5_string(str,ofs,len);
      return invalid_arg(cst_Digest_substring)}
    function subbytes(b,ofs,len)
     {return substring(caml_string_of_bytes(b),ofs,len)}
    function file(filename)
     {var ic=open_in_bin(filename);
      try
       {var d=runtime.caml_md5_chan(ic,-1)}
      catch(e){e = caml_wrap_exception(e);caml_ml_close_channel(ic);throw e}
      caml_ml_close_channel(ic);
      return d}
    function output$0(chan,digest){return output_string(chan,digest)}
    function input$0(chan){return really_input_string(chan,16)}
    function char_hex(n){var _nd_=10 <= n?87:48;return n + _nd_ | 0}
    function to_hex(d)
     {if(16 !== caml_ml_string_length(d))invalid_arg(cst_Digest_to_hex);
      var result=caml_create_bytes(32),i=0;
      for(;;)
       {var x=caml_string_get(d,i);
        caml_bytes_unsafe_set(result,i * 2 | 0,char_hex(x >>> 4 | 0));
        caml_bytes_unsafe_set(result,(i * 2 | 0) + 1 | 0,char_hex(x & 15));
        var _nc_=i + 1 | 0;
        if(15 !== i){var i=_nc_;continue}
        return caml_string_of_bytes(result)}}
    function from_hex(s)
     {if(32 !== caml_ml_string_length(s))invalid_arg(cst_Digest_from_hex);
      function digit(c)
       {if(65 <= c)
         {if(97 <= c)
           {if(! (103 <= c))return (c - 97 | 0) + 10 | 0}
          else
           if(! (71 <= c))return (c - 65 | 0) + 10 | 0}
        else
         {var switcher=c - 48 | 0;if(! (9 < switcher >>> 0))return c - 48 | 0}
        throw [0,Invalid_argument,cst_Digest_from_hex$0]}
      var result=caml_create_bytes(16),i=0;
      for(;;)
       {var i$0=2 * i | 0,_na_=digit(caml_string_get(s,i$0 + 1 | 0));
        caml_bytes_set
         (result,i,chr((digit(caml_string_get(s,i$0)) << 4) + _na_ | 0));
        var _nb_=i + 1 | 0;
        if(15 !== i){var i=_nb_;continue}
        return caml_string_of_bytes(result)}}
    var
     Stdlib_digest=
      [0,
       compare$5,
       equal$5,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output$0,
       input$0,
       to_hex,
       from_hex];
    caml_register_global(790,Stdlib_digest,"Stdlib__digest");
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function assign(st1,st2)
     {blit$1(st2[1],0,st1[1],0,55);st1[2] = st2[2];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[1 + i$0] = i$0;
        var _m$_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_m$_;continue}
        var accu=[0,cst_x$1],_m7_=54 + max(55,l) | 0,_m6_=0;
        if(! (_m7_ < 0))
         {var i=_m6_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[1 + k];
            accu[1] = string(symbol(accu[1],caml_string_of_jsbytes("" + x)));
            var
             _m8_=accu[1],
             _m2_=caml_string_get(_m8_,3) << 24,
             _m3_=caml_string_get(_m8_,2) << 16,
             _m4_=caml_string_get(_m8_,1) << 8,
             _m5_=((caml_string_get(_m8_,0) + _m4_ | 0) + _m3_ | 0) + _m2_ | 0,
             _m9_=(caml_check_bound(s[1],j)[1 + j] ^ _m5_) & 1073741823;
            caml_check_bound(s[1],j)[1 + j] = _m9_;
            var _m__=i + 1 | 0;
            if(_m7_ !== i){var i=_m__;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$2(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function make_self_init(param){return make$2(caml_sys_random_seed(0))}
    function copy$5(s){var result=new_state(0);assign(result,s);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _mZ_=s[2],
       curval=caml_check_bound(s[1],_mZ_)[1 + _mZ_],
       _m0_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_m0_)[1 + _m0_]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _m1_=s[2];
      caml_check_bound(s[1],_m1_)[1 + _m1_] = newval30;
      return newval30}
    function int$0(s,bound)
     {if(! (1073741823 < bound) && 0 < bound)
       for(;;)
        {var r=bits(s),v=caml_mod(r,bound);
         if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
         return v}
      return invalid_arg(cst_Random_int)}
    function int32(s,bound)
     {if(caml_lessequal(bound,0))return invalid_arg(cst_Random_int32);
      for(;;)
       {var b1=bits(s),b2=(bits(s) & 1) << 30,r=b1 | b2,v=caml_mod(r,bound);
        if(caml_greaterthan(r - v | 0,(2147483647 - bound | 0) + 1 | 0))
         continue;
        return v}}
    function int64(s,bound)
     {if(caml_lessequal(bound,_b7_))return invalid_arg(cst_Random_int64);
      for(;;)
       {var
         b1=caml_int64_of_int32(bits(s)),
         b2=caml_int64_shift_left(caml_int64_of_int32(bits(s)),30),
         b3=caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7),60),
         r=caml_int64_or(b1,caml_int64_or(b2,b3)),
         v=runtime.caml_int64_mod(r,bound);
        if
         (caml_greaterthan
           (caml_int64_sub(r,v),
            caml_int64_add(caml_int64_sub(max_int$2,bound),_b6_)))
         continue;
        return v}}
    function nativeint(s,bound){return int32(s,bound)}
    function float$0(s,bound)
     {var r1=bits(s),r2=bits(s);
      return (r1 / 1073741824. + r2) / 1073741824. * bound}
    function bool(s){return 0 === (bits(s) & 1)?1:0}
    var default$0=[0,_b8_.slice(),0];
    function bits$0(param){return bits(default$0)}
    function int$1(bound){return int$0(default$0,bound)}
    function int32$0(bound){return int32(default$0,bound)}
    function nativeint$0(bound){return nativeint(default$0,bound)}
    function int64$0(bound){return int64(default$0,bound)}
    function float$1(scale){return float$0(default$0,scale)}
    function bool$0(param){return bool(default$0)}
    function full_init$0(seed){return full_init(default$0,seed)}
    function init$4(seed){return full_init(default$0,[0,seed])}
    function self_init(param){return full_init$0(caml_sys_random_seed(0))}
    function get_state(param){return copy$5(default$0)}
    function set_state(s){return assign(default$0,s)}
    var
     _b9_=
      [0,
       make$2,
       make_self_init,
       copy$5,
       bits,
       int$0,
       int32,
       nativeint,
       int64,
       float$0,
       bool],
     Stdlib_random=
      [0,
       init$4,
       full_init$0,
       self_init,
       bits$0,
       int$1,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       _b9_,
       get_state,
       set_state];
    caml_register_global(791,Stdlib_random,"Stdlib__random");
    function ongoing_traversal(h)
     {var _mX_=h.length - 1 < 4?1:0,_mY_=_mX_ || (h[4] < 0?1:0);return _mY_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _cS_=caml_sys_getenv(cst_OCAMLRUNPARAM),params=_cS_}
    catch(_mV_)
     {_mV_ = caml_wrap_exception(_mV_);
      if(_mV_ !== Not_found)throw _mV_;
      try
       {var _cR_=caml_sys_getenv(cst_CAMLRUNPARAM),_b__=_cR_}
      catch(_mW_)
       {_mW_ = caml_wrap_exception(_mW_);
        if(_mW_ !== Not_found)throw _mW_;
        var _b__=cst$66}
      var params=_b__}
    var
     randomized_default=contains$0(params,82),
     randomized=[0,randomized_default];
    function randomize(param){randomized[1] = 1;return 0}
    function is_randomized(param){return randomized[1]}
    var prng=[246,function(_mU_){return caml_call1(_b9_[2],0)}];
    function create$3(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized[1];
      var x=16;
      for(;;)
       {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
         {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _mS_=caml_obj_tag(prng),
          _mT_=250 === _mS_?prng[1]:246 === _mS_?force_lazy_block(prng):prng,
          seed=caml_call1(_b9_[4],_mT_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function clear$2(h)
     {var _mR_=0 < h[1]?1:0;
      return _mR_?(h[1] = 0,fill$0(h[2],0,h[2].length - 1,0)):_mR_}
    function reset$0(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1 && len !== abs(h[4]))
       {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
      return clear$2(h)}
    function copy_bucketlist(param)
     {if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         prec$0=[0,key,data,next],
         prec=prec$0,
         param$0=next;
        for(;;)
         {if(param$0)
           {var
             key$0=param$0[1],
             data$0=param$0[2],
             next$0=param$0[3],
             r=[0,key$0,data$0,next$0];
            if(prec){prec[3] = r;var prec=r,param$0=next$0;continue}
            throw [0,Assert_failure,_b$_]}
          return prec$0}}
      return 0}
    function copy$6(init)
     {var _mO_=init[4],_mP_=init[3],_mQ_=map$5(copy_bucketlist,init[2]);
      return [0,init[1],_mQ_,_mP_,_mO_]}
    function length$4(h){return h[1]}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _mF_=nsize < max_array_length?1:0;
      if(_mF_)
       {var
         ndata=caml_make_vect(nsize,0),
         ndata_tail=caml_make_vect(nsize,0),
         inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        var _mH_=osize - 1 | 0,_mG_=0;
        if(! (_mH_ < 0))
         {var i$0=_mG_;
          a:
          for(;;)
           {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
            for(;;)
             {if(cell)
               {var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                 nidx=caml_call2(indexfun,h,key),
                 match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                if(match)
                 match[3] = cell$0;
                else
                 caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                var cell=next;
                continue}
              var _mN_=i$0 + 1 | 0;
              if(_mH_ !== i$0){var i$0=_mN_;continue a}
              break}
            break}}
        if(inplace)
         {var _mJ_=nsize - 1 | 0,_mI_=0;
          if(! (_mJ_ < 0))
           {var i=_mI_;
            for(;;)
             {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
              if(match$0)match$0[3] = 0;
              var _mM_=i + 1 | 0;
              if(_mJ_ !== i){var i=_mM_;continue}
              break}}
          var _mK_=0}
        else
         var _mK_=inplace;
        var _mL_=_mK_}
      else
       var _mL_=_mF_;
      return _mL_}
    function iter$10(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var key=param$0[1],data=param$0[2],next=param$0[3];
            caml_call2(f,key,data);
            var param$0=next;
            continue}
          return 0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_mB_=d.length - 1 - 1 | 0,_mA_=0;
        if(! (_mB_ < 0))
         {var i=_mA_;
          for(;;)
           {do_bucket(caml_check_bound(d,i)[1 + i]);
            var _mE_=i + 1 | 0;
            if(_mB_ !== i){var i=_mE_;continue}
            break}}
        var _mC_=1 - old_trav,_mD_=_mC_?flip_ongoing_traversal(h):_mC_;
        return _mD_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         {var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
           match=caml_call2(f,key,data);
          if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
             caml_check_bound(h[2],i)[1 + i] = slot$0;
            slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
          h[1] = h[1] - 1 | 0;
          var slot$0=next;
          continue}
        return prec$0
                ?(prec$0[3] = 0,0)
                :(caml_check_bound(h[2],i)[1 + i] = 0,0)}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _mx_=d.length - 1 - 1 | 0,_mw_=0;
        if(! (_mx_ < 0))
         {var i=_mw_;
          for(;;)
           {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[1 + i]);
            var _mz_=i + 1 | 0;
            if(_mx_ !== i){var i=_mz_;continue}
            break}}
        var _my_=0;
        return _my_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold$3(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             next=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=next,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_ms_=d.length - 1 - 1 | 0,_mr_=0;
        if(! (_ms_ < 0))
         {var i=_mr_;
          for(;;)
           {var _mu_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[1 + i],_mu_);
            var _mv_=i + 1 | 0;
            if(_ms_ !== i){var i=_mv_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _mt_=accu[1];
        return _mt_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function stats(h)
     {var
       _mn_=h[2],
       _mo_=0,
       mbl=
        fold_left$1(function(m,b){return max(m,bucket_length(0,b))},_mo_,_mn_),
       histo=caml_make_vect(mbl + 1 | 0,0),
       _mp_=h[2];
      iter$5
       (function(b)
         {var
           l=bucket_length(0,b),
           _mq_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
          caml_check_bound(histo,l)[1 + l] = _mq_;
          return 0},
        _mp_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function to_seq$9(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,[0,key,data],function(_mm_){return aux(i$0,next,_mm_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue}}
      var _mj_=0,_mk_=0;
      return function(_ml_){return aux(_mk_,_mj_,_ml_)}}
    function to_seq_keys(m)
     {var _mf_=to_seq$9(m);
      function _mg_(_mi_){return _mi_[1]}
      return function(_mh_){return map(_mg_,_mf_,_mh_)}}
    function to_seq_values(m)
     {var _mb_=to_seq$9(m);
      function _mc_(_me_){return _me_[2]}
      return function(_md_){return map(_mc_,_mb_,_md_)}}
    function MakeSeeded(H)
     {function key_index(h,key)
       {var _ma_=h[2].length - 1 - 1 | 0;
        return caml_call2(H[2],h[3],key) & _ma_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _l$_=h[2].length - 1 << 1 < h[1]?1:0;
        return _l$_?resize$0(key_index,h):_l$_}
      function remove(h,key)
       {var
         i=key_index(h,key),
         c$0=caml_check_bound(h[2],i)[1 + i],
         prec=0,
         c=c$0;
        for(;;)
         {if(c)
           {var k=c[1],next=c[3];
            if(caml_call2(H[1],k,key))
             {h[1] = h[1] - 1 | 0;
              return prec
                      ?(prec[3] = next,0)
                      :(caml_check_bound(h[2],i)[1 + i] = next,0)}
            var prec=c,c=next;
            continue}
          return 0}}
      function find(h,key)
       {var _l__=key_index(h,key),match=caml_check_bound(h[2],_l__)[1 + _l__];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return d1;
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return d2;
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return d3;
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return data;
                  var param=next;
                  continue}
                throw Not_found}}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function find_opt(h,key)
       {var _l9_=key_index(h,key),match=caml_check_bound(h[2],_l9_)[1 + _l9_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return [0,data];
                  var param=next;
                  continue}
                return 0}}
            return 0}
          return 0}
        return 0}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3];
              if(caml_call2(H[1],k,key))return [0,d,find_in_bucket(next)];
              var param$0=next;
              continue}
            return 0}}
        var _l8_=key_index(h,key);
        return find_in_bucket(caml_check_bound(h[2],_l8_)[1 + _l8_])}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         param$0=caml_check_bound(h[2],i)[1 + i],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
            if(! caml_call2(H[1],k,key)){var param=next;continue}
            param[1] = key;
            param[2] = data;
            var _l5_=0}
          else
           var _l5_=1;
          if(_l5_)
           {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
            h[1] = h[1] + 1 | 0;
            var _l6_=h[2].length - 1 << 1 < h[1]?1:0;
            if(_l6_)return resize$0(key_index,h);
            var _l7_=_l6_}
          else
           var _l7_=_l5_;
          return _l7_}}
      function mem(h,key)
       {var
         _l4_=key_index(h,key),
         param$0=caml_check_bound(h[2],_l4_)[1 + _l4_],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3],_l3_=caml_call2(H[1],k,key);
            if(_l3_)return _l3_;
            var param=next;
            continue}
          return 0}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create$3,
              clear$2,
              reset$0,
              copy$6,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$10,
              filter_map_inplace,
              fold$3,
              length$4,
              stats,
              to_seq$9,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function Make$0(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       _l2_=include[1];
      function create(sz){return caml_call2(_l2_,_ca_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function hash$1(x){return caml_hash(10,100,0,x)}
    function hash_param(n1,n2,x){return caml_hash(n1,n2,0,x)}
    function seeded_hash(seed,x){return caml_hash(10,100,seed,x)}
    function key_index(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod
                (runtime.caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
      caml_check_bound(h[2],i)[1 + i] = bucket;
      h[1] = h[1] + 1 | 0;
      var _l1_=h[2].length - 1 << 1 < h[1]?1:0;
      return _l1_?resize$0(key_index,h):_l1_}
    function remove(h,key)
     {var i=key_index(h,key),c$0=caml_check_bound(h[2],i)[1 + i],prec=0,c=c$0;
      for(;;)
       {if(c)
         {var k=c[1],next=c[3];
          if(0 === caml_compare(k,key))
           {h[1] = h[1] - 1 | 0;
            return prec
                    ?(prec[3] = next,0)
                    :(caml_check_bound(h[2],i)[1 + i] = next,0)}
          var prec=c,c=next;
          continue}
        return 0}}
    function find$0(h,key)
     {var _l0_=key_index(h,key),match=caml_check_bound(h[2],_l0_)[1 + _l0_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function find_opt$0(h,key)
     {var _lZ_=key_index(h,key),match=caml_check_bound(h[2],_lZ_)[1 + _lZ_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return [0,d1];
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return [0,d2];
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return [0,d3];
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return [0,data];
                var param=next;
                continue}
              return 0}}
          return 0}
        return 0}
      return 0}
    function find_all$0(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3];
            if(0 === caml_compare(k,key))return [0,data,find_in_bucket(next)];
            var param$0=next;
            continue}
          return 0}}
      var _lY_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_lY_)[1 + _lY_])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[1 + i],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _lV_=0}
        else
         var _lV_=1;
        if(_lV_)
         {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _lW_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_lW_)return resize$0(key_index,h);
          var _lX_=_lW_}
        else
         var _lX_=_lV_;
        return _lX_}}
    function mem$2(h,key)
     {var
       _lU_=key_index(h,key),
       param$0=caml_check_bound(h[2],_lU_)[1 + _lU_],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_lT_=0 === caml_compare(k,key)?1:0;
          if(_lT_)return _lT_;
          var param=next;
          continue}
        return 0}}
    function add_seq$2(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return add$0(tbl,k,v)},
               i)}
    function replace_seq(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return replace(tbl,k,v)},
               i)}
    function of_seq$7(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
    var
     Stdlib_hashtbl=
      [0,
       create$3,
       clear$2,
       reset$0,
       copy$6,
       add$0,
       find$0,
       find_opt$0,
       find_all$0,
       mem$2,
       remove,
       replace,
       iter$10,
       filter_map_inplace,
       fold$3,
       length$4,
       randomize,
       is_randomized,
       stats,
       to_seq$9,
       to_seq_keys,
       to_seq_values,
       add_seq$2,
       replace_seq,
       of_seq$7,
       Make$0,
       MakeSeeded,
       hash$1,
       seeded_hash,
       hash_param,
       caml_hash];
    caml_register_global(792,Stdlib_hashtbl,"Stdlib__hashtbl");
    function weak_create(l)
     {var _lR_=0 <= l?1:0,_lS_=_lR_?l <= _s_[15]?1:0:_lR_;
      if(1 - _lS_)invalid_arg(cst_Weak_create);
      return runtime.caml_weak_create(l)}
    function length$5(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset$0(e,o,msg)
     {var _lO_=0 <= o?1:0,_lP_=_lO_?o < length$5(e)?1:0:_lO_,_lQ_=1 - _lP_;
      return _lQ_?invalid_arg(msg):_lQ_}
    function set(e,o,x)
     {raise_if_invalid_offset$0(e,o,cst_Weak_set);
      if(x){var x$0=x[1];return caml_ephe_set_key(e,o,x$0)}
      return caml_ephe_unset_key(e,o)}
    function get$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get);
      return runtime.caml_weak_get(e,o)}
    function get_copy(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get_copy);
      return runtime.caml_weak_get_copy(e,o)}
    function check$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_check);
      return runtime.caml_weak_check(e,o)}
    function blit$4(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$5(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$5(e2) - l | 0) < o2))
       {var
         _lM_=0 !== l?1:0,
         _lN_=_lM_?runtime.caml_weak_blit(e1,o1,e2,o2,l):_lM_;
        return _lN_}
      return invalid_arg(cst_Weak_blit)}
    function fill$2(ar,ofs,len,x)
     {if(0 <= ofs && 0 <= len && ! ((length$5(ar) - len | 0) < ofs))
       {var _lK_=(ofs + len | 0) - 1 | 0;
        if(! (_lK_ < ofs))
         {var i=ofs;
          for(;;)
           {set(ar,i,x);
            var _lL_=i + 1 | 0;
            if(_lK_ !== i){var i=_lL_;continue}
            break}}
        return 0}
      throw [0,Invalid_argument,cst_Weak_fill]}
    function Make$1(H)
     {var emptybucket=weak_create(0);
      function get_index(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
      var limit=7;
      function create(sz)
       {var
         sz$0=7 <= sz?sz:7,
         sz$1=max_array_length < sz$0?max_array_length:sz$0;
        return [0,
                caml_make_vect(sz$1,emptybucket),
                caml_make_vect(sz$1,[0]),
                limit,
                0,
                0]}
      function clear(t)
       {var _lI_=t[1].length - 1 - 1 | 0,_lH_=0;
        if(! (_lI_ < 0))
         {var i=_lH_;
          for(;;)
           {caml_check_bound(t[1],i)[1 + i] = emptybucket;
            caml_check_bound(t[2],i)[1 + i] = [0];
            var _lJ_=i + 1 | 0;
            if(_lI_ !== i){var i=_lJ_;continue}
            break}}
        t[3] = limit;
        t[4] = 0;
        return 0}
      function fold(f,t,init)
       {var _lG_=t[1],i=0;
        return fold_right$0
                (function(b,accu$1)
                  {var i$0=i,accu=accu$1;
                   for(;;)
                    {if(length$5(b) <= i$0)return accu;
                     var match=get$0(b,i$0);
                     if(match)
                      {var
                        v=match[1],
                        accu$0=caml_call2(f,v,accu),
                        i$1=i$0 + 1 | 0,
                        i$0=i$1,
                        accu=accu$0;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _lG_,
                 init)}
      function iter(f,t)
       {var _lF_=t[1],i=0;
        return iter$5
                (function(b)
                  {var i$0=i;
                   for(;;)
                    {if(length$5(b) <= i$0)return 0;
                     var match=get$0(b,i$0);
                     if(match)
                      {var v=match[1];
                       caml_call1(f,v);
                       var i$1=i$0 + 1 | 0,i$0=i$1;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _lF_)}
      function count_bucket(i,b,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(length$5(b) <= i$0)return accu$0;
          var
           _lE_=check$0(b,i$0)?1:0,
           accu$1=accu$0 + _lE_ | 0,
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function count(t)
       {var _lz_=0,_lA_=t[1],_lB_=0;
        return fold_right$0
                (function(_lC_,_lD_){return count_bucket(_lB_,_lC_,_lD_)},
                 _lA_,
                 _lz_)}
      function add_aux(t,setter,d,h,index)
       {var
         bucket$0=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket$0),
         i$3=0;
        for(;;)
         {if(sz <= i$3)
           {var
             newsz=
              min(((3 * sz | 0) / 2 | 0) + 3 | 0,max_array_length - 2 | 0);
            if(newsz <= sz)failwith(cst_Weak_Make_hash_bucket_cann);
            var
             newbucket$0=weak_create(newsz),
             newhashes=caml_make_vect(newsz,0);
            blit$4(bucket$0,0,newbucket$0,0,sz);
            blit$1(hashes,0,newhashes,0,sz);
            caml_call3(setter,newbucket$0,sz,d);
            caml_check_bound(newhashes,sz)[1 + sz] = h;
            caml_check_bound(t[1],index)[1 + index] = newbucket$0;
            caml_check_bound(t[2],index)[1 + index] = newhashes;
            var _lv_=sz <= t[3]?1:0,_lw_=_lv_?t[3] < newsz?1:0:_lv_;
            if(_lw_)
             {t[4] = t[4] + 1 | 0;
              var i$4=0;
              for(;;)
               {var
                 _ll_=t[5],
                 bucket=caml_check_bound(t[1],_ll_)[1 + _ll_],
                 _lm_=t[5],
                 hbucket=caml_check_bound(t[2],_lm_)[1 + _lm_],
                 n=length$5(bucket),
                 prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
                 live=count_bucket(0,bucket,0);
                if(live <= prev_len)
                 {var j$2=length$5(bucket) - 1 | 0,i$0=0,j=j$2;
                  for(;;)
                   {if(prev_len <= j)
                     {if(check$0(bucket,i$0))
                       {var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                      if(check$0(bucket,j))
                       {blit$4(bucket,j,bucket,i$0,1);
                        var _ln_=caml_check_bound(hbucket,j)[1 + j];
                        caml_check_bound(hbucket,i$0)[1 + i$0] = _ln_;
                        var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                        continue}
                      var j$1=j - 1 | 0,j=j$1;
                      continue}
                    if(0 === prev_len)
                     {var _lo_=t[5];
                      caml_check_bound(t[1],_lo_)[1 + _lo_] = emptybucket;
                      var _lp_=t[5];
                      caml_check_bound(t[2],_lp_)[1 + _lp_] = [0]}
                    else
                     {var newbucket=weak_create(prev_len);
                      blit$4(bucket,0,newbucket,0,prev_len);
                      var _ls_=t[5];
                      caml_check_bound(t[1],_ls_)[1 + _ls_] = newbucket;
                      var _lt_=sub$1(hbucket,0,prev_len),_lu_=t[5];
                      caml_check_bound(t[2],_lu_)[1 + _lu_] = _lt_}
                    var _lq_=t[3] < n?1:0,_lr_=_lq_?prev_len <= t[3]?1:0:_lq_;
                    if(_lr_)t[4] = t[4] - 1 | 0;
                    break}}
                t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
                var _ly_=i$4 + 1 | 0;
                if(2 !== i$4){var i$4=_ly_;continue}
                break}}
            var _lx_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
            if(_lx_)
             {var
               n$0=t[1].length - 1,
               newlen=min(((3 * n$0 | 0) / 2 | 0) + 3 | 0,max_array_length);
              if(n$0 < newlen)
               {var newt=create(newlen),_lk_=t[1],i=0;
                iteri$2
                 (function(j,ob)
                   {var i$0=i;
                    for(;;)
                     {if(length$5(ob) <= i$0)return 0;
                      var match=check$0(ob,i$0);
                      if(match)
                       {var
                         oh=caml_check_bound(t[2],j)[1 + j],
                         setter$0=
                          function(i)
                           {function setter(nb,ni,param){return blit$4(ob,i,nb,ni,1)}
                            return setter},
                         setter=setter$0(i$0),
                         h=caml_check_bound(oh,i$0)[1 + i$0];
                        add_aux(newt,setter,0,h,get_index(newt,h));
                        var i$1=i$0 + 1 | 0,i$0=i$1;
                        continue}
                      var i$2=i$0 + 1 | 0,i$0=i$2;
                      continue}},
                  _lk_);
                t[1] = newt[1];
                t[2] = newt[2];
                t[3] = newt[3];
                t[4] = newt[4];
                t[5] = caml_mod(t[5],newt[1].length - 1);
                return 0}
              t[3] = max_int;
              t[4] = 0;
              return 0}
            return _lx_}
          if(check$0(bucket$0,i$3)){var i$5=i$3 + 1 | 0,i$3=i$5;continue}
          caml_call3(setter,bucket$0,i$3,d);
          caml_check_bound(hashes,i$3)[1 + i$3] = h;
          return 0}}
      function add(t,d)
       {var h=caml_call1(H[2],d);return add_aux(t,set,[0,d],h,get_index(t,h))}
      function find_or(t,d,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return caml_call2(ifnotfound,h,index);
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$0(bucket,i);
                if(match$0){var v$0=match$0[1];return v$0}
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function merge(t,d)
       {return find_or
                (t,d,function(h,index){add_aux(t,set,[0,d],h,index);return d})}
      function find(t,d)
       {return find_or(t,d,function(h,index){throw Not_found})}
      function find_opt(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return 0;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var v$0=get$0(bucket,i);
                if(v$0)return v$0;
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function find_shadow(t,d,iffound,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return ifnotfound;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
            var i$0=i + 1 | 0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}}
      function remove(t,d)
       {var _lj_=0;
        return find_shadow(t,d,function(w,i){return set(w,i,0)},_lj_)}
      function mem(t,d)
       {var _li_=0;return find_shadow(t,d,function(w,i){return 1},_li_)}
      function find_all(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0,
         accu=0;
        for(;;)
         {if(sz <= i)return accu;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$0(bucket,i);
                if(match$0)
                 {var
                   v$0=match$0[1],
                   accu$0=[0,v$0,accu],
                   i$0=i + 1 | 0,
                   i=i$0,
                   accu=accu$0;
                  continue}
                var i$1=i + 1 | 0,i=i$1;
                continue}}
            var i$2=i + 1 | 0,i=i$2;
            continue}
          var i$3=i + 1 | 0,i=i$3;
          continue}}
      function stats(t)
       {var len=t[1].length - 1,lens=map$5(length$5,t[1]);
        sort(caml_int_compare,lens);
        var
         _la_=0,
         totlen=
          fold_left$1(function(_lh_,_lg_){return _lh_ + _lg_ | 0},_la_,lens),
         _lb_=len - 1 | 0,
         _ld_=len / 2 | 0,
         _lc_=caml_check_bound(lens,_lb_)[1 + _lb_],
         _le_=caml_check_bound(lens,_ld_)[1 + _ld_],
         _lf_=caml_check_bound(lens,0)[1];
        return [0,len,count(t),totlen,_lf_,_le_,_lc_]}
      return [0,
              create,
              clear,
              merge,
              add,
              remove,
              find,
              find_opt,
              find_all,
              mem,
              iter,
              fold,
              count,
              stats]}
    var
     Stdlib_weak=
      [0,weak_create,length$5,set,get$0,get_copy,check$0,fill$2,blit$4,Make$1];
    caml_register_global(793,Stdlib_weak,"Stdlib__weak");
    function id$0(x){return x}
    var
     String_tag=[248,cst_Stdlib_Format_String_tag,caml_fresh_oo_id(0)],
     size=0,
     unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _k$_=caml_string_notequal(s,cst$67);
      return _k$_?format_pp_text(state,caml_ml_string_length(s),s):_k$_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_cb_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function advance_left(state)
     {for(;;)
       {var match$12=peek_opt(state[28]);
        if(match$12)
         {var
           match$13=match$12[1],
           size$0=match$13[1],
           length$0=match$13[3],
           token=match$13[2],
           pending_count=state[13] - state[12] | 0,
           _k9_=0 <= size$0?1:0,
           _k__=_k9_ || (state[9] <= pending_count?1:0);
          if(_k__)
           {take(state[28]);
            var size$1=0 <= size$0?size$0:pp_infinity;
            if(typeof token === "number")
             switch(token)
              {case 0:
                var match$3=top_opt(state[3]);
                if(match$3)
                 {var
                   match$4=match$3[1],
                   tabs=match$4[1],
                   add_tab=
                    function(n,ls)
                     {if(ls)
                       {var l=ls[2],x=ls[1];
                        return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                      return [0,n,0]};
                  tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1])}
                break;
               case 1:pop_opt(state[2]);break;
               case 2:pop_opt(state[3]);break;
               case 3:
                var match$5=top_opt(state[2]);
                if(match$5)
                 {var match$6=match$5[1],width$0=match$6[2];
                  break_line(state,width$0)}
                else
                 pp_output_newline(state);
                break;
               case 4:
                if(state[10] !== (state[6] - state[9] | 0))
                 {var match$1=take_opt(state[28]);
                  if(match$1)
                   {var match$2=match$1[1],size=match$2[1],length=match$2[3];
                    state[12] = state[12] - length | 0;
                    state[9] = state[9] + size | 0}}
                break;
               default:
                var match$7=pop_opt(state[5]);
                if(match$7)
                 {var
                   tag_name=match$7[1],
                   marker=caml_call1(state[25],tag_name);
                  pp_output_string(state,marker)}}
            else
             switch(token[0])
              {case 0:var s=token[1];format_pp_text(state,size$1,s);break;
               case 1:
                var
                 breaks=token[2],
                 fits=token[1],
                 off=breaks[2],
                 before=breaks[1],
                 match$8=top_opt(state[2]);
                if(match$8)
                 {var
                   match$9=match$8[1],
                   width$1=match$9[2],
                   box_type$0=match$9[1];
                  switch(box_type$0)
                   {case 0:break_same_line(state,fits);break;
                    case 1:break_new_line(state,breaks,width$1);break;
                    case 2:break_new_line(state,breaks,width$1);break;
                    case 3:
                     if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                      break_new_line(state,breaks,width$1);
                     else
                      break_same_line(state,fits);
                     break;
                    case 4:
                     if(state[11])
                      break_same_line(state,fits);
                     else
                      if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                       break_new_line(state,breaks,width$1);
                      else
                       if(((state[6] - width$1 | 0) + off | 0) < state[10])
                        break_new_line(state,breaks,width$1);
                       else
                        break_same_line(state,fits);
                     break;
                    default:break_same_line(state,fits)}}
                break;
               case 2:
                var
                 off$0=token[2],
                 n=token[1],
                 insertion_point=state[6] - state[9] | 0,
                 match$10=top_opt(state[3]);
                if(match$10)
                 {var match$11=match$10[1],tabs$0=match$11[1],_k7_=tabs$0[1];
                  if(_k7_)
                   {var first=_k7_[1],param=tabs$0[1];
                    for(;;)
                     {if(param)
                       {var tail=param[2],head=param[1];
                        if(! (insertion_point <= head)){var param=tail;continue}
                        var _k8_=head}
                      else
                       var _k8_=first;
                      var tab=_k8_;
                      break}}
                  else
                   var tab=insertion_point;
                  var offset=tab - insertion_point | 0;
                  if(0 <= offset)
                   break_same_line(state,[0,cst$69,offset + n | 0,cst$68]);
                  else
                   break_new_line
                    (state,[0,cst$71,tab + off$0 | 0,cst$70],state[6])}
                break;
               case 3:
                var
                 ty=token[2],
                 off$1=token[1],
                 insertion_point$0=state[6] - state[9] | 0;
                if(state[8] < insertion_point$0)
                 {var match=top_opt(state[2]);
                  if(match)
                   {var match$0=match[1],width=match$0[2],box_type=match$0[1];
                    if(state[9] < width)
                     {var switcher=box_type - 1 | 0;
                      if(! (3 < switcher >>> 0))break_line(state,width)}}
                  else
                   pp_output_newline(state)}
                var
                 width$2=state[9] - off$1 | 0,
                 box_type$1=1 === ty?1:state[9] < size$1?ty:5;
                push([0,box_type$1,width$2],state[2]);
                break;
               case 4:var tbox=token[1];push(tbox,state[3]);break;
               default:
                var
                 tag_name$0=token[1],
                 marker$0=caml_call1(state[24],tag_name$0);
                pp_output_string(state,marker$0);
                push(tag_name$0,state[5])}
            state[12] = length$0 + state[12] | 0;
            continue}
          return _k__}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_cc_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _k4_=queue_elem[1];
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _k5_=queue_elem[2];
        if(typeof _k5_ !== "number")
         switch(_k5_[0])
          {case 3:
            var _k6_=1 - ty;
            return _k6_
                    ?(queue_elem[1] = state[13] + _k4_ | 0,pop_opt(state[1]),0)
                    :_k6_;
           case 1:
           case 2:
            return ty
                    ?(queue_elem[1] = state[13] + _k4_ | 0,pop_opt(state[1]),0)
                    :ty
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _k2_=state[14] === state[15]?1:0;
      if(_k2_)
       {var _k3_=state[16];
        return enqueue_string_as(state,caml_ml_string_length(_k3_),_k3_)}
      return _k2_}
    function pp_close_box(state,param)
     {var _k0_=1 < state[14]?1:0;
      if(_k0_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _k1_=0}
      else
       var _k1_=_k0_;
      return _k1_}
    function pp_open_stag(state,tag_name)
     {if(state[22]){push(tag_name,state[4]);caml_call1(state[26],tag_name)}
      var _kZ_=state[23];
      if(_kZ_)
       {var token=[5,tag_name];return pp_enqueue(state,[0,size,token,0])}
      return _kZ_}
    function pp_close_stag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _kX_=state[22];
      if(_kX_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _kY_=0}
      else
       var _kY_=_kX_;
      return _kY_}
    function pp_open_tag(state,s){return pp_open_stag(state,[0,String_tag,s])}
    function pp_close_tag(state,param){return pp_close_stag(state,0)}
    function pp_set_print_tags(state,b){state[22] = b;return 0}
    function pp_set_mark_tags(state,b){state[23] = b;return 0}
    function pp_get_print_tags(state,param){return state[22]}
    function pp_get_mark_tags(state,param){return state[23]}
    function pp_set_tags(state,b)
     {pp_set_print_tags(state,b);return pp_set_mark_tags(state,b)}
    function pp_get_formatter_stag_function(state,param)
     {return [0,state[24],state[25],state[26],state[27]]}
    function pp_set_formatter_stag_function(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      state[24] = mot;
      state[25] = mct;
      state[26] = pot;
      state[27] = pct;
      return 0}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {var _kW_=state[4];
      iter$7(function(param){return pp_close_tag(state,0)},_kW_);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _kV_=state[14] < state[15]?1:0;
      return _kV_?enqueue_string_as(state,size,s):_kV_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_string_of_jsbytes("" + i))}
    function pp_print_float(state,f)
     {return pp_print_string(state,to_string(f))}
    function pp_print_bool(state,b)
     {return pp_print_string(state,string_of_bool(b))}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_hbox(state,param){return pp_open_box_gen(state,0,0)}
    function pp_open_vbox(state,indent)
     {return pp_open_box_gen(state,indent,1)}
    function pp_open_hvbox(state,indent)
     {return pp_open_box_gen(state,indent,2)}
    function pp_open_hovbox(state,indent)
     {return pp_open_box_gen(state,indent,3)}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {pp_flush_queue(state,1);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _kU_=state[14] < state[15]?1:0;
      return _kU_?enqueue_advance(state,[0,size,3,0]):_kU_}
    function pp_print_if_newline(state,param)
     {var _kT_=state[14] < state[15]?1:0;
      return _kT_?enqueue_advance(state,[0,size,4,0]):_kT_}
    function pp_print_custom_break(state,fits,breaks)
     {var
       after=fits[3],
       width=fits[2],
       before=fits[1],
       _kS_=state[14] < state[15]?1:0;
      if(_kS_)
       {var
         size=- state[13] | 0,
         token=[1,fits,breaks],
         length=
          (caml_ml_string_length(before) + width | 0)
          +
          caml_ml_string_length(after)
          |
          0,
         elem=[0,size,token,length];
        return scan_push(state,1,elem)}
      return _kS_}
    function pp_print_break(state,width,offset)
     {return pp_print_custom_break
              (state,[0,cst$75,width,cst$74],[0,cst$73,offset,cst$72])}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_open_tbox(state,param)
     {state[14] = state[14] + 1 | 0;
      var _kR_=state[14] < state[15]?1:0;
      if(_kR_)
       {var elem=[0,size,[4,[0,[0,0]]],0];return enqueue_advance(state,elem)}
      return _kR_}
    function pp_close_tbox(state,param)
     {var _kO_=1 < state[14]?1:0;
      if(_kO_)
       {var _kP_=state[14] < state[15]?1:0;
        if(_kP_)
         {var elem=[0,size,2,0];
          enqueue_advance(state,elem);
          state[14] = state[14] - 1 | 0;
          var _kQ_=0}
        else
         var _kQ_=_kP_}
      else
       var _kQ_=_kO_;
      return _kQ_}
    function pp_print_tbreak(state,width,offset)
     {var _kN_=state[14] < state[15]?1:0;
      if(_kN_)
       {var size=- state[13] | 0,elem=[0,size,[2,width,offset],width];
        return scan_push(state,1,elem)}
      return _kN_}
    function pp_print_tab(state,param){return pp_print_tbreak(state,0,0)}
    function pp_set_tab(state,param)
     {var _kM_=state[14] < state[15]?1:0;
      if(_kM_){var elem=[0,size,0,0];return enqueue_advance(state,elem)}
      return _kM_}
    function pp_set_max_boxes(state,n)
     {var _kK_=1 < n?1:0,_kL_=_kK_?(state[15] = n,0):_kK_;return _kL_}
    function pp_get_max_boxes(state,param){return state[15]}
    function pp_over_max_boxes(state,param)
     {return state[14] === state[15]?1:0}
    function pp_set_ellipsis_text(state,s){state[16] = s;return 0}
    function pp_get_ellipsis_text(state,param){return state[16]}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var _kJ_=1 < n$0?1:0;
      if(_kJ_)
       {var n$1=state[6] - n$0 | 0,_kI_=1 <= n$1?1:0;
        if(_kI_)
         {var n=pp_limit(n$1);
          state[7] = n;
          state[8] = state[6] - state[7] | 0;
          return pp_rinit(state)}
        return _kI_}
      return _kJ_}
    function pp_get_max_indent(state,param){return state[8]}
    function pp_set_margin(state,n)
     {var _kH_=1 <= n?1:0;
      if(_kH_)
       {var n$0=pp_limit(n);
        state[6] = n$0;
        var
         new_max_indent=
          state[8] <= state[6]
           ?state[8]
           :max(max(state[6] - state[7] | 0,state[6] / 2 | 0),1);
        return pp_set_max_indent(state,new_max_indent)}
      return _kH_}
    function validate_geometry(param)
     {var margin=param[2],max_indent=param[1];
      return 2 <= max_indent?margin <= max_indent?_cd_:_ce_:_cf_}
    function check_geometry(geometry)
     {var match=validate_geometry(geometry);return 0 === match[0]?1:0}
    function pp_get_margin(state,param){return state[6]}
    function pp_set_full_geometry(state,param)
     {var margin=param[2],max_indent=param[1];
      pp_set_margin(state,margin);
      pp_set_max_indent(state,max_indent);
      return 0}
    function pp_set_geometry(state,max_indent,margin)
     {var geometry=[0,max_indent,margin],match=validate_geometry(geometry);
      if(0 === match[0])return pp_set_full_geometry(state,geometry);
      var msg=match[1];
      throw [0,Invalid_argument,symbol(cst_Format_pp_set_geometry,msg)]}
    function pp_safe_set_geometry(state,max_indent,margin)
     {var geometry=[0,max_indent,margin],match=validate_geometry(geometry);
      return 0 === match[0]?pp_set_full_geometry(state,geometry):0}
    function pp_get_geometry(state,param){return [0,state[8],state[6]]}
    function pp_update_geometry(state,update)
     {var geometry=pp_get_geometry(state,0);
      return pp_set_full_geometry(state,caml_call1(update,geometry))}
    function pp_set_formatter_out_functions(state,param)
     {var j=param[5],i=param[4],h=param[3],g=param[2],f=param[1];
      state[17] = f;
      state[18] = g;
      state[19] = h;
      state[20] = i;
      state[21] = j;
      return 0}
    function pp_get_formatter_out_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20],state[21]]}
    function pp_set_formatter_output_functi(state,f,g)
     {state[17] = f;state[18] = g;return 0}
    function pp_get_formatter_output_functi(state,param)
     {return [0,state[17],state[18]]}
    function display_newline(state,param)
     {return caml_call3(state[17],cst$76,0,1)}
    var blank_line=make$0(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _kG_=0 < n$0?1:0;
        if(_kG_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _kG_}}
    function pp_set_formatter_out_channel(state,oc)
     {state[17]
      =
      function(_kD_,_kE_,_kF_){return output_substring(oc,_kD_,_kE_,_kF_)};
      state[18] = function(param){return caml_ml_flush(oc)};
      state[19] = function(_kC_){return display_newline(state,_kC_)};
      state[20] = function(_kB_){return display_indent(state,_kB_)};
      state[21] = function(_kA_){return display_indent(state,_kA_)};
      return 0}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(cst$78,symbol(s,cst$77))}
      return cst$79}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(cst$81,symbol(s,cst$80))}
      return cst$82}
    function default_pp_print_open_tag(_kz_){return 0}
    function default_pp_print_close_tag(_ky_){return 0}
    function pp_make_formatter(f,g,h,i,j)
     {var pp_queue=create$1(0),sys_tok=[0,unknown,_cg_,0];
      add(sys_tok,pp_queue);
      var scan_stack=create$0(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var _kv_=create$0(0),_kw_=create$0(0),_kx_=create$0(0);
      return [0,
              scan_stack,
              create$0(0),
              _kx_,
              _kw_,
              _kv_,
              78,
              10,
              68,
              78,
              0,
              1,
              1,
              1,
              1,
              max_int,
              cst$83,
              f,
              g,
              h,
              i,
              j,
              0,
              0,
              default_pp_mark_open_tag,
              default_pp_mark_close_tag,
              default_pp_print_open_tag,
              default_pp_print_close_tag,
              pp_queue]}
    function formatter_of_out_functions(out_funs)
     {return pp_make_formatter
              (out_funs[1],out_funs[2],out_funs[3],out_funs[4],out_funs[5])}
    function make_formatter(output,flush)
     {function _kn_(_ku_){return 0}
      function _ko_(_kt_){return 0}
      var
       ppf=
        pp_make_formatter(output,flush,function(_ks_){return 0},_ko_,_kn_);
      ppf[19] = function(_kr_){return display_newline(ppf,_kr_)};
      ppf[20] = function(_kq_){return display_indent(ppf,_kq_)};
      ppf[21] = function(_kp_){return display_indent(ppf,_kp_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _kj_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(_kk_,_kl_,_km_)
                {return output_substring(oc,_kk_,_kl_,_km_)},
               _kj_)}
    function formatter_of_buffer(b)
     {function _ke_(_ki_){return 0}
      return make_formatter
              (function(_kf_,_kg_,_kh_)
                {return add_substring(b,_kf_,_kg_,_kh_)},
               _ke_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$2(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr),
     str_formatter=formatter_of_buffer(stdbuf);
    function flush_buffer_formatter(buf,ppf)
     {pp_flush_queue(ppf,0);var s=contents(buf);reset(buf);return s}
    function flush_str_formatter(param)
     {return flush_buffer_formatter(stdbuf,str_formatter)}
    function make_symbolic_output_buffer(param){return [0,0]}
    function clear_symbolic_output_buffer(sob){sob[1] = 0;return 0}
    function get_symbolic_output_buffer(sob){return rev(sob[1])}
    function flush_symbolic_output_buffer(sob)
     {var items=get_symbolic_output_buffer(sob);
      clear_symbolic_output_buffer(sob);
      return items}
    function add_symbolic_output_item(sob,item)
     {sob[1] = [0,item,sob[1]];return 0}
    function formatter_of_symbolic_output_b(sob)
     {function f(s,i,n){return add_symbolic_output_item(sob,[0,sub$0(s,i,n)])}
      function g(_kd_){return add_symbolic_output_item(sob,0)}
      function h(_kc_){return add_symbolic_output_item(sob,1)}
      function i(n){return add_symbolic_output_item(sob,[1,n])}
      function j(n){return add_symbolic_output_item(sob,[2,n])}
      return pp_make_formatter(f,g,h,i,j)}
    function open_hbox(_kb_){return pp_open_hbox(std_formatter,_kb_)}
    function open_vbox(_ka_){return pp_open_vbox(std_formatter,_ka_)}
    function open_hvbox(_j$_){return pp_open_hvbox(std_formatter,_j$_)}
    function open_hovbox(_j__){return pp_open_hovbox(std_formatter,_j__)}
    function open_box(_j9_){return pp_open_box(std_formatter,_j9_)}
    function close_box(_j8_){return pp_close_box(std_formatter,_j8_)}
    function open_tag(_j7_){return pp_open_tag(std_formatter,_j7_)}
    function close_tag(_j6_){return pp_close_tag(std_formatter,_j6_)}
    function open_stag(_j5_){return pp_open_stag(std_formatter,_j5_)}
    function close_stag(_j4_){return pp_close_stag(std_formatter,_j4_)}
    function print_as(_j2_,_j3_){return pp_print_as(std_formatter,_j2_,_j3_)}
    function print_string$0(_j1_){return pp_print_string(std_formatter,_j1_)}
    function print_int$0(_j0_){return pp_print_int(std_formatter,_j0_)}
    function print_float$0(_jZ_){return pp_print_float(std_formatter,_jZ_)}
    function print_char$0(_jY_){return pp_print_char(std_formatter,_jY_)}
    function print_bool(_jX_){return pp_print_bool(std_formatter,_jX_)}
    function print_break(_jV_,_jW_)
     {return pp_print_break(std_formatter,_jV_,_jW_)}
    function print_cut(_jU_){return pp_print_cut(std_formatter,_jU_)}
    function print_space(_jT_){return pp_print_space(std_formatter,_jT_)}
    function force_newline(_jS_){return pp_force_newline(std_formatter,_jS_)}
    function print_flush(_jR_){return pp_print_flush(std_formatter,_jR_)}
    function print_newline$0(_jQ_)
     {return pp_print_newline(std_formatter,_jQ_)}
    function print_if_newline(_jP_)
     {return pp_print_if_newline(std_formatter,_jP_)}
    function open_tbox(_jO_){return pp_open_tbox(std_formatter,_jO_)}
    function close_tbox(_jN_){return pp_close_tbox(std_formatter,_jN_)}
    function print_tbreak(_jL_,_jM_)
     {return pp_print_tbreak(std_formatter,_jL_,_jM_)}
    function set_tab(_jK_){return pp_set_tab(std_formatter,_jK_)}
    function print_tab(_jJ_){return pp_print_tab(std_formatter,_jJ_)}
    function set_margin(_jI_){return pp_set_margin(std_formatter,_jI_)}
    function get_margin(_jH_){return std_formatter[6]}
    function set_max_indent(_jG_)
     {return pp_set_max_indent(std_formatter,_jG_)}
    function get_max_indent(_jF_){return std_formatter[8]}
    function set_geometry(_jD_,_jE_)
     {return pp_set_geometry(std_formatter,_jD_,_jE_)}
    function safe_set_geometry(_jB_,_jC_)
     {return pp_safe_set_geometry(std_formatter,_jB_,_jC_)}
    function get_geometry(_jA_){return pp_get_geometry(std_formatter,_jA_)}
    function update_geometry(_jz_)
     {return pp_update_geometry(std_formatter,_jz_)}
    function set_max_boxes(_jy_){return pp_set_max_boxes(std_formatter,_jy_)}
    function get_max_boxes(_jx_){return std_formatter[15]}
    function over_max_boxes(_jw_)
     {return pp_over_max_boxes(std_formatter,_jw_)}
    function set_ellipsis_text(_jv_)
     {return pp_set_ellipsis_text(std_formatter,_jv_)}
    function get_ellipsis_text(_ju_){return std_formatter[16]}
    function set_formatter_out_channel(_jt_)
     {return pp_set_formatter_out_channel(std_formatter,_jt_)}
    function set_formatter_out_functions(_js_)
     {return pp_set_formatter_out_functions(std_formatter,_js_)}
    function get_formatter_out_functions(_jr_)
     {return pp_get_formatter_out_functions(std_formatter,_jr_)}
    function set_formatter_output_functions(_jp_,_jq_)
     {return pp_set_formatter_output_functi(std_formatter,_jp_,_jq_)}
    function get_formatter_output_functions(_jo_)
     {return pp_get_formatter_output_functi(std_formatter,_jo_)}
    function set_formatter_stag_functions(_jn_)
     {return pp_set_formatter_stag_function(std_formatter,_jn_)}
    function get_formatter_stag_functions(_jm_)
     {return pp_get_formatter_stag_function(std_formatter,_jm_)}
    function set_print_tags(_jl_)
     {return pp_set_print_tags(std_formatter,_jl_)}
    function get_print_tags(_jk_){return std_formatter[22]}
    function set_mark_tags(_jj_){return pp_set_mark_tags(std_formatter,_jj_)}
    function get_mark_tags(_ji_){return std_formatter[23]}
    function set_tags(_jh_){return pp_set_tags(std_formatter,_jh_)}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _jg_=param$0[1];
          if(param$0[2])
           {var vs=param$0[2];
            caml_call2(pp_v,ppf,_jg_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=vs;
            continue}
          return caml_call2(pp_v,ppf,_jg_)}
        return 0}}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {pp_print_string(ppf,sub$0(s,left[1],right[1] - left[1] | 0));
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] !== len)
         {var match=caml_string_get(s,right[1]);
          if(10 === match)
           {flush(0);pp_force_newline(ppf,0)}
          else
           if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++;
          continue}
        var _jf_=left[1] !== len?1:0;
        return _jf_?flush(0):_jf_}}
    function pp_print_option(opt,pp_v,ppf,param)
     {if(opt)
       var sth=opt[1],none=sth;
      else
       var none=function(param,_je_){return 0};
      if(param){var v=param[1];return caml_call2(pp_v,ppf,v)}
      return caml_call2(none,ppf,0)}
    function pp_print_result(ok,error,ppf,param)
     {if(0 === param[0]){var v=param[1];return caml_call2(ok,ppf,v)}
      var e=param[1];
      return caml_call2(error,ppf,e)}
    function compute_tag(output,tag_acc)
     {var buf=create$2(16),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=buf[2];
      return 2 <= len?sub$3(buf,1,len - 2 | 0):contents(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_tag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      else
       switch(fmting_lit[0])
        {case 0:
          var offset=fmting_lit[3],width=fmting_lit[2];
          return pp_print_break(ppf,width,offset);
         case 1:return 0;
         default:
          var c=fmting_lit[1];
          pp_print_char(ppf,64);
          return pp_print_char(ppf,c)}}
    function output_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _i6_=acc[2],_i7_=acc[1];
          if(0 === _i6_[0])
           {var acc$0=_i6_[1];
            output_acc$0(ppf,_i7_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(output_acc$0,acc$0)])}
          var acc$1=_i6_[1];
          output_acc$0(ppf,_i7_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _i8_=acc[1],switch$1=0;
          if(typeof _i8_ !== "number" && 0 === _i8_[0])
           {var _i9_=_i8_[2],switch$2=0;
            if(typeof _i9_ !== "number" && 1 === _i9_[0])
             {var s$0=acc[2],size=_i9_[2],p$1=_i8_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_i8_;switch$0 = 2}
          break;
         case 3:
          var _i__=acc[1],switch$3=0;
          if(typeof _i__ !== "number" && 0 === _i__[0])
           {var _i$_=_i__[2],switch$4=0;
            if(typeof _i$_ !== "number" && 1 === _i$_[0])
             {var c$0=acc[2],size$0=_i$_[2],p$3=_i__[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c=acc[2],p$2=_i__;switch$0 = 3}
          break;
         case 4:
          var _ja_=acc[1],switch$5=0;
          if(typeof _ja_ !== "number" && 0 === _ja_[0])
           {var _jb_=_ja_[2],switch$6=0;
            if(typeof _jb_ !== "number" && 1 === _jb_[0])
             {var s$0=acc[2],size=_jb_[2],p$1=_ja_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_ja_;switch$0 = 2}
          break;
         case 5:
          var _jc_=acc[1],switch$7=0;
          if(typeof _jc_ === "number" || ! (0 === _jc_[0]))
           switch$7 = 1;
          else
           {var _jd_=_jc_[2],switch$8=0;
            if(typeof _jd_ !== "number" && 1 === _jd_[0])
             {var c$0=acc[2],size$0=_jd_[2],p$3=_jc_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c=acc[2],p$2=_jc_;switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          strput_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _iU_=acc[2],_iV_=acc[1];
          if(0 === _iU_[0])
           {var acc$0=_iU_[1];
            strput_acc$0(ppf,_iV_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(strput_acc$0,acc$0)])}
          var acc$1=_iU_[1];
          strput_acc$0(ppf,_iV_);
          var
           match=open_box_of_string(compute_tag(strput_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iW_=acc[1],switch$1=0;
          if(typeof _iW_ !== "number" && 0 === _iW_[0])
           {var _iX_=_iW_[2],switch$2=0;
            if(typeof _iX_ !== "number" && 1 === _iX_[0])
             {var s$0=acc[2],size=_iX_[2],p$1=_iW_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_iW_;switch$0 = 2}
          break;
         case 3:
          var _iY_=acc[1],switch$3=0;
          if(typeof _iY_ !== "number" && 0 === _iY_[0])
           {var _iZ_=_iY_[2],switch$4=0;
            if(typeof _iZ_ !== "number" && 1 === _iZ_[0])
             {var c$0=acc[2],size$0=_iZ_[2],p$3=_iY_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c=acc[2],p$2=_iY_;switch$0 = 3}
          break;
         case 4:
          var _i0_=acc[1],switch$5=0;
          if(typeof _i0_ !== "number" && 0 === _i0_[0])
           {var _i1_=_i0_[2],switch$6=0;
            if(typeof _i1_ !== "number" && 1 === _i1_[0])
             {var s$0=acc[2],size=_i1_[2],p$1=_i0_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_i0_;switch$0 = 2}
          break;
         case 5:
          var _i2_=acc[1],switch$7=0;
          if(typeof _i2_ === "number" || ! (0 === _i2_[0]))
           switch$7 = 1;
          else
           {var _i3_=_i2_[2],switch$8=0;
            if(typeof _i3_ !== "number" && 1 === _i3_[0])
             {var c$0=acc[2],size$0=_i3_[2],p$3=_i2_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c=acc[2],p$2=_i2_;switch$0 = 3}
          break;
         case 6:
          var _i4_=acc[1];
          if(typeof _i4_ !== "number" && 0 === _i4_[0])
           {var _i5_=_i4_[2];
            if(typeof _i5_ !== "number" && 1 === _i5_[0])
             {var f$1=acc[2],size$1=_i5_[2],p$4=_i4_[1];
              strput_acc$0(ppf,p$4);
              return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
          var f$0=acc[2];
          strput_acc$0(ppf,_i4_);
          return pp_print_string(ppf,caml_call1(f$0,0));
         case 7:
          var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          strput_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         strput_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:strput_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:strput_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf$0(k,ppf,param)
     {var fmt=param[1],_iT_=0;
      return make_printf
              (function(acc){output_acc$0(ppf,acc);return caml_call1(k,ppf)},
               _iT_,
               fmt)}
    function ikfprintf$0(k,ppf,param)
     {var fmt=param[1];return make_iprintf(k,ppf,fmt)}
    function ifprintf$0(ppf,param)
     {var fmt=param[1],_iR_=0;
      return make_iprintf(function(_iS_){return 0},_iR_,fmt)}
    function fprintf$0(ppf)
     {function _iO_(_iQ_){return 0}
      return function(_iP_){return kfprintf$0(_iO_,ppf,_iP_)}}
    function printf$0(fmt){return caml_call1(fprintf$0(std_formatter),fmt)}
    function eprintf$0(fmt){return caml_call1(fprintf$0(err_formatter),fmt)}
    function kdprintf(k,param)
     {var fmt=param[1],_iN_=0;
      return make_printf
              (function(acc)
                {return caml_call1
                         (k,function(ppf){return output_acc$0(ppf,acc)})},
               _iN_,
               fmt)}
    function dprintf(fmt){return kdprintf(function(i){return i},fmt)}
    function kprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {strput_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function sprintf$0(fmt){return kprintf(id$0,fmt)}
    function kasprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {output_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function asprintf(fmt){return kasprintf(id$0,fmt)}
    function flush_standard_formatters(param)
     {pp_print_flush(std_formatter,0);return pp_print_flush(err_formatter,0)}
    at_exit(flush_standard_formatters);
    function pp_set_all_formatter_output_fu(state,f,g,h,i)
     {pp_set_formatter_output_functi(state,f,g);
      state[19] = h;
      state[20] = i;
      return 0}
    function pp_get_all_formatter_output_fu(state,param)
     {return [0,state[17],state[18],state[19],state[20]]}
    function set_all_formatter_output_funct(_iJ_,_iK_,_iL_,_iM_)
     {return pp_set_all_formatter_output_fu(std_formatter,_iJ_,_iK_,_iL_,_iM_)}
    function get_all_formatter_output_funct(_iI_)
     {return pp_get_all_formatter_output_fu(std_formatter,_iI_)}
    function bprintf$0(b,param)
     {var fmt=param[1],ppf=formatter_of_buffer(b);
      function k(acc){output_acc$0(ppf,acc);return pp_flush_queue(ppf,0)}
      return make_printf(k,0,fmt)}
    function pp_set_formatter_tag_functions(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      function stringify(f,e,param)
       {if(param[1] === String_tag){var s=param[2];return caml_call1(f,s)}
        return e}
      state[24] = function(_iH_){return stringify(mot,cst$84,_iH_)};
      state[25] = function(_iG_){return stringify(mct,cst$85,_iG_)};
      var _iC_=0;
      state[26] = function(_iF_){return stringify(pot,_iC_,_iF_)};
      var _iD_=0;
      state[27] = function(_iE_){return stringify(pct,_iD_,_iE_)};
      return 0}
    function pp_get_formatter_tag_functions(fmt,param)
     {var funs=pp_get_formatter_stag_function(fmt,0);
      function mark_open_tag(s){return caml_call1(funs[1],[0,String_tag,s])}
      function mark_close_tag(s){return caml_call1(funs[2],[0,String_tag,s])}
      function print_open_tag(s){return caml_call1(funs[3],[0,String_tag,s])}
      function print_close_tag(s){return caml_call1(funs[4],[0,String_tag,s])}
      return [0,mark_open_tag,mark_close_tag,print_open_tag,print_close_tag]}
    function set_formatter_tag_functions(_iB_)
     {return pp_set_formatter_tag_functions(std_formatter,_iB_)}
    function get_formatter_tag_functions(_iA_)
     {return pp_get_formatter_tag_functions(std_formatter,_iA_)}
    var
     Stdlib_format=
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string$0,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int$0,
       pp_print_float,
       print_float$0,
       pp_print_char,
       print_char$0,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline$0,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       fprintf$0,
       printf$0,
       eprintf$0,
       sprintf$0,
       asprintf,
       dprintf,
       ifprintf$0,
       kfprintf$0,
       kdprintf,
       ikfprintf$0,
       kprintf,
       kasprintf,
       bprintf$0,
       kprintf,
       set_all_formatter_output_funct,
       get_all_formatter_output_funct,
       pp_set_all_formatter_output_fu,
       pp_get_all_formatter_output_fu,
       pp_open_tag,
       open_tag,
       pp_close_tag,
       close_tag,
       pp_set_formatter_tag_functions,
       set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       get_formatter_tag_functions];
    caml_register_global(794,Stdlib_format,"Stdlib__format");
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_iz_)
       {_iz_ = caml_wrap_exception(_iz_);
        if(_iz_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _iz_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function beginning_of_input(ib){return 0 === ib[4]?1:0}
    function name_of_input(ib)
     {var _iy_=ib[9];
      if(typeof _iy_ === "number")
       return 0 === _iy_?cst_unnamed_function:cst_unnamed_character_string;
      else
       {if(0 === _iy_[0])return cst_unnamed_Stdlib_input_chann;
        var fname=_iy_[1];
        return fname}}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      clear$1(token_buffer);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$4(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$2(default_token_buffer_size),
              iname]}
    function from_string$1(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      return create$4(1,next)}
    var _ch_=0;
    function from_function$0(_ix_){return create$4(_ch_,_ix_)}
    var len=1024;
    function scan_close_at_end(ic)
     {caml_ml_close_channel(ic);throw End_of_file}
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(buf,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        lim[1] = input(ic,buf,0,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(buf,0))}
      return create$4(iname,next)}
    var stdib=from_ic(scan_raise_at_end,[1,cst$86,stdin],stdin);
    function open_in_file(open_in,fname)
     {if(caml_string_notequal(fname,cst$87))
       {var ic=caml_call1(open_in,fname);
        return from_ic(scan_close_at_end,[1,fname,ic],ic)}
      return stdib}
    function from_file(_iw_){return open_in_file(open_in,_iw_)}
    function from_file_bin(_iv_){return open_in_file(open_in_bin,_iv_)}
    function from_channel$0(ic){return from_ic(scan_raise_at_end,[0,ic],ic)}
    function close_in$0(ib)
     {var _iu_=ib[9];
      if(typeof _iu_ === "number")
       return 0;
      else
       {if(0 === _iu_[0]){var ic=_iu_[1];return caml_ml_close_channel(ic)}
        var ic$0=_iu_[2];
        return caml_ml_close_channel(ic$0)}}
    var memo=[0,0];
    function memo_from_ic(scan_close_ic,ic)
     {try
       {var _is_=assq(ic,memo[1]);return _is_}
      catch(_it_)
       {_it_ = caml_wrap_exception(_it_);
        if(_it_ === Not_found)
         {var ib=from_ic(scan_close_ic,[0,ic],ic);
          memo[1] = [0,[0,ic,ib],memo[1]];
          return ib}
        throw _it_}}
    function memo_from_channel(_ir_)
     {return memo_from_ic(scan_raise_at_end,_ir_)}
    var Scan_failure=[248,cst_Stdlib_Scanf_Scan_failure,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_ci_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_cj_),message))}
    function bad_float(param)
     {return bad_input(cst_no_dot_or_exponent_part_fo)}
    function bad_hex_float(param)
     {return bad_input(cst_not_a_valid_float_in_hexad)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_cl_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 === c$0)
       for(;;)
        {var c=peek_char(ib),_ip_=1 - ib[1];
         if(_ip_)
          {var _iq_=c - 9 | 0,switch$0=0;
           if(4 < _iq_ >>> 0)
            {if(23 === _iq_)switch$0 = 1}
           else
            if(1 < (_iq_ - 2 | 0) >>> 0)switch$0 = 1;
           if(switch$0){invalidate_current_char(ib);continue}
           return 0}
         return _ip_}
      return check_this_char(ib,c$0)}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,cst_false$3)
              ?caml_string_notequal(s,cst_true$3)
                ?bad_input(caml_call1(sprintf(_cm_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_cn_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=symbol(cst_0b,token_string(ib));break;
        case 3:var tok=symbol(cst_0o,token_string(ib));break;
        case 4:var tok=symbol(cst_0u,token_string(ib));break;
        case 5:var tok=symbol(cst_0x,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(cst_decimal_digits);
      var c=checked_peek_char(ib),switcher=c - 48 | 0;
      if(9 < switcher >>> 0)return bad_input(caml_call1(sprintf(_co_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(cst_digits);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width$2,ib,c$0),width=width$3;
        for(;;)
         {if(0 === width)return width;
          var c=peek_char(ib);
          if(ib[1])return width;
          if(caml_call1(digitp,c))
           {var width$0=store_char(width,ib,c),width=width$0;continue}
          if(95 === c)
           {var width$1=ignore_char(width,ib),width=width$1;continue}
          return width}}
      return bad_input(caml_call2(sprintf(_cp_),c$0,basis))}
    function is_binary_digit(param)
     {var switcher=param - 48 | 0;return 1 < switcher >>> 0?0:1}
    function scan_binary_int(_in_,_io_)
     {return scan_digit_plus(cst_binary,is_binary_digit,_in_,_io_)}
    function is_octal_digit(param)
     {var switcher=param - 48 | 0;return 7 < switcher >>> 0?0:1}
    function scan_octal_int(_il_,_im_)
     {return scan_digit_plus(cst_octal,is_octal_digit,_il_,_im_)}
    function is_hexa_digit(param)
     {var _ik_=param - 48 | 0,switch$0=0;
      if(22 < _ik_ >>> 0)
       {if(! (5 < (_ik_ - 49 | 0) >>> 0))switch$0 = 1}
      else
       if(6 < (_ik_ - 10 | 0) >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_ii_,_ij_)
     {return scan_digit_plus(cst_hexadecimal,is_hexa_digit,_ii_,_ij_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 === c)
          {var width=store_char(width$0,ib,c);
           if(0 === width)return width;
           var c$0=peek_char(ib);
           if(ib[1])return width;
           var switch$0=0;
           if(99 <= c$0)
            {if(111 === c$0)
              return scan_octal_int(store_char(width,ib,c$0),ib);
             if(120 === c$0)switch$0 = 1}
           else
            if(88 === c$0)
             switch$0 = 1;
            else
             if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
           return switch$0
                   ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                   :scan_decimal_digit_star(width,ib)}
         return scan_unsigned_decimal_int(width$0,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_unsigned_decimal_int(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      var switcher=c - 48 | 0;
      return 9 < switcher >>> 0
              ?width
              :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$3,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {var switcher=c - 65 | 0;
        return 25 < switcher >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _if_=len - 1 | 0,
       _ie_=0;
      if(! (_if_ < 0))
       {var i=_ie_;
        for(;;)
         {var c=peek_char(ib),_ig_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _ig_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _ih_=i + 1 | 0;
          if(_if_ !== i){var i=_ih_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _h3_=0 === width?1:0,_h4_=_h3_ || end_of_input(ib);
      if(_h4_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _h5_=0 === width$0?1:0,
       _h6_=_h5_ || end_of_input(ib);
      if(_h6_)bad_hex_float(0);
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _h7_=0 === width$1?1:0,
             _h8_=_h7_ || end_of_input(ib);
            if(_h8_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,cst_an)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _h$_=0 === width$3?1:0,
           _ia_=_h$_ || end_of_input(ib);
          if(_ia_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,cst_x$2);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_ib_=match - 46 | 0,switch$1=0;
            if(34 < _ib_ >>> 0)
             {if(66 === _ib_)switch$1 = 1}
            else
             if(32 < (_ib_ - 1 | 0) >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _ic_=0 === width$9?1:0,
                 _id_=_ic_ || end_of_input(ib);
                if(_id_)bad_hex_float(0);
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _h9_=0 === width$2?1:0,
         _h__=_h9_ || end_of_input(ib);
        if(_h__)bad_hex_float(0);
        return check_case_insensitive_string
                (width$2,ib,bad_hex_float,cst_nfinity)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _hZ_=0 === width?1:0,_h0_=_hZ_ || end_of_input(ib);
      if(_h0_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _h1_=0 === width$0?1:0,
       _h2_=_h1_ || end_of_input(ib);
      if(_h2_)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       {var switcher$0=switcher - 1 | 0;
        if(30 < switcher$0 >>> 0)return scan_exponent_part(width$0,ib)}
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _hL_=0 === width?1:0,_hM_=_hL_ || end_of_input(ib);
      if(_hM_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _hN_=0 === width$0?1:0,
       _hO_=_hN_ || end_of_input(ib);
      if(_hO_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _hP_=0 === width$1?1:0,
           _hQ_=_hP_ || end_of_input(ib);
          if(_hQ_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _hR_=0 === width$2?1:0,
          _hS_=_hR_ || end_of_input(ib);
         if(_hS_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _hT_=0 === width$3?1:0,
          _hU_=_hT_ || end_of_input(ib);
         if(_hU_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _hV_=0 === width$4?1:0,
          _hW_=_hV_ || end_of_input(ib);
         if(_hW_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          {var switcher$0=switcher - 1 | 0;
           if(30 < switcher$0 >>> 0)var width$7=width$4;else switch$0 = 1}
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _hX_=0 === width$9?1:0,
            _hY_=_hX_ || end_of_input(ib);
           if(_hY_)bad_hex_float(0);
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var _hK_=c - 9 | 0,switch$0=0;
        if(4 < _hK_ >>> 0)
         {if(23 === _hK_)switch$0 = 1}
        else
         if(1 < (_hK_ - 2 | 0) >>> 0)switch$0 = 1;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_ck_),message)):c}
    function check_next_char_for_char(_hI_,_hJ_)
     {return check_next_char(cst_a_Char,_hI_,_hJ_)}
    function check_next_char_for_string(_hG_,_hH_)
     {return check_next_char(cst_a_String,_hG_,_hH_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher$0=c0 - 92 | 0;
          if(! (28 < switcher$0 >>> 0))
           switch(switcher$0)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_hF_=c - 48 | 0,switch$0=0;
                  if(22 < _hF_ >>> 0)
                   {if(! (5 < (_hF_ - 49 | 0) >>> 0))switch$0 = 1}
                  else
                   if(6 < (_hF_ - 10 | 0) >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               c1=get_digit(0),
               c2=get_digit(0),
               _hB_=hexadecimal_value_of_char(c2),
               c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _hB_ | 0,
               switch$1=0;
              if(0 <= c$0 && ! (255 < c$0))
               {var _hD_=char_of_int(c$0);switch$1 = 1}
              if(! switch$1)
               var _hD_=bad_input(caml_call2(sprintf(_cr_),c1,c2));
              return store_char(width - 2 | 0,ib,_hD_);
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib),switcher=c - 48 | 0;
               return 9 < switcher >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0,
            switch$2=0;
           if(0 <= c && ! (255 < c)){var _hE_=char_of_int(c);switch$2 = 1}
           if(! switch$2)
            var _hE_=bad_input(caml_call3(sprintf(_cq_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_hE_)}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      if(switch$0)
       {var switch$3=0;
        if(110 <= c0)
         if(117 <= c0)
          switch$3 = 1;
         else
          {var switcher=c0 - 110 | 0;
           switch(switcher)
            {case 0:var _hC_=10;break;
             case 4:var _hC_=13;break;
             case 6:var _hC_=9;break;
             default:switch$3 = 1}}
        else
         if(98 === c0)var _hC_=8;else switch$3 = 1;
        if(switch$3)var _hC_=c0;
        return store_char(width,ib,_hC_)}
      return bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var
             width$1=ignore_char(width$0,ib),
             match=check_next_char_for_string(width$1,ib);
            if(10 === match)
             {var _hz_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_hz_)}
              return caml_trampoline_return(skip_spaces,[0,_hz_])}
            if(13 === match)
             {var
               width$3=ignore_char(width$1,ib),
               match$0=check_next_char_for_string(width$3,ib);
              if(10 === match$0)
               {var _hA_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_hA_)}
                return caml_trampoline_return(skip_spaces,[0,_hA_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_hv_=0 < i$0?1:0;
          if(_hv_)
           {var _hw_=1 - ib[1];
            if(_hw_)
             var _hx_=is_in_char_set(char_set,c),_hy_=_hx_?c !== stp?1:0:_hx_;
            else
             var _hy_=_hw_}
          else
           var _hy_=_hv_;
          if(_hy_)
           {store_char(max_int,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _hy_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _hu_=1 - ib[1];
        if(_hu_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _hu_}
      return scan_chars(width,-1)}
    function scanf_bad_input(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_ct_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_int}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _cu_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_hs_=erase_rel(symm(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$0,k,_hs_,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_hs_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _ht_=fmt$0[1];
           if(0 === _ht_[0])
            {var
              rest$0=fmt$0[2],
              match=_ht_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_ht_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:var fmt$0=rest$2;continue;
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return take_fmtty_format_readers$0
                         (counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              case 10:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=trans(symm(ty1),ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function make_scanf(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return 0;
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _hf_=fmt$0[1],_hg_=fmt$0[2];
           if(typeof _hg_ !== "number")
            switch(_hg_[0])
             {case 17:
               var
                rest$2=_hg_[2],
                fmting_lit=_hg_[1],
                match=stopper_of_formatting_lit(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$2];
               return pad_prec_scanf
                       (ib,str_rest,readers,_hf_,0,scan$0,token_string);
              case 18:
               var _hh_=_hg_[1];
               if(0 === _hh_[0])
                {var
                  rest$3=_hg_[2],
                  match$0=_hh_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_cv_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$1,rest$3),
                          readers,
                          _hf_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$4=_hg_[2],
                match$1=_hh_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_cw_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$4),
                        readers,
                        _hf_,
                        0,
                        scan$2,
                        token_string)
              }
           var
            rest$1=fmt$0[2],
            scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,rest$1,readers,_hf_,0,scan,token_string);
          case 3:
           var
            rest$5=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$5,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$6=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$7=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$8=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$9=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$9,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           switch(fmt$0[1][2])
            {case 5:
             case 8:
              var rest$11=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
              return pad_prec_scanf
                      (ib,
                       rest$11,
                       readers,
                       pad$5,
                       prec$4,
                       scan_caml_float,
                       token_float);
             case 6:
             case 7:
              var rest$12=fmt$0[4],prec$5=fmt$0[3],pad$6=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$12,readers,pad$6,prec$5,scan_hex_float,token_float);
             default:
              var rest$10=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$10,readers,pad$4,prec$3,scan_float,token_float)}
          case 9:
           var
            rest$13=fmt$0[2],
            pad$7=fmt$0[1],
            scan$8=
             function(param,_hr_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_cs_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$13,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$14=fmt$0[1];
           if(end_of_input(ib)){var fmt$0=rest$14;continue}
           return bad_input(cst_end_of_input_not_found);
          case 11:
           var rest$15=fmt$0[2],str$0=fmt$0[1];
           iter$4(function(_hq_){return check_char(ib,_hq_)},str$0);
           var fmt$0=rest$15;
           continue;
          case 12:
           var rest$16=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$16;
           continue;
          case 13:
           var rest$17=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var s=token_string(ib);
           try
            {var _hi_=format_of_string_fmtty(s,fmtty),fmt$3=_hi_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$3=bad_input(msg)}
           return [0,fmt$3,make_scanf(ib,rest$17,readers)];
          case 14:
           var rest$18=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s$0=token_string(ib);
           try
            {var
              match$2=fmt_ebb_of_string(0,s$0),
              fmt$6=match$2[1],
              match$3=fmt_ebb_of_string(0,s$0),
              fmt$7=match$3[1],
              fmt$8=type_format(fmt$7,erase_rel(symm(fmtty$0))),
              _hk_=type_format(fmt$6,erase_rel(fmtty$0)),
              fmt$5=fmt$8,
              fmt$4=_hk_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _hj_=bad_input(msg$0),
              fmt$5=_hj_[2],
              fmt$4=_hj_[1]}
           return [0,
                   [0,fmt$4,s$0],
                   make_scanf(ib,concat_fmt(fmt$5,rest$18),readers)];
          case 15:return invalid_arg(cst_scanf_bad_conversion_a);
          case 16:return invalid_arg(cst_scanf_bad_conversion_t);
          case 17:
           var
            rest$19=fmt$0[2],
            formatting_lit=fmt$0[1],
            _hl_=string_of_formatting_lit(formatting_lit);
           iter$4(function(_hp_){return check_char(ib,_hp_)},_hl_);
           var fmt$0=rest$19;
           continue;
          case 18:
           var _hm_=fmt$0[1];
           if(0 === _hm_[0])
            {var rest$20=fmt$0[2],match$4=_hm_[1],fmt$9=match$4[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$10=concat_fmt(fmt$9,rest$20),fmt$0=fmt$10;
             continue}
           var rest$21=fmt$0[2],match$5=_hm_[1],fmt$11=match$5[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$12=concat_fmt(fmt$11,rest$21),fmt$0=fmt$12;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(cst_scanf_missing_reader);
          case 20:
           var _hn_=fmt$0[1],_ho_=fmt$0[3];
           if(typeof _ho_ !== "number" && 17 === _ho_[0])
            {var
              rest$23=_ho_[2],
              fmting_lit$0=_ho_[1],
              char_set$0=fmt$0[2],
              match$6=stopper_of_formatting_lit(fmting_lit$0),
              str$1=match$6[2],
              stp$0=match$6[1],
              width$0=width_of_pad_opt(_hn_);
             scan_chars_in_char_set(char_set$0,[0,stp$0],width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$23];
             return [0,s$2,make_scanf(ib,str_rest$0,readers)]}
           var
            rest$22=fmt$0[3],
            char_set=fmt$0[2],
            width=width_of_pad_opt(_hn_);
           scan_chars_in_char_set(char_set,0,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,make_scanf(ib,rest$22,readers)];
          case 21:
           var
            rest$24=fmt$0[2],
            counter=fmt$0[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$24,readers)];
          case 22:
           var rest$25=fmt$0[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$25,readers)];
          case 23:
           var
            rest$26=fmt$0[2],
            ign=fmt$0[1],
            match$7=param_format_of_ignored_format(ign,rest$26),
            fmt$13=match$7[1],
            match$8=make_scanf(ib,fmt$13,readers);
           if(match$8){var arg_rest=match$8[2];return arg_rest}
           throw [0,Assert_failure,_cx_];
          default:return invalid_arg(cst_scanf_bad_conversion_custo)}}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)return invalid_arg(cst_scanf_bad_conversion);
          caml_call3(scan,max_int,max_int,ib);
          var x=caml_call1(token,ib);
          return [0,x,make_scanf(ib,fmt,readers)]}
        var p=prec[1];
        caml_call3(scan,max_int,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(pad[1])
           {var _he_=pad[2];
            if(typeof prec === "number")
             {if(prec)return invalid_arg(cst_scanf_bad_conversion$0);
              caml_call3(scan,_he_,max_int,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            var p$0=prec[1];
            caml_call3(scan,_he_,p$0,ib);
            var x$2=caml_call1(token,ib);
            return [0,x$2,make_scanf(ib,fmt,readers)]}
          return invalid_arg(cst_scanf_bad_conversion$1)}
        return invalid_arg(cst_scanf_bad_conversion$2)}}
    function kscanf(ib,ef,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             r=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=r;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _hd_=[0,make_scanf(ib,fmt,readers)],_hc_=_hd_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          var switch$0=0;
          if
           (exc[1]
            !==
            Scan_failure
            &&
            exc[1]
            !==
            Failure
            &&
            exc
            !==
            End_of_file)
           {if(exc[1] !== Invalid_argument)throw exc;
            var
             msg=exc[2],
             _hb_=
              invalid_arg
               (symbol
                 (msg,symbol(cst_in_format,symbol(escaped$1(str),cst$88))));
            switch$0 = 1}
          if(! switch$0)var _hb_=[1,exc];
          var _hc_=_hb_}
        if(0 === _hc_[0]){var args=_hc_[1];return apply(f,args)}
        var exc=_hc_[1];
        return caml_call2(ef,ib,exc)}
      return take_format_readers(k,fmt)}
    function bscanf(ib,fmt){return kscanf(ib,scanf_bad_input,fmt)}
    function ksscanf(s,ef,fmt){return kscanf(from_string$1(s),ef,fmt)}
    function sscanf(s,fmt)
     {return kscanf(from_string$1(s),scanf_bad_input,fmt)}
    function scanf(fmt){return kscanf(stdib,scanf_bad_input,fmt)}
    function bscanf_format(ib,format,f)
     {scan_caml_string(max_int,ib);
      var str=token_string(ib);
      try
       {var _ha_=format_of_string_format(str,format),fmt=_ha_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== Failure)throw exn;
        var msg=exn[2],fmt=bad_input(msg)}
      return caml_call1(f,fmt)}
    function sscanf_format(s,format,f)
     {return bscanf_format(from_string$1(s),format,f)}
    function format_from_string(s,fmt)
     {function _g$_(x){return x}
      return sscanf_format
              (symbol(cst$90,symbol(escaped$1(s),cst$89)),fmt,_g$_)}
    function unescaped(s)
     {function _g__(x){return x}
      return caml_call1(sscanf(symbol(cst$92,symbol(s,cst$91)),_cy_),_g__)}
    function kfscanf(ic,ef,fmt){return kscanf(memo_from_channel(ic),ef,fmt)}
    function fscanf(ic,fmt)
     {return kscanf(memo_from_channel(ic),scanf_bad_input,fmt)}
    var
     Stdlib_scanf=
      [0,
       [0,
        stdib,
        from_file,
        from_file_bin,
        close_in$0,
        from_file,
        from_file_bin,
        from_string$1,
        from_function$0,
        from_channel$0,
        end_of_input,
        beginning_of_input,
        name_of_input,
        stdib],
       Scan_failure,
       bscanf,
       sscanf,
       scanf,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped,
       fscanf,
       kfscanf];
    caml_register_global(795,Stdlib_scanf,"Stdlib__scanf");
    function register(name,v){return caml_register_named_value(name,v)}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var Stdlib_callback=[0,register,register_exception];
    caml_register_global(796,Stdlib_callback,"Stdlib__callback");
    function copy$7(o){var o$0=o.slice();return caml_set_oo_id(o$0)}
    var params$0=[0,1,1,1,3,16],initial_object_size=2,dummy_item=0;
    function public_method_label(s)
     {var accu=[0,0],_g7_=caml_ml_string_length(s) - 1 | 0,_g6_=0;
      if(! (_g7_ < 0))
       {var i=_g6_;
        for(;;)
         {var _g8_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _g8_ | 0;
          var _g9_=i + 1 | 0;
          if(_g7_ !== i){var i=_g9_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    function compare$11(x,y){return caml_string_compare(x,y)}
    var Vars=caml_call1(Stdlib_map[1],[0,compare$11]);
    function compare$12(x,y){return caml_string_compare(x,y)}
    var
     Meths=caml_call1(Stdlib_map[1],[0,compare$12]),
     compare$13=caml_int_compare,
     Labs=caml_call1(Stdlib_map[1],[0,compare$13]),
     dummy_table=[0,0,[0,dummy_item],Meths[1],Labs[1],0,0,Vars[1],0],
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _g0_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _g0_;
      var _g2_=len - 1 | 0,_g1_=0;
      if(! (_g2_ < 0))
       {var i=_g1_;
        for(;;)
         {var
           _g4_=(i * 2 | 0) + 3 | 0,
           _g3_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_g4_)[1 + _g4_] = _g3_;
          var _g5_=i + 1 | 0;
          if(_g2_ !== i){var i=_g5_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var old_size=array[2].length - 1,_gY_=old_size < new_size?1:0;
      if(_gY_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$1(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _gZ_=0}
      else
       var _gZ_=_gY_;
      return _gZ_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$1(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _gW_=caml_call2(Meths[28],name,table[3]);return _gW_}
      catch(_gX_)
       {_gX_ = caml_wrap_exception(_gX_);
        if(_gX_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _gX_}}
    function get_method_labels(table,names)
     {return map$5(function(_gV_){return get_method_label(table,_gV_)},names)}
    function set_method(table,label,element)
     {method_count[1]++;
      return caml_call2(Labs[28],label,table[4])
              ?(resize$1(table,label + 1 | 0),
                caml_check_bound(table[2],label)[1 + label]
                =
                element,
                0)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function get_method(table,label)
     {try
       {var _gT_=assoc(label,table[6]);return _gT_}
      catch(_gU_)
       {_gU_ = caml_wrap_exception(_gU_);
        if(_gU_ === Not_found)
         return caml_check_bound(table[2],label)[1 + label];
        throw _gU_}}
    function to_list$3(arr){return 0 === arr?0:to_list$1(arr)}
    function narrow(table,vars,virt_meths,concr_meths)
     {var
       vars$0=to_list$3(vars),
       virt_meths$0=to_list$3(virt_meths),
       concr_meths$0=to_list$3(concr_meths),
       virt_meth_labs=
        map$2
         (function(_gS_){return get_method_label(table,_gS_)},virt_meths$0),
       concr_meth_labs=
        map$2
         (function(_gR_){return get_method_label(table,_gR_)},concr_meths$0);
      table[5]
      =
      [0,
       [0,table[3],table[4],table[6],table[7],virt_meth_labs,vars$0],
       table[5]];
      var _gI_=Vars[1],_gJ_=table[7];
      function _gK_(lab,info,tvars)
       {return mem(lab,vars$0)?caml_call3(Vars[4],lab,info,tvars):tvars}
      table[7] = caml_call3(Vars[13],_gK_,_gJ_,_gI_);
      var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          var _gN_=by_label[1];
          try
           {var _gP_=caml_call2(Labs[28],label,table[4]),_gO_=_gP_}
          catch(_gQ_)
           {_gQ_ = caml_wrap_exception(_gQ_);
            if(_gQ_ !== Not_found)throw _gQ_;
            var _gO_=1}
          by_label[1] = caml_call3(Labs[4],label,_gO_,_gN_);
          return 0},
        concr_meths$0,
        concr_meth_labs);
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
          return 0},
        virt_meths$0,
        virt_meth_labs);
      table[3] = by_name[1];
      table[4] = by_label[1];
      var _gL_=0,_gM_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meth_labs)?hm:[0,met,hm]},
        _gM_,
        _gL_);
      return 0}
    function widen(table)
     {var
       match=hd(table[5]),
       vars=match[6],
       virt_meths=match[5],
       saved_vars=match[4],
       saved_hidden_meths=match[3],
       by_label=match[2],
       by_name=match[1];
      table[5] = tl(table[5]);
      table[7]
      =
      fold_left$0
       (function(s,v)
         {var _gH_=caml_call2(Vars[28],v,table[7]);
          return caml_call3(Vars[4],v,_gH_,s)},
        saved_vars,
        vars);
      table[3] = by_name;
      table[4] = by_label;
      var _gG_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meths)?hm:[0,met,hm]},
        _gG_,
        saved_hidden_meths);
      return 0}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _gE_=caml_call2(Vars[28],name,table[7]);return _gE_}
      catch(_gF_)
       {_gF_ = caml_wrap_exception(_gF_);
        if(_gF_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,cst$93))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _gF_}}
    function to_array(arr){return caml_equal(arr,0)?[0]:arr}
    function new_methods_variables(table,meths,vals)
     {var
       meths$0=to_array(meths),
       nmeths=meths$0.length - 1,
       nvals=vals.length - 1,
       res=caml_make_vect(nmeths + nvals | 0,0),
       _gw_=nmeths - 1 | 0,
       _gv_=0;
      if(! (_gw_ < 0))
       {var i$0=_gv_;
        for(;;)
         {var
           _gC_=
            get_method_label(table,caml_check_bound(meths$0,i$0)[1 + i$0]);
          caml_check_bound(res,i$0)[1 + i$0] = _gC_;
          var _gD_=i$0 + 1 | 0;
          if(_gw_ !== i$0){var i$0=_gD_;continue}
          break}}
      var _gy_=nvals - 1 | 0,_gx_=0;
      if(! (_gy_ < 0))
       {var i=_gx_;
        for(;;)
         {var
           _gA_=i + nmeths | 0,
           _gz_=new_variable(table,caml_check_bound(vals,i)[1 + i]);
          caml_check_bound(res,_gA_)[1 + _gA_] = _gz_;
          var _gB_=i + 1 | 0;
          if(_gy_ !== i){var i=_gB_;continue}
          break}}
      return res}
    function get_variable(table,name)
     {try
       {var _gt_=caml_call2(Vars[28],name,table[7]);return _gt_}
      catch(_gu_)
       {_gu_ = caml_wrap_exception(_gu_);
        if(_gu_ === Not_found)throw [0,Assert_failure,_cz_];
        throw _gu_}}
    function get_variables(table,names)
     {return map$5(function(_gs_){return get_variable(table,_gs_)},names)}
    function add_initializer(table,f){table[8] = [0,f,table[8]];return 0}
    function create_table(public_methods)
     {if(0 === public_methods)return new_table([0]);
      var
       tags=map$5(public_method_label,public_methods),
       table=new_table(tags);
      iteri$2
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      table[8] = rev(table[8]);
      return resize$1
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function inherits(cla,vals,virt_meths,concr_meths,param,top)
     {var env=param[4],super$0=param[2];
      narrow(cla,vals,virt_meths,concr_meths);
      var init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla);
      widen(cla);
      var
       _gn_=0,
       _go_=to_array(concr_meths),
       _gp_=
        [0,
         map$5
          (function(nm){return get_method(cla,get_method_label(cla,nm))},_go_),
         _gn_],
       _gq_=to_array(vals);
      return caml_array_concat
              ([0,
                [0,init],
                [0,
                 map$5(function(_gr_){return get_variable(cla,_gr_)},_gq_),
                 _gp_]])}
    function make_class(pub_meths,class_init)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function make_class_store(pub_meths,class_init,init_table)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      init_table[2] = class_init;
      init_table[1] = env_init;
      return 0}
    function dummy_class(loc)
     {function undef(param){throw [0,Undefined_recursive_module,loc]}
      return [0,undef,undef,undef,0]}
    function create_object(table)
     {var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function iter_f(obj,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],f=param$0[1];
          caml_call1(f,obj);
          var param$0=l;
          continue}
        return 0}}
    function run_initializers(obj,table)
     {var inits=table[8],_gm_=0 !== inits?1:0;
      return _gm_?iter_f(obj,inits):_gm_}
    function run_initializers_opt(obj_0,obj,table)
     {if(obj_0)return obj;
      var inits=table[8];
      if(0 !== inits)iter_f(obj,inits);
      return obj}
    function create_object_and_run_initiali(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=create_object(table);
      run_initializers(obj,table);
      return obj}
    function get_data$0(param)
     {if(param)return param[2];throw [0,Assert_failure,_cD_]}
    function build_path(n,keys,tables)
     {var res=[0,0,0,0],r=[0,res],_gi_=0;
      if(! (n < 0))
       {var i=_gi_;
        for(;;)
         {var _gk_=r[1];
          r[1] = [0,caml_check_bound(keys,i)[1 + i],_gk_,0];
          var _gl_=i + 1 | 0;
          if(n !== i){var i=_gl_;continue}
          break}}
      var _gj_=r[1];
      if(tables){tables[2] = _gj_;return res}
      throw [0,Assert_failure,_cA_]}
    function lookup_tables(root,keys)
     {var tables$2=get_data$0(root);
      if(tables$2)
       {var i$1=keys.length - 1 - 1 | 0,i=i$1,tables=tables$2;
        a:
        for(;;)
         {if(0 <= i)
           {var key=caml_check_bound(keys,i)[1 + i],tables$0=tables;
            for(;;)
             {if(tables$0)
               {if(tables$0[1] === key)
                 {var tables$1=get_data$0(tables$0);
                  if(tables$1)
                   {var i$0=i - 1 | 0,i=i$0,tables=tables$1;continue a}
                  throw [0,Assert_failure,_cF_]}
                if(tables$0)
                 {var _gh_=tables$0[3];
                  if(_gh_){var tables$0=_gh_;continue}
                  var v=[0,key,0,0];
                  if(tables$0)
                   {tables$0[3] = v;return build_path(i - 1 | 0,keys,v)}
                  throw [0,Assert_failure,_cB_]}
                throw [0,Assert_failure,_cE_]}
              throw [0,Assert_failure,_cC_]}}
          return tables}}
      return build_path(keys.length - 1 - 1 | 0,keys,root)}
    function new_cache(table)
     {var n=new_method(table),switch$0=0;
      if
       (0
        !==
        (n % 2 | 0)
        &&
        !
        ((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n))
       {var n$0=new_method(table);switch$0 = 1}
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[1 + n$0] = 0;
      return n$0}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _gb_=i[1],
           label=caml_check_bound(methods,_gb_)[1 + _gb_],
           next=
            function(param)
             {i[1]++;
              var _gg_=i[1];
              return caml_check_bound(methods,_gg_)[1 + _gg_]},
           clo=next(0);
          if(typeof clo === "number")
           switch(clo)
            {case 0:
              var
               x=next(0),
               clo$0=function(x){return function(obj){return x}}(x);
              break;
             case 1:
              var
               n=next(0),
               clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
              break;
             case 2:
              var
               e=next(0),
               n$0=next(0),
               clo$0=
                function(e,n){return function(obj){return obj[1 + e][1 + n]}}
                 (e,n$0);
              break;
             case 3:
              var
               n$1=next(0),
               clo$0=
                function(n)
                  {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
                 (n$1);
              break;
             case 4:
              var
               n$2=next(0),
               clo$0=
                function(n){return function(obj,x){obj[1 + n] = x;return 0}}
                 (n$2);
              break;
             case 5:
              var
               f=next(0),
               x$0=next(0),
               clo$0=
                function(f,x){return function(obj){return caml_call1(f,x)}}
                 (f,x$0);
              break;
             case 6:
              var
               f$0=next(0),
               n$3=next(0),
               clo$0=
                function(f,n)
                  {return function(obj){return caml_call1(f,obj[1 + n])}}
                 (f$0,n$3);
              break;
             case 7:
              var
               f$1=next(0),
               e$0=next(0),
               n$4=next(0),
               clo$0=
                function(f,e,n)
                  {return function(obj)
                    {return caml_call1(f,obj[1 + e][1 + n])}}
                 (f$1,e$0,n$4);
              break;
             case 8:
              var
               f$2=next(0),
               n$5=next(0),
               clo$0=
                function(f,n)
                  {return function(obj)
                    {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
                 (f$2,n$5);
              break;
             case 9:
              var
               f$3=next(0),
               x$1=next(0),
               y=next(0),
               clo$0=
                function(f,x,y)
                  {return function(obj){return caml_call2(f,x,y)}}
                 (f$3,x$1,y);
              break;
             case 10:
              var
               f$4=next(0),
               x$2=next(0),
               n$6=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj){return caml_call2(f,x,obj[1 + n])}}
                 (f$4,x$2,n$6);
              break;
             case 11:
              var
               f$5=next(0),
               x$3=next(0),
               e$1=next(0),
               n$7=next(0),
               clo$0=
                function(f,x,e,n)
                  {return function(obj)
                    {return caml_call2(f,x,obj[1 + e][1 + n])}}
                 (f$5,x$3,e$1,n$7);
              break;
             case 12:
              var
               f$6=next(0),
               x$4=next(0),
               n$8=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj)
                    {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
                 (f$6,x$4,n$8);
              break;
             case 13:
              var
               f$7=next(0),
               n$9=next(0),
               x$5=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj){return caml_call2(f,obj[1 + n],x)}}
                 (f$7,n$9,x$5);
              break;
             case 14:
              var
               f$8=next(0),
               e$2=next(0),
               n$10=next(0),
               x$6=next(0),
               clo$0=
                function(f,e,n,x)
                  {return function(obj)
                    {return caml_call2(f,obj[1 + e][1 + n],x)}}
                 (f$8,e$2,n$10,x$6);
              break;
             case 15:
              var
               f$9=next(0),
               n$11=next(0),
               x$7=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj)
                    {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
                 (f$9,n$11,x$7);
              break;
             case 16:
              var
               n$12=next(0),
               x$8=next(0),
               clo$0=
                function(n,x)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,x)}}
                 (n$12,x$8);
              break;
             case 17:
              var
               n$13=next(0),
               m=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
                 (n$13,m);
              break;
             case 18:
              var
               n$14=next(0),
               e$3=next(0),
               m$0=next(0),
               clo$0=
                function(n,e,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
                 (n$14,e$3,m$0);
              break;
             case 19:
              var
               n$15=next(0),
               m$1=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {var _ge_=caml_call1(obj[1][1 + m],obj);
                     return caml_call2(obj[1][1 + n],obj,_ge_)}}
                 (n$15,m$1);
              break;
             case 20:
              var
               m$2=next(0),
               x$9=next(0),
               c=new_cache(table),
               clo$0=
                function(m,x,c)
                  {return function(obj)
                    {return caml_call2(caml_get_public_method(x,m,0),x,c)}}
                 (m$2,x$9,c);
              break;
             case 21:
              var
               m$3=next(0),
               n$16=next(0),
               c$0=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _gd_=obj[1 + n];
                     return caml_call2(caml_get_public_method(_gd_,m,0),_gd_,c)}}
                 (m$3,n$16,c$0);
              break;
             case 22:
              var
               m$4=next(0),
               e$4=next(0),
               n$17=next(0),
               c$1=new_cache(table),
               clo$0=
                function(m,e,n,c)
                  {return function(obj)
                    {var _gc_=obj[1 + e][1 + n];
                     return caml_call2(caml_get_public_method(_gc_,m,0),_gc_,c)}}
                 (m$4,e$4,n$17,c$1);
              break;
             default:
              var
               m$5=next(0),
               n$18=next(0),
               c$2=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _gf_=caml_call1(obj[1][1 + n],obj);
                     return caml_call2(caml_get_public_method(_gf_,m,0),_gf_,c)}}
                 (m$5,n$18,c$2)}
          else
           var clo$0=clo;
          set_method(table,label,clo$0);
          i[1]++;
          continue}
        return 0}}
    function stats$0(param)
     {return [0,table_count[1],method_count[1],inst_var_count[1]]}
    var
     CamlinternalOO=
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy$7,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params$0,
       stats$0];
    caml_register_global(797,CamlinternalOO,"CamlinternalOO");
    var Stdlib_oo=[0,copy$7,public_method_label,public_method_label];
    caml_register_global(798,Stdlib_oo,"Stdlib__oo");
    var
     update_mod=runtime.caml_CamlinternalMod_update_mod,
     init_mod=runtime.caml_CamlinternalMod_init_mod,
     CamlinternalMod=[0,init_mod,update_mod];
    caml_register_global(799,CamlinternalMod,"CamlinternalMod");
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var newbuffer=caml_create_bytes(2 * bufpos[1] | 0);
        blit(buffer[1],0,newbuffer,0,bufpos[1]);
        buffer[1] = newbuffer}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var s=sub_string(buffer[1],0,bufpos[1]);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var kwd_table=caml_call2(Stdlib_hashtbl[1],0,17);
      iter$2
       (function(s){return caml_call3(Stdlib_hashtbl[5],kwd_table,s,[0,s])},
        keywords);
      function ident_or_keyword(id)
       {try
         {var _f$_=caml_call2(Stdlib_hashtbl[6],kwd_table,id);return _f$_}
        catch(_ga_)
         {_ga_ = caml_wrap_exception(_ga_);
          if(_ga_ === Not_found)return [1,id];
          throw _ga_}}
      function keyword_or_error(c)
       {var s=make$0(1,c);
        try
         {var _f9_=caml_call2(Stdlib_hashtbl[6],kwd_table,s);return _f9_}
        catch(_f__)
         {_f__ = caml_wrap_exception(_f__);
          if(_f__ === Not_found)
           throw [0,Error,symbol(cst_Illegal_character,s)];
          throw _f__}}
      function comment(strm)
       {a:
        for(;;)
         {var match=peek$0(strm);
          if(match)
           {var switcher=match[1] - 40 | 0;
            if(! (2 < switcher >>> 0))
             switch(switcher)
              {case 0:
                junk(strm);
                var match$0=peek$0(strm);
                if(match$0)
                 {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                  junk(strm);
                  continue}
                throw Failure$0;
               case 1:break;
               default:
                junk(strm);
                for(;;)
                 {var match$1=peek$0(strm);
                  if(match$1)
                   {var _f8_=match$1[1];
                    if(41 === _f8_){junk(strm);return 0}
                    if(42 === _f8_){junk(strm);continue}
                    junk(strm);
                    continue a}
                  throw Failure$0}}
            junk(strm);
            continue}
          throw Failure$0}}
      function escape(strm)
       {var match=peek$0(strm);
        if(match)
         {var _f5_=match[1];
          if(58 <= _f5_)
           {var switcher=_f5_ - 110 | 0;
            if(! (6 < switcher >>> 0))
             switch(switcher)
              {case 0:junk(strm);return 10;
               case 4:junk(strm);return 13;
               case 6:junk(strm);return 9
               }}
          else
           if(48 <= _f5_)
            {junk(strm);
             var match$0=peek$0(strm);
             if(match$0)
              {var _f6_=match$0[1],switcher$0=_f6_ - 48 | 0;
               if(! (9 < switcher$0 >>> 0))
                {junk(strm);
                 var match$1=peek$0(strm);
                 if(match$1)
                  {var _f7_=match$1[1],switcher$1=_f7_ - 48 | 0;
                   if(! (9 < switcher$1 >>> 0))
                    {junk(strm);
                     return chr
                             ((((_f5_ - 48 | 0) * 100 | 0)
                               +
                               ((_f6_ - 48 | 0) * 10 | 0)
                               |
                               0)
                              +
                              (_f7_ - 48 | 0)
                              |
                              0)}}
                 throw [0,Error,cst$99]}}
             throw [0,Error,cst$98]}
          junk(strm);
          return _f5_}
        throw Failure$0}
      function end_exponent_part(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _f4_=match[1],switcher=_f4_ - 48 | 0;
            if(! (9 < switcher >>> 0)){junk(strm);store(_f4_);continue}}
          return [0,[3,caml_float_of_string(get_string(0))]]}}
      function exponent_part(strm)
       {var match=peek$0(strm);
        if(match)
         {var _f3_=match[1],switch$0=0;
          if(43 !== _f3_ && 45 !== _f3_)switch$0 = 1;
          if(! switch$0)
           {junk(strm);store(_f3_);return end_exponent_part(strm)}}
        return end_exponent_part(strm)}
      function number(s)
       {for(;;)
         {var match=peek$0(s);
          if(match)
           {var _f0_=match[1];
            if(58 <= _f0_)
             {var switch$0=0;
              if(69 === _f0_ || 101 === _f0_)switch$0 = 1;
              if(switch$0){junk(s);store(69);return exponent_part(s)}}
            else
             {if(46 === _f0_)
               {junk(s);
                store(46);
                for(;;)
                 {var match$0=peek$0(s);
                  if(match$0)
                   {var _f1_=match$0[1],_f2_=_f1_ - 69 | 0;
                    if(32 < _f2_ >>> 0)
                     {var switcher=_f2_ + 21 | 0;
                      if(! (9 < switcher >>> 0)){junk(s);store(_f1_);continue}}
                    else
                     {var switcher$0=_f2_ - 1 | 0;
                      if(30 < switcher$0 >>> 0)
                       {junk(s);store(69);return exponent_part(s)}}}
                  return [0,[3,caml_float_of_string(get_string(0))]]}}
              if(48 <= _f0_){junk(s);store(_f0_);continue}}}
          return [0,[2,caml_int_of_string(get_string(0))]]}}
      function ident2(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fY_=match[1],switch$0=0;
            if(94 <= _fY_)
             {var _fZ_=_fY_ - 95 | 0;
              if(30 < _fZ_ >>> 0)
               {if(! (32 <= _fZ_))switch$0 = 1}
              else
               if(29 === _fZ_)switch$0 = 1}
            else
             if(65 <= _fY_)
              {if(92 === _fY_)switch$0 = 1}
             else
              if(33 <= _fY_)
               switch(_fY_ - 33 | 0)
                {case 0:
                 case 2:
                 case 3:
                 case 4:
                 case 5:
                 case 9:
                 case 10:
                 case 12:
                 case 14:
                 case 25:
                 case 27:
                 case 28:
                 case 29:
                 case 30:
                 case 31:switch$0 = 1;break
                 }
            if(switch$0){junk(strm);store(_fY_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function neg_number(s)
       {var match=peek$0(s);
        if(match)
         {var _fX_=match[1],switcher=_fX_ - 48 | 0;
          if(! (9 < switcher >>> 0))
           {junk(s);reset_buffer(0);store(45);store(_fX_);return number(s)}}
        reset_buffer(0);
        store(45);
        return ident2(s)}
      function ident(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fV_=match[1],switch$0=0;
            if(91 <= _fV_)
             {var _fW_=_fV_ - 95 | 0;
              if(27 < _fW_ >>> 0)
               {if(97 <= _fW_)switch$0 = 1}
              else
               if(1 !== _fW_)switch$0 = 1}
            else
             if(48 <= _fV_)
              {if(6 < (_fV_ - 58 | 0) >>> 0)switch$0 = 1}
             else
              if(39 === _fV_)switch$0 = 1;
            if(switch$0){junk(strm);store(_fV_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function next_token$0(counter,strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fL_=match[1],switch$0=0;
            if(124 <= _fL_)
             {if(127 <= _fL_)
               {if(192 <= _fL_)switch$0 = 1}
              else
               if(125 !== _fL_)switch$0 = 2}
            else
             {var _fM_=_fL_ - 65 | 0;
              if(57 < _fM_ >>> 0)
               {if(! (58 <= _fM_))
                 {var switcher=_fM_ + 65 | 0;
                  switch(switcher)
                   {case 34:
                     junk(strm);
                     reset_buffer(0);
                     for(;;)
                      {var match$1=peek$0(strm);
                       if(match$1)
                        {var _fO_=match$1[1];
                         if(34 === _fO_){junk(strm);return [0,[4,get_string(0)]]}
                         if(92 === _fO_)
                          {junk(strm);
                           try
                            {var c$0=escape(strm)}
                           catch(_fU_)
                            {_fU_ = caml_wrap_exception(_fU_);
                             if(_fU_ === Failure$0)throw [0,Error,cst$96];
                             throw _fU_;
                             var _fR_=_fU_}
                           store(c$0);
                           continue}
                         junk(strm);
                         store(_fO_);
                         continue}
                       throw Failure$0}
                    case 39:
                     junk(strm);
                     try
                      {var match$2=peek$0(strm);
                       if(! match$2)throw Failure$0;
                       var _fP_=match$2[1];
                       if(92 === _fP_)
                        {junk(strm);
                         try
                          {var _fQ_=escape(strm)}
                         catch(_fT_)
                          {_fT_ = caml_wrap_exception(_fT_);
                           if(_fT_ === Failure$0)throw [0,Error,cst$97];
                           throw _fT_}
                         var c=_fQ_}
                       else
                        {junk(strm);var c=_fP_}}
                     catch(_fS_)
                      {_fS_ = caml_wrap_exception(_fS_);
                       if(_fS_ === Failure$0)throw [0,Error,cst$94];
                       throw _fS_}
                     var match$0=peek$0(strm);
                     if(match$0 && 39 === match$0[1])
                      {junk(strm);return [0,[5,c]]}
                     throw [0,Error,cst$95];
                    case 40:
                     junk(strm);
                     if(counter < 50)
                      {var counter$0=counter + 1 | 0;
                       return maybe_comment(counter$0,strm)}
                     return caml_trampoline_return(maybe_comment,[0,strm]);
                    case 45:junk(strm);return neg_number(strm);
                    case 9:
                    case 10:
                    case 12:
                    case 13:
                    case 26:
                    case 32:junk(strm);continue;
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                     junk(strm);reset_buffer(0);store(_fL_);return number(strm);
                    case 33:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 42:
                    case 43:
                    case 47:
                    case 58:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:switch$0 = 2;break
                    }}}
              else
               {var _fN_=_fM_ - 26 | 0;
                if(5 < _fN_ >>> 0)
                 switch$0 = 1;
                else
                 switch(_fN_)
                  {case 4:switch$0 = 1;break;case 1:case 3:switch$0 = 2;break}}}
            switch(switch$0)
             {case 0:junk(strm);return [0,keyword_or_error(_fL_)];
              case 1:
               junk(strm);reset_buffer(0);store(_fL_);return ident(strm);
              default:
               junk(strm);reset_buffer(0);store(_fL_);return ident2(strm)}}
          return 0}}
      function maybe_comment(counter,strm)
       {var match=peek$0(strm);
        if(match && 42 === match[1])
         {junk(strm);
          comment(strm);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return next_token$0(counter$0,strm)}
          return caml_trampoline_return(next_token$0,[0,strm])}
        return [0,keyword_or_error(40)]}
      function next_token(strm){return caml_trampoline(next_token$0(0,strm))}
      return function(input)
       {return from(function(count){return next_token(input)})}}
    var Stdlib_genlex=[0,make_lexer];
    caml_register_global(800,Stdlib_genlex,"Stdlib__genlex");
    function MakeSeeded$0(H)
     {var prng=[246,function(_fK_){return caml_call1(_b9_[2],0)}];
      function create(opt,initial_size)
       {if(opt)
         var sth=opt[1],random=sth;
        else
         var random=caml_call1(Stdlib_hashtbl[17],0);
        var x=16;
        for(;;)
         {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
           {var x$0=x * 2 | 0,x=x$0;continue}
          if(random)
           var
            _fI_=caml_obj_tag(prng),
            _fJ_=250 === _fI_?prng[1]:246 === _fI_?force_lazy_block(prng):prng,
            seed=caml_call1(_b9_[4],_fJ_);
          else
           var seed=0;
          return [0,0,caml_make_vect(x,0),seed,x]}}
      function clear(h)
       {h[1] = 0;
        var len=h[2].length - 1,_fG_=len - 1 | 0,_fF_=0;
        if(! (_fG_ < 0))
         {var i=_fF_;
          for(;;)
           {caml_check_bound(h[2],i)[1 + i] = 0;
            var _fH_=i + 1 | 0;
            if(_fG_ !== i){var i=_fH_;continue}
            break}}
        return 0}
      function reset(h)
       {var len=h[2].length - 1;
        return len === h[4]
                ?clear(h)
                :(h[1] = 0,h[2] = caml_make_vect(h[4],0),0)}
      function copy(init)
       {var _fC_=init[4],_fD_=init[3],_fE_=copy$1(init[2]);
        return [0,init[1],_fE_,_fD_,_fC_]}
      function key_index(h,hkey){return hkey & (h[2].length - 1 - 1 | 0)}
      function clean(h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hkey=param$0[1],rest=param$0[3],c=param$0[2];
              if(caml_call1(H[7],c))
               {var rest$0=param$0[3],c$0=param$0[2];
                return [0,hkey,c$0,do_bucket(rest$0)]}
              h[1] = h[1] - 1 | 0;
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_fz_=d.length - 1 - 1 | 0,_fy_=0;
        if(! (_fz_ < 0))
         {var i=_fy_;
          for(;;)
           {var _fA_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _fA_;
            var _fB_=i + 1 | 0;
            if(_fz_ !== i){var i=_fB_;continue}
            break}}
        return 0}
      function resize(h)
       {var odata=h[2],osize=odata.length - 1,nsize=osize * 2 | 0;
        clean(h);
        var
         _fr_=nsize < max_array_length?1:0,
         _fs_=_fr_?(osize >>> 1 | 0) <= h[1]?1:0:_fr_;
        if(_fs_)
         {var ndata=caml_make_vect(nsize,0);
          h[2] = ndata;
          var
           insert_bucket=
            function(param)
             {if(param)
               {var rest=param[3],data=param[2],hkey=param[1];
                insert_bucket(rest);
                var
                 nidx=key_index(h,hkey),
                 _fx_=[0,hkey,data,caml_check_bound(ndata,nidx)[1 + nidx]];
                caml_check_bound(ndata,nidx)[1 + nidx] = _fx_;
                return 0}
              return 0},
           _fu_=osize - 1 | 0,
           _ft_=0;
          if(! (_fu_ < 0))
           {var i=_ft_;
            for(;;)
             {insert_bucket(caml_check_bound(odata,i)[1 + i]);
              var _fw_=i + 1 | 0;
              if(_fu_ !== i){var i=_fw_;continue}
              break}}
          var _fv_=0}
        else
         var _fv_=_fs_;
        return _fv_}
      function add(h,key,info)
       {var
         hkey=caml_call2(H[2],h[3],key),
         i=key_index(h,hkey),
         container=caml_call2(H[1],key,info),
         bucket=[0,hkey,container,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _fq_=h[2].length - 1 << 1 < h[1]?1:0;
        return _fq_?resize(h):_fq_}
      function remove(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function remove_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],next=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:h[1] = h[1] - 1 | 0;return next;
                  case 1:return [0,hk,c,remove_bucket(next)];
                  default:h[1] = h[1] - 1 | 0;var param$0=next;continue}}
              var next$0=param$0[3],c$0=param$0[2];
              return [0,hk,c$0,remove_bucket(next$0)]}
            return 0}}
        var
         i=key_index(h,hkey),
         _fp_=remove_bucket(caml_check_bound(h[2],i)[1 + i]);
        caml_check_bound(h[2],i)[1 + i] = _fp_;
        return 0}
      function find(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fo_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fo_)[1 + _fo_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var match$0=caml_call1(H[4],c);
                 if(match$0){var d=match$0[1];return d}
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param$0=param[3],param=param$0;
            continue}
          throw Not_found}}
      function find_opt(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fn_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fn_)[1 + _fn_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var d=caml_call1(H[4],c);
                 if(d)return d;
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param$0=param[3],param=param$0;
            continue}
          return 0}}
      function find_all(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],rest=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:
                   var match$0=caml_call1(H[4],c);
                   if(match$0)
                    {var d=match$0[1];return [0,d,find_in_bucket(rest)]}
                   var param$0=rest;
                   continue;
                  case 1:var param$0=rest;continue;
                  default:var param$0=rest;continue}}
              var param$1=param$0[3],param$0=param$1;
              continue}
            return 0}}
        var _fm_=key_index(h,hkey);
        return find_in_bucket(caml_check_bound(h[2],_fm_)[1 + _fm_])}
      function replace(h,key,info)
       {var hkey=caml_call2(H[2],h[3],key);
        function replace_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],next=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                if(match){var param$0=next;continue}
                return caml_call3(H[6],c,key,info)}
              var param$1=param$0[3],param$0=param$1;
              continue}
            throw Not_found}}
        var i=key_index(h,hkey),l=caml_check_bound(h[2],i)[1 + i];
        try
         {var _fk_=replace_bucket(l);return _fk_}
        catch(_fl_)
         {_fl_ = caml_wrap_exception(_fl_);
          if(_fl_ === Not_found)
           {var container=caml_call2(H[1],key,info);
            caml_check_bound(h[2],i)[1 + i] = [0,hkey,container,l];
            h[1] = h[1] + 1 | 0;
            var _fj_=h[2].length - 1 << 1 < h[1]?1:0;
            return _fj_?resize(h):_fj_}
          throw _fl_}}
      function mem(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fi_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fi_)[1 + _fi_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hk === hkey)
             {var match=caml_call2(H[3],c,key);
              if(match){var param=rest;continue}
              return 1}
            var param$0=param[3],param=param$0;
            continue}
          return 0}}
      function iter$0(f,h)
       {var d$0=h[2],_fg_=d$0.length - 1 - 1 | 0,_ff_=0;
        if(! (_fg_ < 0))
         {var i=_ff_;
          a:
          for(;;)
           {var param$0=caml_check_bound(d$0,i)[1 + i],param=param$0;
            for(;;)
             {if(param)
               {var
                 rest=param[3],
                 c=param[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1];caml_call2(f,k,d);switch$0 = 1}
                var param=rest;
                continue}
              var _fh_=i + 1 | 0;
              if(_fg_ !== i){var i=_fh_;continue a}
              break}
            break}}
        return 0}
      function fold(f,h,init)
       {var d$0=h[2],accu$1=[0,init],_fc_=d$0.length - 1 - 1 | 0,_fb_=0;
        if(! (_fc_ < 0))
         {var i=_fb_;
          a:
          for(;;)
           {var
             _fd_=accu$1[1],
             b$0=caml_check_bound(d$0,i)[1 + i],
             b=b$0,
             accu=_fd_;
            for(;;)
             {if(b)
               {var
                 rest=b[3],
                 c=b[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1],accu$0=caml_call3(f,k,d,accu);
                  switch$0 = 1}
                if(! switch$0)var accu$0=accu;
                var b=rest,accu=accu$0;
                continue}
              accu$1[1] = accu;
              var _fe_=i + 1 | 0;
              if(_fc_ !== i){var i=_fe_;continue a}
              break}
            break}}
        return accu$1[1]}
      function filter_map_inplace(f,h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               rest=param$0[3],
               c=param$0[2],
               hk=param$0[1],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var d=match$0[1],k=match[1],match$1=caml_call2(f,k,d);
                if(match$1)
                 {var new_d=match$1[1];
                  caml_call3(H[6],c,k,new_d);
                  return [0,hk,c,do_bucket(rest)]}
                var param$0=rest;
                continue}
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_e__=d.length - 1 - 1 | 0,_e9_=0;
        if(! (_e__ < 0))
         {var i=_e9_;
          for(;;)
           {var _e$_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _e$_;
            var _fa_=i + 1 | 0;
            if(_e__ !== i){var i=_fa_;continue}
            break}}
        return 0}
      function length(h){return h[1]}
      function bucket_length(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             param$1=param$0[3],
             accu$1=accu$0 + 1 | 0,
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function stats(h)
       {var
         _e5_=h[2],
         _e6_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length(0,b))},_e6_,_e5_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _e7_=h[2];
        iter$5
         (function(b)
           {var
             l=bucket_length(0,b),
             _e8_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
            caml_check_bound(histo,l)[1 + l] = _e8_;
            return 0},
          _e7_);
        return [0,h[1],h[2].length - 1,mbl,histo]}
      function bucket_length_alive(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var rest=param$0[3],c=param$0[2];
            if(caml_call1(H[7],c))
             {var accu$1=accu$0 + 1 | 0,accu$0=accu$1,param$0=rest;continue}
            var param$1=param$0[3],param$0=param$1;
            continue}
          return accu$0}}
      function stats_alive(h)
       {var
         size=[0,0],
         _e1_=h[2],
         _e2_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length_alive(0,b))},_e2_,_e1_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _e3_=h[2];
        iter$5
         (function(b)
           {var l=bucket_length_alive(0,b);
            size[1] = size[1] + l | 0;
            var _e4_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
            caml_check_bound(histo,l)[1 + l] = _e4_;
            return 0},
          _e3_);
        return [0,size[1],h[2].length - 1,mbl,histo]}
      function to_seq(tbl)
       {var tbl_data=tbl[2];
        function aux(i,buck,param)
         {var i$0=i,buck$0=buck;
          for(;;)
           {if(buck$0)
             {var
               next=buck$0[3],
               c=buck$0[2],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var data=match$0[1],key=match[1];
                return [0,
                        [0,key,data],
                        function(_e0_){return aux(i$0,next,_e0_)}]}
              var buck$0=next;
              continue}
            if(i$0 === tbl_data.length - 1)return 0;
            var
             buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
             i$1=i$0 + 1 | 0,
             i$0=i$1,
             buck$0=buck$1;
            continue}}
        var _eX_=0,_eY_=0;
        return function(_eZ_){return aux(_eY_,_eX_,_eZ_)}}
      function to_seq_keys(m)
       {var _eT_=to_seq(m);
        function _eU_(_eW_){return _eW_[1]}
        return function(_eV_){return map(_eU_,_eT_,_eV_)}}
      function to_seq_values(m)
       {var _eP_=to_seq(m);
        function _eQ_(_eS_){return _eS_[2]}
        return function(_eR_){return map(_eQ_,_eP_,_eR_)}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$0,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$5(param){return caml_call1(_s_[1],1)}
    function get_key$0(t){return caml_call2(_s_[3],t,0)}
    function get_key_copy$0(t){return caml_call2(_s_[4],t,0)}
    function set_key$0(t,k){return caml_call3(_s_[5],t,0,k)}
    function unset_key$0(t){return caml_call2(_s_[6],t,0)}
    function check_key$0(t){return caml_call2(_s_[7],t,0)}
    function blit_key$0(t1,t2){return caml_call5(_s_[8],t1,0,t2,0,1)}
    function get_data$1(t){return caml_call1(_s_[9],t)}
    function get_data_copy(t){return caml_call1(_s_[10],t)}
    function set_data(t,d){return caml_call2(_s_[11],t,d)}
    function unset_data(t){return caml_call1(_s_[12],t)}
    function check_data(t){return caml_call1(_s_[13],t)}
    function blit_data(t1,t2){return caml_call2(_s_[14],t1,t2)}
    function MakeSeeded$1(H)
     {function create(k,d)
       {var c=create$5(0);set_data(c,d);set_key$0(c,k);return c}
      var hash=H[2];
      function equal(c,k)
       {var match=get_key$0(c);
        if(match){var k$0=match[1];return caml_call2(H[1],k,k$0)?0:1}
        return 2}
      function set_key_data(c,k,d)
       {unset_data(c);set_key$0(c,k);return set_data(c,d)}
      return MakeSeeded$0
              ([0,
                create,
                hash,
                equal,
                get_data$1,
                get_key$0,
                set_key_data,
                check_key$0])}
    function Make$2(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$1([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _eO_=include[1];
      function create(sz){return caml_call2(_eO_,_cG_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$6(param){return caml_call1(_s_[1],2)}
    function get_key1(t){return caml_call2(_s_[3],t,0)}
    function get_key1_copy(t){return caml_call2(_s_[4],t,0)}
    function set_key1(t,k){return caml_call3(_s_[5],t,0,k)}
    function unset_key1(t){return caml_call2(_s_[6],t,0)}
    function check_key1(t){return caml_call2(_s_[7],t,0)}
    function get_key2(t){return caml_call2(_s_[3],t,1)}
    function get_key2_copy(t){return caml_call2(_s_[4],t,1)}
    function set_key2(t,k){return caml_call3(_s_[5],t,1,k)}
    function unset_key2(t){return caml_call2(_s_[6],t,1)}
    function check_key2(t){return caml_call2(_s_[7],t,1)}
    function blit_key1(t1,t2){return caml_call5(_s_[8],t1,0,t2,0,1)}
    function blit_key2(t1,t2){return caml_call5(_s_[8],t1,1,t2,1,1)}
    function blit_key12(t1,t2){return caml_call5(_s_[8],t1,0,t2,0,2)}
    function get_data$2(t){return caml_call1(_s_[9],t)}
    function get_data_copy$0(t){return caml_call1(_s_[10],t)}
    function set_data$0(t,d){return caml_call2(_s_[11],t,d)}
    function unset_data$0(t){return caml_call1(_s_[12],t)}
    function check_data$0(t){return caml_call1(_s_[13],t)}
    function blit_data$0(t1,t2){return caml_call2(_s_[14],t1,t2)}
    function MakeSeeded$2(H1,H2)
     {function create(param,d)
       {var k2=param[2],k1=param[1],c=create$6(0);
        set_data$0(c,d);
        set_key1(c,k1);
        set_key2(c,k2);
        return c}
      function hash(seed,param)
       {var
         k2=param[2],
         k1=param[1],
         _eN_=caml_call2(H2[2],seed,k2) * 65599 | 0;
        return caml_call2(H1[2],seed,k1) + _eN_ | 0}
      function equal(c,param)
       {var k2=param[2],k1=param[1],match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2$0=match$0[1],k1$0=match[1];
          if(caml_call2(H1[1],k1,k1$0) && caml_call2(H2[1],k2,k2$0))return 0;
          return 1}
        return 2}
      function get_key(c)
       {var match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2=match$0[1],k1=match[1];return [0,[0,k1,k2]]}
        return 0}
      function set_key_data(c,param,d)
       {var k2=param[2],k1=param[1];
        unset_data$0(c);
        set_key1(c,k1);
        set_key2(c,k2);
        return set_data$0(c,d)}
      function check_key(c)
       {var _eM_=check_key1(c);return _eM_?check_key2(c):_eM_}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$2,get_key,set_key_data,check_key])}
    function Make$3(H1,H2)
     {var equal=H2[1];
      function hash(seed,x){return caml_call1(H2[2],x)}
      var equal$0=H1[1],_eK_=[0,equal,hash];
      function hash$0(seed,x){return caml_call1(H1[2],x)}
      var
       include=MakeSeeded$2([0,equal$0,hash$0],_eK_),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _eL_=include[1];
      function create(sz){return caml_call2(_eL_,_cH_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$7(n){return caml_call1(_s_[1],n)}
    function length$6(k){return caml_call1(_s_[2],k)}
    function get_key$1(t,n){return caml_call2(_s_[3],t,n)}
    function get_key_copy$1(t,n){return caml_call2(_s_[4],t,n)}
    function set_key$1(t,n,k){return caml_call3(_s_[5],t,n,k)}
    function unset_key$1(t,n){return caml_call2(_s_[6],t,n)}
    function check_key$1(t,n){return caml_call2(_s_[7],t,n)}
    function blit_key$1(t1,o1,t2,o2,l)
     {return caml_call5(_s_[8],t1,o1,t2,o2,l)}
    function get_data$3(t){return caml_call1(_s_[9],t)}
    function get_data_copy$1(t){return caml_call1(_s_[10],t)}
    function set_data$1(t,d){return caml_call2(_s_[11],t,d)}
    function unset_data$1(t){return caml_call1(_s_[12],t)}
    function check_data$1(t){return caml_call1(_s_[13],t)}
    function blit_data$1(t1,t2){return caml_call2(_s_[14],t1,t2)}
    function MakeSeeded$3(H)
     {function create(k,d)
       {var c=create$7(k.length - 1);
        set_data$1(c,d);
        var _eI_=k.length - 1 - 1 | 0,_eH_=0;
        if(! (_eI_ < 0))
         {var i=_eH_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _eJ_=i + 1 | 0;
            if(_eI_ !== i){var i=_eJ_;continue}
            break}}
        return c}
      function hash(seed,k)
       {var h=[0,0],_eD_=k.length - 1 - 1 | 0,_eC_=0;
        if(! (_eD_ < 0))
         {var i=_eC_;
          for(;;)
           {var _eE_=h[1],_eF_=caml_check_bound(k,i)[1 + i];
            h[1] = (caml_call2(H[2],seed,_eF_) * 65599 | 0) + _eE_ | 0;
            var _eG_=i + 1 | 0;
            if(_eD_ !== i){var i=_eG_;continue}
            break}}
        return h[1]}
      function equal(c,k)
       {var len=k.length - 1,len$0=length$6(c);
        if(len !== len$0)return 1;
        var i$1=len - 1 | 0,i=i$1;
        for(;;)
         {if(0 <= i)
           {var match=get_key$1(c,i);
            if(match)
             {var ki=match[1],_eB_=caml_check_bound(k,i)[1 + i];
              if(caml_call2(H[1],_eB_,ki)){var i$0=i - 1 | 0,i=i$0;continue}
              return 1}
            return 2}
          return 0}}
      function get_key(c)
       {var len=length$6(c);
        if(0 === len)return [0,[0]];
        var match=get_key$1(c,0);
        if(match)
         {var k0=match[1],a=caml_make_vect(len,k0),i$1=len - 1 | 0,i=i$1;
          for(;;)
           {if(1 <= i)
             {var match$0=get_key$1(c,i);
              if(match$0)
               {var ki=match$0[1];
                caml_check_bound(a,i)[1 + i] = ki;
                var i$0=i - 1 | 0,i=i$0;
                continue}
              return 0}
            return [0,a]}}
        return 0}
      function set_key_data(c,k,d)
       {unset_data$1(c);
        var _ez_=k.length - 1 - 1 | 0,_ey_=0;
        if(! (_ez_ < 0))
         {var i=_ey_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _eA_=i + 1 | 0;
            if(_ez_ !== i){var i=_eA_;continue}
            break}}
        return set_data$1(c,d)}
      function check_key(c)
       {var i$1=length$6(c) - 1 | 0,i=i$1;
        for(;;)
         {var _ev_=i < 0?1:0;
          if(_ev_)
           var _ew_=_ev_;
          else
           {var _ex_=check_key$1(c,i);
            if(_ex_){var i$0=i - 1 | 0,i=i$0;continue}
            var _ew_=_ex_}
          return _ew_}}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$3,get_key,set_key_data,check_key])}
    function Make$4(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$3([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _eu_=include[1];
      function create(sz){return caml_call2(_eu_,_cI_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    var
     Stdlib_ephemeron=
      [0,
       [0,
        create$5,
        get_key$0,
        get_key_copy$0,
        set_key$0,
        unset_key$0,
        check_key$0,
        blit_key$0,
        get_data$1,
        get_data_copy,
        set_data,
        unset_data,
        check_data,
        blit_data,
        Make$2,
        MakeSeeded$1],
       [0,
        create$6,
        get_key1,
        get_key1_copy,
        set_key1,
        unset_key1,
        check_key1,
        get_key2,
        get_key2_copy,
        set_key2,
        unset_key2,
        check_key2,
        blit_key1,
        blit_key2,
        blit_key12,
        get_data$2,
        get_data_copy$0,
        set_data$0,
        unset_data$0,
        check_data$0,
        blit_data$0,
        Make$3,
        MakeSeeded$2],
       [0,
        create$7,
        get_key$1,
        get_key_copy$1,
        set_key$1,
        unset_key$1,
        check_key$1,
        blit_key$1,
        get_data$3,
        get_data_copy$1,
        set_data$1,
        unset_data$1,
        check_data$1,
        blit_data$1,
        Make$4,
        MakeSeeded$3],
       [0,
        function(_et_)
         {return MakeSeeded$0
                  ([0,_et_[3],_et_[1],_et_[2],_et_[5],_et_[4],_et_[6],_et_[7]])}]];
    caml_register_global(801,Stdlib_ephemeron,"Stdlib__ephemeron");
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$100))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return sub$0(name,0,p)}}
        return sub$0(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$101))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return sub$0(name,0,n$3 + 1 | 0)}
                  return sub$0(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return sub$0(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _er_=caml_ml_string_length(n) < 1?1:0,
       _es_=_er_ || (47 !== caml_string_get(n,0)?1:0);
      return _es_}
    function is_implicit(n)
     {var _em_=is_relative(n);
      if(_em_)
       {var
         _en_=caml_ml_string_length(n) < 2?1:0,
         _eo_=_en_ || caml_string_notequal(sub$0(n,0,2),cst$103);
        if(_eo_)
         var
          _ep_=caml_ml_string_length(n) < 3?1:0,
          _eq_=_ep_ || caml_string_notequal(sub$0(n,0,3),cst$102);
        else
         var _eq_=_eo_}
      else
       var _eq_=_em_;
      return _eq_}
    function check_suffix(name,suff)
     {var
       _ek_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0,
       _el_=
        _ek_
         ?caml_string_equal
           (sub$0
             (name,
              caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
              caml_ml_string_length(suff)),
            suff)
         :_ek_;
      return _el_}
    function chop_suffix_opt(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var r=sub$0(filename,len_f - len_s | 0,len_s);
        return caml_string_equal(r,suffix)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _cQ_=caml_sys_getenv(cst_TMPDIR),_cJ_=_cQ_}
    catch(_ej_)
     {_ej_ = caml_wrap_exception(_ej_);
      if(_ej_ !== Not_found)throw _ej_;
      var _cJ_=cst_tmp}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,39);
      var _eh_=l - 1 | 0,_eg_=0;
      if(! (_eh_ < 0))
       {var i=_eg_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _ei_=i + 1 | 0;
          if(_eh_ !== i){var i=_ei_;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function quote_command(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _ea_=caml_equal(stderr,stdout)?cst_2_1:symbol(cst_2,quote(f)),
        _eb_=_ea_;
      else
       var _eb_=cst$109;
      if(stdout)
       var f$0=stdout[1],_ec_=symbol(cst$104,quote(f$0));
      else
       var _ec_=cst$108;
      var _ed_=symbol(_ec_,_eb_);
      if(stdin)
       var f$1=stdin[1],_ee_=symbol(cst$105,quote(f$1));
      else
       var _ee_=cst$107;
      var _ef_=symbol(_ee_,_ed_);
      return symbol(concat$0(cst$106,map$2(quote,[0,cmd,args])),_ef_)}
    function basename(_d$_)
     {return generic_basename(is_dir_sep,current_dir_name,_d$_)}
    function dirname(_d__)
     {return generic_dirname(is_dir_sep,current_dir_name,_d__)}
    var
     Unix=
      [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       _cJ_,
       quote,
       quote_command,
       basename,
       dirname];
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_d7_=47 === c?1:0;
      if(_d7_)
       var _d8_=_d7_;
      else
       var _d9_=92 === c?1:0,_d8_=_d9_ || (58 === c?1:0);
      return _d8_}
    function is_relative$0(n)
     {var
       _d1_=caml_ml_string_length(n) < 1?1:0,
       _d2_=_d1_ || (47 !== caml_string_get(n,0)?1:0);
      if(_d2_)
       {var
         _d3_=caml_ml_string_length(n) < 1?1:0,
         _d4_=_d3_ || (92 !== caml_string_get(n,0)?1:0);
        if(_d4_)
         var
          _d5_=caml_ml_string_length(n) < 2?1:0,
          _d6_=_d5_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _d6_=_d4_}
      else
       var _d6_=_d2_;
      return _d6_}
    function is_implicit$0(n)
     {var _dS_=is_relative$0(n);
      if(_dS_)
       {var
         _dT_=caml_ml_string_length(n) < 2?1:0,
         _dU_=_dT_ || caml_string_notequal(sub$0(n,0,2),cst$113);
        if(_dU_)
         {var
           _dV_=caml_ml_string_length(n) < 2?1:0,
           _dW_=_dV_ || caml_string_notequal(sub$0(n,0,2),cst$112);
          if(_dW_)
           {var
             _dX_=caml_ml_string_length(n) < 3?1:0,
             _dY_=_dX_ || caml_string_notequal(sub$0(n,0,3),cst$111);
            if(_dY_)
             var
              _dZ_=caml_ml_string_length(n) < 3?1:0,
              _d0_=_dZ_ || caml_string_notequal(sub$0(n,0,3),cst$110);
            else
             var _d0_=_dY_}
          else
           var _d0_=_dW_}
        else
         var _d0_=_dU_}
      else
       var _d0_=_dS_;
      return _d0_}
    function check_suffix$0(name,suff)
     {var _dP_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_dP_)
       var
        s=
         sub$0
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _dQ_=lowercase_ascii$1(suff),
        _dR_=caml_string_equal(lowercase_ascii$1(s),_dQ_);
      else
       var _dR_=_dP_;
      return _dR_}
    function chop_suffix_opt$0(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var
         r=sub$0(filename,len_f - len_s | 0,len_s),
         _dO_=lowercase_ascii$1(suffix);
        return caml_string_equal(lowercase_ascii$1(r),_dO_)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _cP_=caml_sys_getenv(cst_TEMP),temp_dir_name=_cP_}
    catch(_dN_)
     {_dN_ = caml_wrap_exception(_dN_);
      if(_dN_ !== Not_found)throw _dN_;
      var temp_dir_name=cst$114}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _dL_=1;
        if(! (n < 1))
         {var j=_dL_;
          for(;;)
           {add_char(b,92);
            var _dM_=j + 1 | 0;
            if(n !== j){var j=_dM_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _dJ_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_dJ_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_dJ_,i$0])}
          if(92 === c)
           {var _dK_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_dK_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_dK_,i$0])}
          add_char(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _dI_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_dI_)}
            return caml_trampoline_return(loop$0,[0,_dI_])}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function quote_cmd_filename(f)
     {if(! contains$0(f,34) && ! contains$0(f,37))
       return contains$0(f,32)?symbol(cst$116,symbol(f,cst$115)):f;
      return failwith(symbol(cst_Filename_quote_command_bad,f))}
    function quote_command$0(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _dz_=
         caml_equal(stderr,stdout)
          ?cst_2_1$0
          :symbol(cst_2$0,quote_cmd_filename(f)),
        _dA_=_dz_;
      else
       var _dA_=cst$125;
      var _dB_=[0,_dA_,_cK_];
      if(stdout)
       var f$0=stdout[1],_dC_=symbol(cst$117,quote_cmd_filename(f$0));
      else
       var _dC_=cst$124;
      var _dD_=[0,_dC_,_dB_];
      if(stdin)
       var f$1=stdin[1],_dE_=symbol(cst$118,quote_cmd_filename(f$1));
      else
       var _dE_=cst$123;
      var
       s=concat$0(cst$119,map$2(quote$0,args)),
       b=create$2(caml_ml_string_length(s) + 20 | 0),
       _dF_=[0,_dE_,_dD_];
      iter$4
       (function(c)
         {var switch$0=0;
          if(62 <= c)
           {var _dH_=c - 63 | 0;
            if(60 < _dH_ >>> 0)
             {if(! (62 <= _dH_))switch$0 = 1}
            else
             if(31 === _dH_)switch$0 = 1}
          else
           if(42 <= c)
            {if(60 === c)switch$0 = 1}
           else
            if(33 <= c)
             switch(c - 33 | 0)
              {case 2:case 3:case 6:break;default:switch$0 = 1}
          return switch$0?(add_char(b,94),add_char(b,c)):add_char(b,c)},
        s);
      var _dG_=[0,cst$120,[0,contents(b),_dF_]];
      return concat$0(cst$122,[0,cst$121,[0,quote_cmd_filename(cmd),_dG_]])}
    function drive_and_path(s)
     {var _dv_=2 <= caml_ml_string_length(s)?1:0;
      if(_dv_)
       {var param=caml_string_get(s,0),switch$0=0;
        if(91 <= param)
         {if(! (25 < (param - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= param)switch$0 = 1;
        var _dw_=switch$0?1:0,_dx_=_dw_?58 === caml_string_get(s,1)?1:0:_dw_}
      else
       var _dx_=_dv_;
      if(_dx_)
       {var _dy_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,sub$0(s,0,2),_dy_]}
      return [0,cst$126,s]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return symbol(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    var
     Win32=
      [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
    function basename$1(_du_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_du_)}
    function dirname$1(_dt_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_dt_)}
    var
     Cygwin=
      [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       _cJ_,
       quote,
       quote_command,
       basename$1,
       dirname$1],
     Sysdeps=
      caml_string_notequal(os_type,cst_Cygwin)
       ?caml_string_notequal(os_type,cst_Win32)?Unix:Win32
       :Cygwin,
     null$3=Sysdeps[1],
     current_dir_name$2=Sysdeps[2],
     parent_dir_name$2=Sysdeps[3],
     dir_sep$2=Sysdeps[4],
     is_dir_sep$1=Sysdeps[5],
     is_relative$1=Sysdeps[6],
     is_implicit$1=Sysdeps[7],
     check_suffix$1=Sysdeps[8],
     chop_suffix_opt$1=Sysdeps[9],
     temp_dir_name$0=Sysdeps[10],
     quote$1=Sysdeps[11],
     quote_command$1=Sysdeps[12],
     basename$2=Sysdeps[13],
     dirname$2=Sysdeps[14];
    function concat$3(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l && ! is_dir_sep$1(dirname,l - 1 | 0))
       return symbol(dirname,symbol(dir_sep$2,filename));
      return symbol(dirname,filename)}
    function chop_suffix(name,suff)
     {var n=caml_ml_string_length(name) - caml_ml_string_length(suff) | 0;
      return 0 <= n?sub$0(name,0,n):invalid_arg(cst_Filename_chop_suffix)}
    function extension_len(name)
     {var i$4=caml_ml_string_length(name) - 1 | 0,i$1=i$4;
      for(;;)
       {if(0 <= i$1 && ! is_dir_sep$1(name,i$1))
         {if(46 === caml_string_get(name,i$1))
           {var i$2=i$1 - 1 | 0,i=i$2;
            for(;;)
             {if(0 <= i && ! is_dir_sep$1(name,i))
               {if(46 === caml_string_get(name,i))
                 {var i$0=i - 1 | 0,i=i$0;continue}
                return caml_ml_string_length(name) - i$1 | 0}
              return 0}}
          var i$3=i$1 - 1 | 0,i$1=i$3;
          continue}
        return 0}}
    function extension(name)
     {var l=extension_len(name);
      return 0 === l?cst$127:sub$0(name,caml_ml_string_length(name) - l | 0,l)}
    function chop_extension(name)
     {var l=extension_len(name);
      return 0 === l
              ?invalid_arg(cst_Filename_chop_extension)
              :sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    function remove_extension(name)
     {var l=extension_len(name);
      return 0 === l?name:sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    var prng$0=[246,function(_ds_){return caml_call1(_b9_[2],0)}];
    function temp_file_name(temp_dir,prefix,suffix)
     {var
       _dq_=caml_obj_tag(prng$0),
       _dr_=
        250 === _dq_?prng$0[1]:246 === _dq_?force_lazy_block(prng$0):prng$0,
       rnd=caml_call1(_b9_[4],_dr_) & 16777215;
      return concat$3(temp_dir,caml_call3(sprintf(_cL_),prefix,rnd,suffix))}
    var current_temp_dir_name=[0,temp_dir_name$0];
    function set_temp_dir_name(s){current_temp_dir_name[1] = s;return 0}
    function get_temp_dir_name(param){return current_temp_dir_name[1]}
    function temp_file(opt,prefix,suffix)
     {if(opt)
       var sth=opt[1],temp_dir=sth;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {runtime.caml_sys_close(caml_sys_open(name,_cM_,384));return name}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    function open_temp_file(opt,_do_,_dn_,prefix,suffix)
     {if(opt)var sth=opt[1],mode=sth;else var mode=_cN_;
      if(_do_)var sth$0=_do_[1],perms=sth$0;else var perms=384;
      if(_dn_)
       var sth$1=_dn_[1],temp_dir=sth$1;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {var _dp_=[0,name,open_out_gen([0,1,[0,3,[0,5,mode]]],perms,name)];
            return _dp_}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    var
     Stdlib_filename=
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat$3,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       chop_suffix_opt$1,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       null$3,
       temp_file,
       open_temp_file,
       get_temp_dir_name,
       set_temp_dir_name,
       temp_dir_name$0,
       quote$1,
       quote_command$1];
    caml_register_global(802,Stdlib_filename,"Stdlib__filename");
    function add$1(x,y){return [254,x[1] + y[1],x[2] + y[2]]}
    function sub$4(x,y){return [254,x[1] - y[1],x[2] - y[2]]}
    function neg(x){return [254,- x[1],- x[2]]}
    function conj(x){return [254,x[1],- x[2]]}
    function mul(x,y)
     {return [254,x[1] * y[1] - x[2] * y[2],x[1] * y[2] + x[2] * y[1]]}
    function div(x,y)
     {if(Math.abs(y[2]) <= Math.abs(y[1]))
       {var r=y[2] / y[1],d=y[1] + r * y[2];
        return [254,(x[1] + r * x[2]) / d,(x[2] - r * x[1]) / d]}
      var r$0=y[1] / y[2],d$0=y[2] + r$0 * y[1];
      return [254,(r$0 * x[1] + x[2]) / d$0,(r$0 * x[2] - x[1]) / d$0]}
    function inv(x){return div(one$4,x)}
    function norm2(x){return x[1] * x[1] + x[2] * x[2]}
    function norm(x)
     {var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(r == 0.)return i;
      if(i == 0.)return r;
      if(i <= r){var q=i / r;return r * Math.sqrt(1. + q * q)}
      var q$0=r / i;
      return i * Math.sqrt(1. + q$0 * q$0)}
    function arg(x){return Math.atan2(x[2],x[1])}
    function polar(n,a){return [254,Math.cos(a) * n,Math.sin(a) * n]}
    function sqrt(x)
     {if(x[1] == 0. && x[2] == 0.)return _cO_;
      var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(i <= r)
       var
        q=i / r,
        w=Math.sqrt(r) * Math.sqrt(0.5 * (1. + Math.sqrt(1. + q * q)));
      else
       var
        q$0=r / i,
        w=Math.sqrt(i) * Math.sqrt(0.5 * (q$0 + Math.sqrt(1. + q$0 * q$0)));
      if(0. <= x[1])return [254,w,0.5 * x[2] / w];
      var w$0=0. <= x[2]?w:- w;
      return [254,0.5 * i / w,w$0]}
    function exp(x)
     {var e=Math.exp(x[1]);return [254,e * Math.cos(x[2]),e * Math.sin(x[2])]}
    function log(x)
     {var _dm_=Math.atan2(x[2],x[1]);return [254,Math.log(norm(x)),_dm_]}
    function pow(x,y){return exp(mul(y,log(x)))}
    var
     Stdlib_complex=
      [0,
       zero$4,
       one$4,
       i,
       neg,
       conj,
       add$1,
       sub$4,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
    caml_register_global(803,Stdlib_complex,"Stdlib__complex");
    var
     Stdlib_arrayLabels=
      [0,
       init$2,
       create_matrix,
       create_matrix,
       append$1,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       map$5,
       iteri$2,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       exists$0,
       for_all$0,
       for_all2$0,
       exists2$0,
       mem$0,
       memq$0,
       make_float,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(804,Stdlib_arrayLabels,"Stdlib__arrayLabels");
    var
     Stdlib_listLabels=
      [0,
       length,
       hd,
       compare_lengths,
       compare_length_with,
       cons$0,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$2,
       iteri,
       map$2,
       mapi,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left_map,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       filteri,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(805,Stdlib_listLabels,"Stdlib__listLabels");
    var
     Stdlib_bytesLabels=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string$1,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$3,
       iteri$0,
       map$3,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$4,
       equal$4,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_to_string,
       unsafe_of_string];
    caml_register_global(806,Stdlib_bytesLabels,"Stdlib__bytesLabels");
    var
     Stdlib_stringLabels=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$4,
       iteri$1,
       map$4,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$5,
       equal$5,
       split_on_char,
       to_seq$3,
       to_seqi$0,
       of_seq$1];
    caml_register_global(807,Stdlib_stringLabels,"Stdlib__stringLabels");
    var Stdlib_moreLabels=[0,Stdlib_hashtbl,Stdlib_map,Stdlib_set];
    caml_register_global(808,Stdlib_moreLabels,"Stdlib__moreLabels");
    var Stdlib_stdLabels=[0];
    caml_register_global(809,Stdlib_stdLabels,"Stdlib__stdLabels");
    var enabled=caml_spacetime_enabled(0);
    function if_spacetime_enabled(f){return enabled?caml_call1(f,0):0}
    function create$8(path)
     {if(caml_spacetime_enabled(0))
       {var channel=open_out(path),t=[0,channel,0];
        caml_spacetime_only_works_for_(t[1]);
        return t}
      return [0,stdout,1]}
    function save_event(time,t,event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_(time,t[1],event_name)})}
    function save_and_close(time,t)
     {return if_spacetime_enabled
              (function(param)
                {if(t[2])failwith(cst_Series_is_closed);
                 caml_spacetime_only_works_for_(time,t[1]);
                 close_out(t[1]);
                 t[2] = 1;
                 return 0})}
    var Series=[0,create$8,save_event,save_and_close];
    function take$0(time,param)
     {var channel=param[1],closed=param[2];
      return if_spacetime_enabled
              (function(param)
                {if(closed)failwith(cst_Series_is_closed$0);
                 runtime.caml_gc_minor(0);
                 return caml_spacetime_only_works_for_(time,channel)})}
    var Snapshot=[0,take$0];
    function save_event_for_automatic_snaps(event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_(event_name)})}
    var
     Stdlib_spacetime=
      [0,enabled,Series,Snapshot,save_event_for_automatic_snaps];
    caml_register_global(810,Stdlib_spacetime,"Stdlib__spacetime");
    var
     float32=0,
     float64=1,
     int8_signed=2,
     int8_unsigned=3,
     int16_signed=4,
     int16_unsigned=5,
     int32$1=6,
     int64$1=7,
     int$2=8,
     nativeint$1=9,
     complex32=10,
     complex64=11,
     char$0=12;
    function kind_size_in_bytes(param)
     {switch(param)
       {case 0:return 4;
        case 1:return 8;
        case 2:return 1;
        case 3:return 1;
        case 4:return 2;
        case 5:return 2;
        case 6:return 4;
        case 7:return 8;
        case 8:return 4;
        case 9:return 4;
        case 10:return 8;
        case 11:return 16;
        default:return 1}}
    var c_layout=0,fortran_layout=1;
    function dims(a)
     {var n=caml_ba_num_dims(a),d=caml_make_vect(n,0),_dj_=n - 1 | 0,_di_=0;
      if(! (_dj_ < 0))
       {var i=_di_;
        for(;;)
         {var _dk_=runtime.caml_ba_dim(a,i);
          caml_check_bound(d,i)[1 + i] = _dk_;
          var _dl_=i + 1 | 0;
          if(_dj_ !== i){var i=_dl_;continue}
          break}}
      return d}
    function size_in_bytes(arr)
     {var _dh_=fold_left$1(caml_mul,1,dims(arr));
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_dh_)}
    var Genarray=[0,dims,size_in_bytes];
    function create$9(kind,layout){return caml_ba_create(kind,layout,[0])}
    function get$1(arr){return runtime.caml_ba_get_generic(arr,[0])}
    function set$0(arr)
     {var _df_=[0];
      return function(_dg_){return runtime.caml_ba_set_generic(arr,_df_,_dg_)}}
    function size_in_bytes$0(arr)
     {return kind_size_in_bytes(caml_ba_kind(arr))}
    function of_value(kind,layout,v)
     {var a=create$9(kind,layout);caml_call1(set$0(a),v);return a}
    function create$10(kind,layout,dim)
     {return caml_ba_create(kind,layout,[0,dim])}
    function size_in_bytes$1(arr)
     {var _de_=caml_ba_dim_1(arr);
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_de_)}
    function slice(a,n)
     {var match=runtime.caml_ba_layout(a);
      return match?caml_ba_slice(a,[0,n]):caml_ba_slice(a,[0,n])}
    function of_array(kind,layout,data)
     {var
       ba=create$10(kind,layout,data.length - 1),
       ofs=layout?1:0,
       _dc_=data.length - 1 - 1 | 0,
       _db_=0;
      if(! (_dc_ < 0))
       {var i=_db_;
        for(;;)
         {runtime.caml_ba_set_1
           (ba,i + ofs | 0,caml_check_bound(data,i)[1 + i]);
          var _dd_=i + 1 | 0;
          if(_dc_ !== i){var i=_dd_;continue}
          break}}
      return ba}
    function create$11(kind,layout,dim1,dim2)
     {return caml_ba_create(kind,layout,[0,dim1,dim2])}
    function size_in_bytes$2(arr)
     {var _c$_=caml_ba_dim_2(arr),_da_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_da_),_c$_)}
    function slice_left(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$0(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       ba=create$11(kind,layout,dim1,dim2),
       ofs=layout?1:0,
       _c6_=dim1 - 1 | 0,
       _c5_=0;
      if(! (_c6_ < 0))
       {var i=_c5_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array2_of_array_n);
          var _c8_=dim2 - 1 | 0,_c7_=0;
          if(! (_c8_ < 0))
           {var j=_c7_;
            for(;;)
             {runtime.caml_ba_set_2
               (ba,i + ofs | 0,j + ofs | 0,caml_check_bound(row,j)[1 + j]);
              var _c__=j + 1 | 0;
              if(_c8_ !== j){var j=_c__;continue}
              break}}
          var _c9_=i + 1 | 0;
          if(_c6_ !== i){var i=_c9_;continue}
          break}}
      return ba}
    function create$12(kind,layout,dim1,dim2,dim3)
     {return caml_ba_create(kind,layout,[0,dim1,dim2,dim3])}
    function size_in_bytes$3(arr)
     {var
       _c2_=runtime.caml_ba_dim_3(arr),
       _c3_=caml_ba_dim_2(arr),
       _c4_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul
                (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c4_),_c3_),
               _c2_)}
    function slice_left_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_right_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_left_2(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right_2(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$1(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       dim3=
        0 === dim2
         ?0
         :caml_check_bound(caml_check_bound(data,0)[1],0)[1].length - 1,
       ba=create$12(kind,layout,dim1,dim2,dim3),
       ofs=layout?1:0,
       _cU_=dim1 - 1 | 0,
       _cT_=0;
      if(! (_cU_ < 0))
       {var i=_cT_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array3_of_array_n);
          var _cW_=dim2 - 1 | 0,_cV_=0;
          if(! (_cW_ < 0))
           {var j=_cV_;
            for(;;)
             {var col=caml_check_bound(row,j)[1 + j];
              if(col.length - 1 !== dim3)
               invalid_arg(cst_Bigarray_Array3_of_array_n$0);
              var _cZ_=dim3 - 1 | 0,_cY_=0;
              if(! (_cZ_ < 0))
               {var k=_cY_;
                for(;;)
                 {runtime.caml_ba_set_3
                   (ba,
                    i + ofs | 0,
                    j + ofs | 0,
                    k + ofs | 0,
                    caml_check_bound(col,k)[1 + k]);
                  var _c1_=k + 1 | 0;
                  if(_cZ_ !== k){var k=_c1_;continue}
                  break}}
              var _c0_=j + 1 | 0;
              if(_cW_ !== j){var j=_c0_;continue}
              break}}
          var _cX_=i + 1 | 0;
          if(_cU_ !== i){var i=_cX_;continue}
          break}}
      return ba}
    function array0_of_genarray(a)
     {return 0 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array0_of_genarra)}
    function array1_of_genarray(a)
     {return 1 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array1_of_genarra)}
    function array2_of_genarray(a)
     {return 2 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array2_of_genarra)}
    function array3_of_genarray(a)
     {return 3 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array3_of_genarra)}
    function reshape_0(a){return caml_ba_reshape(a,[0])}
    function reshape_1(a,dim1){return caml_ba_reshape(a,[0,dim1])}
    function reshape_2(a,dim1,dim2){return caml_ba_reshape(a,[0,dim1,dim2])}
    function reshape_3(a,dim1,dim2,dim3)
     {return caml_ba_reshape(a,[0,dim1,dim2,dim3])}
    var
     Stdlib_bigarray=
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$2,
       int32$1,
       int64$1,
       nativeint$1,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       Genarray,
       [0,create$9,caml_ba_change_layout,size_in_bytes$0,get$1,set$0,of_value],
       [0,create$10,caml_ba_change_layout,size_in_bytes$1,slice,of_array],
       [0,
        create$11,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$12,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
    caml_register_global(811,Stdlib_bigarray,"Stdlib__bigarray");
    return}
  (function(){return this}()));


//# 1 ".js/num.core/nums.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     add_nat=runtime.add_nat,
     blit_nat=runtime.blit_nat,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_div=runtime.caml_div,
     caml_equal=runtime.caml_equal,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_int64_and=runtime.caml_int64_and,
     caml_int64_neg=runtime.caml_int64_neg,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_to_float=runtime.caml_int64_to_float,
     caml_int64_to_int32=runtime.caml_int64_to_int32,
     caml_ldexp_float=runtime.caml_ldexp_float,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_register_global=runtime.caml_register_global,
     caml_string_get=runtime.caml_string_get,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception,
     compare_nat=runtime.compare_nat,
     complement_nat=runtime.complement_nat,
     create_nat=runtime.create_nat,
     decr_nat=runtime.decr_nat,
     div_digit_nat=runtime.div_digit_nat,
     div_nat=runtime.div_nat,
     incr_nat=runtime.incr_nat,
     is_digit_int=runtime.is_digit_int,
     is_digit_zero=runtime.is_digit_zero,
     land_digit_nat=runtime.land_digit_nat,
     mult_digit_nat=runtime.mult_digit_nat,
     mult_nat=runtime.mult_nat,
     nth_digit_nat=runtime.nth_digit_nat,
     nth_digit_nat_native=runtime.nth_digit_nat_native,
     num_digits_nat=runtime.num_digits_nat,
     num_leading_zero_bits_in_digit=runtime.num_leading_zero_bits_in_digit,
     set_digit_nat=runtime.set_digit_nat,
     set_digit_nat_native=runtime.set_digit_nat_native,
     set_to_zero_nat=runtime.set_to_zero_nat,
     shift_right_nat=runtime.shift_right_nat,
     square_nat=runtime.square_nat,
     sub_nat=runtime.sub_nat;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_invalid_digit=caml_string_of_jsbytes("invalid digit"),
     cst_number_too_long=caml_string_of_jsbytes("number too long"),
     cst_power_base_int=caml_string_of_jsbytes("power_base_int"),
     cst_nat_of_int=caml_string_of_jsbytes("nat_of_int"),
     cst_int_of_nat=caml_string_of_jsbytes("int_of_nat"),
     cst_make_nat=caml_string_of_jsbytes("make_nat"),
     cst_xor_big_int=caml_string_of_jsbytes("xor_big_int"),
     cst_or_big_int=caml_string_of_jsbytes("or_big_int"),
     cst_and_big_int=caml_string_of_jsbytes("and_big_int"),
     cst_extract_big_int=caml_string_of_jsbytes("extract_big_int"),
     cst_shift_right_big_int=caml_string_of_jsbytes("shift_right_big_int"),
     cst_two_power_m1_big_int=caml_string_of_jsbytes("two_power_m1_big_int"),
     cst_shift_right_towards_zero_b=
      caml_string_of_jsbytes("shift_right_towards_zero_big_int"),
     cst_shift_left_big_int=caml_string_of_jsbytes("shift_left_big_int"),
     cst_100000000=caml_string_of_jsbytes("100000000"),
     cst_963295986=caml_string_of_jsbytes("963295986"),
     cst$0=caml_string_of_jsbytes("-"),
     sign=caml_string_of_jsbytes(""),
     cst_e=caml_string_of_jsbytes("e"),
     cst_1=caml_string_of_jsbytes("1."),
     cst_e$0=caml_string_of_jsbytes("e"),
     cst$1=caml_string_of_jsbytes("."),
     cst_sqrt_big_int=caml_string_of_jsbytes("sqrt_big_int"),
     cst_base_power_big_int=caml_string_of_jsbytes("base_power_big_int"),
     cst_base_power_big_int$0=caml_string_of_jsbytes("base_power_big_int"),
     cst_base_power_big_int$1=caml_string_of_jsbytes("base_power_big_int"),
     cst_power_big_int_positive_big=
      caml_string_of_jsbytes("power_big_int_positive_big_int"),
     cst_power_int_positive_big_int=
      caml_string_of_jsbytes("power_int_positive_big_int"),
     cst_power_big_int_positive_int=
      caml_string_of_jsbytes("power_big_int_positive_int"),
     cst_power_int_positive_int=
      caml_string_of_jsbytes("power_int_positive_int"),
     cst_sys_big_int_of_string$1=
      caml_string_of_jsbytes("sys_big_int_of_string"),
     cst_sys_big_int_of_string$0=
      caml_string_of_jsbytes("sys_big_int_of_string"),
     cst_sys_big_int_of_string=caml_string_of_jsbytes("sys_big_int_of_string"),
     cst=caml_string_of_jsbytes("-"),
     cst_nat_of_big_int=caml_string_of_jsbytes("nat_of_big_int"),
     cst_int64_of_big_int$1=caml_string_of_jsbytes("int64_of_big_int"),
     cst_int64_of_big_int=caml_string_of_jsbytes("int64_of_big_int"),
     cst_int64_of_big_int$0=caml_string_of_jsbytes("int64_of_big_int"),
     cst_int32_of_big_int=caml_string_of_jsbytes("int32_of_big_int"),
     cst_nativeint_of_big_int=caml_string_of_jsbytes("nativeint_of_big_int"),
     cst_nativeint_of_big_int$0=caml_string_of_jsbytes("nativeint_of_big_int"),
     cst_nativeint_of_big_int$1=caml_string_of_jsbytes("nativeint_of_big_int"),
     cst_int_of_big_int=caml_string_of_jsbytes("int_of_big_int"),
     cst_create_big_int=caml_string_of_jsbytes("create_big_int"),
     cst$5=caml_string_of_jsbytes("/"),
     cst_approx_ratio_exp=caml_string_of_jsbytes("approx_ratio_exp"),
     cst_approx_ratio_exp$0=caml_string_of_jsbytes("approx_ratio_exp"),
     cst_0$0=caml_string_of_jsbytes("+0."),
     cst$4=caml_string_of_jsbytes(""),
     cst_1$1=caml_string_of_jsbytes("-1."),
     cst_1$2=caml_string_of_jsbytes("+1."),
     cst_0$1=caml_string_of_jsbytes("-0."),
     cst_0$2=caml_string_of_jsbytes("+0."),
     cst_approx_ratio_fix=caml_string_of_jsbytes("approx_ratio_fix"),
     cst_0=caml_string_of_jsbytes("+0"),
     cst_1$0=caml_string_of_jsbytes("1"),
     cst_msd_ratio=caml_string_of_jsbytes("msd_ratio"),
     cst_big_int_of_ratio=caml_string_of_jsbytes("big_int_of_ratio"),
     cst_nat_of_ratio$0=caml_string_of_jsbytes("nat_of_ratio"),
     cst_nat_of_ratio=caml_string_of_jsbytes("nat_of_ratio"),
     cst_integer_argument_required=
      caml_string_of_jsbytes("integer argument required"),
     cst_integer_ratio=caml_string_of_jsbytes("integer_ratio"),
     cst_inverse_ratio=caml_string_of_jsbytes("inverse_ratio"),
     cst_create_normalized_ratio=
      caml_string_of_jsbytes("create_normalized_ratio"),
     cst_create_ratio=caml_string_of_jsbytes("create_ratio"),
     cst$3=caml_string_of_jsbytes(""),
     s=caml_string_of_jsbytes("infinite or undefined rational number"),
     cst$2=caml_string_of_jsbytes(" "),
     cst_num_of_string=caml_string_of_jsbytes("num_of_string"),
     cst_power_num=caml_string_of_jsbytes("power_num"),
     cst_Normalization_during_compu=
      caml_string_of_jsbytes("Normalization during computation"),
     cst_returned_by_get_normalize_=
      caml_string_of_jsbytes("     (returned by get_normalize_ratio ())"),
     cst_modifiable_with_set_normal=
      caml_string_of_jsbytes
       ("     (modifiable with set_normalize_ratio <your choice>)"),
     cst_Normalization_when_printin=
      caml_string_of_jsbytes("Normalization when printing"),
     cst_returned_by_get_normalize_$0=
      caml_string_of_jsbytes
       ("     (returned by get_normalize_ratio_when_printing ())"),
     cst_modifiable_with_set_normal$0=
      caml_string_of_jsbytes
       ("     (modifiable with set_normalize_ratio_when_printing <your choice>)"),
     cst_Floating_point_approximati=
      caml_string_of_jsbytes
       ("Floating point approximation when printing rational numbers"),
     cst_returned_by_get_approx_pri=
      caml_string_of_jsbytes("     (returned by get_approx_printing ())"),
     cst_modifiable_with_set_approx=
      caml_string_of_jsbytes
       ("     (modifiable with set_approx_printing <your choice>)"),
     cst_Default_precision=caml_string_of_jsbytes("  Default precision = "),
     cst_returned_by_get_floating_p=
      caml_string_of_jsbytes("     (returned by get_floating_precision ())"),
     cst_modifiable_with_set_floati=
      caml_string_of_jsbytes
       ("     (modifiable with set_floating_precision <your choice>)"),
     cst_Error_when_a_rational_deno=
      caml_string_of_jsbytes("Error when a rational denominator is null"),
     cst_returned_by_get_error_when=
      caml_string_of_jsbytes
       ("     (returned by get_error_when_null_denominator ())"),
     cst_modifiable_with_set_error_=
      caml_string_of_jsbytes
       ("     (modifiable with set_error_when_null_denominator <your choice>)"),
     cst_ON=caml_string_of_jsbytes("ON"),
     cst_OFF=caml_string_of_jsbytes("OFF"),
     cst$6=caml_string_of_jsbytes(" --> "),
     Stdlib=global_data.Stdlib,
     Stdlib_sys=global_data.Stdlib__sys,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Stdlib_char=global_data.Stdlib__char,
     Assert_failure=global_data.Assert_failure,
     Stdlib_int64=global_data.Stdlib__int64,
     Stdlib_nativeint=global_data.Stdlib__nativeint,
     _z_=[0,caml_string_of_jsbytes("nat.ml"),273,9],
     _y_=runtime.caml_int64_create_lo_mi_hi(6553600,11973543,3552),
     _x_=[0,caml_string_of_jsbytes("nat.ml"),280,9],
     _w_=[0,caml_string_of_jsbytes("nat.ml"),287,9],
     _v_=[0,caml_string_of_jsbytes("nat.ml"),293,9],
     _u_=runtime.caml_int64_create_lo_mi_hi(6553600,11973543,3552),
     _l_=[0,caml_string_of_jsbytes("big_int.ml"),879,2],
     _k_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _j_=runtime.caml_int64_create_lo_mi_hi(16777215,255,0),
     _g_=runtime.caml_int64_create_lo_mi_hi(16777215,255,0),
     _h_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _i_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _d_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _e_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _f_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _n_=[0,caml_string_of_jsbytes("ratio.ml"),575,11],
     _m_=[0,caml_string_of_jsbytes("e0"),0],
     _r_=[0,1],
     _s_=[0,1],
     _t_=[0,1],
     _o_=[0,1],
     _p_=[0,1],
     _q_=[0,1];
    function gcd_int(i1,i2)
     {var i1$0=i1,i2$0=i2;
      for(;;)
       {if(0 === i2$0)return caml_call1(Stdlib[18],i1$0);
        var i2$1=caml_mod(i1$0,i2$0),i1$0=i2$0,i2$0=i2$1;
        continue}}
    function num_bits_int_aux(n)
     {return 0 === n?0:num_bits_int_aux(n >>> 1 | 0) + 1 | 0}
    function num_bits_int(n)
     {return num_bits_int_aux(caml_call1(Stdlib[18],n))}
    function sign_int(i){return 0 === i?0:0 < i?1:-1}
    var
     length_of_int=Stdlib_sys[10] - 1 | 0,
     monster_int=1 << length_of_int,
     biggest_int=monster_int - 1 | 0,
     least_int=- biggest_int | 0;
    function compare_int(n1,n2)
     {return n1 === n2?0:caml_greaterthan(n1,n2)?1:-1}
    var
     Int_misc=
      [0,
       gcd_int,
       num_bits_int,
       compare_int,
       sign_int,
       length_of_int,
       biggest_int,
       least_int,
       monster_int];
    caml_register_global(122,Int_misc,"Int_misc");
    runtime.initialize_nat(0);
    function length_nat(n){return n.length - 1 - 1 | 0}
    var _a_=Stdlib_sys[9];
    function make_nat(len)
     {if(0 <= len)
       {var res=create_nat(len);set_to_zero_nat(res,0,len);return res}
      return caml_call1(Stdlib[1],cst_make_nat)}
    var a_2=make_nat(2),a_1=make_nat(1),b_2=make_nat(2);
    function copy_nat(nat,off_set,length)
     {var res=create_nat(length);
      blit_nat(res,0,nat,off_set,length);
      return res}
    function is_zero_nat(n,off,len)
     {var _dl_=num_digits_nat(n,off,len);
      return 0 === compare_nat(make_nat(1),0,1,n,off,_dl_)?1:0}
    function is_nat_int(nat,off,len)
     {var
       _dj_=1 === num_digits_nat(nat,off,len)?1:0,
       _dk_=_dj_?is_digit_int(nat,off):_dj_;
      return _dk_}
    function int_of_nat(nat)
     {var len=length_nat(nat);
      return is_nat_int(nat,0,len)
              ?nth_digit_nat(nat,0)
              :caml_call1(Stdlib[2],cst_int_of_nat)}
    function nat_of_int(i)
     {if(0 <= i)
       {var res=make_nat(1);return 0 === i?res:(set_digit_nat(res,0,i),res)}
      return caml_call1(Stdlib[1],cst_nat_of_int)}
    function eq_nat(nat1,off1,len1,nat2,off2,len2)
     {var _di_=num_digits_nat(nat2,off2,len2);
      return 0
              ===
              compare_nat
               (nat1,off1,num_digits_nat(nat1,off1,len1),nat2,off2,_di_)
              ?1
              :0}
    function le_nat(nat1,off1,len1,nat2,off2,len2)
     {var _dh_=num_digits_nat(nat2,off2,len2);
      return compare_nat
               (nat1,off1,num_digits_nat(nat1,off1,len1),nat2,off2,_dh_)
              <=
              0
              ?1
              :0}
    function lt_nat(nat1,off1,len1,nat2,off2,len2)
     {var _dg_=num_digits_nat(nat2,off2,len2);
      return compare_nat
               (nat1,off1,num_digits_nat(nat1,off1,len1),nat2,off2,_dg_)
              <
              0
              ?1
              :0}
    function ge_nat(nat1,off1,len1,nat2,off2,len2)
     {var _df_=num_digits_nat(nat2,off2,len2);
      return 0
              <=
              compare_nat
               (nat1,off1,num_digits_nat(nat1,off1,len1),nat2,off2,_df_)
              ?1
              :0}
    function gt_nat(nat1,off1,len1,nat2,off2,len2)
     {var _de_=num_digits_nat(nat2,off2,len2);
      return 0
              <
              compare_nat
               (nat1,off1,num_digits_nat(nat1,off1,len1),nat2,off2,_de_)
              ?1
              :0}
    function exchange(r1,r2)
     {var old1=r1[1];r1[1] = r2[1];r2[1] = old1;return 0}
    function gcd_nat(nat1,off1,len1,nat2,off2,len2)
     {if(is_zero_nat(nat1,off1,len1))
       {blit_nat(nat1,off1,nat2,off2,len2);return len2}
      var
       copy1=[0,create_nat(len1 + 1 | 0)],
       copy2=[0,create_nat(len2 + 1 | 0)];
      blit_nat(copy1[1],0,nat1,off1,len1);
      blit_nat(copy2[1],0,nat2,off2,len2);
      set_digit_nat(copy1[1],len1,0);
      set_digit_nat(copy2[1],len2,0);
      if(lt_nat(copy1[1],0,len1,copy2[1],0,len2))exchange(copy1,copy2);
      var
       _dc_=length_nat(copy1[1]),
       real_len1=[0,num_digits_nat(copy1[1],0,_dc_)],
       _dd_=length_nat(copy2[1]),
       real_len2=[0,num_digits_nat(copy2[1],0,_dd_)];
      for(;;)
       {if(is_zero_nat(copy2[1],0,real_len2[1]))
         {blit_nat(nat1,off1,copy1[1],0,real_len1[1]);return real_len1[1]}
        set_digit_nat(copy1[1],real_len1[1],0);
        div_nat(copy1[1],0,real_len1[1] + 1 | 0,copy2[1],0,real_len2[1]);
        exchange(copy1,copy2);
        real_len1[1] = real_len2[1];
        real_len2[1] = num_digits_nat(copy2[1],0,real_len2[1]);
        continue}}
    function sqrt_nat(rad,off,len)
     {var
       len$0=num_digits_nat(rad,off,len),
       len_parity=len$0 % 2 | 0,
       rad_len=(len$0 + 1 | 0) + len_parity | 0,
       rad$0=create_nat(rad_len);
      blit_nat(rad$0,0,rad,off,len$0);
      set_digit_nat(rad$0,len$0,0);
      set_digit_nat(rad$0,rad_len - 1 | 0,0);
      var
       cand_len=(len$0 + 1 | 0) / 2 | 0,
       cand_rest=rad_len - cand_len | 0,
       cand=make_nat(cand_len),
       shift_cand=
        (num_leading_zero_bits_in_digit(rad$0,len$0 - 1 | 0)
         +
         caml_mul(_a_,len_parity)
         |
         0)
        /
        2
        |
        0;
      if(shift_cand === _a_)return cand;
      complement_nat(cand,0,cand_len);
      shift_right_nat(cand,0,1,a_1,0,shift_cand);
      var next_cand=create_nat(rad_len);
      for(;;)
       {blit_nat(next_cand,0,rad$0,0,rad_len);
        div_nat(next_cand,0,rad_len,cand,0,cand_len);
        add_nat(next_cand,cand_len,cand_rest,cand,0,cand_len,0);
        shift_right_nat(next_cand,cand_len,cand_rest,a_1,0,1);
        if(lt_nat(next_cand,cand_len,cand_rest,cand,0,cand_len))
         {blit_nat(cand,0,next_cand,cand_len,cand_len);continue}
        return cand}}
    var power_base_max=make_nat(2);
    if(32 === _a_)
     set_digit_nat(power_base_max,0,1000000000);
    else
     {if(64 !== _a_)throw [0,Assert_failure,_z_];
      set_digit_nat(power_base_max,0,caml_int64_to_int32(_y_));
      mult_digit_nat(power_base_max,0,2,power_base_max,0,1,nat_of_int(9),0)}
    if(32 === _a_)
     var _b_=9;
    else
     {if(64 !== _a_)throw [0,Assert_failure,_x_];var _b_=19}
    if(32 === _a_)
     var _c_=9;
    else
     {if(64 !== _a_)throw [0,Assert_failure,_w_];var _c_=18}
    if(32 === _a_)
     var max_power_10_power_in_int=nat_of_int(1000000000);
    else
     {if(64 !== _a_)throw [0,Assert_failure,_v_];
      var max_power_10_power_in_int=nat_of_int(caml_int64_to_int32(_u_))}
    function raw_string_of_digit(nat,off)
     {if(is_nat_int(nat,off,1))
       {var _c$_=nth_digit_nat(nat,off);return caml_call1(Stdlib[33],_c$_)}
      blit_nat(b_2,0,nat,off,1);
      div_digit_nat(a_2,0,a_1,0,b_2,0,2,max_power_10_power_in_int,0);
      var
       leading_digits=nth_digit_nat(a_2,0),
       _da_=nth_digit_nat(a_1,0),
       s1=caml_call1(Stdlib[33],_da_),
       len=caml_ml_string_length(s1);
      if(10 <= leading_digits)
       {var
         result=caml_call2(Stdlib_bytes[1],_c_ + 2 | 0,48),
         _db_=caml_call1(Stdlib[33],leading_digits);
        caml_call5(Stdlib_string[6],_db_,0,result,0,2);
        caml_call5
         (Stdlib_string[6],
          s1,
          0,
          result,
          caml_ml_bytes_length(result) - len | 0,
          len);
        return caml_call1(Stdlib_bytes[6],result)}
      var result$0=caml_call2(Stdlib_bytes[1],_c_ + 1 | 0,48);
      caml_bytes_set
       (result$0,0,caml_call1(Stdlib_char[1],48 + leading_digits | 0));
      caml_call5
       (Stdlib_string[6],
        s1,
        0,
        result$0,
        caml_ml_bytes_length(result$0) - len | 0,
        len);
      return caml_call1(Stdlib_bytes[6],result$0)}
    function make_power_base(base,power_base)
     {var i=[0,0],j=[0,0];
      set_digit_nat(power_base,0,base);
      for(;;)
       {i[1]++;
        if(is_digit_zero(power_base,i[1]))
         {mult_digit_nat
           (power_base,i[1],2,power_base,i[1] - 1 | 0,1,power_base,0);
          continue}
        for(;;)
         {if(j[1] < (i[1] - 1 | 0) && is_digit_int(power_base,j[1]))
           {j[1]++;continue}
          return [0,i[1] - 2 | 0,j[1]]}}}
    function power_base_int(base,i)
     {if(0 !== i && 1 !== base)
       {if(0 === base)return nat_of_int(0);
        if(0 <= i)
         {var
           power_base=make_nat(_a_ + 1 | 0),
           match=make_power_base(base,power_base),
           pmax=match[1],
           n=caml_div(i,pmax + 1 | 0),
           rem=caml_mod(i,pmax + 1 | 0);
          if(0 < n)
           {var
             newn=i === biggest_int?n:n + 1 | 0,
             res=make_nat(newn),
             res2=make_nat(newn),
             l=num_bits_int(n) - 2 | 0;
            blit_nat(res,0,power_base,pmax,1);
            if(! (l < 0))
             {var i$0=l;
              for(;;)
               {var
                 len=num_digits_nat(res,0,newn),
                 len2=caml_call2(Stdlib[16],n,2 * len | 0),
                 succ_len2=len2 + 1 | 0;
                square_nat(res2,0,len2,res,0,len);
                if(0 < (n & 1 << i$0))
                 {set_to_zero_nat(res,0,len);
                  mult_digit_nat(res,0,succ_len2,res2,0,len2,power_base,pmax)}
                else
                 blit_nat(res,0,res2,0,len2);
                set_to_zero_nat(res2,0,len2);
                var _c__=i$0 - 1 | 0;
                if(0 !== i$0){var i$0=_c__;continue}
                break}}
            return 0 < rem
                    ?(mult_digit_nat(res2,0,newn,res,0,n,power_base,rem - 1 | 0),
                      res2)
                    :res}
          return copy_nat(power_base,rem - 1 | 0,1)}
        return caml_call1(Stdlib[1],cst_power_base_int)}
      return nat_of_int(1)}
    function unadjusted_string_of_nat(nat,off,len_nat)
     {var len=num_digits_nat(nat,off,len_nat);
      if(1 === len)return raw_string_of_digit(nat,off);
      var
       len_copy=[0,len + 1 | 0],
       copy1=create_nat(len_copy[1]),
       copy2=make_nat(len_copy[1]),
       rest_digit=make_nat(2);
      if(caml_div(biggest_int,_b_ + 1 | 0) < len)
       return caml_call1(Stdlib[2],cst_number_too_long);
      var
       len_s=caml_mul(_b_ + 1 | 0,len),
       s=caml_call2(Stdlib_bytes[1],len_s,48),
       pos_ref=[0,len_s];
      len_copy[1] = len_copy[1] - 1 | 0;
      blit_nat(copy1,0,nat,off,len);
      set_digit_nat(copy1,len,0);
      for(;;)
       {if(is_zero_nat(copy1,0,len_copy[1]))
         return caml_call1(Stdlib_bytes[42],s);
        div_digit_nat
         (copy2,0,rest_digit,0,copy1,0,len_copy[1] + 1 | 0,power_base_max,0);
        var str=raw_string_of_digit(rest_digit,0);
        caml_call5
         (Stdlib_string[6],
          str,
          0,
          s,
          pos_ref[1] - caml_ml_string_length(str) | 0,
          caml_ml_string_length(str));
        pos_ref[1] = pos_ref[1] - _b_ | 0;
        len_copy[1] = num_digits_nat(copy2,0,len_copy[1]);
        blit_nat(copy1,0,copy2,0,len_copy[1]);
        set_digit_nat(copy1,len_copy[1],0);
        continue}}
    function string_of_nat(nat)
     {var s=unadjusted_string_of_nat(nat,0,length_nat(nat)),index=[0,0];
      try
       {var _c7_=caml_ml_string_length(s) - 2 | 0,_c6_=0;
        if(! (_c7_ < 0))
         {var i=_c6_;
          for(;;)
           {if(48 !== caml_string_get(s,i)){index[1] = i;throw Stdlib[3]}
            var _c8_=i + 1 | 0;
            if(_c7_ !== i){var i=_c8_;continue}
            break}}}
      catch(_c9_)
       {_c9_ = caml_wrap_exception(_c9_);if(_c9_ !== Stdlib[3])throw _c9_}
      return caml_call3
              (Stdlib_string[4],
               s,
               index[1],
               caml_ml_string_length(s) - index[1] | 0)}
    function sys_nat_of_string(base,s,off,len)
     {var
       power_base=make_nat(_a_ + 1 | 0),
       match=make_power_base(base,power_base),
       pint=match[2],
       pmax=match[1],
       _cY_=1 + caml_div(len,pmax + 1 | 0) | 0,
       current_len=[0,1],
       possible_len=[0,caml_call2(Stdlib[16],2,_cY_)],
       nat1=make_nat(_cY_),
       nat2=make_nat(_cY_),
       digits_read=[0,0],
       bound=(off + len | 0) - 1 | 0,
       int$0=[0,0];
      if(! (bound < off))
       {var i=off;
        for(;;)
         {var n=caml_string_get(s,i),switch$0=0;
          if(32 <= n)
           {if(93 <= n)
             {if(95 === n && off < i)switch$0 = 2}
            else
             if(58 < (n - 33 | 0) >>> 0)switch$0 = 1}
          else
           if(11 <= n){if(13 === n)switch$0 = 1}else if(9 <= n)switch$0 = 1;
          switch(switch$0)
           {case 0:
             var switch$1=0;
             if(48 <= n && n <= (47 + caml_call2(Stdlib[16],base,10) | 0))
              var _c5_=n - 48 | 0;
             else
              switch$1 = 1;
             if(switch$1)
              {var switch$2=0;
               if(65 <= n && n <= ((65 + base | 0) - 11 | 0))
                var _c5_=n - 55 | 0;
               else
                switch$2 = 1;
               if(switch$2)
                {var switch$3=0;
                 if(97 <= n && n <= ((97 + base | 0) - 11 | 0))
                  var _c5_=n - 87 | 0;
                 else
                  switch$3 = 1;
                 if(switch$3)var _c5_=caml_call1(Stdlib[2],cst_invalid_digit)}}
             int$0[1] = caml_mul(int$0[1],base) + _c5_ | 0;
             digits_read[1]++;
             break;
            case 1:break
            }
          var
           _cZ_=digits_read[1] === pint?1:0,
           _c0_=_cZ_ || (i === bound?1:0),
           _c1_=_c0_?1 - (0 === digits_read[1]?1:0):_c0_;
          if(_c1_)
           {set_digit_nat(nat1,0,int$0[1]);
            var
             erase_len=
              _cY_ === current_len[1]?current_len[1] - 1 | 0:current_len[1],
             _c2_=1;
            if(! (erase_len < 1))
             {var j=_c2_;
              for(;;)
               {set_digit_nat(nat1,j,0);
                var _c4_=j + 1 | 0;
                if(erase_len !== j){var j=_c4_;continue}
                break}}
            mult_digit_nat
             (nat1,
              0,
              possible_len[1],
              nat2,
              0,
              current_len[1],
              power_base,
              digits_read[1] - 1 | 0);
            blit_nat(nat2,0,nat1,0,possible_len[1]);
            current_len[1] = num_digits_nat(nat1,0,possible_len[1]);
            possible_len[1]
            =
            caml_call2(Stdlib[16],_cY_,current_len[1] + 1 | 0);
            int$0[1] = 0;
            digits_read[1] = 0}
          var _c3_=i + 1 | 0;
          if(bound !== i){var i=_c3_;continue}
          break}}
      var nat=create_nat(current_len[1]);
      blit_nat(nat,0,nat1,0,current_len[1]);
      return nat}
    function nat_of_string(s)
     {return sys_nat_of_string(10,s,0,caml_ml_string_length(s))}
    function float_of_nat(nat)
     {return runtime.caml_float_of_string(string_of_nat(nat))}
    var
     Nat=
      [0,
       make_nat,
       copy_nat,
       length_nat,
       is_zero_nat,
       is_nat_int,
       int_of_nat,
       nat_of_int,
       eq_nat,
       le_nat,
       lt_nat,
       ge_nat,
       gt_nat,
       gcd_nat,
       sqrt_nat,
       string_of_nat,
       nat_of_string,
       sys_nat_of_string,
       float_of_nat,
       make_power_base,
       power_base_int,
       _a_];
    caml_register_global(127,Nat,"Nat");
    function sign_big_int(bi){return bi[1]}
    var zero_big_int=[0,0,make_nat(1)],unit_big_int=[0,1,nat_of_int(1)];
    function num_digits_big_int(bi)
     {var _cX_=length_nat(bi[2]);return num_digits_nat(bi[2],0,_cX_)}
    function num_bits_big_int(bi)
     {var
       _cW_=length_nat(bi[2]),
       nd=num_digits_nat(bi[2],0,_cW_),
       lz=num_leading_zero_bits_in_digit(bi[2],nd - 1 | 0);
      return caml_mul(nd,_a_) - lz | 0}
    function minus_big_int(bi)
     {var _cU_=num_digits_big_int(bi),_cV_=copy_nat(bi[2],0,_cU_);
      return [0,- bi[1] | 0,_cV_]}
    function abs_big_int(bi)
     {var
       _cR_=num_digits_big_int(bi),
       _cS_=copy_nat(bi[2],0,_cR_),
       _cT_=0 === bi[1]?0:1;
      return [0,_cT_,_cS_]}
    function compare_big_int(bi1,bi2)
     {if(0 === bi1[1] && 0 === bi2[1])return 0;
      if(bi1[1] < bi2[1])return -1;
      if(bi2[1] < bi1[1])return 1;
      if(1 === bi1[1])
       {var
         _cL_=num_digits_big_int(bi2),
         _cM_=bi2[2],
         _cN_=num_digits_big_int(bi1);
        return compare_nat(bi1[2],0,_cN_,_cM_,0,_cL_)}
      var
       _cO_=num_digits_big_int(bi1),
       _cP_=bi1[2],
       _cQ_=num_digits_big_int(bi2);
      return compare_nat(bi2[2],0,_cQ_,_cP_,0,_cO_)}
    function eq_big_int(bi1,bi2){return 0 === compare_big_int(bi1,bi2)?1:0}
    function le_big_int(bi1,bi2){return compare_big_int(bi1,bi2) <= 0?1:0}
    function ge_big_int(bi1,bi2){return 0 <= compare_big_int(bi1,bi2)?1:0}
    function lt_big_int(bi1,bi2){return compare_big_int(bi1,bi2) < 0?1:0}
    function gt_big_int(bi1,bi2){return 0 < compare_big_int(bi1,bi2)?1:0}
    function max_big_int(bi1,bi2){return lt_big_int(bi1,bi2)?bi2:bi1}
    function min_big_int(bi1,bi2){return gt_big_int(bi1,bi2)?bi2:bi1}
    function pred_big_int(bi)
     {var _cJ_=bi[1];
      if(0 === _cJ_)return [0,-1,nat_of_int(1)];
      if(1 === _cJ_)
       {var size_bi=num_digits_big_int(bi),copy_bi=copy_nat(bi[2],0,size_bi);
        decr_nat(copy_bi,0,size_bi,0);
        var _cK_=is_zero_nat(copy_bi,0,size_bi)?0:1;
        return [0,_cK_,copy_bi]}
      var
       size_bi$0=num_digits_big_int(bi),
       size_res=size_bi$0 + 1 | 0,
       copy_bi$0=create_nat(size_res);
      blit_nat(copy_bi$0,0,bi[2],0,size_bi$0);
      set_digit_nat(copy_bi$0,size_bi$0,0);
      incr_nat(copy_bi$0,0,size_res,1);
      return [0,-1,copy_bi$0]}
    function succ_big_int(bi)
     {var _cH_=bi[1];
      if(-1 === _cH_)
       {var size_bi=num_digits_big_int(bi),copy_bi=copy_nat(bi[2],0,size_bi);
        decr_nat(copy_bi,0,size_bi,0);
        var _cI_=is_zero_nat(copy_bi,0,size_bi)?0:-1;
        return [0,_cI_,copy_bi]}
      if(0 === _cH_)return [0,1,nat_of_int(1)];
      var
       size_bi$0=num_digits_big_int(bi),
       size_res=size_bi$0 + 1 | 0,
       copy_bi$0=create_nat(size_res);
      blit_nat(copy_bi$0,0,bi[2],0,size_bi$0);
      set_digit_nat(copy_bi$0,size_bi$0,0);
      incr_nat(copy_bi$0,0,size_res,1);
      return [0,1,copy_bi$0]}
    function add_big_int(bi1,bi2)
     {var size_bi1=num_digits_big_int(bi1),size_bi2=num_digits_big_int(bi2);
      if(bi1[1] === bi2[1])
       {var match=compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
        if(-1 === match)
         {var res=create_nat(size_bi2 + 1 | 0);
          blit_nat(res,0,bi2[2],0,size_bi2);
          set_digit_nat(res,size_bi2,0);
          add_nat(res,0,size_bi2 + 1 | 0,bi1[2],0,size_bi1,0);
          var res$0=res}
        else
         {var res$1=create_nat(size_bi1 + 1 | 0);
          blit_nat(res$1,0,bi1[2],0,size_bi1);
          set_digit_nat(res$1,size_bi1,0);
          add_nat(res$1,0,size_bi1 + 1 | 0,bi2[2],0,size_bi2,0);
          var res$0=res$1}
        return [0,bi1[1],res$0]}
      var match$0=compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      if(0 === match$0)return zero_big_int;
      if(1 === match$0)
       {var res$2=copy_nat(bi1[2],0,size_bi1);
        sub_nat(res$2,0,size_bi1,bi2[2],0,size_bi2,1);
        return [0,bi1[1],res$2]}
      var res$3=copy_nat(bi2[2],0,size_bi2);
      sub_nat(res$3,0,size_bi2,bi1[2],0,size_bi1,1);
      return [0,bi2[1],res$3]}
    function big_int_of_int(i)
     {var res=create_nat(1);
      if(i === monster_int)
       {set_digit_nat(res,0,biggest_int);incr_nat(res,0,1,1)}
      else
       set_digit_nat(res,0,caml_call1(Stdlib[18],i));
      return [0,sign_int(i),res]}
    function add_int_big_int(i,bi){return add_big_int(big_int_of_int(i),bi)}
    function sub_big_int(bi1,bi2){return add_big_int(bi1,minus_big_int(bi2))}
    function mult_int_big_int(i,bi)
     {var size_bi=num_digits_big_int(bi),size_res=size_bi + 1 | 0;
      if(i === monster_int)
       {var res=create_nat(size_res);
        blit_nat(res,0,bi[2],0,size_bi);
        set_digit_nat(res,size_bi,0);
        var _cE_=nat_of_int(biggest_int);
        mult_digit_nat(res,0,size_res,bi[2],0,size_bi,_cE_,0);
        return [0,- bi[1] | 0,res]}
      var res$0=make_nat(size_res),_cF_=nat_of_int(caml_call1(Stdlib[18],i));
      mult_digit_nat(res$0,0,size_res,bi[2],0,size_bi,_cF_,0);
      var _cG_=bi[1];
      return [0,caml_mul(sign_int(i),_cG_),res$0]}
    function mult_big_int(bi1,bi2)
     {var
       size_bi1=num_digits_big_int(bi1),
       size_bi2=num_digits_big_int(bi2),
       size_res=size_bi1 + size_bi2 | 0,
       res=make_nat(size_res);
      if(size_bi1 < size_bi2)
       mult_nat(res,0,size_res,bi2[2],0,size_bi2,bi1[2],0,size_bi1);
      else
       mult_nat(res,0,size_res,bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      return [0,caml_mul(bi1[1],bi2[1]),res]}
    function quomod_big_int(bi1,bi2)
     {if(0 === bi2[1])throw Stdlib[13];
      var
       size_bi1=num_digits_big_int(bi1),
       size_bi2=num_digits_big_int(bi2),
       match=compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      if(-1 === match)
       {if(0 <= bi1[1])return [0,big_int_of_int(0),bi1];
        if(0 <= bi2[1])
         {var _cx_=add_big_int(bi2,bi1);return [0,big_int_of_int(-1),_cx_]}
        var _cy_=sub_big_int(bi1,bi2);
        return [0,big_int_of_int(1),_cy_]}
      if(0 === match)
       return [0,big_int_of_int(caml_mul(bi1[1],bi2[1])),zero_big_int];
      var
       bi1_negatif=-1 === bi1[1]?1:0,
       _cz_=
        bi1_negatif
         ?caml_call2(Stdlib[17],(size_bi1 - size_bi2 | 0) + 1 | 0,1) + 1 | 0
         :caml_call2(Stdlib[17],(size_bi1 - size_bi2 | 0) + 1 | 0,1),
       size_r=caml_call2(Stdlib[17],size_bi1,size_bi2) + 1 | 0,
       q=create_nat(_cz_),
       r=create_nat(size_r);
      blit_nat(r,0,bi1[2],0,size_bi1);
      set_to_zero_nat(r,size_bi1,size_r - size_bi1 | 0);
      div_nat(r,0,size_r,bi2[2],0,size_bi2);
      blit_nat(q,0,r,size_bi2,size_r - size_bi2 | 0);
      var not_null_mod=1 - is_zero_nat(r,0,size_bi2);
      if(bi1_negatif && not_null_mod)
       {var new_r=copy_nat(bi2[2],0,size_bi2);
        sub_nat(new_r,0,size_bi2,r,0,size_bi2,1);
        set_digit_nat(q,_cz_ - 1 | 0,0);
        incr_nat(q,0,_cz_,1);
        return [0,[0,- bi2[1] | 0,q],[0,1,new_r]]}
      if(bi1_negatif)set_digit_nat(q,_cz_ - 1 | 0,0);
      var
       _cA_=copy_nat(r,0,size_bi2),
       _cB_=not_null_mod?1:0,
       _cC_=[0,_cB_,_cA_],
       _cD_=is_zero_nat(q,0,_cz_)?0:caml_mul(bi1[1],bi2[1]);
      return [0,[0,_cD_,q],_cC_]}
    function div_big_int(bi1,bi2){return quomod_big_int(bi1,bi2)[1]}
    function mod_big_int(bi1,bi2){return quomod_big_int(bi1,bi2)[2]}
    function gcd_big_int(bi1,bi2)
     {var size_bi1=num_digits_big_int(bi1),size_bi2=num_digits_big_int(bi2);
      if(is_zero_nat(bi1[2],0,size_bi1))return abs_big_int(bi2);
      if(is_zero_nat(bi2[2],0,size_bi2))return [0,1,bi1[2]];
      var match=compare_nat(bi1[2],0,size_bi1,bi2[2],0,size_bi2);
      if(0 === match)
       var _cw_=bi1[2];
      else
       if(1 === match)
        var
         res=copy_nat(bi1[2],0,size_bi1),
         len=gcd_nat(res,0,size_bi1,bi2[2],0,size_bi2),
         _cw_=copy_nat(res,0,len);
       else
        var
         res$0=copy_nat(bi2[2],0,size_bi2),
         len$0=gcd_nat(res$0,0,size_bi2,bi1[2],0,size_bi1),
         _cw_=copy_nat(res$0,0,len$0);
      return [0,1,_cw_]}
    var
     monster_big_int=big_int_of_int(monster_int),
     monster_nat=monster_big_int[2];
    function is_int_big_int(bi)
     {var _cu_=1 === num_digits_big_int(bi)?1:0;
      if(_cu_)
       {var match=compare_nat(bi[2],0,1,monster_nat,0,1);
        if(-1 !== match)return 0 === match?-1 === bi[1]?1:0:0;
        var _cv_=1}
      else
       var _cv_=_cu_;
      return _cv_}
    function int_of_big_int(bi)
     {try
       {var n=int_of_nat(bi[2]),_cs_=-1 === bi[1]?- n | 0:n;return _cs_}
      catch(_ct_)
       {_ct_ = caml_wrap_exception(_ct_);
        if(_ct_[1] === Stdlib[7])
         return eq_big_int(bi,monster_big_int)
                 ?monster_int
                 :caml_call1(Stdlib[2],cst_int_of_big_int);
        throw _ct_}}
    function int_of_big_int_opt(bi)
     {try
       {var _cq_=[0,int_of_big_int(bi)];return _cq_}
      catch(_cr_)
       {_cr_ = caml_wrap_exception(_cr_);
        if(_cr_[1] === Stdlib[7])return 0;
        throw _cr_}}
    function big_int_of_nativeint(i)
     {if(caml_equal(i,0))return zero_big_int;
      if(caml_greaterthan(i,0))
       {var res=create_nat(1);set_digit_nat_native(res,0,i);return [0,1,res]}
      var res$0=create_nat(1);
      set_digit_nat_native(res$0,0,- i | 0);
      return [0,-1,res$0]}
    function nativeint_of_big_int(bi)
     {if(1 < num_digits_big_int(bi))
       caml_call1(Stdlib[2],cst_nativeint_of_big_int);
      var i=nth_digit_nat_native(bi[2],0);
      if(0 <= bi[1])
       return caml_greaterequal(i,0)
               ?i
               :caml_call1(Stdlib[2],cst_nativeint_of_big_int$0);
      if(! caml_greaterequal(i,0) && ! caml_equal(i,Stdlib_nativeint[11]))
       return caml_call1(Stdlib[2],cst_nativeint_of_big_int$1);
      return - i | 0}
    function nativeint_of_big_int_opt(bi)
     {try
       {var _co_=[0,nativeint_of_big_int(bi)];return _co_}
      catch(_cp_)
       {_cp_ = caml_wrap_exception(_cp_);
        if(_cp_[1] === Stdlib[7])return 0;
        throw _cp_}}
    function big_int_of_int32(i){return big_int_of_nativeint(i)}
    function int32_of_big_int(bi)
     {var i=nativeint_of_big_int(bi);
      if
       (runtime.caml_lessequal(i,2147483647)
        &&
        caml_greaterequal(i,-2147483648))
       return i;
      return caml_call1(Stdlib[2],cst_int32_of_big_int)}
    function int32_of_big_int_opt(bi)
     {try
       {var _cm_=[0,int32_of_big_int(bi)];return _cm_}
      catch(_cn_)
       {_cn_ = caml_wrap_exception(_cn_);
        if(_cn_[1] === Stdlib[7])return 0;
        throw _cn_}}
    function big_int_of_int64(i)
     {if(64 === Stdlib_sys[9])
       return big_int_of_nativeint(caml_int64_to_int32(i));
      if(caml_equal(i,_d_))
       var absi=_e_,sg=0;
      else
       if(caml_greaterthan(i,_f_))
        var absi=i,sg=1;
       else
        var absi$0=caml_int64_neg(i),absi=absi$0,sg=-1;
      var res=create_nat(2);
      set_digit_nat_native(res,0,caml_int64_to_int32(absi));
      set_digit_nat_native
       (res,1,caml_int64_to_int32(runtime.caml_int64_shift_right(absi,32)));
      return [0,sg,res]}
    function int64_of_big_int(bi)
     {if(64 === Stdlib_sys[9])
       return caml_int64_of_int32(nativeint_of_big_int(bi));
      var match=num_digits_big_int(bi);
      if(1 === match)
       var
        i=
         caml_int64_and
          (caml_int64_of_int32(nth_digit_nat_native(bi[2],0)),_g_);
      else
       if(2 === match)
        var
         _cl_=
          runtime.caml_int64_shift_left
           (caml_int64_of_int32(nth_digit_nat_native(bi[2],1)),32),
         i=
          caml_int64_or
           (caml_int64_and
             (caml_int64_of_int32(nth_digit_nat_native(bi[2],0)),_j_),
            _cl_);
       else
        var i=caml_call1(Stdlib[2],cst_int64_of_big_int$1);
      if(0 <= bi[1])
       return caml_greaterequal(i,_h_)
               ?i
               :caml_call1(Stdlib[2],cst_int64_of_big_int);
      if(! caml_greaterequal(i,_i_) && ! caml_equal(i,Stdlib_int64[10]))
       return caml_call1(Stdlib[2],cst_int64_of_big_int$0);
      return caml_int64_neg(i)}
    function int64_of_big_int_opt(bi)
     {try
       {var _cj_=[0,int64_of_big_int(bi)];return _cj_}
      catch(_ck_)
       {_ck_ = caml_wrap_exception(_ck_);
        if(_ck_[1] === Stdlib[7])return 0;
        throw _ck_}}
    function nat_of_big_int(bi)
     {if(-1 === bi[1])return caml_call1(Stdlib[2],cst_nat_of_big_int);
      var _ci_=num_digits_big_int(bi);
      return copy_nat(bi[2],0,_ci_)}
    function sys_big_int_of_nat(nat,off,len)
     {var
       length=num_digits_nat(nat,off,len),
       _cg_=copy_nat(nat,off,length),
       _ch_=is_zero_nat(nat,off,length)?0:1;
      return [0,_ch_,_cg_]}
    function big_int_of_nat(nat)
     {return sys_big_int_of_nat(nat,0,length_nat(nat))}
    function string_of_big_int(bi)
     {if(-1 === bi[1])
       {var _cf_=string_of_nat(bi[2]);return caml_call2(Stdlib[28],cst,_cf_)}
      return string_of_nat(bi[2])}
    function sys_big_int_of_string_aux(s,ofs,len,sgn,base)
     {if(len < 1)caml_call1(Stdlib[2],cst_sys_big_int_of_string);
      var n=sys_nat_of_string(base,s,ofs,len);
      return is_zero_nat(n,0,length_nat(n))?zero_big_int:[0,sgn,n]}
    function sys_big_int_of_string_base(s,ofs,len,sgn)
     {if(len < 1)caml_call1(Stdlib[2],cst_sys_big_int_of_string$0);
      if(2 <= len)
       {var
         match=caml_string_get(s,ofs),
         match$0=caml_string_get(s,ofs + 1 | 0);
        if(48 === match)
         {var switch$0=0;
          if(89 <= match$0)
           {if(98 === match$0)
             switch$0 = 3;
            else
             if(111 === match$0)
              switch$0 = 2;
             else
              if(120 === match$0)switch$0 = 1}
          else
           if(66 === match$0)
            switch$0 = 3;
           else
            if(79 === match$0)switch$0 = 2;else if(88 <= match$0)switch$0 = 1;
          switch(switch$0)
           {case 0:break;
            case 1:
             return sys_big_int_of_string_aux
                     (s,ofs + 2 | 0,len - 2 | 0,sgn,16);
            case 2:
             return sys_big_int_of_string_aux(s,ofs + 2 | 0,len - 2 | 0,sgn,8);
            default:
             return sys_big_int_of_string_aux(s,ofs + 2 | 0,len - 2 | 0,sgn,2)}}
        return sys_big_int_of_string_aux(s,ofs,len,sgn,10)}
      return sys_big_int_of_string_aux(s,ofs,len,sgn,10)}
    function sys_big_int_of_string(s,ofs,len)
     {if(len < 1)caml_call1(Stdlib[2],cst_sys_big_int_of_string$1);
      var match=caml_string_get(s,ofs),switcher=match - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:
          return sys_big_int_of_string_base(s,ofs + 1 | 0,len - 1 | 0,1);
         case 1:break;
         default:
          return sys_big_int_of_string_base(s,ofs + 1 | 0,len - 1 | 0,-1)}
      return sys_big_int_of_string_base(s,ofs,len,1)}
    function big_int_of_string(s)
     {return sys_big_int_of_string(s,0,caml_ml_string_length(s))}
    function big_int_of_string_opt(s)
     {try
       {var _cd_=[0,big_int_of_string(s)];return _cd_}
      catch(_ce_)
       {_ce_ = caml_wrap_exception(_ce_);
        if(_ce_[1] === Stdlib[7])return 0;
        throw _ce_}}
    function power_int_positive_int(i,n)
     {var match=sign_int(n);
      if(-1 === match)return caml_call1(Stdlib[1],cst_power_int_positive_int);
      if(0 === match)return unit_big_int;
      var
       nat=power_base_int(caml_call1(Stdlib[18],i),n),
       _cc_=0 <= i?sign_int(i):0 === (n & 1)?1:-1;
      return [0,_cc_,nat]}
    function power_big_int_positive_int(bi,n)
     {var match=sign_int(n);
      if(-1 === match)
       return caml_call1(Stdlib[1],cst_power_big_int_positive_int);
      if(0 === match)return unit_big_int;
      var
       bi_len=num_digits_big_int(bi),
       res_len=caml_mul(bi_len,n),
       res=make_nat(res_len),
       res2=make_nat(res_len),
       l=num_bits_int(n) - 2 | 0;
      blit_nat(res,0,bi[2],0,bi_len);
      if(! (l < 0))
       {var i=l;
        for(;;)
         {var
           len=num_digits_nat(res,0,res_len),
           len2=caml_call2(Stdlib[16],res_len,2 * len | 0);
          set_to_zero_nat(res2,0,len2);
          square_nat(res2,0,len2,res,0,len);
          if(0 < (n & 1 << i))
           {var lenp=caml_call2(Stdlib[16],res_len,len2 + bi_len | 0);
            set_to_zero_nat(res,0,lenp);
            mult_nat(res,0,lenp,res2,0,len2,bi[2],0,bi_len)}
          else
           blit_nat(res,0,res2,0,len2);
          var _cb_=i - 1 | 0;
          if(0 !== i){var i=_cb_;continue}
          break}}
      var _ca_=0 <= bi[1]?bi[1]:0 === (n & 1)?1:-1;
      return [0,_ca_,res]}
    function power_int_positive_big_int(i$0,bi)
     {var match$1=bi[1];
      if(-1 === match$1)
       return caml_call1(Stdlib[1],cst_power_int_positive_big_int);
      if(0 === match$1)return unit_big_int;
      var
       len$0=num_digits_big_int(bi),
       _b__=bi[2],
       base=caml_call1(Stdlib[18],i$0),
       off=0;
      if(0 === base)
       var nat=nat_of_int(0);
      else
       {var switch$0=0;
        if(is_zero_nat(_b__,off,len$0) || 1 === base)
         switch$0 = 1;
        else
         {var
           power_base=make_nat(_a_ + 1 | 0),
           match=make_power_base(base,power_base),
           pmax=match[1],
           _b8_=big_int_of_int(pmax + 1 | 0),
           match$0=quomod_big_int(sys_big_int_of_nat(_b__,off,len$0),_b8_),
           y=match$0[2],
           x=match$0[1],
           rem=int_of_big_int(y),
           n=int_of_big_int(x);
          if(0 === n)
           var nat=copy_nat(power_base,rem - 1 | 0,1);
          else
           {var
             res=make_nat(n),
             res2=make_nat(n + 1 | 0),
             l=num_bits_int(n) - 2 | 0;
            blit_nat(res,0,power_base,pmax,1);
            if(! (l < 0))
             {var i=l;
              for(;;)
               {var
                 len=num_digits_nat(res,0,n),
                 len2=caml_call2(Stdlib[16],n,2 * len | 0),
                 succ_len2=len2 + 1 | 0;
                square_nat(res2,0,len2,res,0,len);
                if(0 < (n & 1 << i))
                 {set_to_zero_nat(res,0,len);
                  mult_digit_nat(res,0,succ_len2,res2,0,len2,power_base,pmax)}
                else
                 blit_nat(res,0,res2,0,len2);
                set_to_zero_nat(res2,0,len2);
                var _b9_=i - 1 | 0;
                if(0 !== i){var i=_b9_;continue}
                break}}
            var
             nat=
              0 < rem
               ?(mult_digit_nat
                  (res2,0,n + 1 | 0,res,0,n,power_base,rem - 1 | 0),
                 res2)
               :res}}
        if(switch$0)var nat=nat_of_int(1)}
      var _b$_=0 <= i$0?sign_int(i$0):runtime.is_digit_odd(bi[2],0)?-1:1;
      return [0,_b$_,nat]}
    function power_big_int_positive_big_int(bi1,bi2)
     {var match=bi2[1];
      if(-1 === match)
       return caml_call1(Stdlib[1],cst_power_big_int_positive_big);
      if(0 === match)return unit_big_int;
      try
       {var _b5_=power_big_int_positive_int(bi1,int_of_big_int(bi2));
        return _b5_}
      catch(_b6_)
       {_b6_ = caml_wrap_exception(_b6_);
        if(_b6_[1] === Stdlib[7])
         try
          {var _b4_=power_int_positive_big_int(int_of_big_int(bi1),bi2);
           return _b4_}
         catch(_b7_)
          {_b7_ = caml_wrap_exception(_b7_);
           if(_b7_[1] === Stdlib[7])throw Stdlib[9];
           throw _b7_}
        throw _b6_}}
    function base_power_big_int(base,n,bi)
     {var match=sign_int(n);
      if(-1 === match)
       {var
         nat=power_base_int(base,- n | 0),
         len_nat=num_digits_nat(nat,0,length_nat(nat)),
         len_bi=num_digits_big_int(bi);
        if(len_bi < len_nat)
         return caml_call1(Stdlib[1],cst_base_power_big_int);
        if
         (len_bi
          ===
          len_nat
          &&
          -1
          ===
          runtime.compare_digits_nat(bi[2],len_bi,nat,len_nat))
         return caml_call1(Stdlib[1],cst_base_power_big_int$0);
        var copy=create_nat(len_bi + 1 | 0);
        blit_nat(copy,0,bi[2],0,len_bi);
        set_digit_nat(copy,len_bi,0);
        div_nat(copy,0,len_bi + 1 | 0,nat,0,len_nat);
        if(is_zero_nat(copy,0,len_nat))
         {var _b2_=copy_nat(copy,len_nat,1);return [0,bi[1],_b2_]}
        return caml_call1(Stdlib[1],cst_base_power_big_int$1)}
      if(0 === match)return bi;
      var
       nat$0=power_base_int(base,n),
       len_nat$0=num_digits_nat(nat$0,0,length_nat(nat$0)),
       len_bi$0=num_digits_big_int(bi),
       new_len=len_bi$0 + len_nat$0 | 0,
       nat$1=make_nat(new_len);
      if(len_nat$0 < len_bi$0)
       mult_nat(nat$1,0,new_len,bi[2],0,len_bi$0,nat$0,0,len_nat$0);
      else
       mult_nat(nat$1,0,new_len,nat$0,0,len_nat$0,bi[2],0,len_bi$0);
      if(is_zero_nat(nat$1,0,new_len))return zero_big_int;
      var _b3_=bi[1];
      if(1 !== _b3_ && -1 !== _b3_)
       {var switch$0=0;
        if
         (0
          !==
          _b3_
          ||
          !
          is_zero_nat(nat$1,0,num_digits_nat(nat$1,0,length_nat(nat$1))))
         switch$0 = 1;
        if(switch$0)return caml_call1(Stdlib[1],cst_create_big_int)}
      return [0,_b3_,nat$1]}
    function sqrt_big_int(bi)
     {var _b0_=bi[1];
      if(-1 === _b0_)return caml_call1(Stdlib[1],cst_sqrt_big_int);
      if(0 === _b0_)return zero_big_int;
      var _b1_=num_digits_big_int(bi);
      return [0,1,sqrt_nat(bi[2],0,_b1_)]}
    function square_big_int(bi)
     {if(0 === bi[1])return zero_big_int;
      var
       len_bi=num_digits_big_int(bi),
       len_res=2 * len_bi | 0,
       res=make_nat(len_res);
      square_nat(res,0,len_res,bi[2],0,len_bi);
      return [0,1,res]}
    function round_futur_last_digit(s,off_set,length)
     {var l=(length + off_set | 0) - 1 | 0;
      if(53 <= caml_bytes_get(s,l))
       {var l$2=l - 1 | 0,l$0=l$2;
        for(;;)
         {if(l$0 < off_set)return 1;
          var current_char=caml_bytes_get(s,l$0);
          if(57 === current_char)
           {caml_bytes_set(s,l$0,48);var l$1=l$0 - 1 | 0,l$0=l$1;continue}
          caml_bytes_set
           (s,l$0,caml_call1(Stdlib_char[1],current_char + 1 | 0));
          return 0}}
      return 0}
    function approx_big_int(prec,bi)
     {var
       len_bi=num_digits_big_int(bi),
       _bK_=big_int_of_string(cst_100000000),
       _bL_=big_int_of_string(cst_963295986),
       _bM_=
        int_of_big_int
         (add_int_big_int
           (- prec | 0,
            div_big_int
             (mult_big_int(big_int_of_int(len_bi - 1 | 0),_bL_),_bK_))),
       n=caml_call2(Stdlib[17],0,_bM_),
       _bN_=string_of_big_int(div_big_int(bi,power_int_positive_int(10,n))),
       s=caml_call1(Stdlib_bytes[5],_bN_);
      if(45 === caml_bytes_get(s,0))
       var off=1,sign$0=cst$0;
      else
       var off=0,sign$0=sign;
      if(round_futur_last_digit(s,off,prec + 1 | 0))
       {var
         _bO_=
          caml_call1
           (Stdlib[33],((n + 1 | 0) - off | 0) + caml_ml_bytes_length(s) | 0),
         _bP_=caml_call2(Stdlib[28],cst_e,_bO_),
         _bQ_=caml_call2(Stdlib_string[1],prec,48),
         _bR_=caml_call2(Stdlib[28],_bQ_,_bP_),
         _bS_=caml_call2(Stdlib[28],cst_1,_bR_);
        return caml_call2(Stdlib[28],sign$0,_bS_)}
      var
       _bT_=
        caml_call1
         (Stdlib[33],(n - (off + 1 | 0) | 0) + caml_ml_bytes_length(s) | 0),
       _bU_=caml_call2(Stdlib[28],cst_e$0,_bT_),
       _bV_=caml_call3(Stdlib_bytes[8],s,off + 1 | 0,prec - 1 | 0),
       _bW_=caml_call2(Stdlib[28],_bV_,_bU_),
       _bX_=caml_call2(Stdlib[28],cst$1,_bW_),
       _bY_=caml_call3(Stdlib_bytes[8],s,off,1),
       _bZ_=caml_call2(Stdlib[28],_bY_,_bX_);
      return caml_call2(Stdlib[28],sign$0,_bZ_)}
    function shift_left_big_int(bi,n)
     {if(0 <= n)
       {if(0 === n)return bi;
        if(0 === bi[1])return bi;
        var
         size_bi=num_digits_big_int(bi),
         size_res=size_bi + caml_div((n + _a_ | 0) - 1 | 0,_a_) | 0,
         res=create_nat(size_res),
         ndigits=caml_div(n,_a_);
        set_to_zero_nat(res,0,ndigits);
        blit_nat(res,ndigits,bi[2],0,size_bi);
        var nbits=caml_mod(n,_a_);
        if(0 < nbits)
         runtime.shift_left_nat
          (res,ndigits,size_bi,res,ndigits + size_bi | 0,nbits);
        return [0,bi[1],res]}
      return caml_call1(Stdlib[1],cst_shift_left_big_int)}
    function shift_right_towards_zero_big_i(bi,n)
     {if(0 <= n)
       {if(0 === n)return bi;
        if(0 === bi[1])return bi;
        var
         size_bi=num_digits_big_int(bi),
         ndigits=caml_div(n,_a_),
         nbits=caml_mod(n,_a_);
        if(size_bi <= ndigits)return zero_big_int;
        var size_res=size_bi - ndigits | 0,res=create_nat(size_res);
        blit_nat(res,0,bi[2],ndigits,size_res);
        if(0 < nbits)
         {var tmp=create_nat(1);shift_right_nat(res,0,size_res,tmp,0,nbits)}
        return is_zero_nat(res,0,size_res)?zero_big_int:[0,bi[1],res]}
      return caml_call1(Stdlib[1],cst_shift_right_towards_zero_b)}
    function shift_right_big_int(bi,n)
     {if(0 <= n)
       {if(0 <= bi[1])return shift_right_towards_zero_big_i(bi,n);
        if(0 <= n)
         if(0 === n)
          var _bJ_=zero_big_int;
         else
          {var
            idx=caml_div(n,_a_),
            size_res=idx + 1 | 0,
            res=make_nat(size_res);
           set_digit_nat_native(res,idx,1 << caml_mod(n,_a_));
           decr_nat(res,0,size_res,0);
           var _bJ_=[0,1,res]}
        else
         var _bJ_=caml_call1(Stdlib[1],cst_two_power_m1_big_int);
        return shift_right_towards_zero_big_i(sub_big_int(bi,_bJ_),n)}
      return caml_call1(Stdlib[1],cst_shift_right_big_int)}
    function extract_big_int(bi,ofs,n)
     {if(0 <= ofs && 0 <= n)
       {if(0 === bi[1])return bi;
        var
         size_bi=num_digits_big_int(bi),
         size_res=caml_div((n + _a_ | 0) - 1 | 0,_a_),
         ndigits=caml_div(ofs,_a_),
         nbits=caml_mod(ofs,_a_),
         res=make_nat(size_res);
        if(ndigits < size_bi)
         {var _bE_=caml_call2(Stdlib[16],size_res,size_bi - ndigits | 0);
          blit_nat(res,0,bi[2],ndigits,_bE_)}
        if(bi[1] < 0)
         {complement_nat(res,0,size_res);
          var i=0;
          for(;;)
           {var _bF_=ndigits <= i?1:0;
            if(_bF_)
             var _bG_=_bF_;
            else
             {var _bH_=size_bi <= i?1:0;
              if(_bH_)
               var _bG_=_bH_;
              else
               {var _bI_=is_digit_zero(bi[2],i);
                if(_bI_){var i$0=i + 1 | 0,i=i$0;continue}
                var _bG_=_bI_}}
            if(_bG_)incr_nat(res,0,size_res,1);
            break}}
        if(0 < nbits)
         {var tmp=create_nat(1);shift_right_nat(res,0,size_res,tmp,0,nbits)}
        var n$0=caml_mod(n,_a_);
        if(0 < n$0)
         {var tmp$0=create_nat(1);
          set_digit_nat_native(tmp$0,0,-1 >>> (_a_ - n$0 | 0) | 0);
          land_digit_nat(res,size_res - 1 | 0,tmp$0,0)}
        return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
      return caml_call1(Stdlib[1],cst_extract_big_int)}
    function and_big_int(a,b)
     {if(0 <= a[1] && 0 <= b[1])
       {if(0 !== a[1] && 0 !== b[1])
         {var
           size_a=num_digits_big_int(a),
           size_b=num_digits_big_int(b),
           size_res=caml_call2(Stdlib[16],size_a,size_b),
           res=create_nat(size_res);
          blit_nat(res,0,a[2],0,size_res);
          var _bC_=size_res - 1 | 0,_bB_=0;
          if(! (_bC_ < 0))
           {var i=_bB_;
            for(;;)
             {land_digit_nat(res,i,b[2],i);
              var _bD_=i + 1 | 0;
              if(_bC_ !== i){var i=_bD_;continue}
              break}}
          return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
        return zero_big_int}
      return caml_call1(Stdlib[1],cst_and_big_int)}
    function or_big_int(a,b)
     {if(0 <= a[1] && 0 <= b[1])
       {if(0 === a[1])return b;
        if(0 === b[1])return a;
        var
         size_a=num_digits_big_int(a),
         size_b=num_digits_big_int(b),
         size_res=caml_call2(Stdlib[17],size_a,size_b),
         res=create_nat(size_res),
         or_aux=
          function(a,b,size_b)
           {blit_nat(res,0,a[2],0,size_res);
            var _bz_=size_b - 1 | 0,_by_=0;
            if(! (_bz_ < 0))
             {var i=_by_;
              for(;;)
               {runtime.lor_digit_nat(res,i,b[2],i);
                var _bA_=i + 1 | 0;
                if(_bz_ !== i){var i=_bA_;continue}
                break}}
            return 0};
        if(size_b <= size_a)or_aux(a,b,size_b);else or_aux(b,a,size_a);
        return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
      return caml_call1(Stdlib[1],cst_or_big_int)}
    function xor_big_int(a,b)
     {if(0 <= a[1] && 0 <= b[1])
       {if(0 === a[1])return b;
        if(0 === b[1])return a;
        var
         size_a=num_digits_big_int(a),
         size_b=num_digits_big_int(b),
         size_res=caml_call2(Stdlib[17],size_a,size_b),
         res=create_nat(size_res),
         xor_aux=
          function(a,b,size_b)
           {blit_nat(res,0,a[2],0,size_res);
            var _bw_=size_b - 1 | 0,_bv_=0;
            if(! (_bw_ < 0))
             {var i=_bv_;
              for(;;)
               {runtime.lxor_digit_nat(res,i,b[2],i);
                var _bx_=i + 1 | 0;
                if(_bw_ !== i){var i=_bx_;continue}
                break}}
            return 0};
        if(size_b <= size_a)xor_aux(a,b,size_b);else xor_aux(b,a,size_a);
        return is_zero_nat(res,0,size_res)?zero_big_int:[0,1,res]}
      return caml_call1(Stdlib[1],cst_xor_big_int)}
    function round_big_int_to_float(x,exact)
     {var n=num_bits_big_int(x),_bt_=55 <= n?1:0,_bu_=_bt_?n <= 63?1:0:_bt_;
      if(_bu_)
       {var m=int64_of_big_int(x),m$0=exact?m:caml_int64_or(m,_k_);
        return caml_int64_to_float(m$0)}
      throw [0,Assert_failure,_l_]}
    function float_of_big_int(x)
     {var n=num_bits_big_int(x);
      if(63 < n)
       {var
         n$0=n - 55 | 0,
         top=shift_right_big_int(x,n$0),
         exact=eq_big_int(x,shift_left_big_int(top,n$0));
        return caml_ldexp_float(round_big_int_to_float(top,exact),n$0)}
      return caml_int64_to_float(int64_of_big_int(x))}
    var
     Big_int=
      [0,
       zero_big_int,
       unit_big_int,
       minus_big_int,
       abs_big_int,
       add_big_int,
       succ_big_int,
       add_int_big_int,
       sub_big_int,
       pred_big_int,
       mult_big_int,
       mult_int_big_int,
       square_big_int,
       sqrt_big_int,
       quomod_big_int,
       div_big_int,
       mod_big_int,
       gcd_big_int,
       power_int_positive_int,
       power_big_int_positive_int,
       power_int_positive_big_int,
       power_big_int_positive_big_int,
       sign_big_int,
       compare_big_int,
       eq_big_int,
       le_big_int,
       ge_big_int,
       lt_big_int,
       gt_big_int,
       max_big_int,
       min_big_int,
       num_digits_big_int,
       num_bits_big_int,
       string_of_big_int,
       big_int_of_string,
       big_int_of_string_opt,
       big_int_of_int,
       is_int_big_int,
       int_of_big_int,
       int_of_big_int_opt,
       big_int_of_int32,
       big_int_of_nativeint,
       big_int_of_int64,
       int32_of_big_int,
       int32_of_big_int_opt,
       nativeint_of_big_int,
       nativeint_of_big_int_opt,
       int64_of_big_int,
       int64_of_big_int_opt,
       float_of_big_int,
       and_big_int,
       or_big_int,
       xor_big_int,
       shift_left_big_int,
       shift_right_big_int,
       shift_right_towards_zero_big_i,
       extract_big_int,
       nat_of_big_int,
       big_int_of_nat,
       base_power_big_int,
       sys_big_int_of_string,
       round_futur_last_digit,
       approx_big_int,
       round_big_int_to_float];
    caml_register_global(130,Big_int,"Big_int");
    var
     error_when_null_denominator_fl=[0,1],
     normalize_ratio_flag=[0,0],
     normalize_ratio_when_printing_=[0,1],
     floating_precision=[0,12],
     approx_printing_flag=[0,0],
     Arith_flags=
      [0,
       error_when_null_denominator_fl,
       normalize_ratio_flag,
       normalize_ratio_when_printing_,
       floating_precision,
       approx_printing_flag];
    caml_register_global(131,Arith_flags,"Arith_flags");
    function failwith_zero(name)
     {if(0 === caml_ml_string_length(name))
       var s$0=s;
      else
       var
        _bs_=caml_call2(Stdlib[28],cst$2,s),
        s$0=caml_call2(Stdlib[28],name,_bs_);
      return caml_call1(Stdlib[2],s$0)}
    function numerator_ratio(r){return r[1]}
    function denominator_ratio(r){return r[2]}
    function null_denominator(r){return 0 === r[2][1]?1:0}
    function verify_null_denominator(r)
     {return 0 === r[2][1]
              ?error_when_null_denominator_fl[1]?failwith_zero(cst$3):1
              :0}
    function sign_ratio(r){return r[1][1]}
    function normalize_ratio(r)
     {if(r[3])return r;
      if(verify_null_denominator(r))
       {r[1] = big_int_of_int(r[1][1]);r[3] = 1;return r}
      var p=gcd_big_int(r[1],r[2]);
      return eq_big_int(p,unit_big_int)
              ?(r[3] = 1,r)
              :(r[1]
                =
                div_big_int(r[1],p),
                r[2]
                =
                div_big_int(r[2],p),
                r[3]
                =
                1,
                r)}
    function cautious_normalize_ratio(r)
     {return normalize_ratio_flag[1]?normalize_ratio(r):r}
    function cautious_normalize_ratio_when_(r)
     {return normalize_ratio_when_printing_[1]?normalize_ratio(r):r}
    function create_ratio(bi1,bi2)
     {var match=bi2[1];
      if(-1 === match)
       {var _br_=minus_big_int(bi2);
        return cautious_normalize_ratio([0,minus_big_int(bi1),_br_,0])}
      return 0 === match
              ?error_when_null_denominator_fl[1]
                ?failwith_zero(cst_create_ratio)
                :cautious_normalize_ratio([0,bi1,bi2,0])
              :cautious_normalize_ratio([0,bi1,bi2,0])}
    function create_normalized_ratio(bi1,bi2)
     {var match=bi2[1];
      if(-1 === match)
       {var _bq_=minus_big_int(bi2);return [0,minus_big_int(bi1),_bq_,1]}
      return 0 === match
              ?error_when_null_denominator_fl[1]
                ?failwith_zero(cst_create_normalized_ratio)
                :[0,bi1,bi2,1]
              :[0,bi1,bi2,1]}
    function is_normalized_ratio(r){return r[3]}
    function report_sign_ratio(r,bi)
     {return -1 === sign_ratio(r)?minus_big_int(bi):bi}
    function abs_ratio(r)
     {var _bo_=r[3],_bp_=r[2];return [0,abs_big_int(r[1]),_bp_,_bo_]}
    function is_integer_ratio(r)
     {return eq_big_int(normalize_ratio(r)[2],unit_big_int)}
    function add_ratio(r1,r2)
     {if(normalize_ratio_flag[1])
       {var
         _bh_=normalize_ratio(r2)[2],
         p=gcd_big_int(normalize_ratio(r1)[2],_bh_);
        if(eq_big_int(p,unit_big_int))
         {var _bi_=mult_big_int(r1[2],r2[2]),_bj_=mult_big_int(r2[1],r1[2]);
          return [0,add_big_int(mult_big_int(r1[1],r2[2]),_bj_),_bi_,1]}
        var
         d1=div_big_int(r1[2],p),
         d2=div_big_int(r2[2],p),
         _bk_=mult_big_int(d1,r2[1]),
         n=add_big_int(mult_big_int(r1[1],d2),_bk_),
         p$0=gcd_big_int(n,p),
         _bl_=mult_big_int(d1,div_big_int(r2[2],p$0));
        return [0,div_big_int(n,p$0),_bl_,1]}
      var _bm_=mult_big_int(r1[2],r2[2]),_bn_=mult_big_int(r1[2],r2[1]);
      return [0,add_big_int(mult_big_int(r1[1],r2[2]),_bn_),_bm_,0]}
    function minus_ratio(r)
     {var _bf_=r[3],_bg_=r[2];return [0,minus_big_int(r[1]),_bg_,_bf_]}
    function add_int_ratio(i,r)
     {cautious_normalize_ratio(r);
      var _bc_=r[3],_bd_=r[2],_be_=r[1];
      return [0,add_big_int(mult_int_big_int(i,r[2]),_be_),_bd_,_bc_]}
    function add_big_int_ratio(bi,r)
     {cautious_normalize_ratio(r);
      var _a$_=r[3],_ba_=r[2],_bb_=r[1];
      return [0,add_big_int(mult_big_int(bi,r[2]),_bb_),_ba_,_a$_]}
    function sub_ratio(r1,r2){return add_ratio(r1,minus_ratio(r2))}
    function mult_ratio(r1,r2)
     {if(normalize_ratio_flag[1])
       {var
         _a6_=normalize_ratio(r2)[2],
         p1=gcd_big_int(normalize_ratio(r1)[1],_a6_),
         p2=gcd_big_int(r2[1],r1[2]);
        if(eq_big_int(p1,unit_big_int))
         var _a8_=r2[2],_a7_=r1[1];
        else
         var d2=div_big_int(r2[2],p1),_a8_=d2,_a7_=div_big_int(r1[1],p1);
        if(eq_big_int(p2,unit_big_int))
         var d1=r1[2],n2=r2[1];
        else
         var
          d1$0=div_big_int(r1[2],p2),
          n2$0=div_big_int(r2[1],p2),
          d1=d1$0,
          n2=n2$0;
        var _a9_=mult_big_int(d1,_a8_);
        return [0,mult_big_int(_a7_,n2),_a9_,1]}
      var _a__=mult_big_int(r1[2],r2[2]);
      return [0,mult_big_int(r1[1],r2[1]),_a__,0]}
    function mult_int_ratio(i,r)
     {if(normalize_ratio_flag[1])
       {var _a0_=big_int_of_int(i),p=gcd_big_int(normalize_ratio(r)[2],_a0_);
        if(eq_big_int(p,unit_big_int))
         {var _a1_=r[2],_a2_=r[1];
          return [0,mult_big_int(big_int_of_int(i),_a2_),_a1_,1]}
        var _a3_=div_big_int(r[2],p),_a4_=r[1];
        return [0,mult_big_int(div_big_int(big_int_of_int(i),p),_a4_),_a3_,1]}
      var _a5_=r[2];
      return [0,mult_int_big_int(i,r[1]),_a5_,0]}
    function mult_big_int_ratio(bi,r)
     {if(normalize_ratio_flag[1])
       {var p=gcd_big_int(normalize_ratio(r)[2],bi);
        if(eq_big_int(p,unit_big_int))
         {var _aW_=r[2];return [0,mult_big_int(bi,r[1]),_aW_,1]}
        var _aX_=div_big_int(r[2],p),_aY_=r[1];
        return [0,mult_big_int(div_big_int(bi,p),_aY_),_aX_,1]}
      var _aZ_=r[2];
      return [0,mult_big_int(bi,r[1]),_aZ_,0]}
    function square_ratio(r)
     {cautious_normalize_ratio(r);
      var _aU_=r[3],_aV_=square_big_int(r[2]);
      return [0,square_big_int(r[1]),_aV_,_aU_]}
    function inverse_ratio(r)
     {if(error_when_null_denominator_fl[1] && 0 === r[1][1])
       return failwith_zero(cst_inverse_ratio);
      var _aS_=r[3],_aT_=abs_big_int(r[1]);
      return [0,report_sign_ratio(r,r[2]),_aT_,_aS_]}
    function div_ratio(r1,r2){return mult_ratio(r1,inverse_ratio(r2))}
    function integer_ratio(r)
     {if(null_denominator(r))return failwith_zero(cst_integer_ratio);
      if(0 === sign_ratio(r))return zero_big_int;
      var _aR_=abs_big_int(r[2]);
      return report_sign_ratio(r,div_big_int(abs_big_int(r[1]),_aR_))}
    function floor_ratio(r)
     {verify_null_denominator(r);return div_big_int(r[1],r[2])}
    function round_ratio(r)
     {verify_null_denominator(r);
      var
       abs_num=abs_big_int(r[1]),
       bi=div_big_int(abs_num,r[2]),
       _aQ_=r[2],
       bi$0=
        -1
         ===
         sub_big_int
           (mult_int_big_int(2,sub_big_int(abs_num,mult_big_int(r[2],bi))),
            _aQ_)
          [1]
         ?bi
         :succ_big_int(bi);
      return report_sign_ratio(r,bi$0)}
    function ceiling_ratio(r)
     {return is_integer_ratio(r)?r[1]:succ_big_int(floor_ratio(r))}
    function eq_ratio(r1,r2)
     {normalize_ratio(r1);
      normalize_ratio(r2);
      var _aP_=eq_big_int(r1[1],r2[1]);
      return _aP_?eq_big_int(r1[2],r2[2]):_aP_}
    function compare_ratio(r1,r2)
     {if(verify_null_denominator(r1))
       {var sign_num_r1=r1[1][1];
        if(verify_null_denominator(r2))
         {var sign_num_r2=r2[1][1];
          if(1 === sign_num_r1 && -1 === sign_num_r2)return 1;
          if(-1 === sign_num_r1 && 1 === sign_num_r2)return -1;
          return 0}
        return sign_num_r1}
      if(verify_null_denominator(r2))return - r2[1][1] | 0;
      var match=compare_int(r1[1][1],r2[1][1]),switcher=match + 1 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher){case 0:return -1;case 1:break;default:return 1}
      if(eq_big_int(r1[2],r2[2]))return compare_big_int(r1[1],r2[1]);
      var _aO_=mult_big_int(r1[2],r2[1]);
      return compare_big_int(mult_big_int(r1[1],r2[2]),_aO_)}
    function lt_ratio(r1,r2){return compare_ratio(r1,r2) < 0?1:0}
    function le_ratio(r1,r2){return compare_ratio(r1,r2) <= 0?1:0}
    function gt_ratio(r1,r2){return 0 < compare_ratio(r1,r2)?1:0}
    function ge_ratio(r1,r2){return 0 <= compare_ratio(r1,r2)?1:0}
    function max_ratio(r1,r2){return lt_ratio(r1,r2)?r2:r1}
    function min_ratio(r1,r2){return gt_ratio(r1,r2)?r2:r1}
    function eq_big_int_ratio(bi,r)
     {var _aN_=is_integer_ratio(r);return _aN_?eq_big_int(bi,r[1]):_aN_}
    function compare_big_int_ratio(bi,r)
     {normalize_ratio(r);
      if(verify_null_denominator(r))return - r[1][1] | 0;
      var _aM_=r[1];
      return compare_big_int(mult_big_int(bi,r[2]),_aM_)}
    function lt_big_int_ratio(bi,r)
     {return compare_big_int_ratio(bi,r) < 0?1:0}
    function le_big_int_ratio(bi,r)
     {return compare_big_int_ratio(bi,r) <= 0?1:0}
    function gt_big_int_ratio(bi,r)
     {return 0 < compare_big_int_ratio(bi,r)?1:0}
    function ge_big_int_ratio(bi,r)
     {return 0 <= compare_big_int_ratio(bi,r)?1:0}
    function int_of_ratio(r)
     {if(is_integer_ratio(r) && is_int_big_int(r[1]))
       return int_of_big_int(r[1]);
      return caml_call1(Stdlib[2],cst_integer_argument_required)}
    function ratio_of_int(i){return [0,big_int_of_int(i),unit_big_int,1]}
    function ratio_of_nat(nat){return [0,big_int_of_nat(nat),unit_big_int,1]}
    function nat_of_ratio(r)
     {normalize_ratio(r);
      return is_integer_ratio(r)
              ?-1 < r[1][1]
                ?nat_of_big_int(r[1])
                :caml_call1(Stdlib[2],cst_nat_of_ratio)
              :caml_call1(Stdlib[2],cst_nat_of_ratio$0)}
    function ratio_of_big_int(bi){return [0,bi,unit_big_int,1]}
    function big_int_of_ratio(r)
     {normalize_ratio(r);
      return is_integer_ratio(r)
              ?r[1]
              :caml_call1(Stdlib[2],cst_big_int_of_ratio)}
    function div_int_ratio(i,r)
     {verify_null_denominator(r);return mult_int_ratio(i,inverse_ratio(r))}
    function div_ratio_int(r,i){return div_ratio(r,ratio_of_int(i))}
    function div_big_int_ratio(bi,r)
     {verify_null_denominator(r);
      return mult_big_int_ratio(bi,inverse_ratio(r))}
    function div_ratio_big_int(r,bi){return div_ratio(r,ratio_of_big_int(bi))}
    function approx_ratio_fix(n,r)
     {if(null_denominator(r))return failwith_zero(cst_approx_ratio_fix);
      var sign_r=sign_ratio(r);
      if(0 === sign_r)return cst_0;
      if(0 <= n)
       {var
         _aG_=r[2],
         s1=
          string_of_nat
           (nat_of_big_int
             (div_big_int
               (base_power_big_int(10,n + 1 | 0,abs_big_int(r[1])),_aG_))),
         s1$0=caml_call1(Stdlib_bytes[5],s1);
        if(round_futur_last_digit(s1$0,0,caml_ml_bytes_length(s1$0)))
         var
          _aH_=caml_call1(Stdlib_bytes[5],cst_1$0),
          s2=caml_call2(Stdlib_bytes[14],_aH_,s1$0);
        else
         var s2=s1$0;
        var l2=caml_ml_bytes_length(s2) - 1 | 0;
        if(n < l2)
         {var
           s=caml_call2(Stdlib_bytes[1],l2 + 2 | 0,48),
           _aI_=-1 === sign_r?45:43;
          caml_bytes_set(s,0,_aI_);
          caml_call5(Stdlib_bytes[11],s2,0,s,1,l2 - n | 0);
          caml_bytes_set(s,(l2 - n | 0) + 1 | 0,46);
          caml_call5(Stdlib_bytes[11],s2,l2 - n | 0,s,(l2 - n | 0) + 2 | 0,n);
          return caml_call1(Stdlib_bytes[42],s)}
        var
         s$0=caml_call2(Stdlib_bytes[1],n + 3 | 0,48),
         _aJ_=-1 === sign_r?45:43;
        caml_bytes_set(s$0,0,_aJ_);
        caml_bytes_set(s$0,2,46);
        caml_call5(Stdlib_bytes[11],s2,0,s$0,(n + 3 | 0) - l2 | 0,l2);
        return caml_call1(Stdlib_bytes[42],s$0)}
      var
       _aK_=base_power_big_int(10,- n | 0,r[2]),
       s$1=string_of_big_int(div_big_int(abs_big_int(r[1]),_aK_)),
       len=caml_ml_string_length(s$1) + 1 | 0,
       s$2=caml_call2(Stdlib_bytes[1],len,48),
       _aL_=-1 === sign_r?45:43;
      caml_bytes_set(s$2,0,_aL_);
      caml_call5(Stdlib_string[6],s$1,0,s$2,1,len - 1 | 0);
      return caml_call1(Stdlib_bytes[42],s$2)}
    function num_decimal_digits_int(n)
     {return caml_ml_string_length(caml_call1(Stdlib[33],n))}
    function approx_ratio_exp(n,r)
     {if(null_denominator(r))return failwith_zero(cst_approx_ratio_exp);
      if(0 < n)
       {var sign_r=sign_ratio(r),i$4=[0,n + 3 | 0];
        if(0 === sign_r)
         {var _ar_=[0,cst_0$0,[0,caml_call2(Stdlib_string[1],n,48),_m_]];
          return caml_call2(Stdlib_string[7],cst$4,_ar_)}
        var r$0=abs_ratio(r);
        cautious_normalize_ratio(r$0);
        if(null_denominator(r$0))
         var msd=failwith_zero(cst_msd_ratio);
        else
         if(0 === r$0[1][1])
          var msd=0;
         else
          {var
            s1=string_of_big_int(r$0[1]),
            s=string_of_big_int(r$0[2]),
            size_num=caml_ml_string_length(s1),
            lim=caml_ml_string_length(s),
            i$3=caml_call2(Stdlib[16],size_num,lim),
            m=size_num - lim | 0,
            i=0;
           for(;;)
            {if(i$3 <= i)
              var cmp=0;
             else
              {var
                c1=caml_string_get(s1,i),
                c2=caml_string_get(s,i),
                c=compare_int(c1,c2);
               if(0 === c){var i$0=i + 1 | 0,i=i$0;continue}
               var cmp=c}
             var switcher=cmp + 1 | 0,switch$0=0;
             if(2 < switcher >>> 0)
              switch$0 = 1;
             else
              switch(switcher)
               {case 0:var msd=m - 1 | 0;break;
                case 1:switch$0 = 1;break;
                default:var msd=m}
             if(switch$0)
              if(0 <= m)
               var msd=m;
              else
               {var i$1=i$3;
                for(;;)
                 {var _ao_=lim <= i$1?1:0;
                  if(_ao_)
                   var _ap_=_ao_;
                  else
                   {var _aq_=48 === caml_string_get(s,i$1)?1:0;
                    if(_aq_){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
                    var _ap_=_aq_}
                  var msd=_ap_?m:m - 1 | 0;
                  break}}
             break}}
        var k=n - msd | 0;
        if(0 <= k)
         var
          _as_=r[2],
          _at_=div_big_int(base_power_big_int(10,k,abs_big_int(r[1])),_as_);
        else
         var
          _aF_=base_power_big_int(10,- k | 0,r[2]),
          _at_=div_big_int(abs_big_int(r[1]),_aF_);
        var
         nat=nat_of_big_int(_at_),
         s$0=string_of_nat(nat),
         s$1=caml_call1(Stdlib_bytes[5],s$0);
        if(round_futur_last_digit(s$1,0,caml_ml_bytes_length(s$1)))
         {var
           m$0=num_decimal_digits_int(msd + 1 | 0),
           str=caml_call2(Stdlib_bytes[1],(n + m$0 | 0) + 4 | 0,48),
           _au_=3,
           _av_=0,
           _aw_=0,
           _ax_=-1 === sign_r?cst_1$1:cst_1$2;
          caml_call5(Stdlib_string[6],_ax_,_aw_,str,_av_,_au_);
          caml_bytes_set(str,i$4[1],101);
          i$4[1]++;
          if(0 === m$0)
           caml_bytes_set(str,i$4[1],48);
          else
           {var _ay_=i$4[1],_az_=caml_call1(Stdlib[33],msd + 1 | 0);
            caml_call5(Stdlib_string[6],_az_,0,str,_ay_,m$0)}
          return caml_call1(Stdlib_bytes[42],str)}
        var
         m$1=num_decimal_digits_int(msd + 1 | 0),
         p=n + 3 | 0,
         str$0=caml_call2(Stdlib_bytes[1],(m$1 + p | 0) + 1 | 0,48),
         _aA_=3,
         _aB_=0,
         _aC_=0,
         _aD_=-1 === sign_r?cst_0$1:cst_0$2;
        caml_call5(Stdlib_string[6],_aD_,_aC_,str$0,_aB_,_aA_);
        caml_call5(Stdlib_bytes[11],s$1,0,str$0,3,n);
        caml_bytes_set(str$0,p,101);
        if(0 === m$1)
         caml_bytes_set(str$0,p + 1 | 0,48);
        else
         {var _aE_=caml_call1(Stdlib[33],msd + 1 | 0);
          caml_call5(Stdlib_string[6],_aE_,0,str$0,p + 1 | 0,m$1)}
        return caml_call1(Stdlib_bytes[42],str$0)}
      return caml_call1(Stdlib[1],cst_approx_ratio_exp$0)}
    function float_of_rational_string(r)
     {var s=approx_ratio_exp(floating_precision[1],r);
      return 43 === caml_string_get(s,0)
              ?caml_call3
                (Stdlib_string[4],s,1,caml_ml_string_length(s) - 1 | 0)
              :s}
    function string_of_ratio(r)
     {cautious_normalize_ratio_when_(r);
      if(approx_printing_flag[1])return float_of_rational_string(r);
      var
       _al_=string_of_big_int(r[2]),
       _am_=caml_call2(Stdlib[28],cst$5,_al_),
       _an_=string_of_big_int(r[1]);
      return caml_call2(Stdlib[28],_an_,_am_)}
    function ratio_of_string(s)
     {try
       {var
         n=caml_call2(Stdlib_string[14],s,47),
         _ai_=
          sys_big_int_of_string
           (s,n + 1 | 0,(caml_ml_string_length(s) - n | 0) - 1 | 0),
         _aj_=create_ratio(sys_big_int_of_string(s,0,n),_ai_);
        return _aj_}
      catch(_ak_)
       {_ak_ = caml_wrap_exception(_ak_);
        if(_ak_ === Stdlib[8])return [0,big_int_of_string(s),unit_big_int,1];
        throw _ak_}}
    function float_of_ratio(r)
     {var p=r[1],q=r[2];
      if(0 === q[1])
       {var match=p[1],switcher=match + 1 | 0;
        if(2 < switcher >>> 0)throw [0,Assert_failure,_n_];
        switch(switcher)
         {case 0:return Stdlib[23];
          case 1:return Stdlib[24];
          default:return Stdlib[22]}}
      if(0 === p[1])return 0.;
      var np=num_bits_big_int(p),nq=num_bits_big_int(q);
      if(! (53 < np) && ! (53 < nq))
       {var _ah_=caml_int64_to_float(int64_of_big_int(q));
        return caml_int64_to_float(int64_of_big_int(p)) / _ah_}
      var ap=abs_big_int(p),n=55 - (np - nq | 0) | 0;
      if(0 <= n)
       var q$0=q,p$0=shift_left_big_int(ap,n);
      else
       var q$1=shift_left_big_int(q,- n | 0),q$0=q$1,p$0=ap;
      var
       match$0=quomod_big_int(p$0,q$0),
       rem=match$0[2],
       quo=match$0[1],
       f=round_big_int_to_float(quo,0 === rem[1]?1:0),
       f$0=caml_ldexp_float(f,- n | 0);
      return 0 <= p[1]?f$0:- f$0}
    function power_ratio_positive_int(r,n)
     {var _ag_=power_big_int_positive_int(r[2],n);
      return create_ratio(power_big_int_positive_int(r[1],n),_ag_)}
    function power_ratio_positive_big_int(r,bi)
     {var _af_=power_big_int_positive_big_int(r[2],bi);
      return create_ratio(power_big_int_positive_big_int(r[1],bi),_af_)}
    var
     Ratio=
      [0,
       null_denominator,
       numerator_ratio,
       denominator_ratio,
       sign_ratio,
       normalize_ratio,
       cautious_normalize_ratio,
       cautious_normalize_ratio_when_,
       create_ratio,
       create_normalized_ratio,
       is_normalized_ratio,
       report_sign_ratio,
       abs_ratio,
       is_integer_ratio,
       add_ratio,
       minus_ratio,
       add_int_ratio,
       add_big_int_ratio,
       sub_ratio,
       mult_ratio,
       mult_int_ratio,
       mult_big_int_ratio,
       square_ratio,
       inverse_ratio,
       div_ratio,
       integer_ratio,
       floor_ratio,
       round_ratio,
       ceiling_ratio,
       eq_ratio,
       compare_ratio,
       lt_ratio,
       le_ratio,
       gt_ratio,
       ge_ratio,
       max_ratio,
       min_ratio,
       eq_big_int_ratio,
       compare_big_int_ratio,
       lt_big_int_ratio,
       le_big_int_ratio,
       gt_big_int_ratio,
       ge_big_int_ratio,
       int_of_ratio,
       ratio_of_int,
       ratio_of_nat,
       nat_of_ratio,
       ratio_of_big_int,
       big_int_of_ratio,
       div_int_ratio,
       div_ratio_int,
       div_big_int_ratio,
       div_ratio_big_int,
       approx_ratio_fix,
       approx_ratio_exp,
       float_of_rational_string,
       string_of_ratio,
       ratio_of_string,
       float_of_ratio,
       power_ratio_positive_int,
       power_ratio_positive_big_int];
    caml_register_global(132,Ratio,"Ratio");
    var
     biggest_INT=big_int_of_int(biggest_int),
     least_INT=big_int_of_int(least_int);
    function num_of_big_int(bi)
     {if(le_big_int(bi,biggest_INT) && ge_big_int(bi,least_INT))
       return [0,int_of_big_int(bi)];
      return [1,bi]}
    function num_of_ratio(r)
     {normalize_ratio(r);
      return is_integer_ratio(r)
              ?is_int_big_int(r[1])?[0,int_of_big_int(r[1])]:[1,r[1]]
              :[2,r]}
    function add_num(a,match)
     {switch(a[0])
       {case 0:
         var _ab_=a[1];
         switch(match[0])
          {case 0:
            var int2=match[1],r=_ab_ + int2 | 0;
            if(0 <= (_ab_ ^ int2 | _ab_ ^ r ^ -1))
             {var _ac_=big_int_of_int(int2);
              return [1,add_big_int(big_int_of_int(_ab_),_ac_)]}
            return [0,r];
           case 1:
            var bi=match[1];return num_of_big_int(add_int_big_int(_ab_,bi));
           default:var r$0=match[1];return [2,add_int_ratio(_ab_,r$0)]}
        case 1:
         var _ad_=a[1];
         switch(match[0])
          {case 0:
            var i=match[1];return num_of_big_int(add_int_big_int(i,_ad_));
           case 1:
            var bi2=match[1];return num_of_big_int(add_big_int(_ad_,bi2));
           default:var r$1=match[1];return [2,add_big_int_ratio(_ad_,r$1)]}
        default:
         var _ae_=a[1];
         switch(match[0])
          {case 0:var i$0=match[1];return [2,add_int_ratio(i$0,_ae_)];
           case 1:var bi$0=match[1];return [2,add_big_int_ratio(bi$0,_ae_)];
           default:var r2=match[1];return num_of_ratio(add_ratio(_ae_,r2))}}}
    function minus_num(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === monster_int
                 ?[1,minus_big_int(big_int_of_int(i))]
                 :[0,- i | 0];
        case 1:var bi=param[1];return [1,minus_big_int(bi)];
        default:var r=param[1];return [2,minus_ratio(r)]}}
    function sub_num(n1,n2){return add_num(n1,minus_num(n2))}
    function mult_num(a,match)
     {switch(a[0])
       {case 0:
         var _Y_=a[1];
         switch(match[0])
          {case 0:
            var int2=match[1],_Z_=num_bits_int(int2);
            if((num_bits_int(_Y_) + _Z_ | 0) < length_of_int)
             return [0,caml_mul(_Y_,int2)];
            var ___=big_int_of_int(int2);
            return num_of_big_int(mult_big_int(big_int_of_int(_Y_),___));
           case 1:
            var bi=match[1];return num_of_big_int(mult_int_big_int(_Y_,bi));
           default:var r=match[1];return num_of_ratio(mult_int_ratio(_Y_,r))}
        case 1:
         var _$_=a[1];
         switch(match[0])
          {case 0:
            var i=match[1];return num_of_big_int(mult_int_big_int(i,_$_));
           case 1:
            var bi2=match[1];return num_of_big_int(mult_big_int(_$_,bi2));
           default:
            var r$0=match[1];return num_of_ratio(mult_big_int_ratio(_$_,r$0))}
        default:
         var _aa_=a[1];
         switch(match[0])
          {case 0:
            var i$0=match[1];return num_of_ratio(mult_int_ratio(i$0,_aa_));
           case 1:
            var bi$0=match[1];
            return num_of_ratio(mult_big_int_ratio(bi$0,_aa_));
           default:var r2=match[1];return num_of_ratio(mult_ratio(_aa_,r2))}}}
    function square_num(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return (2 * num_bits_int(i) | 0) < length_of_int
                 ?[0,caml_mul(i,i)]
                 :num_of_big_int(square_big_int(big_int_of_int(i)));
        case 1:var bi=param[1];return [1,square_big_int(bi)];
        default:var r=param[1];return [2,square_ratio(r)]}}
    function div_num(n1,n2)
     {switch(n1[0])
       {case 0:
         var i1=n1[1];
         switch(n2[0])
          {case 0:
            var i2=n2[1],_X_=big_int_of_int(i2);
            return num_of_ratio(create_ratio(big_int_of_int(i1),_X_));
           case 1:
            var bi2=n2[1];
            return num_of_ratio(create_ratio(big_int_of_int(i1),bi2));
           default:var r2=n2[1];return num_of_ratio(div_int_ratio(i1,r2))}
        case 1:
         var bi1=n1[1];
         switch(n2[0])
          {case 0:
            var i2$0=n2[1];
            return num_of_ratio(create_ratio(bi1,big_int_of_int(i2$0)));
           case 1:
            var bi2$0=n2[1];return num_of_ratio(create_ratio(bi1,bi2$0));
           default:
            var r2$0=n2[1];return num_of_ratio(div_big_int_ratio(bi1,r2$0))}
        default:
         var r1=n1[1];
         switch(n2[0])
          {case 0:var i2$1=n2[1];return num_of_ratio(div_ratio_int(r1,i2$1));
           case 1:
            var bi2$1=n2[1];return num_of_ratio(div_ratio_big_int(r1,bi2$1));
           default:var r2$1=n2[1];return num_of_ratio(div_ratio(r1,r2$1))}}}
    function floor_num(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return num_of_big_int(floor_ratio(r))}}
    function ratio_of_num(param)
     {switch(param[0])
       {case 0:var i=param[1];return ratio_of_int(i);
        case 1:var bi=param[1];return ratio_of_big_int(bi);
        default:var r=param[1];return r}}
    function quo_num(n1,n2)
     {switch(n1[0])
       {case 0:
         var _V_=n1[1];
         switch(n2[0])
          {case 0:
            var
             i2=n2[1],
             q=caml_div(_V_,i2),
             r=caml_mod(_V_,i2),
             q$0=0 <= r?q:0 < i2?q - 1 | 0:q + 1 | 0;
            return [0,q$0];
           case 1:
            var bi2=n2[1];
            return num_of_big_int(div_big_int(big_int_of_int(_V_),bi2));
           default:
            var r2=n2[1];
            return num_of_big_int
                    (report_sign_ratio
                      (r2,floor_ratio(div_int_ratio(_V_,abs_ratio(r2)))))}
        case 1:
         var _W_=n1[1];
         switch(n2[0])
          {case 0:
            var i2$0=n2[1];
            return num_of_big_int(div_big_int(_W_,big_int_of_int(i2$0)));
           case 1:
            var bi2$0=n2[1];return num_of_big_int(div_big_int(_W_,bi2$0));
           default:
            var r2$0=n2[1];
            return num_of_big_int
                    (report_sign_ratio
                      (r2$0,floor_ratio(div_big_int_ratio(_W_,abs_ratio(r2$0)))))}
        default:
         var r1=n1[1],r2$1=ratio_of_num(n2);
         return num_of_big_int
                 (report_sign_ratio
                   (r2$1,floor_ratio(div_ratio(r1,abs_ratio(r2$1)))))}}
    function mod_num(n1,n2)
     {switch(n1[0])
       {case 0:
         var _T_=n1[1];
         switch(n2[0])
          {case 0:
            var
             i2=n2[1],
             r=caml_mod(_T_,i2),
             r$0=0 <= r?r:0 < i2?r + i2 | 0:r - i2 | 0;
            return [0,r$0];
           case 1:
            var bi2=n2[1];
            return num_of_big_int(mod_big_int(big_int_of_int(_T_),bi2))
           }
         break;
        case 1:
         var _U_=n1[1];
         switch(n2[0])
          {case 0:
            var i2$0=n2[1];
            return num_of_big_int(mod_big_int(_U_,big_int_of_int(i2$0)));
           case 1:
            var bi2$0=n2[1];return num_of_big_int(mod_big_int(_U_,bi2$0))
           }
         break
        }
      return sub_num(n1,mult_num(n2,quo_num(n1,n2)))}
    function power_num(n,match$5)
     {switch(match$5[0])
       {case 0:
         var i$1=match$5[1];
         switch(n[0])
          {case 0:
            var i=n[1],match=sign_int(i$1);
            return 0 === match
                    ?_o_
                    :1 === match
                      ?num_of_big_int(power_int_positive_int(i,i$1))
                      :[2,
                        create_normalized_ratio
                         (unit_big_int,power_int_positive_int(i,- i$1 | 0))];
           case 1:
            var bi=n[1],match$0=sign_int(i$1);
            return 0 === match$0
                    ?_p_
                    :1 === match$0
                      ?num_of_big_int(power_big_int_positive_int(bi,i$1))
                      :[2,
                        create_normalized_ratio
                         (unit_big_int,power_big_int_positive_int(bi,- i$1 | 0))];
           default:
            var r=n[1],match$1=sign_int(i$1);
            return 0 === match$1
                    ?_q_
                    :1 === match$1
                      ?[2,power_ratio_positive_int(r,i$1)]
                      :[2,power_ratio_positive_int(inverse_ratio(r),- i$1 | 0)]}
        case 1:
         var bi$1=match$5[1];
         switch(n[0])
          {case 0:
            var i$0=n[1],match$2=bi$1[1];
            return 0 === match$2
                    ?_r_
                    :1 === match$2
                      ?num_of_big_int(power_int_positive_big_int(i$0,bi$1))
                      :[2,
                        create_normalized_ratio
                         (unit_big_int,
                          power_int_positive_big_int(i$0,minus_big_int(bi$1)))];
           case 1:
            var bi$0=n[1],match$3=bi$1[1];
            return 0 === match$3
                    ?_s_
                    :1 === match$3
                      ?num_of_big_int(power_big_int_positive_big_int(bi$0,bi$1))
                      :[2,
                        create_normalized_ratio
                         (unit_big_int,
                          power_big_int_positive_big_int(bi$0,minus_big_int(bi$1)))];
           default:
            var r$0=n[1],match$4=bi$1[1];
            if(0 === match$4)return _t_;
            if(1 === match$4)
             return [2,power_ratio_positive_big_int(r$0,bi$1)];
            var _S_=minus_big_int(bi$1);
            return [2,power_ratio_positive_big_int(inverse_ratio(r$0),_S_)]}
        default:return caml_call1(Stdlib[1],cst_power_num)}}
    function is_integer_num(param)
     {switch(param[0])
       {case 0:return 1;
        case 1:return 1;
        default:var r=param[1];return is_integer_ratio(r)}}
    function integer_num(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return num_of_big_int(integer_ratio(r))}}
    function round_num(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return num_of_big_int(round_ratio(r))}}
    function ceiling_num(n)
     {switch(n[0])
       {case 0:return n;
        case 1:return n;
        default:var r=n[1];return num_of_big_int(ceiling_ratio(r))}}
    function sign_num(param)
     {switch(param[0])
       {case 0:var i=param[1];return sign_int(i);
        case 1:var bi=param[1];return bi[1];
        default:var r=param[1];return sign_ratio(r)}}
    function eq_num(a,match)
     {switch(a[0])
       {case 0:
         var _P_=a[1];
         switch(match[0])
          {case 0:var int2=match[1];return _P_ === int2?1:0;
           case 1:var bi=match[1];return eq_big_int(big_int_of_int(_P_),bi);
           default:
            var r=match[1];return eq_big_int_ratio(big_int_of_int(_P_),r)}
        case 1:
         var _Q_=a[1];
         switch(match[0])
          {case 0:var i=match[1];return eq_big_int(big_int_of_int(i),_Q_);
           case 1:var bi2=match[1];return eq_big_int(_Q_,bi2);
           default:var r$0=match[1];return eq_big_int_ratio(_Q_,r$0)}
        default:
         var _R_=a[1];
         switch(match[0])
          {case 0:
            var i$0=match[1];return eq_big_int_ratio(big_int_of_int(i$0),_R_);
           case 1:var bi$0=match[1];return eq_big_int_ratio(bi$0,_R_);
           default:var r2=match[1];return eq_ratio(_R_,r2)}}}
    function symbol(a,b){return 1 - eq_num(a,b)}
    function compare_num(a,match)
     {switch(a[0])
       {case 0:
         var _M_=a[1];
         switch(match[0])
          {case 0:var int2=match[1];return compare_int(_M_,int2);
           case 1:
            var bi=match[1];return compare_big_int(big_int_of_int(_M_),bi);
           default:
            var r=match[1];return compare_big_int_ratio(big_int_of_int(_M_),r)}
        case 1:
         var _N_=a[1];
         switch(match[0])
          {case 0:
            var i=match[1];return compare_big_int(_N_,big_int_of_int(i));
           case 1:var bi2=match[1];return compare_big_int(_N_,bi2);
           default:var r$0=match[1];return compare_big_int_ratio(_N_,r$0)}
        default:
         var _O_=a[1];
         switch(match[0])
          {case 0:
            var i$0=match[1];
            return - compare_big_int_ratio(big_int_of_int(i$0),_O_) | 0;
           case 1:
            var bi$0=match[1];return - compare_big_int_ratio(bi$0,_O_) | 0;
           default:var r2=match[1];return compare_ratio(_O_,r2)}}}
    function lt_num(num1,num2){return compare_num(num1,num2) < 0?1:0}
    function le_num(num1,num2){return compare_num(num1,num2) <= 0?1:0}
    function gt_num(num1,num2){return 0 < compare_num(num1,num2)?1:0}
    function ge_num(num1,num2){return 0 <= compare_num(num1,num2)?1:0}
    function max_num(num1,num2){return lt_num(num1,num2)?num2:num1}
    function min_num(num1,num2){return gt_num(num1,num2)?num2:num1}
    function int_of_num(param)
     {switch(param[0])
       {case 0:var i=param[1];return i;
        case 1:var bi=param[1];return int_of_big_int(bi);
        default:var r=param[1];return int_of_ratio(r)}}
    function int_of_num_opt(param)
     {switch(param[0])
       {case 0:var i=param[1];return [0,i];
        case 1:var bi=param[1];return int_of_big_int_opt(bi);
        default:
         var r=param[1];
         try
          {var _K_=[0,int_of_ratio(r)];return _K_}
         catch(_L_)
          {_L_ = caml_wrap_exception(_L_);
           if(_L_[1] === Stdlib[7])return 0;
           throw _L_}}}
    function num_of_int(i)
     {return i === monster_int?[1,big_int_of_int(i)]:[0,i]}
    function nat_of_num(param)
     {switch(param[0])
       {case 0:var i=param[1];return nat_of_int(i);
        case 1:var bi=param[1];return nat_of_big_int(bi);
        default:var r=param[1];return nat_of_ratio(r)}}
    function num_of_nat(nat)
     {return is_nat_int(nat,0,length_nat(nat))
              ?[0,nth_digit_nat(nat,0)]
              :[1,big_int_of_nat(nat)]}
    function nat_of_num_opt(x)
     {try
       {var _I_=[0,nat_of_num(x)];return _I_}
      catch(_J_)
       {_J_ = caml_wrap_exception(_J_);
        if(_J_[1] === Stdlib[7])return 0;
        throw _J_}}
    function big_int_of_num(param)
     {switch(param[0])
       {case 0:var i=param[1];return big_int_of_int(i);
        case 1:var bi=param[1];return bi;
        default:var r=param[1];return big_int_of_ratio(r)}}
    function big_int_of_num_opt(x)
     {try
       {var _G_=[0,big_int_of_num(x)];return _G_}
      catch(_H_)
       {_H_ = caml_wrap_exception(_H_);
        if(_H_[1] === Stdlib[7])return 0;
        throw _H_}}
    function string_of_num(n)
     {if(normalize_ratio_when_printing_[1])
       switch(n[0])
        {case 0:var i=n[1],_F_=[0,i];break;
         case 1:var bi=n[1],_F_=num_of_big_int(bi);break;
         default:var r=n[1],_F_=is_integer_ratio(r)?num_of_big_int(r[1]):[2,r]}
      else
       var _F_=n;
      switch(_F_[0])
       {case 0:var i$0=_F_[1];return caml_call1(Stdlib[33],i$0);
        case 1:
         var bi$0=_F_[1];
         return approx_printing_flag[1]
                 ?approx_big_int(floating_precision[1],bi$0)
                 :string_of_big_int(bi$0);
        default:var r$0=_F_[1];return string_of_ratio(r$0)}}
    function num_of_string(s)
     {try
       {var flag=normalize_ratio_flag[1];
        normalize_ratio_flag[1] = 1;
        var r=ratio_of_string(s);
        normalize_ratio_flag[1] = flag;
        var _D_=eq_big_int(r[2],unit_big_int)?num_of_big_int(r[1]):[2,r];
        return _D_}
      catch(_E_)
       {_E_ = caml_wrap_exception(_E_);
        if(_E_[1] === Stdlib[7])
         return caml_call1(Stdlib[2],cst_num_of_string);
        throw _E_}}
    function num_of_string_opt(s)
     {try
       {var _B_=[0,num_of_string(s)];return _B_}
      catch(_C_)
       {_C_ = caml_wrap_exception(_C_);
        if(_C_[1] === Stdlib[7])return 0;
        throw _C_}}
    function float_of_num(param)
     {switch(param[0])
       {case 0:var i=param[1];return i;
        case 1:var bi=param[1];return float_of_big_int(bi);
        default:var r=param[1];return float_of_ratio(r)}}
    function succ_num(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === biggest_int
                 ?[1,succ_big_int(big_int_of_int(i))]
                 :[0,i + 1 | 0];
        case 1:var bi=param[1];return num_of_big_int(succ_big_int(bi));
        default:var r=param[1];return [2,add_int_ratio(1,r)]}}
    function pred_num(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === monster_int
                 ?[1,pred_big_int(big_int_of_int(i))]
                 :[0,i - 1 | 0];
        case 1:var bi=param[1];return num_of_big_int(pred_big_int(bi));
        default:var r=param[1];return [2,add_int_ratio(-1,r)]}}
    function abs_num(param)
     {switch(param[0])
       {case 0:
         var i=param[1];
         return i === monster_int
                 ?[1,minus_big_int(big_int_of_int(i))]
                 :[0,caml_call1(Stdlib[18],i)];
        case 1:var bi=param[1];return [1,abs_big_int(bi)];
        default:var r=param[1];return [2,abs_ratio(r)]}}
    function approx_num_fix(n,num)
     {return approx_ratio_fix(n,ratio_of_num(num))}
    function approx_num_exp(n,num)
     {return approx_ratio_exp(n,ratio_of_num(num))}
    function incr_num(r){r[1] = succ_num(r[1]);return 0}
    function decr_num(r){r[1] = pred_num(r[1]);return 0}
    var
     Num=
      [0,
       add_num,
       add_num,
       minus_num,
       sub_num,
       sub_num,
       mult_num,
       mult_num,
       square_num,
       div_num,
       div_num,
       quo_num,
       mod_num,
       power_num,
       power_num,
       abs_num,
       succ_num,
       pred_num,
       incr_num,
       decr_num,
       is_integer_num,
       integer_num,
       floor_num,
       round_num,
       ceiling_num,
       sign_num,
       eq_num,
       lt_num,
       gt_num,
       le_num,
       ge_num,
       symbol,
       eq_num,
       lt_num,
       le_num,
       gt_num,
       ge_num,
       compare_num,
       max_num,
       min_num,
       string_of_num,
       approx_num_fix,
       approx_num_exp,
       num_of_string,
       num_of_string_opt,
       int_of_num,
       int_of_num_opt,
       num_of_int,
       nat_of_num,
       nat_of_num_opt,
       num_of_nat,
       num_of_big_int,
       big_int_of_num,
       big_int_of_num_opt,
       ratio_of_num,
       num_of_ratio,
       float_of_num];
    caml_register_global(133,Num,"Num");
    function get_error_when_null_denominato(param)
     {return error_when_null_denominator_fl[1]}
    function set_error_when_null_denominato(choice)
     {error_when_null_denominator_fl[1] = choice;return 0}
    function get_normalize_ratio(param){return normalize_ratio_flag[1]}
    function set_normalize_ratio(choice)
     {normalize_ratio_flag[1] = choice;return 0}
    function get_normalize_ratio_when_print(param)
     {return normalize_ratio_when_printing_[1]}
    function set_normalize_ratio_when_print(choice)
     {normalize_ratio_when_printing_[1] = choice;return 0}
    function get_floating_precision(param){return floating_precision[1]}
    function set_floating_precision(i){floating_precision[1] = i;return 0}
    function get_approx_printing(param){return approx_printing_flag[1]}
    function set_approx_printing(b){approx_printing_flag[1] = b;return 0}
    function arith_print_string(s)
     {caml_call1(Stdlib[42],s);return caml_call1(Stdlib[42],cst$6)}
    function arith_print_bool(param)
     {return param
              ?caml_call1(Stdlib[42],cst_ON)
              :caml_call1(Stdlib[42],cst_OFF)}
    function arith_status(param)
     {caml_call1(Stdlib[47],0);
      arith_print_string(cst_Normalization_during_compu);
      arith_print_bool(get_normalize_ratio(0));
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_returned_by_get_normalize_);
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_modifiable_with_set_normal);
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[47],0);
      arith_print_string(cst_Normalization_when_printin);
      arith_print_bool(get_normalize_ratio_when_print(0));
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_returned_by_get_normalize_$0);
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_modifiable_with_set_normal$0);
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[47],0);
      arith_print_string(cst_Floating_point_approximati);
      arith_print_bool(get_approx_printing(0));
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_returned_by_get_approx_pri);
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_modifiable_with_set_approx);
      caml_call1(Stdlib[47],0);
      if(get_approx_printing(0))
       {caml_call1(Stdlib[42],cst_Default_precision);
        var _A_=get_floating_precision(0);
        caml_call1(Stdlib[44],_A_);
        caml_call1(Stdlib[47],0);
        caml_call1(Stdlib[42],cst_returned_by_get_floating_p);
        caml_call1(Stdlib[47],0);
        caml_call1(Stdlib[42],cst_modifiable_with_set_floati);
        caml_call1(Stdlib[47],0);
        caml_call1(Stdlib[47],0)}
      else
       caml_call1(Stdlib[47],0);
      arith_print_string(cst_Error_when_a_rational_deno);
      arith_print_bool(get_error_when_null_denominato(0));
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_returned_by_get_error_when);
      caml_call1(Stdlib[47],0);
      caml_call1(Stdlib[42],cst_modifiable_with_set_error_);
      return caml_call1(Stdlib[47],0)}
    var
     Arith_status=
      [0,
       arith_status,
       get_error_when_null_denominato,
       set_error_when_null_denominato,
       get_normalize_ratio,
       set_normalize_ratio,
       get_normalize_ratio_when_print,
       set_normalize_ratio_when_print,
       get_approx_printing,
       set_approx_printing,
       get_floating_precision,
       set_floating_precision];
    caml_register_global(134,Arith_status,"Arith_status");
    return}
  (function(){return this}()));


//# 1 ".js/str/str.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_make_vect=runtime.caml_make_vect,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst=caml_string_of_jsbytes(""),
     cst$0=caml_string_of_jsbytes(""),
     cst$5=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_Str_matched_group=caml_string_of_jsbytes("Str.matched_group"),
     cst_Str_group_end=caml_string_of_jsbytes("Str.group_end"),
     cst_Str_group_beginning=caml_string_of_jsbytes("Str.group_beginning"),
     cst_group_not_closed_by=
      caml_string_of_jsbytes("\\( group not closed by \\)"),
     cst_class_not_closed_by=caml_string_of_jsbytes("[ class not closed by ]"),
     cst_spurious_in_regular_expres=
      caml_string_of_jsbytes("spurious \\) in regular expression"),
     cst_too_many_r_or_r_where_r_is=
      caml_string_of_jsbytes("too many r* or r+ where r is nullable"),
     cst$1=caml_string_of_jsbytes(""),
     cst$2=caml_string_of_jsbytes(""),
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib=global_data.Stdlib,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Assert_failure=global_data.Assert_failure,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_map=global_data.Stdlib__map,
     _b_=[0,92],
     _c_=[0,caml_string_of_jsbytes("str.ml"),520,10],
     _a_=[0,caml_string_of_jsbytes("str.ml"),213,11];
    function string_before(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function string_after(s,n)
     {return caml_call3(Stdlib_string[4],s,n,caml_ml_string_length(s) - n | 0)}
    function first_chars(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function last_chars(s,n)
     {return caml_call3(Stdlib_string[4],s,caml_ml_string_length(s) - n | 0,n)}
    var full=caml_call2(Stdlib_bytes[1],32,255);
    function make_empty(param){return caml_call2(Stdlib_bytes[1],32,0)}
    function add(s,i)
     {var _ao_=caml_bytes_get(s,i >>> 3 | 0) | 1 << (i & 7);
      return caml_bytes_set(s,i >>> 3 | 0,caml_call1(Stdlib_char[1],_ao_))}
    function singleton(c){var s=make_empty(0);add(s,c);return s}
    function complement(s)
     {var r=caml_create_bytes(32),i=0;
      for(;;)
       {var _am_=caml_bytes_get(s,i) ^ 255;
        caml_bytes_set(r,i,caml_call1(Stdlib_char[1],_am_));
        var _an_=i + 1 | 0;
        if(31 !== i){var i=_an_;continue}
        return r}}
    function union(s1,s2)
     {var r=caml_create_bytes(32),i=0;
      for(;;)
       {var _aj_=caml_bytes_get(s2,i),_ak_=caml_bytes_get(s1,i) | _aj_;
        caml_bytes_set(r,i,caml_call1(Stdlib_char[1],_ak_));
        var _al_=i + 1 | 0;
        if(31 !== i){var i=_al_;continue}
        return r}}
    function disjoint(s1,s2)
     {try
       {var i=0;
        for(;;)
         {var _ag_=caml_bytes_get(s2,i);
          if(0 !== (caml_bytes_get(s1,i) & _ag_))throw Stdlib[3];
          var _ah_=i + 1 | 0;
          if(31 !== i){var i=_ah_;continue}
          var _af_=1;
          return _af_}}
      catch(_ai_)
       {_ai_ = caml_wrap_exception(_ai_);
        if(_ai_ === Stdlib[3])return 0;
        throw _ai_}}
    function iter(fn,s)
     {var i=0;
      for(;;)
       {var c=caml_bytes_get(s,i);
        if(0 !== c)
         {var j=0;
          for(;;)
           {if(0 !== (c & 1 << j))
             caml_call1(fn,caml_call1(Stdlib_char[1],(i << 3) + j | 0));
            var _ae_=j + 1 | 0;
            if(7 !== j){var j=_ae_;continue}
            break}}
        var _ad_=i + 1 | 0;
        if(31 !== i){var i=_ad_;continue}
        return 0}}
    function fold_case(s)
     {var r=make_empty(0);
      iter
       (function(c)
         {add(r,caml_call1(Stdlib_char[3],c));
          return add(r,caml_call1(Stdlib_char[4],c))},
        s);
      return r}
    var
     op_CHAR=0,
     op_CHARNORM=1,
     op_STRING=2,
     op_STRINGNORM=3,
     op_CHARCLASS=4,
     op_BOL=5,
     op_EOL=6,
     op_WORDBOUNDARY=7,
     op_BEGGROUP=8,
     op_ENDGROUP=9,
     op_REFGROUP=10,
     op_ACCEPT=11,
     op_SIMPLEOPT=12,
     op_SIMPLESTAR=13,
     op_SIMPLEPLUS=14,
     op_GOTO=15,
     op_PUSHBACK=16,
     op_SETMARK=17,
     op_CHECKPROGRESS=18;
    function instr(opc,arg){return opc | arg << 8}
    function displ(dest,from){return (dest - from | 0) - 1 | 0}
    function is_nullable(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        switch(param$0){case 0:return 1;case 1:return 1;default:return 1}
       else
        switch(param$0[0])
         {case 0:return 0;
          case 1:var s=param$0[1];return caml_string_equal(s,cst);
          case 2:return 0;
          case 3:
           var rl=param$0[1];
           return caml_call2(Stdlib_list[30],is_nullable,rl);
          case 4:
           var r2=param$0[2],r1=param$0[1],_ac_=is_nullable(r1);
           if(_ac_)return _ac_;
           var param$0=r2;
           continue;
          case 5:return 1;
          case 6:var param$1=param$0[1],param$0=param$1;continue;
          case 7:return 1;
          case 8:var param$2=param$0[2],param$0=param$2;continue;
          default:return 1}}
    function first$0(counter,param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        switch(param$0)
         {case 0:return full;case 1:return full;default:return full}
       else
        switch(param$0[0])
         {case 0:var c=param$0[1];return singleton(c);
          case 1:
           var s=param$0[1];
           return caml_string_equal(s,cst$0)
                   ?full
                   :singleton(caml_string_get(s,0));
          case 2:
           var cmpl=param$0[2],cl=param$0[1];return cmpl?complement(cl):cl;
          case 3:
           var rl=param$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;return first_seq$0(counter$0,rl)}
           return caml_trampoline_return(first_seq$0,[0,rl]);
          case 4:
           var r2=param$0[2],r1=param$0[1],_ab_=first(r2);
           return union(first(r1),_ab_);
          case 5:return full;
          case 6:var param$1=param$0[1],param$0=param$1;continue;
          case 7:return full;
          case 8:var param$2=param$0[2],param$0=param$2;continue;
          default:return full}}
    function first_seq$0(counter,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var ___=param$0[1];
          if(typeof ___ === "number")
           {var param$1=param$0[2],param$0=param$1;continue}
          else
           switch(___[0])
            {case 5:
              var rl=param$0[2],r=___[1],_$_=first_seq(rl);
              return union(first(r),_$_);
             case 7:
              var rl$0=param$0[2],r$0=___[1],_aa_=first_seq(rl$0);
              return union(first(r$0),_aa_);
             default:
              if(counter < 50)
               {var counter$0=counter + 1 | 0;return first$0(counter$0,___)}
              return caml_trampoline_return(first$0,[0,___])}}
        return full}}
    function first(param){return caml_trampoline(first$0(0,param))}
    function first_seq(param){return caml_trampoline(first_seq$0(0,param))}
    function charclass_of_regexp(fold_case$0,re)
     {var switch$0=0;
      if(typeof re !== "number")
       switch(re[0])
        {case 0:var c=re[1],compl=0,cl1=singleton(c);switch$0 = 1;break;
         case 2:
          var compl$0=re[2],cl=re[1],compl=compl$0,cl1=cl;switch$0 = 1;break
         }
      if(switch$0)
       {var cl2=fold_case$0?fold_case(cl1):cl1,_Z_=compl?complement(cl2):cl2;
        return caml_call1(Stdlib_bytes[6],_Z_)}
      throw [0,Assert_failure,_a_]}
    var t=caml_create_bytes(256),i=0;
    for(;;)
     {var _d_=caml_call1(Stdlib_char[1],i);
      caml_bytes_set(t,i,caml_call1(Stdlib_char[3],_d_));
      var _e_=i + 1 | 0;
      if(255 !== i){var i=_e_;continue}
      var
       fold_case_table=caml_call1(Stdlib_bytes[6],t),
       compare=function(x,y){return runtime.caml_string_compare(x,y)},
       StringMap=caml_call1(Stdlib_map[1],[0,compare]),
       compile=
        function(fold_case$0,re)
         {var
           prog=[0,caml_make_vect(32,0)],
           progpos=[0,0],
           cpool=[0,StringMap[1]],
           cpoolpos=[0,0],
           numgroups=[0,1],
           numregs=[0,0];
          function emit_instr(opc,arg)
           {if(prog[1].length - 1 <= progpos[1])
             {var newlen=[0,prog[1].length - 1];
              for(;;)
               {if(newlen[1] <= progpos[1])
                 {newlen[1] = newlen[1] * 2 | 0;continue}
                var nprog=caml_make_vect(newlen[1],0);
                caml_call5
                 (Stdlib_array[10],prog[1],0,nprog,0,prog[1].length - 1);
                prog[1] = nprog;
                break}}
            var _X_=instr(opc,arg),_Y_=progpos[1];
            caml_check_bound(prog[1],_Y_)[1 + _Y_] = _X_;
            progpos[1]++;
            return 0}
          function emit_hole(param)
           {var p=progpos[1];emit_instr(op_CHAR,0);return p}
          function patch_instr(pos,opc,dest)
           {var _W_=instr(opc,displ(dest,pos));
            caml_check_bound(prog[1],pos)[1 + pos] = _W_;
            return 0}
          function cpool_index(s)
           {try
             {var _U_=caml_call2(StringMap[28],s,cpool[1]);return _U_}
            catch(_V_)
             {_V_ = caml_wrap_exception(_V_);
              if(_V_ === Stdlib[8])
               {var p=cpoolpos[1];
                cpool[1] = caml_call3(StringMap[4],s,p,cpool[1]);
                cpoolpos[1]++;
                return p}
              throw _V_}}
          function allocate_register_if_nullable(r)
           {if(is_nullable(r))
             {var n=numregs[1];
              if(64 <= n)caml_call1(Stdlib[2],cst_too_many_r_or_r_where_r_is);
              numregs[1]++;
              return n}
            return -1}
          function disjoint_modulo_case(c1,c2)
           {if(fold_case$0)
             {var _T_=fold_case(c2);return disjoint(fold_case(c1),_T_)}
            return disjoint(c1,c2)}
          function emit_code(param)
           {if(typeof param === "number")
             switch(param)
              {case 0:return emit_instr(op_BOL,0);
               case 1:return emit_instr(op_EOL,0);
               default:return emit_instr(op_WORDBOUNDARY,0)}
            else
             switch(param[0])
              {case 0:
                var c=param[1];
                return fold_case$0
                        ?emit_instr(op_CHARNORM,caml_call1(Stdlib_char[3],c))
                        :emit_instr(op_CHAR,c);
               case 1:
                var s=param[1],match=caml_ml_string_length(s);
                if(0 === match)return 0;
                if(1 === match)
                 {if(fold_case$0)
                   {var _Q_=caml_string_get(s,0);
                    return emit_instr
                            (op_CHARNORM,caml_call1(Stdlib_char[3],_Q_))}
                  return emit_instr(op_CHAR,caml_string_get(s,0))}
                try
                 {var i=caml_call2(Stdlib_string[14],s,0);
                  emit_code([1,string_before(s,i)]);
                  emit_instr(op_CHAR,0);
                  var _R_=emit_code([1,string_after(s,i + 1 | 0)]);
                  return _R_}
                catch(_S_)
                 {_S_ = caml_wrap_exception(_S_);
                  if(_S_ === Stdlib[8])
                   return fold_case$0
                           ?emit_instr
                             (op_STRINGNORM,cpool_index(caml_call1(Stdlib_string[26],s)))
                           :emit_instr(op_STRING,cpool_index(s));
                  throw _S_}
               case 2:
                var
                 compl=param[2],
                 cl=param[1],
                 cl1=fold_case$0?fold_case(cl):cl,
                 cl2=compl?complement(cl1):cl1;
                return emit_instr
                        (op_CHARCLASS,cpool_index(caml_call1(Stdlib_bytes[6],cl2)));
               case 3:var rl=param[1];return emit_seq_code(rl);
               case 4:
                var r2=param[2],r1=param[1],pos_pushback=emit_hole(0);
                emit_code(r1);
                var pos_goto_end=emit_hole(0),lbl1=progpos[1];
                emit_code(r2);
                var lbl2=progpos[1];
                patch_instr(pos_pushback,op_PUSHBACK,lbl1);
                return patch_instr(pos_goto_end,op_GOTO,lbl2);
               case 5:
                var
                 r=param[1],
                 regno=allocate_register_if_nullable(r),
                 lbl1$0=emit_hole(0);
                if(0 <= regno)emit_instr(op_SETMARK,regno);
                emit_code(r);
                if(0 <= regno)emit_instr(op_CHECKPROGRESS,regno);
                emit_instr(op_GOTO,displ(lbl1$0,progpos[1]));
                var lbl2$0=progpos[1];
                return patch_instr(lbl1$0,op_PUSHBACK,lbl2$0);
               case 6:
                var
                 r$0=param[1],
                 regno$0=allocate_register_if_nullable(r$0),
                 lbl1$1=progpos[1];
                emit_code(r$0);
                if(0 <= regno$0)emit_instr(op_CHECKPROGRESS,regno$0);
                var pos_pushback$0=emit_hole(0);
                if(0 <= regno$0)emit_instr(op_SETMARK,regno$0);
                emit_instr(op_GOTO,displ(lbl1$1,progpos[1]));
                var lbl2$1=progpos[1];
                return patch_instr(pos_pushback$0,op_PUSHBACK,lbl2$1);
               case 7:
                var r$1=param[1],pos_pushback$1=emit_hole(0);
                emit_code(r$1);
                var lbl=progpos[1];
                return patch_instr(pos_pushback$1,op_PUSHBACK,lbl);
               case 8:
                var r$2=param[2],n=param[1];
                emit_instr(op_BEGGROUP,n);
                emit_code(r$2);
                emit_instr(op_ENDGROUP,n);
                numgroups[1] = caml_call2(Stdlib[17],numgroups[1],n + 1 | 0);
                return 0;
               default:
                var n$0=param[1];
                emit_instr(op_REFGROUP,n$0);
                numgroups[1]
                =
                caml_call2(Stdlib[17],numgroups[1],n$0 + 1 | 0);
                return 0}}
          function emit_seq_code(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var _J_=param$0[1];
                if(typeof _J_ !== "number")
                 switch(_J_[0])
                  {case 5:
                    var _K_=_J_[1],switch$0=0;
                    if(typeof _K_ === "number")
                     switch$0 = 1;
                    else
                     switch(_K_[0])
                      {case 0:
                       case 2:
                        var rl$0=param$0[2],_L_=first_seq(rl$0);
                        if(disjoint_modulo_case(first(_K_),_L_))
                         {emit_instr
                           (op_SIMPLESTAR,
                            cpool_index(charclass_of_regexp(fold_case$0,_K_)));
                          var param$0=rl$0;
                          continue}
                        break;
                       default:switch$0 = 1}
                    break;
                   case 6:
                    var _M_=_J_[1],switch$1=0;
                    if(typeof _M_ === "number")
                     switch$1 = 1;
                    else
                     switch(_M_[0])
                      {case 0:
                       case 2:
                        var rl$1=param$0[2],_N_=first_seq(rl$1);
                        if(disjoint_modulo_case(first(_M_),_N_))
                         {emit_instr
                           (op_SIMPLEPLUS,
                            cpool_index(charclass_of_regexp(fold_case$0,_M_)));
                          var param$0=rl$1;
                          continue}
                        break;
                       default:switch$1 = 1}
                    break;
                   case 7:
                    var _O_=_J_[1],switch$2=0;
                    if(typeof _O_ === "number")
                     switch$2 = 1;
                    else
                     switch(_O_[0])
                      {case 0:
                       case 2:
                        var rl$2=param$0[2],_P_=first_seq(rl$2);
                        if(disjoint_modulo_case(first(_O_),_P_))
                         {emit_instr
                           (op_SIMPLEOPT,
                            cpool_index(charclass_of_regexp(fold_case$0,_O_)));
                          var param$0=rl$2;
                          continue}
                        break;
                       default:switch$2 = 1}
                    break
                   }
                var rl=param$0[2];
                emit_code(_J_);
                var param$0=rl;
                continue}
              return 0}}
          emit_code(re);
          emit_instr(op_ACCEPT,0);
          var start=first(re),start$0=fold_case$0?fold_case(start):start;
          if(runtime.caml_bytes_equal(start,full))
           var start_pos=-1;
          else
           {var r=caml_call2(Stdlib_bytes[1],256,0);
            iter(function(c){return caml_bytes_set(r,c,1)},start$0);
            var start_pos=cpool_index(caml_call1(Stdlib_bytes[6],r))}
          var constantpool=caml_make_vect(cpoolpos[1],cst$1),_F_=cpool[1];
          function _G_(str,idx)
           {caml_check_bound(constantpool,idx)[1 + idx] = str;return 0}
          caml_call2(StringMap[12],_G_,_F_);
          var
           _H_=numregs[1],
           _I_=numgroups[1],
           fold_case_table$0=fold_case$0?fold_case_table:cst$2;
          return [0,
                  caml_call3(Stdlib_array[7],prog[1],0,progpos[1]),
                  constantpool,
                  fold_case_table$0,
                  _I_,
                  _H_,
                  start_pos]},
       flush=
        function(buf)
         {var s=caml_call1(Stdlib_buffer[2],buf[1]);
          caml_call1(Stdlib_buffer[8],buf[1]);
          var match=caml_ml_string_length(s);
          if(0 === match)return 0;
          if(1 === match)
           {var _E_=buf[2];buf[2] = [0,[0,caml_string_get(s,0)],_E_];return 0}
          buf[2] = [0,[1,s],buf[2]];
          return 0},
       dotclass=complement(singleton(10)),
       parse=
        function(s)
         {var len=caml_ml_string_length(s),group_counter=[0,1];
          function regexpclass1(start)
           {var c=make_empty(0),i$0=start;
            for(;;)
             {if(len <= i$0)caml_call1(Stdlib[2],cst_class_not_closed_by);
              if(93 === caml_string_get(s,i$0) && start < i$0)
               {var j=i$0 + 1 | 0;return [0,c,j]}
              var c1=caml_string_get(s,i$0);
              if
               ((i$0 + 2 | 0)
                <
                len
                &&
                45
                ===
                caml_string_get(s,i$0 + 1 | 0)
                &&
                93
                !==
                caml_string_get(s,i$0 + 2 | 0))
               {var c2=caml_string_get(s,i$0 + 2 | 0);
                if(! (c2 < c1))
                 {var i=c1;
                  for(;;)
                   {add(c,caml_call1(Stdlib_char[1],i));
                    var _D_=i + 1 | 0;
                    if(c2 !== i){var i=_D_;continue}
                    break}}
                var i$2=i$0 + 3 | 0,i$0=i$2;
                continue}
              add(c,c1);
              var i$1=i$0 + 1 | 0,i$0=i$1;
              continue}}
          function regexp1(i)
           {var sb=[0,caml_call1(Stdlib_buffer[1],16),0],i$0=i;
            a:
            for(;;)
             {if(! (len <= i$0))
               {var switch$0=0;
                if((i$0 + 2 | 0) <= len && 92 === caml_string_get(s,i$0))
                 {var
                   c$0=caml_string_get(s,i$0 + 1 | 0),
                   _A_=124 === c$0?1:0,
                   _B_=_A_ || (41 === c$0?1:0);
                  if(_B_)switch$0 = 1}
                if(! switch$0)
                 {var c$1=caml_string_get(s,i$0);
                  if(36 === c$1)
                   var match=[0,1,i$0 + 1 | 0];
                  else
                   {var switch$1=0;
                    if(91 <= c$1)
                     if(95 <= c$1)
                      switch$1 = 1;
                     else
                      {var switcher$0=c$1 - 91 | 0;
                       switch(switcher$0)
                        {case 0:
                          var i$4=i$0 + 1 | 0,switch$2=0;
                          if(i$4 < len && 94 === caml_string_get(s,i$4))
                           {var
                             match$3=regexpclass1(i$4 + 1 | 0),
                             j$3=match$3[2],
                             c$4=match$3[1],
                             match$1=[0,c$4,1,j$3];
                            switch$2 = 1}
                          if(! switch$2)
                           var
                            match$4=regexpclass1(i$4),
                            j$4=match$4[2],
                            c$5=match$4[1],
                            match$1=[0,c$5,0,j$4];
                          var
                           j$1=match$1[3],
                           compl=match$1[2],
                           c$2=match$1[1],
                           match=[0,[2,c$2,compl],j$1];
                          break;
                         case 1:
                          var i$5=i$0 + 1 | 0;
                          if(len <= i$5)
                           var _C_=[0,_b_,i$5];
                          else
                           {var c$3=caml_string_get(s,i$5),switch$3=0;
                            if(58 <= c$3)
                             if(98 === c$3)
                              var _C_=[0,2,i$5 + 1 | 0];
                             else
                              if(124 === c$3)switch$3 = 2;else switch$3 = 1;
                            else
                             {var switcher$1=c$3 - 40 | 0;
                              if(1 < switcher$1 >>> 0)
                               if(9 <= switcher$1)
                                var _C_=[0,[9,c$3 - 48 | 0],i$5 + 1 | 0];
                               else
                                switch$3 = 1;
                              else
                               if(switcher$1)
                                switch$3 = 2;
                               else
                                {var group_no=group_counter[1];
                                 group_counter[1]++;
                                 var
                                  match$2=regexp0(i$5 + 1 | 0),
                                  j$2=match$2[2],
                                  r$4=match$2[1],
                                  switch$4=0;
                                 if
                                  ((j$2 + 1 | 0)
                                   <
                                   len
                                   &&
                                   92
                                   ===
                                   caml_string_get(s,j$2)
                                   &&
                                   41
                                   ===
                                   caml_string_get(s,j$2 + 1 | 0))
                                  {var _C_=[0,[8,group_no,r$4],j$2 + 2 | 0];switch$4 = 1}
                                 if(! switch$4)
                                  var _C_=caml_call1(Stdlib[2],cst_group_not_closed_by)}}
                            switch(switch$3)
                             {case 1:var _C_=[0,[0,c$3],i$5 + 1 | 0];break;
                              case 2:throw [0,Assert_failure,_c_]
                              }}
                          var match=_C_;
                          break;
                         case 2:switch$1 = 1;break;
                         default:var match=[0,0,i$0 + 1 | 0]}}
                    else
                     if(46 === c$1)
                      var match=[0,[2,dotclass,0],i$0 + 1 | 0];
                     else
                      switch$1 = 1;
                    if(switch$1)var match=[0,[0,c$1],i$0 + 1 | 0]}
                  var j=match[2],r=match[1],r$0=r,j$0=j;
                  for(;;)
                   {if(! (len <= j$0))
                     {var
                       match$0=caml_string_get(s,j$0),
                       switcher=match$0 - 42 | 0;
                      if(! (1 < switcher >>> 0))
                       {if(switcher)
                         {var i$2=j$0 + 1 | 0,r$2=[6,r$0],r$0=r$2,j$0=i$2;continue}
                        var i$3=j$0 + 1 | 0,r$3=[5,r$0],r$0=r$3,j$0=i$3;
                        continue}
                      if(21 === switcher)
                       {var i$1=j$0 + 1 | 0,r$1=[7,r$0],r$0=r$1,j$0=i$1;continue}}
                    var switch$5=0;
                    if(typeof r$0 !== "number" && 0 === r$0[0])
                     {var c=r$0[1];
                      caml_call2(Stdlib_buffer[10],sb[1],c);
                      switch$5 = 1}
                    if(! switch$5){flush(sb);sb[2] = [0,r$0,sb[2]]}
                    var i$0=j$0;
                    continue a}}}
              flush(sb);
              return [0,[3,caml_call1(Stdlib_list[9],sb[2])],i$0]}}
          function regexp0(i)
           {var match=regexp1(i),j=match[2],r=match[1],r1=r,i$0=j;
            for(;;)
             {if
               ((i$0 + 2 | 0)
                <=
                len
                &&
                92
                ===
                caml_string_get(s,i$0)
                &&
                124
                ===
                caml_string_get(s,i$0 + 1 | 0))
               {var
                 match$0=regexp1(i$0 + 2 | 0),
                 i$1=match$0[2],
                 r2=match$0[1],
                 r1$0=[4,r1,r2],
                 r1=r1$0,
                 i$0=i$1;
                continue}
              return [0,r1,i$0]}}
          var match=regexp0(0),j=match[2],r=match[1];
          return j === len
                  ?r
                  :caml_call1(Stdlib[2],cst_spurious_in_regular_expres)},
       regexp=function(e){return compile(0,parse(e))},
       regexp_case_fold=function(e){return compile(1,parse(e))},
       quote=
        function(s)
         {var
           len=caml_ml_string_length(s),
           buf=caml_create_bytes(2 * len | 0),
           pos=[0,0],
           _w_=len - 1 | 0,
           _v_=0;
          if(! (_w_ < 0))
           {var i=_v_;
            for(;;)
             {var c=caml_string_get(s,i),_x_=c - 63 | 0,switch$0=0;
              if(31 < _x_ >>> 0)
               {var _y_=_x_ + 27 | 0;
                if(! (10 < _y_ >>> 0))
                 switch(_y_){case 0:case 6:case 7:case 10:switch$0 = 1;break}}
              else
               if(26 < (_x_ - 1 | 0) >>> 0)switch$0 = 1;
              if(switch$0)
               {caml_bytes_set(buf,pos[1],92);
                caml_bytes_set(buf,pos[1] + 1 | 0,c);
                pos[1] = pos[1] + 2 | 0}
              else
               {caml_bytes_set(buf,pos[1],c);pos[1] = pos[1] + 1 | 0}
              var _z_=i + 1 | 0;
              if(_w_ !== i){var i=_z_;continue}
              break}}
          return caml_call3(Stdlib_bytes[8],buf,0,pos[1])},
       regexp_string=function(s){return compile(0,[1,s])},
       regexp_string_case_fold=function(s){return compile(1,[1,s])},
       last_search_result=[0,[0]],
       string_match=
        function(re,s,pos)
         {var res=runtime.re_string_match(re,s,pos);
          last_search_result[1] = res;
          return 0 < res.length - 1?1:0},
       string_partial_match=
        function(re,s,pos)
         {var res=runtime.re_partial_match(re,s,pos);
          last_search_result[1] = res;
          return 0 < res.length - 1?1:0},
       search_forward=
        function(re,s,pos)
         {var res=runtime.re_search_forward(re,s,pos);
          last_search_result[1] = res;
          if(0 === res.length - 1)throw Stdlib[8];
          return caml_check_bound(res,0)[1]},
       search_backward=
        function(re,s,pos)
         {var res=runtime.re_search_backward(re,s,pos);
          last_search_result[1] = res;
          if(0 === res.length - 1)throw Stdlib[8];
          return caml_check_bound(res,0)[1]},
       group_beginning=
        function(n)
         {var n2=n + n | 0;
          if(0 <= n && ! (last_search_result[1].length - 1 <= n2))
           {var pos=caml_check_bound(last_search_result[1],n2)[1 + n2];
            if(-1 === pos)throw Stdlib[8];
            return pos}
          return caml_call1(Stdlib[1],cst_Str_group_beginning)},
       group_end=
        function(n)
         {var n2=n + n | 0;
          if(0 <= n && ! (last_search_result[1].length - 1 <= n2))
           {var
             _u_=n2 + 1 | 0,
             pos=caml_check_bound(last_search_result[1],_u_)[1 + _u_];
            if(-1 === pos)throw Stdlib[8];
            return pos}
          return caml_call1(Stdlib[1],cst_Str_group_end)},
       matched_group=
        function(n,txt)
         {var n2=n + n | 0;
          if(0 <= n && ! (last_search_result[1].length - 1 <= n2))
           {var
             b=caml_check_bound(last_search_result[1],n2)[1 + n2],
             _t_=n2 + 1 | 0,
             e=caml_check_bound(last_search_result[1],_t_)[1 + _t_];
            if(-1 === b)throw Stdlib[8];
            return caml_call3(Stdlib_string[4],txt,b,e - b | 0)}
          return caml_call1(Stdlib[1],cst_Str_matched_group)},
       match_beginning=function(param){return group_beginning(0)},
       match_end=function(param){return group_end(0)},
       matched_string=function(txt){return matched_group(0,txt)},
       replace_matched=
        function(repl,matched)
         {return runtime.re_replacement_text
                  (repl,last_search_result[1],matched)},
       substitute_first=
        function(expr,repl_fun,text)
         {try
           {var
             pos=search_forward(expr,text,0),
             _o_=[0,string_after(text,match_end(0)),0],
             _p_=[0,caml_call1(repl_fun,text),_o_],
             _q_=[0,string_before(text,pos),_p_],
             _r_=caml_call2(Stdlib_string[7],cst$3,_q_);
            return _r_}
          catch(_s_)
           {_s_ = caml_wrap_exception(_s_);
            if(_s_ === Stdlib[8])return text;
            throw _s_}},
       opt_search_forward=
        function(re,s,pos)
         {try
           {var _m_=[0,search_forward(re,s,pos)];return _m_}
          catch(_n_)
           {_n_ = caml_wrap_exception(_n_);
            if(_n_ === Stdlib[8])return 0;
            throw _n_}},
       global_substitute=
        function(expr,repl_fun,text)
         {var accu=0,start=0,last_was_empty=0;
          for(;;)
           {var startpos=last_was_empty?start + 1 | 0:start;
            if(caml_ml_string_length(text) < startpos)
             var _k_=[0,string_after(text,start),accu];
            else
             {var match=opt_search_forward(expr,text,startpos);
              if(match)
               {var
                 pos=match[1],
                 start$0=match_end(0),
                 repl_text=caml_call1(repl_fun,text),
                 last_was_empty$0=start$0 === pos?1:0,
                 accu$0=
                  [0,
                   repl_text,
                   [0,
                    caml_call3(Stdlib_string[4],text,start,pos - start | 0),
                    accu]],
                 accu=accu$0,
                 start=start$0,
                 last_was_empty=last_was_empty$0;
                continue}
              var _k_=[0,string_after(text,start),accu]}
            var _l_=caml_call1(Stdlib_list[9],_k_);
            return caml_call2(Stdlib_string[7],cst$4,_l_)}},
       global_replace=
        function(expr,repl,text)
         {return global_substitute
                  (expr,function(_j_){return replace_matched(repl,_j_)},text)},
       replace_first=
        function(expr,repl,text)
         {return substitute_first
                  (expr,function(_i_){return replace_matched(repl,_i_)},text)},
       opt_search_forward_progress=
        function(expr,text,start)
         {var match=opt_search_forward(expr,text,start);
          if(match)
           {var pos=match[1];
            return start < match_end(0)
                    ?[0,pos]
                    :start < caml_ml_string_length(text)
                      ?opt_search_forward(expr,text,start + 1 | 0)
                      :0}
          return 0},
       bounded_split=
        function(expr,text,num)
         {var
           start=string_match(expr,text,0)?match_end(0):0,
           accu=0,
           start$0=start,
           n=num;
          for(;;)
           {if(caml_ml_string_length(text) <= start$0)
             var _h_=accu;
            else
             if(1 === n)
              var _h_=[0,string_after(text,start$0),accu];
             else
              {var match=opt_search_forward_progress(expr,text,start$0);
               if(match)
                {var
                  pos=match[1],
                  n$0=n - 1 | 0,
                  start$1=match_end(0),
                  accu$0=
                   [0,
                    caml_call3(Stdlib_string[4],text,start$0,pos - start$0 | 0),
                    accu],
                  accu=accu$0,
                  start$0=start$1,
                  n=n$0;
                 continue}
               var _h_=[0,string_after(text,start$0),accu]}
            return caml_call1(Stdlib_list[9],_h_)}},
       split=function(expr,text){return bounded_split(expr,text,0)},
       bounded_split_delim=
        function(expr,text,num)
         {if(caml_string_equal(text,cst$5))return 0;
          var accu=0,start=0,n=num;
          for(;;)
           {if(caml_ml_string_length(text) < start)
             var _g_=accu;
            else
             if(1 === n)
              var _g_=[0,string_after(text,start),accu];
             else
              {var match=opt_search_forward_progress(expr,text,start);
               if(match)
                {var
                  pos=match[1],
                  n$0=n - 1 | 0,
                  start$0=match_end(0),
                  accu$0=
                   [0,
                    caml_call3(Stdlib_string[4],text,start,pos - start | 0),
                    accu],
                  accu=accu$0,
                  start=start$0,
                  n=n$0;
                 continue}
               var _g_=[0,string_after(text,start),accu]}
            return caml_call1(Stdlib_list[9],_g_)}},
       split_delim=
        function(expr,text){return bounded_split_delim(expr,text,0)},
       bounded_full_split=
        function(expr,text,num)
         {var accu=0,start=0,n=num;
          for(;;)
           {if(caml_ml_string_length(text) <= start)
             var _f_=accu;
            else
             if(1 === n)
              var _f_=[0,[0,string_after(text,start)],accu];
             else
              {var match=opt_search_forward_progress(expr,text,start);
               if(match)
                {var pos=match[1],s=matched_string(text);
                 if(start < pos)
                  {var
                    n$0=n - 1 | 0,
                    start$0=match_end(0),
                    accu$0=
                     [0,
                      [1,s],
                      [0,
                       [0,caml_call3(Stdlib_string[4],text,start,pos - start | 0)],
                       accu]],
                    accu=accu$0,
                    start=start$0,
                    n=n$0;
                   continue}
                 var
                  n$1=n - 1 | 0,
                  start$1=match_end(0),
                  accu$1=[0,[1,s],accu],
                  accu=accu$1,
                  start=start$1,
                  n=n$1;
                 continue}
               var _f_=[0,[0,string_after(text,start)],accu]}
            return caml_call1(Stdlib_list[9],_f_)}},
       full_split=function(expr,text){return bounded_full_split(expr,text,0)},
       Str=
        [0,
         regexp,
         regexp_case_fold,
         quote,
         regexp_string,
         regexp_string_case_fold,
         string_match,
         search_forward,
         search_backward,
         string_partial_match,
         matched_string,
         match_beginning,
         match_end,
         matched_group,
         group_beginning,
         group_end,
         global_replace,
         replace_first,
         global_substitute,
         substitute_first,
         replace_matched,
         split,
         bounded_split,
         split_delim,
         bounded_split_delim,
         full_split,
         bounded_full_split,
         string_before,
         string_after,
         first_chars,
         last_chars];
      runtime.caml_register_global(26,Str,"Str");
      return}}
  (function(){return this}()));


//# 1 ".js/uutf/uutf.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_check_bound=runtime.caml_check_bound,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_UTF_8$0=caml_string_of_jsbytes("UTF-8"),
     cst_US_ASCII$0=caml_string_of_jsbytes("US-ASCII"),
     cst_ISO_8859_1$1=caml_string_of_jsbytes("ISO-8859-1"),
     cst_UTF_16$0=caml_string_of_jsbytes("UTF-16"),
     cst_UTF_16LE$0=caml_string_of_jsbytes("UTF-16LE"),
     cst_UTF_16BE$0=caml_string_of_jsbytes("UTF-16BE"),
     cst_ISO646_US=caml_string_of_jsbytes("ISO646-US"),
     cst_CSISOLATIN1=caml_string_of_jsbytes("CSISOLATIN1"),
     cst_ANSI_X3_4_1968=caml_string_of_jsbytes("ANSI_X3.4-1968"),
     cst_ANSI_X3_4_1986=caml_string_of_jsbytes("ANSI_X3.4-1986"),
     cst_ASCII=caml_string_of_jsbytes("ASCII"),
     cst_CP367=caml_string_of_jsbytes("CP367"),
     cst_CP819=caml_string_of_jsbytes("CP819"),
     cst_CSASCII=caml_string_of_jsbytes("CSASCII"),
     cst_IBM367=caml_string_of_jsbytes("IBM367"),
     cst_IBM819=caml_string_of_jsbytes("IBM819"),
     cst_ISO_8859_1$0=caml_string_of_jsbytes("ISO-8859-1"),
     cst_ISO_IR_100=caml_string_of_jsbytes("ISO-IR-100"),
     cst_ISO_IR_6=caml_string_of_jsbytes("ISO-IR-6"),
     cst_US=caml_string_of_jsbytes("US"),
     cst_ISO_646_IRV_1991=caml_string_of_jsbytes("ISO_646.IRV:1991"),
     cst_ISO_8859_1=caml_string_of_jsbytes("ISO_8859-1"),
     cst_ISO_8859_1_1987=caml_string_of_jsbytes("ISO_8859-1:1987"),
     cst_L1=caml_string_of_jsbytes("L1"),
     cst_LATIN1=caml_string_of_jsbytes("LATIN1"),
     cst_US_ASCII=caml_string_of_jsbytes("US-ASCII"),
     cst_UTF_16=caml_string_of_jsbytes("UTF-16"),
     cst_UTF_16BE=caml_string_of_jsbytes("UTF-16BE"),
     cst_UTF_16LE=caml_string_of_jsbytes("UTF-16LE"),
     cst_UTF_8=caml_string_of_jsbytes("UTF-8"),
     cst_expected_Await_encode=
      caml_string_of_jsbytes("expected `Await encode"),
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Stdlib=global_data.Stdlib,
     Assert_failure=global_data.Assert_failure,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_format=global_data.Stdlib__format,
     _a_=Stdlib_format[125],
     _B_=[0,caml_string_of_jsbytes("src/uutf.ml"),364,9],
     _u_=
      [0,
       [11,caml_string_of_jsbytes("`Await"),0],
       caml_string_of_jsbytes("`Await")],
     _v_=
      [0,[11,caml_string_of_jsbytes("`End"),0],caml_string_of_jsbytes("`End")],
     _w_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`Uchar U+"),[4,8,[0,2,4],0,[17,0,0]]]],
       caml_string_of_jsbytes("@[`Uchar U+%04X@]")],
     _x_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`Malformed ("),0]],
       caml_string_of_jsbytes("@[`Malformed (")],
     _y_=[0,[4,8,[0,2,2],0,0],caml_string_of_jsbytes("%02X")],
     _A_=[0,[12,32,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes(" %02X")],
     _z_=[0,[12,41,[17,0,0]],caml_string_of_jsbytes(")@]")],
     _p_=[0,-211555818,3299808],
     _k_=[0,-211558048,3299808],
     _q_=[0,684370880,3299808],
     _o_=[0,684370880,427938126],
     _l_=[0,-211558048,427938126],
     _m_=[0,caml_string_of_jsbytes("src/uutf.ml"),154,55],
     _n_=[0,684370880,427938126],
     _r_=[0,caml_string_of_jsbytes("src/uutf.ml"),153,55],
     _s_=[0,caml_string_of_jsbytes("src/uutf.ml"),155,55],
     _t_=[0,684370880,3455931],
     _j_=[0,caml_string_of_jsbytes("src/uutf.ml"),121,9],
     _c_=[0,684370880],
     _d_=[0,-211555818],
     _e_=[0,-211558048],
     _f_=[0,143365725],
     _g_=[0,423112016],
     _h_=[0,338302576],
     _b_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid bounds (index "),
        [4,0,0,0,[11,caml_string_of_jsbytes(", length "),[4,0,0,0,[12,41,0]]]]],
       caml_string_of_jsbytes("invalid bounds (index %d, length %d)")],
     _i_=
      [0,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       4,
       4,
       4,
       4,
       4,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0];
    function invalid_bounds(j,l)
     {var _aF_=caml_call3(Stdlib_printf[4],_b_,j,l);
      return caml_call1(Stdlib[1],_aF_)}
    function unsafe_set_byte(s,j,byte$0)
     {runtime.caml_bytes_unsafe_set(s,j,byte$0);return 0}
    var
     u_bom=caml_call1(Stdlib_uchar[9],65279),
     u_rep=caml_call1(Stdlib_uchar[9],65533);
    function encoding_of_string(s)
     {var
       match=caml_call1(Stdlib_string[25],s),
       _aD_=caml_string_compare(match,cst_ISO646_US),
       switch$1=0;
      if(0 <= _aD_)
       {if(0 < _aD_)
         {var switch$0=caml_string_compare(match,cst_US);
          if(0 <= switch$0)
           {if(0 < switch$0 && caml_string_notequal(match,cst_US_ASCII))
             {if(! caml_string_notequal(match,cst_UTF_16))return _f_;
              if(! caml_string_notequal(match,cst_UTF_16BE))return _e_;
              if(! caml_string_notequal(match,cst_UTF_16LE))return _d_;
              if(! caml_string_notequal(match,cst_UTF_8))return _c_;
              switch$1 = 2}}
          else
           if(caml_string_notequal(match,cst_ISO_646_IRV_1991))
            if
             (caml_string_notequal(match,cst_ISO_8859_1)
              &&
              caml_string_notequal(match,cst_ISO_8859_1_1987)
              &&
              caml_string_notequal(match,cst_L1)
              &&
              caml_string_notequal(match,cst_LATIN1))
             switch$1 = 2;
            else
             switch$1 = 1}}
      else
       {var _aE_=caml_string_compare(match,cst_CSISOLATIN1);
        if(0 <= _aE_)
         if(0 < _aE_)
          {if(caml_string_notequal(match,cst_IBM367))
            if
             (caml_string_notequal(match,cst_IBM819)
              &&
              caml_string_notequal(match,cst_ISO_8859_1$0)
              &&
              caml_string_notequal(match,cst_ISO_IR_100))
             {if(caml_string_notequal(match,cst_ISO_IR_6))switch$1 = 2}
            else
             switch$1 = 1}
         else
          switch$1 = 1;
        else
         if
          (caml_string_notequal(match,cst_ANSI_X3_4_1968)
           &&
           caml_string_notequal(match,cst_ANSI_X3_4_1986)
           &&
           caml_string_notequal(match,cst_ASCII)
           &&
           caml_string_notequal(match,cst_CP367))
          if(caml_string_notequal(match,cst_CP819))
           {if(caml_string_notequal(match,cst_CSASCII))switch$1 = 2}
          else
           switch$1 = 1}
      switch(switch$1){case 2:return 0;case 0:return _g_;default:return _h_}}
    function encoding_to_string(param)
     {return 143365725 <= param
              ?423112016 <= param
                ?684370880 <= param?cst_UTF_8$0:cst_US_ASCII$0
                :338302576 <= param?cst_ISO_8859_1$1:cst_UTF_16$0
              :-211555818 <= param?cst_UTF_16LE$0:cst_UTF_16BE$0}
    function malformed(s,j,l)
     {return [0,659980059,caml_call3(Stdlib_bytes[8],s,j,l)]}
    function malformed_pair(be,hi,s,j,l)
     {var bs1=caml_call3(Stdlib_bytes[7],s,j,l),bs0=caml_create_bytes(2);
      if(be)var j1=1,j0=0;else var j1=0,j0=1;
      unsafe_set_byte(bs0,j0,hi >>> 8 | 0);
      unsafe_set_byte(bs0,j1,hi & 255);
      var _aC_=caml_call2(Stdlib_bytes[14],bs0,bs1);
      return [0,659980059,caml_call1(Stdlib_bytes[42],_aC_)]}
    var utf_8_len=_i_.slice();
    function r_utf_8(s,j,l)
     {function uchar(c){return [0,852405675,caml_call1(Stdlib_uchar[9],c)]}
      var switcher=l - 1 | 0;
      if(3 < switcher >>> 0)throw [0,Assert_failure,_j_];
      switch(switcher)
       {case 0:return uchar(caml_bytes_unsafe_get(s,j));
        case 1:
         var
          b0=caml_bytes_unsafe_get(s,j),
          b1=caml_bytes_unsafe_get(s,j + 1 | 0);
         return 2 === (b1 >>> 6 | 0)
                 ?uchar((b0 & 31) << 6 | b1 & 63)
                 :malformed(s,j,l);
        case 2:
         var
          b0$0=caml_bytes_unsafe_get(s,j),
          b1$0=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2=caml_bytes_unsafe_get(s,j + 2 | 0),
          c=(b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2 & 63;
         if(2 === (b2 >>> 6 | 0))
          {if(224 === b0$0)
            {if(160 <= b1$0 && ! (191 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           if(237 === b0$0)
            {if(128 <= b1$0 && ! (159 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           return 2 === (b1$0 >>> 6 | 0)?uchar(c):malformed(s,j,l)}
         return malformed(s,j,l);
        default:
         var
          b0$1=caml_bytes_unsafe_get(s,j),
          b1$1=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2$0=caml_bytes_unsafe_get(s,j + 2 | 0),
          b3=caml_bytes_unsafe_get(s,j + 3 | 0),
          c$0=
           (b0$1 & 7)
           <<
           18
           |
           (b1$1 & 63)
           <<
           12
           |
           (b2$0 & 63)
           <<
           6
           |
           b3
           &
           63;
         if(2 === (b3 >>> 6 | 0) && 2 === (b2$0 >>> 6 | 0))
          {if(240 === b0$1)
            {if(144 <= b1$1 && ! (191 < b1$1))return uchar(c$0);
             return malformed(s,j,l)}
           if(244 === b0$1)
            {if(128 <= b1$1 && ! (143 < b1$1))return uchar(c$0);
             return malformed(s,j,l)}
           return 2 === (b1$1 >>> 6 | 0)?uchar(c$0):malformed(s,j,l)}
         return malformed(s,j,l)}}
    function r_utf_16(s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       u=b0 << 8 | b1;
      if(55296 <= u && ! (57343 < u))
       return 56319 < u
               ?malformed(s,caml_call2(Stdlib[16],j0,j1),2)
               :[0,16161,u];
      return [0,852405675,caml_call1(Stdlib_uchar[9],u)]}
    function r_utf_16_lo(hi,s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       lo=b0 << 8 | b1;
      if(56320 <= lo && ! (57343 < lo))
       return [0,
               852405675,
               caml_call1
                (Stdlib_uchar[9],((hi & 1023) << 10 | lo & 1023) + 65536 | 0)];
      return malformed_pair(j0 < j1?1:0,hi,s,caml_call2(Stdlib[16],j0,j1),2)}
    function r_encoding(s,j,l)
     {function some(i){return i < l?[0,caml_bytes_unsafe_get(s,j + i | 0)]:0}
      var match=some(0),match$0=some(1),match$1=some(2);
      if(match)
       {var _aB_=match[1],switch$0=0;
        if(240 <= _aB_)
         if(254 === _aB_)
          {if(match$0){if(255 === match$0[1])return _k_;switch$0 = 1}}
         else
          if(255 === _aB_)
           {if(match$0){if(254 === match$0[1])return _p_;switch$0 = 1}}
          else
           switch$0 = 1;
        else
         if(0 === _aB_)
          {if(match$0)
            {var p=match$0[1];
             if(0 < p)return [0,-211558048,[0,605782321,p]];
             switch$0 = 1}}
         else
          if(239 <= _aB_)
           {if(match$0)
             if(187 === match$0[1])
              {if(match$1 && 191 === match$1[1])return _q_}
             else
              switch$0 = 1}
          else
           switch$0 = 1;
        if(switch$0 && match$0 && 0 === match$0[1] && 0 < _aB_)
         return [0,-211555818,[0,605782321,_aB_]];
        if(0 === caml_check_bound(utf_8_len,_aB_)[1 + _aB_])
         {if(match$0)return _l_;
          if(match$1)throw [0,Assert_failure,_m_];
          return _n_}
        return _o_}
      if(match$0)throw [0,Assert_failure,_r_];
      if(match$1)throw [0,Assert_failure,_s_];
      return _t_}
    function pp_decode(ppf,param)
     {if(typeof param === "number")
       return 1006505782 <= param
               ?caml_call2(_a_,ppf,_u_)
               :caml_call2(_a_,ppf,_v_);
      if(852405675 <= param[1])
       {var u=param[2];
        return caml_call3(_a_,ppf,_w_,caml_call1(Stdlib_uchar[10],u))}
      var bs=param[2],l=caml_ml_string_length(bs);
      caml_call2(_a_,ppf,_x_);
      if(0 < l)caml_call3(_a_,ppf,_y_,caml_string_get(bs,0));
      var _az_=l - 1 | 0,_ay_=1;
      if(! (_az_ < 1))
       {var i=_ay_;
        for(;;)
         {caml_call3(_a_,ppf,_A_,caml_string_get(bs,i));
          var _aA_=i + 1 | 0;
          if(_az_ !== i){var i=_aA_;continue}
          break}}
      return caml_call2(_a_,ppf,_z_)}
    function i_rem(d){return (d[7] - d[6] | 0) + 1 | 0}
    function eoi(d)
     {d[5] = Stdlib_bytes[3];d[6] = 0;d[7] = Stdlib[20];return 0}
    function src(d,s,j,l)
     {if(0 <= j && 0 <= l && ! (caml_ml_bytes_length(s) < (j + l | 0)))
       return 0 === l?eoi(d):(d[5] = s,d[6] = j,d[7] = (j + l | 0) - 1 | 0,0);
      return invalid_bounds(j,l)}
    function refill(k,d)
     {var _ax_=d[1];
      if(typeof _ax_ === "number"){d[18] = k;return 1006505782}
      if(438511779 <= _ax_[1])
       {var
         ic=_ax_[2],
         rc=caml_call4(Stdlib[84],ic,d[5],0,caml_ml_bytes_length(d[5]));
        src(d,d[5],0,rc);
        return caml_call1(k,d)}
      eoi(d);
      return caml_call1(k,d)}
    function t_need(d,need){d[9] = 0;d[10] = need;return 0}
    function t_fill(k,d)
     {function blit(d,l)
       {caml_blit_bytes(d[5],d[6],d[8],d[9],l);
        d[6] = d[6] + l | 0;
        d[9] = d[9] + l | 0;
        return 0}
      var rem=i_rem(d);
      if(0 <= rem)
       {var need=d[10] - d[9] | 0;
        return rem < need
                ?(blit(d,rem),refill(function(_aw_){return t_fill(k,_aw_)},d))
                :(blit(d,need),caml_call1(k,d))}
      return caml_call1(k,d)}
    function ret(k,v,byte_count,d)
     {d[18] = k;d[15] = d[15] + byte_count | 0;return caml_call2(d[17],d,v)}
    function decode_us_ascii(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        var
         _au_=d[5],
         b0=caml_bytes_unsafe_get(_au_,j),
         _at_=1,
         _av_=
          127 < b0
           ?malformed(_au_,j,1)
           :[0,852405675,caml_call1(Stdlib_uchar[9],b0)];
        return ret(decode_us_ascii,_av_,_at_,d)}
      return 0 <= rem?refill(decode_us_ascii,d):3455931}
    function decode_iso_8859_1(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        return ret
                (decode_iso_8859_1,
                 [0,
                  852405675,
                  caml_call1(Stdlib_uchar[9],caml_bytes_unsafe_get(d[5],j))],
                 1,
                 d)}
      return 0 <= rem?refill(decode_iso_8859_1,d):3455931}
    function t_decode_utf_8(d)
     {if(d[9] < d[10])
       {var _ar_=d[9];return ret(decode_utf_8,malformed(d[8],0,d[9]),_ar_,d)}
      var _as_=d[9];
      return ret(decode_utf_8,r_utf_8(d[8],0,d[9]),_as_,d)}
    function decode_utf_8(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var need=utf_8_len[1 + caml_bytes_unsafe_get(d[5],d[6])];
        if(rem < need){t_need(d,need);return t_fill(t_decode_utf_8,d)}
        var j=d[6];
        return 0 === need
                ?(d[6]
                  =
                  d[6]
                  +
                  1
                  |
                  0,
                  ret(decode_utf_8,malformed(d[5],j,1),1,d))
                :(d[6]
                  =
                  d[6]
                  +
                  need
                  |
                  0,
                  ret(decode_utf_8,r_utf_8(d[5],j,need),need,d))}
      return 0 <= rem?refill(decode_utf_8,d):3455931}
    function t_decode_utf_16be_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16be,malformed_pair(1,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16be,r_utf_16_lo(hi,d[8],0,1),bcount,d)}
    function decode_utf_16be_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16be,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16be,r_utf_16_lo(hi,d[5],j,j + 1 | 0),4,d)}
      t_need(d,2);
      return t_fill(function(_aq_){return t_decode_utf_16be_lo(hi,_aq_)},d)}
    function t_decode_utf_16be(d)
     {if(d[9] < d[10])
       {var _ap_=d[9];
        return ret(decode_utf_16be,malformed(d[8],0,d[9]),_ap_,d)}
      return decode_utf_16be_lo(r_utf_16(d[8],0,1),d)}
    function decode_utf_16be(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16be_lo(r_utf_16(d[5],j,j + 1 | 0),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16be,d)}
      return 0 <= rem?refill(decode_utf_16be,d):3455931}
    function t_decode_utf_16_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16,malformed_pair(0,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16,r_utf_16_lo(hi,d[8],1,0),bcount,d)}
    function decode_utf_16le_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16,r_utf_16_lo(hi,d[5],j + 1 | 0,j),4,d)}
      t_need(d,2);
      return t_fill(function(_ao_){return t_decode_utf_16_lo(hi,_ao_)},d)}
    function t_decode_utf_16(d)
     {if(d[9] < d[10])
       {var _an_=d[9];return ret(decode_utf_16,malformed(d[8],0,d[9]),_an_,d)}
      return decode_utf_16le_lo(r_utf_16(d[8],1,0),d)}
    function decode_utf_16(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16le_lo(r_utf_16(d[5],j + 1 | 0,j),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16,d)}
      return 0 <= rem?refill(decode_utf_16,d):3455931}
    function guessed_utf_16(d,be,v)
     {if(be)
       var
        j1=1,
        j0=0,
        t_decode_utf_16_lo$0=t_decode_utf_16be_lo,
        t_decode_utf_16$0=t_decode_utf_16be,
        decode_utf_16$0=decode_utf_16be;
      else
       var
        j1=0,
        j0=1,
        t_decode_utf_16_lo$0=t_decode_utf_16_lo,
        t_decode_utf_16$0=t_decode_utf_16,
        decode_utf_16$0=decode_utf_16;
      function b3(k,d)
       {return 3 <= d[9]
                ?(d[10]
                  =
                  2,
                  d[9]
                  =
                  1,
                  unsafe_set_byte(d[8],0,caml_bytes_unsafe_get(d[8],2)),
                  t_fill(k,d))
                :decode_utf_16$0(d)}
      if(typeof v === "number")
       {if(427938126 <= v)
         {var v$0=r_utf_16(d[8],j0,j1);
          if(659980059 <= v$0[1])
           {var _ad_=2;
            return ret
                    (function(_am_){return b3(t_decode_utf_16$0,_am_)},
                     v$0,
                     _ad_,
                     d)}
          var hi=v$0[2];
          if(3 <= d[9])
           return b3(function(_al_){return t_decode_utf_16_lo$0(hi,_al_)},d);
          var _ae_=d[9];
          return ret
                  (decode_utf_16$0,
                   malformed_pair(be,hi,Stdlib_bytes[3],0,0),
                   _ae_,
                   d)}
        var _af_=2,_ag_=[0,852405675,u_bom];
        return ret
                (function(_ak_){return b3(t_decode_utf_16$0,_ak_)},
                 _ag_,
                 _af_,
                 d)}
      var u=v[2],_ah_=2,_ai_=[0,852405675,caml_call1(Stdlib_uchar[9],u)];
      return ret
              (function(_aj_){return b3(t_decode_utf_16$0,_aj_)},_ai_,_ah_,d)}
    function k(d)
     {function setup(d)
       {var match=r_encoding(d[8],0,d[9]),_ac_=match[1];
        if(-211555818 === _ac_)
         {var r=match[2];
          d[2] = -211555818;
          d[18] = decode_utf_16;
          return guessed_utf_16(d,0,r)}
        if(684370880 <= _ac_)
         {var r$0=match[2];
          d[2] = 684370880;
          d[18] = decode_utf_8;
          if(3455931 === r$0)return 3455931;
          if(427938126 <= r$0)
           {var
             b3=
              function(d)
               {var
                 b3=caml_bytes_unsafe_get(d[8],2),
                 n=caml_check_bound(utf_8_len,b3)[1 + b3];
                return 0 === n
                        ?ret(decode_utf_8,malformed(d[8],2,1),1,d)
                        :(d[10]
                          =
                          n,
                          d[9]
                          =
                          1,
                          unsafe_set_byte(d[8],0,b3),
                          t_fill(t_decode_utf_8,d))},
             b2=
              function(d)
               {var
                 b2=caml_bytes_unsafe_get(d[8],1),
                 b3$0=2 < d[9]?b3:decode_utf_8,
                 n=caml_check_bound(utf_8_len,b2)[1 + b2];
                if(0 === n)return ret(b3$0,malformed(d[8],1,1),1,d);
                if(1 === n)return ret(b3$0,r_utf_8(d[8],1,1),1,d);
                d[10] = n;
                unsafe_set_byte(d[8],0,b2);
                if(3 <= d[9])
                 {d[9] = 2;
                  unsafe_set_byte(d[8],1,caml_bytes_unsafe_get(d[8],2))}
                else
                 d[9] = 1;
                return t_fill(t_decode_utf_8,d)},
             b1=caml_bytes_unsafe_get(d[8],0),
             b2$0=1 < d[9]?b2:decode_utf_8,
             n=caml_check_bound(utf_8_len,b1)[1 + b1];
            if(4 < n >>> 0)throw [0,Assert_failure,_B_];
            switch(n)
             {case 0:return ret(b2$0,malformed(d[8],0,1),1,d);
              case 1:return ret(b2$0,r_utf_8(d[8],0,1),1,d);
              case 2:
               return 2 <= d[9]
                       ?3 <= d[9]
                         ?ret(b3,r_utf_8(d[8],0,2),2,d)
                         :ret(decode_utf_8,r_utf_8(d[8],0,2),2,d)
                       :ret(decode_utf_8,malformed(d[8],0,1),1,d);
              case 3:
               if(3 <= d[9])return ret(decode_utf_8,r_utf_8(d[8],0,3),3,d);
               var _aa_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_aa_,d);
              default:
               if(3 <= d[9]){d[10] = 4;return t_fill(t_decode_utf_8,d)}
               var _ab_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_ab_,d)}}
          return ret(decode_utf_8,[0,852405675,u_bom],3,d)}
        var r$1=match[2];
        d[2] = -211558048;
        d[18] = decode_utf_16be;
        return guessed_utf_16(d,1,r$1)}
      t_need(d,3);
      return t_fill(setup,d)}
    function nline(d){d[14] = 0;d[13] = d[13] + 1 | 0;return 0}
    function ncol(d){d[14] = d[14] + 1 | 0;return 0}
    function ncount(d){d[16] = d[16] + 1 | 0;return 0}
    function cr(d,b){d[12] = b;return 0}
    function pp(d,v)
     {if(852405675 <= v[1])
       {var
         u=v[2],
         match=caml_call1(Stdlib_uchar[10],u),
         _$_=match - 133 | 0,
         switch$0=0;
        if(8100 < _$_ >>> 0)
         {var switcher=_$_ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              ncount(d);
              return last_cr?v:(nline(d),v);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return v}}
        else
         if(8097 < (_$_ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_readline(d,v)
     {if(852405675 <= v[1])
       {var
         u=v[2],
         match=caml_call1(Stdlib_uchar[10],u),
         ___=match - 133 | 0,
         switch$0=0;
        if(8100 < ___ >>> 0)
         {var switcher=___ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(8097 < (___ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),[0,852405675,d[4]])
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_nlf(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],match=caml_call1(Stdlib_uchar[10],u),switch$0=0;
        if(14 <= match)
         {if(8232 <= match)
           {if(! (8234 <= match))switch$0 = 1}
          else
           if(133 === match)
            {cr(d,0);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(10 <= match)
          {var switcher=match - 10 | 0;
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_ascii(d,v)
     {if(852405675 <= v[1])
       {var
         u=v[2],
         match=caml_call1(Stdlib_uchar[10],u),
         _Z_=match - 133 | 0,
         switch$0=0;
        if(8100 < _Z_ >>> 0)
         {var switcher=_Z_ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(8097 < (_Z_ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function decode_fun(param)
     {return 143365725 <= param
              ?423112016 <= param
                ?684370880 <= param?decode_utf_8:decode_us_ascii
                :338302576 <= param?decode_iso_8859_1:decode_utf_16be
              :-211555818 <= param?decode_utf_16:decode_utf_16be}
    function decoder(nln,encoding,src)
     {if(nln)
       {var _X_=nln[1],_Y_=_X_[1];
        if(3895880 === _Y_)
         var nl=_X_[2],nl$0=nl,pp$0=pp_nln_nlf;
        else
         if(605782321 <= _Y_)
          var nl$1=_X_[2],nl$0=nl$1,pp$0=pp_nln_ascii;
         else
          var nl$2=_X_[2],nl$0=nl$2,pp$0=pp_nln_readline}
      else
       var nl$3=caml_call1(Stdlib_uchar[9],10),nl$0=nl$3,pp$0=pp;
      if(encoding)
       var e=encoding[1],k$0=decode_fun(e),encoding$0=e;
      else
       var k$0=k,encoding$0=684370880;
      if(typeof src === "number")
       var i_max=0,i_pos=1,i=Stdlib_bytes[3];
      else
       if(438511779 <= src[1])
        var i_max=0,i_pos=1,i=caml_create_bytes(65536);
       else
        var
         s=src[2],
         i_max$0=caml_ml_string_length(s) - 1 | 0,
         i$0=caml_call1(Stdlib_bytes[43],s),
         i_max=i_max$0,
         i_pos=0,
         i=i$0;
      var utf16=143365725 === encoding$0?1:0;
      return [0,
              src,
              encoding$0,
              nln,
              nl$0,
              i,
              i_pos,
              i_max,
              caml_create_bytes(4),
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              function(d,v)
               {if(852405675 <= v[1])
                 {var u=v[2],match=caml_call1(Stdlib_uchar[10],u);
                  if(65279 === match)
                   {if(utf16){d[2] = -211558048;d[18] = decode_utf_16be}
                    d[11] = 1;
                    d[17] = pp$0;
                    return caml_call1(d[18],d)}
                  if(65534 === match && utf16)
                   {d[2] = -211555818;
                    d[18] = decode_utf_16;
                    d[11] = 1;
                    d[17] = pp$0;
                    return caml_call1(d[18],d)}
                  d[11] = 0;
                  d[17] = pp$0;
                  return caml_call2(d[17],d,v)}
                d[11] = 0;
                d[17] = pp$0;
                return caml_call2(d[17],d,v)},
              k$0]}
    function decode(d){return caml_call1(d[18],d)}
    function decoder_line(d){return d[13]}
    function decoder_col(d){return d[14]}
    function decoder_byte_count(d){return d[15]}
    function decoder_count(d){return d[16]}
    function decoder_removed_bom(d){return d[11]}
    function decoder_src(d){return d[1]}
    function decoder_nln(d){return d[3]}
    function decoder_encoding(d){return d[2]}
    function set_decoder_encoding(d,e)
     {d[2] = e;d[18] = decode_fun(e);return 0}
    function o_rem(e){return (e[5] - e[4] | 0) + 1 | 0}
    function dst(e,s,j,l)
     {var _U_=j < 0?1:0;
      if(_U_)
       var _V_=_U_;
      else
       var
        _W_=l < 0?1:0,
        _V_=_W_ || (caml_ml_bytes_length(s) < (j + l | 0)?1:0);
      if(_V_)invalid_bounds(j,l);
      e[3] = s;
      e[4] = j;
      e[5] = (j + l | 0) - 1 | 0;
      return 0}
    function flush(k,e)
     {var _T_=e[1];
      if(typeof _T_ === "number")
       {e[9]
        =
        function(e,param)
         {if(typeof param === "number" && 1006505782 <= param)
           return caml_call1(k,e);
          return caml_call1(Stdlib[1],cst_expected_Await_encode)};
        return 939392865}
      if(438511779 <= _T_[1])
       {var oc=_T_[2];
        caml_call4(Stdlib[68],oc,e[3],0,e[4]);
        e[4] = 0;
        return caml_call1(k,e)}
      var b=_T_[2],o=caml_call1(Stdlib_bytes[42],e[3]);
      caml_call4(Stdlib_buffer[16],b,o,0,e[4]);
      e[4] = 0;
      return caml_call1(k,e)}
    function t_range(e,max){e[7] = 0;e[8] = max;return 0}
    function t_flush(k,e)
     {function blit(e,l)
       {caml_blit_bytes(e[6],e[7],e[3],e[4],l);
        e[4] = e[4] + l | 0;
        e[7] = e[7] + l | 0;
        return 0}
      var rem=o_rem(e),len=(e[8] - e[7] | 0) + 1 | 0;
      return rem < len
              ?(blit(e,rem),flush(function(_S_){return t_flush(k,_S_)},e))
              :(blit(e,len),caml_call1(k,e))}
    function encode_utf_8(e,v)
     {function k(e){e[9] = encode_utf_8;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(127 < u$0)
       {if(2047 < u$0)
         {if(65535 < u$0)
           {if(4 <= rem)
             {var j=e[4];e[4] = e[4] + 4 | 0;var k$0=k,j$0=j,s=e[3]}
            else
             {t_range(e,3);
              var
               _M_=function(_R_){return t_flush(k,_R_)},
               k$0=_M_,
               j$0=0,
               s=e[6]}
            unsafe_set_byte(s,j$0,240 | u$0 >>> 18 | 0);
            unsafe_set_byte(s,j$0 + 1 | 0,128 | (u$0 >>> 12 | 0) & 63);
            unsafe_set_byte(s,j$0 + 2 | 0,128 | (u$0 >>> 6 | 0) & 63);
            unsafe_set_byte(s,j$0 + 3 | 0,128 | u$0 & 63);
            return k$0(e)}
          if(3 <= rem)
           {var j$1=e[4];e[4] = e[4] + 3 | 0;var k$1=k,j$2=j$1,s$0=e[3]}
          else
           {t_range(e,2);
            var
             _N_=function(_Q_){return t_flush(k,_Q_)},
             k$1=_N_,
             j$2=0,
             s$0=e[6]}
          unsafe_set_byte(s$0,j$2,224 | u$0 >>> 12 | 0);
          unsafe_set_byte(s$0,j$2 + 1 | 0,128 | (u$0 >>> 6 | 0) & 63);
          unsafe_set_byte(s$0,j$2 + 2 | 0,128 | u$0 & 63);
          return k$1(e)}
        if(2 <= rem)
         {var j$3=e[4];e[4] = e[4] + 2 | 0;var k$2=k,j$4=j$3,s$1=e[3]}
        else
         {t_range(e,1);
          var _O_=function(_P_){return t_flush(k,_P_)},k$2=_O_,j$4=0,s$1=e[6]}
        unsafe_set_byte(s$1,j$4,192 | u$0 >>> 6 | 0);
        unsafe_set_byte(s$1,j$4 + 1 | 0,128 | u$0 & 63);
        return k$2(e)}
      return 1 <= rem
              ?(unsafe_set_byte(e[3],e[4],u$0),e[4] = e[4] + 1 | 0,k(e))
              :flush(function(e){return encode_utf_8(e,v)},e)}
    function encode_utf_16be(e,v)
     {function k(e){e[9] = encode_utf_16be;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(65536 <= u$0)
       {if(4 <= rem)
         {var j=e[4];e[4] = e[4] + 4 | 0;var k$0=k,j$0=j,s=e[3]}
        else
         {t_range(e,3);
          var _I_=function(_L_){return t_flush(k,_L_)},k$0=_I_,j$0=0,s=e[6]}
        var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        unsafe_set_byte(s,j$0,hi >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 1 | 0,hi & 255);
        unsafe_set_byte(s,j$0 + 2 | 0,lo >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 3 | 0,lo & 255);
        return k$0(e)}
      if(2 <= rem)
       {var j$1=e[4];e[4] = e[4] + 2 | 0;var k$1=k,j$2=j$1,s$0=e[3]}
      else
       {t_range(e,1);
        var _J_=function(_K_){return t_flush(k,_K_)},k$1=_J_,j$2=0,s$0=e[6]}
      unsafe_set_byte(s$0,j$2,u$0 >>> 8 | 0);
      unsafe_set_byte(s$0,j$2 + 1 | 0,u$0 & 255);
      return k$1(e)}
    function encode_utf_16le(e,v)
     {function k(e){e[9] = encode_utf_16le;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(65536 <= u$0)
       {if(4 <= rem)
         {var j=e[4];e[4] = e[4] + 4 | 0;var k$0=k,j$0=j,s=e[3]}
        else
         {t_range(e,3);
          var _E_=function(_H_){return t_flush(k,_H_)},k$0=_E_,j$0=0,s=e[6]}
        var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        unsafe_set_byte(s,j$0,hi & 255);
        unsafe_set_byte(s,j$0 + 1 | 0,hi >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 2 | 0,lo & 255);
        unsafe_set_byte(s,j$0 + 3 | 0,lo >>> 8 | 0);
        return k$0(e)}
      if(2 <= rem)
       {var j$1=e[4];e[4] = e[4] + 2 | 0;var k$1=k,j$2=j$1,s$0=e[3]}
      else
       {t_range(e,1);
        var _F_=function(_G_){return t_flush(k,_G_)},k$1=_F_,j$2=0,s$0=e[6]}
      unsafe_set_byte(s$0,j$2,u$0 & 255);
      unsafe_set_byte(s$0,j$2 + 1 | 0,u$0 >>> 8 | 0);
      return k$1(e)}
    function encoder(encoding,dst)
     {if(typeof dst === "number")
       var o_max=0,o_pos=1,o=Stdlib_bytes[3];
      else
       var o$0=caml_create_bytes(65536),o_max=65535,o_pos=0,o=o$0;
      var
       _D_=
        143365725 <= encoding
         ?684370880 <= encoding?encode_utf_8:encode_utf_16be
         :-211555818 <= encoding?encode_utf_16le:encode_utf_16be;
      return [0,dst,encoding,o,o_pos,o_max,caml_create_bytes(4),1,0,_D_]}
    function encode(e,v){return caml_call2(e[9],e,v)}
    function encoder_encoding(e){return e[2]}
    function encoder_dst(e){return e[1]}
    var Manual=[0,src,dst,o_rem];
    function encoding_guess(s)
     {var
       s$0=caml_call1(Stdlib_bytes[43],s),
       match=
        r_encoding(s$0,0,caml_call2(Stdlib[17],caml_ml_bytes_length(s$0),3)),
       _C_=match[1];
      if(-211555818 === _C_)
       {var d=match[2];return [0,-211555818,3299808 === d?1:0]}
      if(684370880 <= _C_)
       {var d$0=match[2];return [0,684370880,3299808 === d$0?1:0]}
      var d$1=match[2];
      return [0,-211558048,3299808 === d$1?1:0]}
    function fold_utf_8(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var need=utf_8_len[1 + caml_bytes_unsafe_get(s$0,i)];
        if(0 === need)
         {var
           i$0=i + 1 | 0,
           acc$1=caml_call3(f,acc$0,i,malformed(s$0,i,1)),
           acc$0=acc$1,
           i=i$0;
          continue}
        var rem=(last - i | 0) + 1 | 0;
        if(rem < need)return caml_call3(f,acc$0,i,malformed(s$0,i,rem));
        var
         i$1=i + need | 0,
         acc$2=caml_call3(f,acc$0,i,r_utf_8(s$0,i,need)),
         acc$0=acc$2,
         i=i$1;
        continue}}
    function fold_utf_16be(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var rem=(last - i | 0) + 1 | 0;
        if(2 <= rem)
         {var v=r_utf_16(s$0,i,i + 1 | 0);
          if(659980059 <= v[1])
           {var i$0=i + 2 | 0,acc$1=caml_call3(f,acc$0,i,v),acc$0=acc$1,i=i$0;
            continue}
          var hi=v[2];
          if(4 <= rem)
           {var
             i$1=i + 4 | 0,
             acc$2=
              caml_call3(f,acc$0,i,r_utf_16_lo(hi,s$0,i + 2 | 0,i + 3 | 0)),
             acc$0=acc$2,
             i=i$1;
            continue}
          return caml_call3(f,acc$0,i,malformed(s$0,i,rem))}
        return caml_call3(f,acc$0,i,malformed(s$0,i,1))}}
    function fold_utf_16le(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var rem=(last - i | 0) + 1 | 0;
        if(2 <= rem)
         {var v=r_utf_16(s$0,i + 1 | 0,i);
          if(659980059 <= v[1])
           {var i$0=i + 2 | 0,acc$1=caml_call3(f,acc$0,i,v),acc$0=acc$1,i=i$0;
            continue}
          var hi=v[2];
          if(4 <= rem)
           {var
             i$1=i + 4 | 0,
             acc$2=
              caml_call3(f,acc$0,i,r_utf_16_lo(hi,s$0,i + 3 | 0,i + 2 | 0)),
             acc$0=acc$2,
             i=i$1;
            continue}
          return caml_call3(f,acc$0,i,malformed(s$0,i,rem))}
        return caml_call3(f,acc$0,i,malformed(s$0,i,1))}}
    var String=[0,encoding_guess,fold_utf_8,fold_utf_16be,fold_utf_16le];
    function add_utf_8(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      return 127 < u$0
              ?2047 < u$0
                ?65535 < u$0
                  ?(w(240 | u$0 >>> 18 | 0),
                    w(128 | (u$0 >>> 12 | 0) & 63),
                    w(128 | (u$0 >>> 6 | 0) & 63),
                    w(128 | u$0 & 63))
                  :(w(224 | u$0 >>> 12 | 0),
                    w(128 | (u$0 >>> 6 | 0) & 63),
                    w(128 | u$0 & 63))
                :(w(192 | u$0 >>> 6 | 0),w(128 | u$0 & 63))
              :w(u$0)}
    function add_utf_16be(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      if(65536 <= u$0)
       {var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        w(hi >>> 8 | 0);
        w(hi & 255);
        w(lo >>> 8 | 0);
        return w(lo & 255)}
      w(u$0 >>> 8 | 0);
      return w(u$0 & 255)}
    function add_utf_16le(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      if(65536 <= u$0)
       {var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        w(hi & 255);
        w(hi >>> 8 | 0);
        w(lo & 255);
        return w(lo >>> 8 | 0)}
      w(u$0 & 255);
      return w(u$0 >>> 8 | 0)}
    var
     Buffer=[0,add_utf_8,add_utf_16be,add_utf_16le],
     Uutf=
      [0,
       u_bom,
       u_rep,
       encoding_of_string,
       encoding_to_string,
       decoder,
       decode,
       decoder_encoding,
       set_decoder_encoding,
       decoder_line,
       decoder_col,
       decoder_byte_count,
       decoder_count,
       decoder_removed_bom,
       decoder_src,
       decoder_nln,
       pp_decode,
       encoder,
       encode,
       encoder_encoding,
       encoder_dst,
       Manual,
       String,
       Buffer];
    runtime.caml_register_global(66,Uutf,"Uutf");
    return}
  (function(){return this}()));


//# 1 ".ace_common.objs/ace_common.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int64_and=runtime.caml_int64_and,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Not_a_valid_int32=caml_string_of_jsbytes("Not a valid int32."),
     cst_1=caml_string_of_jsbytes("1"),
     cst_2=caml_string_of_jsbytes("2"),
     cst_3=caml_string_of_jsbytes("3"),
     cst_4=caml_string_of_jsbytes("4"),
     cst_1$0=caml_string_of_jsbytes("1"),
     cst_2$0=caml_string_of_jsbytes("2"),
     cst_3$0=caml_string_of_jsbytes("3"),
     cst_Unknown_answer=caml_string_of_jsbytes("Unknown answer."),
     cst_Old_rod=caml_string_of_jsbytes("Old rod"),
     cst_Good_rod=caml_string_of_jsbytes("Good rod"),
     cst_Super_rod=caml_string_of_jsbytes("Super rod"),
     cst_Save_InvalidSave=caml_string_of_jsbytes("Save.InvalidSave"),
     cst_Preprocess_VarNotFound=
      caml_string_of_jsbytes("Preprocess.VarNotFound"),
     partial=[12,32,[5,0,0,0,[17,4,0]]],
     cst_adc$0=caml_string_of_jsbytes("adc"),
     cst_sbc$0=caml_string_of_jsbytes("sbc"),
     cst_bic$0=caml_string_of_jsbytes("bic"),
     cst_and$0=caml_string_of_jsbytes("and"),
     cst_adc=caml_string_of_jsbytes("adc"),
     cst_and=caml_string_of_jsbytes("and"),
     cst_bic=caml_string_of_jsbytes("bic"),
     cst_sbc=caml_string_of_jsbytes("sbc"),
     cst_Not_implemented$0=caml_string_of_jsbytes("Not implemented"),
     cst_Not_implemented=caml_string_of_jsbytes("Not implemented"),
     cst_Arm_InvalidCommand=caml_string_of_jsbytes("Arm.InvalidCommand"),
     invalid_str=caml_string_of_jsbytes("\xe2\x9c\x96"),
     cst$1=caml_string_of_jsbytes("\xe2\x90\xa3"),
     cst$2=caml_string_of_jsbytes(" "),
     cst=caml_string_of_jsbytes(""),
     cst$0=caml_string_of_jsbytes(" "),
     cst_Not_implemented$2=caml_string_of_jsbytes("Not implemented"),
     cst_Not_implemented$1=caml_string_of_jsbytes("Not implemented"),
     cst_Optimizer_CannotOptimize=
      caml_string_of_jsbytes("Optimizer.CannotOptimize"),
     cst_B$0=caml_string_of_jsbytes("B"),
     cst_ADC=caml_string_of_jsbytes("ADC"),
     cst_AND=caml_string_of_jsbytes("AND"),
     cst_BIC=caml_string_of_jsbytes("BIC"),
     cst_LDR=caml_string_of_jsbytes("LDR"),
     cst_MOV=caml_string_of_jsbytes("MOV"),
     cst_MVN=caml_string_of_jsbytes("MVN"),
     cst_SBC=caml_string_of_jsbytes("SBC"),
     cst_STR=caml_string_of_jsbytes("STR"),
     cst_r15=caml_string_of_jsbytes("r15"),
     cst_r1=caml_string_of_jsbytes("r1"),
     cst_fp=caml_string_of_jsbytes("fp"),
     cst_ip=caml_string_of_jsbytes("ip"),
     cst_lr=caml_string_of_jsbytes("lr"),
     cst_pc=caml_string_of_jsbytes("pc"),
     cst_r0=caml_string_of_jsbytes("r0"),
     cst_r10=caml_string_of_jsbytes("r10"),
     cst_r11=caml_string_of_jsbytes("r11"),
     cst_r12=caml_string_of_jsbytes("r12"),
     cst_r13=caml_string_of_jsbytes("r13"),
     cst_r14=caml_string_of_jsbytes("r14"),
     cst_r7=caml_string_of_jsbytes("r7"),
     cst_r2=caml_string_of_jsbytes("r2"),
     cst_r3=caml_string_of_jsbytes("r3"),
     cst_r4=caml_string_of_jsbytes("r4"),
     cst_r5=caml_string_of_jsbytes("r5"),
     cst_r6=caml_string_of_jsbytes("r6"),
     cst_r8=caml_string_of_jsbytes("r8"),
     cst_r9=caml_string_of_jsbytes("r9"),
     cst_sb=caml_string_of_jsbytes("sb"),
     cst_sl=caml_string_of_jsbytes("sl"),
     cst_sp=caml_string_of_jsbytes("sp"),
     cst_L$0=caml_string_of_jsbytes("L"),
     cst_S$0=caml_string_of_jsbytes("S"),
     mods=[0,0,0,0,0],
     cst_L=caml_string_of_jsbytes("L"),
     cst_S=caml_string_of_jsbytes("S"),
     cst_BT=caml_string_of_jsbytes("BT"),
     cst_SB=caml_string_of_jsbytes("SB"),
     cst_SH=caml_string_of_jsbytes("SH"),
     cst_B=caml_string_of_jsbytes("B"),
     cst_H=caml_string_of_jsbytes("H"),
     cst_T=caml_string_of_jsbytes("T"),
     cst_W=caml_string_of_jsbytes("W"),
     cst_LE=caml_string_of_jsbytes("LE"),
     cst_AL=caml_string_of_jsbytes("AL"),
     cst_CC=caml_string_of_jsbytes("CC"),
     cst_CS=caml_string_of_jsbytes("CS"),
     cst_EQ=caml_string_of_jsbytes("EQ"),
     cst_GE=caml_string_of_jsbytes("GE"),
     cst_GT=caml_string_of_jsbytes("GT"),
     cst_HI=caml_string_of_jsbytes("HI"),
     cst_HS=caml_string_of_jsbytes("HS"),
     cst_LO=caml_string_of_jsbytes("LO"),
     cst_LS=caml_string_of_jsbytes("LS"),
     cst_LT=caml_string_of_jsbytes("LT"),
     cst_MI=caml_string_of_jsbytes("MI"),
     cst_NE=caml_string_of_jsbytes("NE"),
     cst_PL=caml_string_of_jsbytes("PL"),
     cst_VC=caml_string_of_jsbytes("VC"),
     cst_VS=caml_string_of_jsbytes("VS"),
     cst_Parser_ast_CommandError=
      caml_string_of_jsbytes("Parser_ast.CommandError"),
     cst_Parser_ast_StructError=
      caml_string_of_jsbytes("Parser_ast.StructError"),
     cst_Parser_MenhirBasics_Error=
      caml_string_of_jsbytes("Parser.MenhirBasics.Error"),
     cst_Unexpected_char=caml_string_of_jsbytes("Unexpected char: "),
     cst_String_cannot_be_multiline=
      caml_string_of_jsbytes("String cannot be multiline"),
     cst_String_is_not_terminated=
      caml_string_of_jsbytes("String is not terminated"),
     cst_Illegal_string_character=
      caml_string_of_jsbytes("Illegal string character: "),
     cst_Lexer_SyntaxError=caml_string_of_jsbytes("Lexer.SyntaxError"),
     ocaml_lex_tables=
      [0,
       caml_string_of_jsbytes
        ("\0\0\xd7\xff\xd8\xff\xd9\xff\xda\xff\xdf\xff\xe0\xff\xe1\xff\xe2\xff\xe3\xff\xe4\xff\xe5\xff\xe7\xff\xe8\xff\xe9\xff\xea\xff\xeb\xff\xec\xff\xee\xffO\0\x9a\0\xa4\0\xf1\xff\x01\0\x02\0\x07\x001\0\xf4\xff\t\0c\0\x0e\0N\0N\0Q\0\xed\x008\x01\x83\x01N\0R\0m\0n\0o\0p\0\xfe\xff\xce\x01\x19\x02d\x02\xaf\x02\xfa\x02E\x03\x90\x03\xdb\x03&\x04q\x04\xfa\xff\xf9\xff\xf7\xff\xf6\xff\xf5\xff\xf2\xff\x04\0\xae\0\xb7\0\xbc\x04\xb9\0\xd3\x04\xc4\0\xd7\0\xec\x04\xf5\xff\xf6\xff\x07\0\xed\x04\xcc\x04\xff\xff\xf8\xff\xf9\xff\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\x0f\0\xfd\xff\xfe\xff\xff\xff\b\0"),
       caml_string_of_jsbytes
        ('\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\x0f\0\x0f\0\xff\xff\x0e\0(\0\f\0!\0\xff\xff"\0#\0$\0\x19\0(\0(\0\x10\0\x10\0\x10\0\x0b\0\x12\0\x07\0\xff\xff\xff\xff\0\0\xff\xff\x10\0\x10\0\x02\0\x10\0\x10\0\x03\0\x10\0\x10\0\x10\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\xff\xff\t\0\b\0\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0'),
       caml_string_of_jsbytes
        ("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffH\0\0\0\0\0\xff\xffH\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0S\0\0\0\0\0\0\0\xff\xff"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\0\x16\0\x16\0;\0\x17\0;\0<\0\x19\0F\0U\0\0\0\0\0\0\0\0\0\0\0\0\0U\0\0\0\0\0V\0\0\0\0\0\0\0\x19\0\x1f\0\x12\0\x11\0\0\0\x1c\0\x1d\0\x19\0\t\0\b\0\x05\0\x07\0\f\0\x06\0\x1b\0\x1a\0\x15\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\n\0\x1b\0!\0&\0 \0\x0b\0%\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x10\0\x18\0\x0f\0\x04\0\x13\0\x1b\0\x13\0\x13\0\x13\0\x13\0\x13\0\"\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0$\0\x13\0\x13\0\x13\0\x13\0\x13\0#\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x0e\0\x1e\0\r\0\x03\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0:\x009\x008\x007\x006\0+\0'\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0(\0)\0*\0*\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0C\0C\0C\0C\0C\0C\0C\0C\0>\0B\0B\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0=\0B\0B\0\0\0\0\0\0\0@\0\0\0\0\0?\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0>\0C\0C\0C\0C\0C\0C\0C\0C\0T\0\0\0\0\0\0\0=\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0?\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\x002\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0/\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0,\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0-\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0.\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\x000\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\x001\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\x003\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\x004\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\x005\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0F\0\xff\xff\0\0G\0\xff\xffQ\0\0\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\0\0J\0\xff\xff\0\0\0\0\0\0\0\0A\0A\0A\0A\0A\0A\0\0\0\0\0\0\0A\0A\0A\0A\0A\0A\0\0\0\0\0\0\0\0\0\0\0P\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0N\0\0\0A\0A\0A\0A\0A\0A\0M\0\0\0\0\0\0\0L\0\0\0K\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0I\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\0\xff\xff"),
       caml_string_of_jsbytes
        ('\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x17\0\x18\0\0\0<\0\x18\0\x19\0G\0V\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\0\xff\xff\xff\xffR\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x1d\0\x1e\0\x1f\0 \0!\0%\0&\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\'\0(\0)\0*\0\x13\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0=\0=\0=\0=\0=\0=\0=\0=\0\x15\0>\0>\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\x15\0B\0B\0\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0C\0C\0C\0C\0C\0C\0C\0C\0R\0\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\0\xff\xff\xff\xff\x15\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0\xff\xff\xff\xff\xff\xff\xff\xff"\0\xff\xff"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0"\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0\xff\xff\xff\xff\xff\xff\xff\xff#\0\xff\xff#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0#\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xff$\0\xff\xff$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0$\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff,\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff-\0\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff.\0\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff/\0\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff0\0\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff1\0\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff2\0\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff3\0\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff4\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0D\0H\0\xff\xffD\0H\0I\0\xff\xff?\0?\0?\0?\0?\0?\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xffD\0H\0\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xff\xff\xff\xff\xffI\0\xff\xffA\0A\0A\0A\0A\0A\0I\0\xff\xff\xff\xff\xff\xffI\0\xff\xffI\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0H\0'),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     cst_Parse_InvalidContent=caml_string_of_jsbytes("Parse.InvalidContent"),
     cst_filename=caml_string_of_jsbytes("filename"),
     cst_Please_specify_the_filenam=
      caml_string_of_jsbytes
       ("Please specify the 'filename' header everywhere."),
     cst_Invalid_headers=caml_string_of_jsbytes("Invalid headers."),
     cst_start=caml_string_of_jsbytes("start"),
     cst_Exit_code_has_invalid_head=
      caml_string_of_jsbytes("Exit code has invalid headers."),
     cst_txt=caml_string_of_jsbytes(".txt"),
     cst_Exit_codes_cannot_be_tweak=
      caml_string_of_jsbytes
       ("Exit codes cannot be tweaked (please remove interrogation marks)."),
     cst_Exit_NoExitCode=caml_string_of_jsbytes("Exit.NoExitCode"),
     cst_Invalid_starting_position=
      caml_string_of_jsbytes("Invalid starting position."),
     cst_Some_codes_cannot_be_posit=
      caml_string_of_jsbytes
       ("Some codes cannot be positionned due to non-consecutive 0xFF bytes."),
     cst_Result_is_inconsistent_Ple=
      caml_string_of_jsbytes
       ("Result is inconsistent. Please check the fillers."),
     cst_Result_is_inconsistent_Ple$0=
      caml_string_of_jsbytes
       ("Result is inconsistent. Please check the fillers."),
     cst_Boxes_BoxFittingError=caml_string_of_jsbytes("Boxes.BoxFittingError"),
     nop_code=[0,0,[0,0,[0,0,[0,0,0]]]],
     nop_code2=[0,0,[0,0,[0,0,[0,176,0]]]],
     cst$9=caml_string_of_jsbytes("!"),
     cst$10=caml_string_of_jsbytes(""),
     cst_Not_implemented$4=caml_string_of_jsbytes("Not implemented"),
     cst_Not_implemented$3=caml_string_of_jsbytes("Not implemented"),
     cst_L$1=caml_string_of_jsbytes("L"),
     cst$8=caml_string_of_jsbytes(""),
     cst_S$1=caml_string_of_jsbytes("S"),
     cst$7=caml_string_of_jsbytes(""),
     cst$5=caml_string_of_jsbytes("-"),
     cst$6=caml_string_of_jsbytes(""),
     cst_B$1=caml_string_of_jsbytes("B"),
     cst_SB$0=caml_string_of_jsbytes("SB"),
     cst_H$0=caml_string_of_jsbytes("H"),
     cst_SH$0=caml_string_of_jsbytes("SH"),
     cst$4=caml_string_of_jsbytes(""),
     cst_T$0=caml_string_of_jsbytes("T"),
     cst_BT$0=caml_string_of_jsbytes("BT"),
     cst_EQ$0=caml_string_of_jsbytes("EQ"),
     cst_NE$0=caml_string_of_jsbytes("NE"),
     cst_CS$0=caml_string_of_jsbytes("CS"),
     cst_HS$0=caml_string_of_jsbytes("HS"),
     cst_CC$0=caml_string_of_jsbytes("CC"),
     cst_LO$0=caml_string_of_jsbytes("LO"),
     cst_MI$0=caml_string_of_jsbytes("MI"),
     cst_PL$0=caml_string_of_jsbytes("PL"),
     cst_VS$0=caml_string_of_jsbytes("VS"),
     cst_VC$0=caml_string_of_jsbytes("VC"),
     cst_HI$0=caml_string_of_jsbytes("HI"),
     cst_LS$0=caml_string_of_jsbytes("LS"),
     cst_GE$0=caml_string_of_jsbytes("GE"),
     cst_LT$0=caml_string_of_jsbytes("LT"),
     cst_GT$0=caml_string_of_jsbytes("GT"),
     cst_LE$0=caml_string_of_jsbytes("LE"),
     cst$3=caml_string_of_jsbytes(""),
     cst_Invalid_filler=caml_string_of_jsbytes("Invalid filler."),
     cst_Invalid_headers$0=caml_string_of_jsbytes("Invalid headers."),
     cst_onlyraw=caml_string_of_jsbytes("onlyraw"),
     cst_Invalid_headers$3=caml_string_of_jsbytes("Invalid headers."),
     cst_Only_raw_mode_does_not_sup=
      caml_string_of_jsbytes("Only-raw mode does not support exit codes."),
     cst_start$0=caml_string_of_jsbytes("start"),
     cst_Invalid_headers$2=caml_string_of_jsbytes("Invalid headers."),
     cst_fill=caml_string_of_jsbytes("fill"),
     cst_fill$0=caml_string_of_jsbytes("fill"),
     cst_The_fill_header_has_a_diff=
      caml_string_of_jsbytes
       ("The 'fill' header has a different value in the main code and in the exit code."),
     cst_Invalid_headers$1=caml_string_of_jsbytes("Invalid headers."),
     Stdlib_int32=global_data.Stdlib__int32,
     Assert_failure=global_data.Assert_failure,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_int64=global_data.Stdlib__int64,
     Stdlib=global_data.Stdlib,
     Stdlib_filename=global_data.Stdlib__filename,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_format=global_data.Stdlib__format,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Big_int=global_data.Big_int,
     Stdlib_scanf=global_data.Stdlib__scanf,
     Stdlib_map=global_data.Stdlib__map,
     Stdlib_set=global_data.Stdlib__set,
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_lexing=global_data.Stdlib__lexing,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Uutf=global_data.Uutf,
     _c_=runtime.caml_int64_create_lo_mi_hi(16777215,255,0),
     _b_=[0,caml_string_of_jsbytes("IO/utils.ml"),21,45],
     _a_=runtime.caml_int64_create_lo_mi_hi(0,16776960,65535),
     _f_=
      [0,
       caml_string_of_jsbytes("GAEM"),
       caml_string_of_jsbytes("GAME"),
       caml_string_of_jsbytes("GEAM"),
       caml_string_of_jsbytes("GEMA"),
       caml_string_of_jsbytes("GMAE"),
       caml_string_of_jsbytes("GMEA"),
       caml_string_of_jsbytes("AGEM"),
       caml_string_of_jsbytes("AGME"),
       caml_string_of_jsbytes("AEGM"),
       caml_string_of_jsbytes("AEMG"),
       caml_string_of_jsbytes("AMGE"),
       caml_string_of_jsbytes("AMEG"),
       caml_string_of_jsbytes("EGAM"),
       caml_string_of_jsbytes("EGMA"),
       caml_string_of_jsbytes("EAGM"),
       caml_string_of_jsbytes("EAMG"),
       caml_string_of_jsbytes("EMGA"),
       caml_string_of_jsbytes("EMAG"),
       caml_string_of_jsbytes("MGAE"),
       caml_string_of_jsbytes("MGEA"),
       caml_string_of_jsbytes("MAGE"),
       caml_string_of_jsbytes("MAEG"),
       caml_string_of_jsbytes("MEGA"),
       caml_string_of_jsbytes("MEAG")],
     _u_=[0,caml_string_of_jsbytes("Pokemon/seed.ml"),66,2],
     _m_=runtime.caml_int64_create_lo_mi_hi(12996205,65,0),
     _n_=runtime.caml_int64_create_lo_mi_hi(24691,0,0),
     _o_=runtime.caml_int64_create_lo_mi_hi(12184421,238,0),
     _p_=runtime.caml_int64_create_lo_mi_hi(3498401,10,0),
     _q_=runtime.caml_int64_create_lo_mi_hi(0,256,0),
     _r_=runtime.caml_int64_create_lo_mi_hi(12141755,833,0),
     _t_=runtime.caml_int64_create_lo_mi_hi(16777215,255,0),
     _x_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Please enter your seed (use 0x prefix if hexadecimal): "),
        [17,2,0]],
       caml_string_of_jsbytes
        ("Please enter your seed (use 0x prefix if hexadecimal): @?")],
     _y_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Do you want to obtain this H1 seed using the freeze PRNG ACE code ?"),
        [17,4,0]],
       caml_string_of_jsbytes
        ("Do you want to obtain this H1 seed using the freeze PRNG ACE code ?@.")],
     _z_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("1. Yes, for a wild pokemon using sweet scent."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("1. Yes, for a wild pokemon using sweet scent.@.")],
     _A_=
      [0,
       [11,
        caml_string_of_jsbytes("2. Yes, for a wild pokemon using a rod."),
        [17,4,0]],
       caml_string_of_jsbytes("2. Yes, for a wild pokemon using a rod.@.")],
     _B_=
      [0,
       [11,
        caml_string_of_jsbytes("3. Yes, for a stationnary pokemon."),
        [17,4,0]],
       caml_string_of_jsbytes("3. Yes, for a stationnary pokemon.@.")],
     _C_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("4. No, but please show me the seeds in the vicinity."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("4. No, but please show me the seeds in the vicinity.@.")],
     _D_=
      [0,
       [11,caml_string_of_jsbytes("5. No (quit)."),[17,4,0]],
       caml_string_of_jsbytes("5. No (quit).@.")],
     _E_=
      [0,
       [11,caml_string_of_jsbytes("Cycle from seed 0: "),[5,12,0,0,[17,4,0]]],
       caml_string_of_jsbytes("Cycle from seed 0: %lu@.")],
     _F_=
      [0,
       [4,
        3,
        0,
        0,
        [11,
         caml_string_of_jsbytes(": "),
         [5,
          12,
          0,
          0,
          [11,caml_string_of_jsbytes(" ("),[5,7,0,0,[12,41,[17,4,0]]]]]]],
       caml_string_of_jsbytes("%i: %lu (%#lx)@.")],
     _G_=
      [0,
       [11,
        caml_string_of_jsbytes("Please enter the range (example: -25 5):"),
        [17,4,0]],
       caml_string_of_jsbytes("Please enter the range (example: -25 5):@.")],
     _H_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("For most legendaries, you should use the seed at cycle -3."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("For most legendaries, you should use the seed at cycle -3.@.")],
     _I_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Please refer to the instructions on the freeze PRNG ACE code for other stationnary pokemons."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("Please refer to the instructions on the freeze PRNG ACE code for other stationnary pokemons.@.")],
     _J_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("You should start the battle as soon as you can"),
        0],
       caml_string_of_jsbytes
        ("You should start the battle as soon as you can")],
     _K_=
      [0,
       [11,
        caml_string_of_jsbytes
         (" (just after having executed the ACE and closed the menu)."),
        [17,4,0]],
       caml_string_of_jsbytes
        (" (just after having executed the ACE and closed the menu).@.")],
     _L_=
      [0,
       [11,
        caml_string_of_jsbytes("Please select your configuration:"),
        [17,4,0]],
       caml_string_of_jsbytes("Please select your configuration:@.")],
     _M_=
      [0,
       [11,
        caml_string_of_jsbytes("1. I will not be fishing on route 119."),
        [17,4,0]],
       caml_string_of_jsbytes("1. I will not be fishing on route 119.@.")],
     _N_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("2. I will be fishing on route 119, but not for a feebas."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("2. I will be fishing on route 119, but not for a feebas.@.")],
     _O_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("3. I will be fishing for feebas on a feebas tile."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("3. I will be fishing for feebas on a feebas tile.@.")],
     _P_=
      [0,
       [11,
        caml_string_of_jsbytes("You should use the seed "),
        [5,
         7,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" (2 cycles before your target)."),
          [17,4,0]]]],
       caml_string_of_jsbytes
        ("You should use the seed %#lx (2 cycles before your target).@.")],
     _Q_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("You should use sweet scent directly after triggering the ACE,"),
        0],
       caml_string_of_jsbytes
        ("You should use sweet scent directly after triggering the ACE,")],
     _R_=
      [0,
       [11,
        caml_string_of_jsbytes(" without closing the pokemon menu."),
        [17,4,0]],
       caml_string_of_jsbytes(" without closing the pokemon menu.@.")],
     _S_=
      [0,
       [12,32,[4,3,0,0,[12,32,[4,3,0,0,0]]]],
       caml_string_of_jsbytes(" %i %i")],
     _aa_=[0,caml_string_of_jsbytes("Main/seed_tools_common.ml"),75,13],
     _W_=[0,[2,0,[12,58,[17,4,0]]],caml_string_of_jsbytes("%s:@.")],
     _X_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("\tWith lead: Must have Suction Cup or Sticky Hold lead"),
        [17,4,0]],
       caml_string_of_jsbytes
        ("\tWith lead: Must have Suction Cup or Sticky Hold lead@.")],
     _Y_=
      [0,
       [11,
        caml_string_of_jsbytes("\tUse seed "),
        [5,
         7,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" to generate target on advancement "),
          [4,3,0,0,[17,4,0]]]]],
       caml_string_of_jsbytes
        ("\tUse seed %#lx to generate target on advancement %i@.")],
     _Z_=
      [0,
       [11,caml_string_of_jsbytes("\tWith lead: No lead necessary"),[17,4,0]],
       caml_string_of_jsbytes("\tWith lead: No lead necessary@.")],
     ___=
      [0,
       [11,
        caml_string_of_jsbytes("\tUse seed "),
        [5,
         7,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" to generate target on advancement "),
          [4,3,0,0,[17,4,0]]]]],
       caml_string_of_jsbytes
        ("\tUse seed %#lx to generate target on advancement %i@.")],
     _$_=
      [0,
       [11,caml_string_of_jsbytes("\tNo matches found"),[17,4,0]],
       caml_string_of_jsbytes("\tNo matches found@.")],
     _T_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("You should use the rod directly after triggering the ACE"),
        0],
       caml_string_of_jsbytes
        ("You should use the rod directly after triggering the ACE")],
     _U_=
      [0,
       [11,
        caml_string_of_jsbytes(" (leave the pokemon menu and enter the bag)."),
        [17,4,0]],
       caml_string_of_jsbytes
        (" (leave the pokemon menu and enter the bag).@.")],
     _V_=
      [0,
       [11,caml_string_of_jsbytes("Thanks to Shao for this script."),[17,4,0]],
       caml_string_of_jsbytes("Thanks to Shao for this script.@.")],
     _ab_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" = "),
         [5,
          3,
          0,
          0,
          [11,caml_string_of_jsbytes(" ("),[5,7,0,0,[12,41,[17,4,0]]]]]]],
       caml_string_of_jsbytes("%s = %li (%#lx)@.")],
     _ac_=[0,[17,4,0],caml_string_of_jsbytes("@.")],
     _ad_=
      [0,
       [11,caml_string_of_jsbytes("Please enter low-PID: "),[17,2,0]],
       caml_string_of_jsbytes("Please enter low-PID: @?")],
     _ae_=[0,[12,32,[5,3,0,0,0]],caml_string_of_jsbytes(" %li")],
     _af_=
      [0,
       [11,caml_string_of_jsbytes("Please enter high-PID: "),[17,2,0]],
       caml_string_of_jsbytes("Please enter high-PID: @?")],
     _ag_=[0,[12,32,[5,3,0,0,0]],caml_string_of_jsbytes(" %li")],
     _ah_=
      [0,
       [11,
        caml_string_of_jsbytes("Please enter original trainer visible TID: "),
        [17,2,0]],
       caml_string_of_jsbytes("Please enter original trainer visible TID: @?")],
     _ai_=[0,[12,32,[5,3,0,0,0]],caml_string_of_jsbytes(" %li")],
     _aj_=
      [0,
       [11,
        caml_string_of_jsbytes("Please enter original trainer secret TID: "),
        [17,2,0]],
       caml_string_of_jsbytes("Please enter original trainer secret TID: @?")],
     _ak_=[0,[12,32,[5,3,0,0,0]],caml_string_of_jsbytes(" %li")],
     _al_=
      [0,
       [11,
        caml_string_of_jsbytes("Misc substructure position: "),
        [4,0,0,0,[17,4,0]]],
       caml_string_of_jsbytes("Misc substructure position: %d@.")],
     _am_=
      [0,
       [11,caml_string_of_jsbytes("IVEA offset: "),[4,7,0,0,[17,4,0]]],
       caml_string_of_jsbytes("IVEA offset: %#x@.")],
     _an_=
      [0,
       [11,caml_string_of_jsbytes("Please enter low-IVEA: "),[17,2,0]],
       caml_string_of_jsbytes("Please enter low-IVEA: @?")],
     _ao_=[0,[12,32,[5,3,0,0,0]],caml_string_of_jsbytes(" %li")],
     _ap_=
      [0,
       [11,caml_string_of_jsbytes("Please enter high-IVEA: "),[17,2,0]],
       caml_string_of_jsbytes("Please enter high-IVEA: @?")],
     _aq_=[0,[12,32,[5,3,0,0,0]],caml_string_of_jsbytes(" %li")],
     _ar_=
      [0,
       [11,
        caml_string_of_jsbytes("Unencrypted IVEA data: "),
        [5,7,0,0,[17,4,0]]],
       caml_string_of_jsbytes("Unencrypted IVEA data: %#lx@.")],
     _as_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Pokemon IVs (hp atk def speed sp_atk sp_def): "),
        [5,
         0,
         0,
         0,
         [12,
          32,
          [5,
           0,
           0,
           0,
           [12,32,[5,0,0,0,[12,32,[5,0,0,0,[12,32,[5,0,0,0,partial]]]]]]]]]],
       caml_string_of_jsbytes
        ("Pokemon IVs (hp atk def speed sp_atk sp_def): %ld %ld %ld %ld %ld %ld@.")],
     _at_=
      [0,
       [11,caml_string_of_jsbytes("Maxing IVs..."),[17,4,0]],
       caml_string_of_jsbytes("Maxing IVs...@.")],
     _au_=
      [0,
       [11,
        caml_string_of_jsbytes("New unencrypted IVEA data: "),
        [5,7,0,0,[17,4,0]]],
       caml_string_of_jsbytes("New unencrypted IVEA data: %#lx@.")],
     _av_=
      [0,
       [11,caml_string_of_jsbytes("New low-IVEA: "),[5,7,0,0,[17,4,0]]],
       caml_string_of_jsbytes("New low-IVEA: %#lx@.")],
     _aw_=
      [0,
       [11,caml_string_of_jsbytes("New high-IVEA: "),[5,7,0,0,[17,4,0]]],
       caml_string_of_jsbytes("New high-IVEA: %#lx@.")],
     _ax_=
      [0,
       [11,caml_string_of_jsbytes("Checksum diff: "),[5,7,0,0,[17,4,0]]],
       caml_string_of_jsbytes("Checksum diff: %#lx@.")],
     _aB_=[0,caml_string_of_jsbytes("ARM/arm.ml"),240,9],
     _ay_=[0,1,0],
     _az_=[0,1,1],
     _aA_=[0,0,0],
     _aC_=
      [0,
       [2,caml_string_of_jsbytes("\xe2\x90\xa3")],
       [1,caml_string_of_jsbytes("\xc3\x80")],
       [1,caml_string_of_jsbytes("\xc3\x81")],
       [1,caml_string_of_jsbytes("\xc3\x82")],
       [1,caml_string_of_jsbytes("\xc3\x87")],
       [1,caml_string_of_jsbytes("\xc3\x88")],
       [1,caml_string_of_jsbytes("\xc3\x89")],
       [1,caml_string_of_jsbytes("\xc3\x8a")],
       [1,caml_string_of_jsbytes("\xc3\x8b")],
       [1,caml_string_of_jsbytes("\xc3\x8c")],
       0,
       [1,caml_string_of_jsbytes("\xc3\x8e")],
       [1,caml_string_of_jsbytes("\xc3\x8f")],
       [1,caml_string_of_jsbytes("\xc3\x92")],
       [1,caml_string_of_jsbytes("\xc3\x93")],
       [1,caml_string_of_jsbytes("\xc3\x94")],
       [1,caml_string_of_jsbytes("\xc5\x92")],
       [1,caml_string_of_jsbytes("\xc3\x99")],
       [1,caml_string_of_jsbytes("\xc3\x9a")],
       [1,caml_string_of_jsbytes("\xc3\x9b")],
       [1,caml_string_of_jsbytes("\xc3\x91")],
       [1,caml_string_of_jsbytes("\xc3\x9f")],
       [1,caml_string_of_jsbytes("\xc3\xa0")],
       [1,caml_string_of_jsbytes("\xc3\xa1")],
       0,
       [1,caml_string_of_jsbytes("\xc3\xa7")],
       [1,caml_string_of_jsbytes("\xc3\xa8")],
       [1,caml_string_of_jsbytes("\xc3\xa9")],
       [1,caml_string_of_jsbytes("\xc3\xaa")],
       [1,caml_string_of_jsbytes("\xc3\xab")],
       [1,caml_string_of_jsbytes("\xc3\xac")],
       0,
       [1,caml_string_of_jsbytes("\xc3\xae")],
       [1,caml_string_of_jsbytes("\xc3\xaf")],
       [1,caml_string_of_jsbytes("\xc3\xb2")],
       [1,caml_string_of_jsbytes("\xc3\xb3")],
       [1,caml_string_of_jsbytes("\xc3\xb4")],
       [1,caml_string_of_jsbytes("\xc5\x93")],
       [1,caml_string_of_jsbytes("\xc3\xb9")],
       [1,caml_string_of_jsbytes("\xc3\xba")],
       [1,caml_string_of_jsbytes("\xc3\xbb")],
       [1,caml_string_of_jsbytes("\xc3\xb1")],
       [1,caml_string_of_jsbytes("\xc2\xba")],
       [1,caml_string_of_jsbytes("\xc2\xaa")],
       [1,caml_string_of_jsbytes("\xe1\xb5\x89\xca\xb3")],
       [1,caml_string_of_jsbytes("&")],
       [1,caml_string_of_jsbytes("+")],
       0,
       0,
       0,
       0,
       0,
       [1,caml_string_of_jsbytes("Lv")],
       [1,caml_string_of_jsbytes("=")],
       [1,caml_string_of_jsbytes(";")],
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       [1,caml_string_of_jsbytes("\xe2\x96\xaf")],
       [1,caml_string_of_jsbytes("\xc2\xbf")],
       [1,caml_string_of_jsbytes("\xc2\xa1")],
       [1,caml_string_of_jsbytes("PK")],
       [1,caml_string_of_jsbytes("MN")],
       [1,caml_string_of_jsbytes("PO")],
       [1,caml_string_of_jsbytes("K\xc3\xa9")],
       [0,caml_string_of_jsbytes("0x57")],
       [0,caml_string_of_jsbytes("0x58")],
       [0,caml_string_of_jsbytes("0x59")],
       [1,caml_string_of_jsbytes("\xc3\x8d")],
       [1,caml_string_of_jsbytes("%")],
       [1,caml_string_of_jsbytes("(")],
       [1,caml_string_of_jsbytes(")")],
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       [1,caml_string_of_jsbytes("\xc3\xa2")],
       0,
       0,
       0,
       0,
       0,
       0,
       [1,caml_string_of_jsbytes("\xc3\xad")],
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       [1,caml_string_of_jsbytes("\xe2\xac\x86")],
       [1,caml_string_of_jsbytes("\xe2\xac\x87")],
       [1,caml_string_of_jsbytes("\xe2\xac\x85")],
       [1,caml_string_of_jsbytes("\xe2\x9e\xa1")],
       [1,caml_string_of_jsbytes("*")],
       [1,caml_string_of_jsbytes("*")],
       [1,caml_string_of_jsbytes("*")],
       [1,caml_string_of_jsbytes("*")],
       [1,caml_string_of_jsbytes("*")],
       [1,caml_string_of_jsbytes("*")],
       [1,caml_string_of_jsbytes("*")],
       [1,caml_string_of_jsbytes("\xe1\xb5\x89")],
       [1,caml_string_of_jsbytes("<")],
       [1,caml_string_of_jsbytes(">")],
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       [1,caml_string_of_jsbytes("\xca\xb3\xe1\xb5\x89")],
       [2,caml_string_of_jsbytes("0")],
       [2,caml_string_of_jsbytes("1")],
       [2,caml_string_of_jsbytes("2")],
       [2,caml_string_of_jsbytes("3")],
       [2,caml_string_of_jsbytes("4")],
       [2,caml_string_of_jsbytes("5")],
       [2,caml_string_of_jsbytes("6")],
       [2,caml_string_of_jsbytes("7")],
       [2,caml_string_of_jsbytes("8")],
       [2,caml_string_of_jsbytes("9")],
       [2,caml_string_of_jsbytes("!")],
       [2,caml_string_of_jsbytes("?")],
       [2,caml_string_of_jsbytes(".")],
       [2,caml_string_of_jsbytes("\xe2\x80\x93")],
       [1,caml_string_of_jsbytes("\xe3\x83\xbb")],
       [2,caml_string_of_jsbytes("\xe2\x80\xa6")],
       [2,caml_string_of_jsbytes("\xe2\x80\x9c")],
       [2,caml_string_of_jsbytes("\xe2\x80\x9d")],
       [2,caml_string_of_jsbytes("\xe2\x80\x98")],
       [2,caml_string_of_jsbytes("\xe2\x80\x99")],
       [2,caml_string_of_jsbytes("\xe2\x99\x82")],
       [2,caml_string_of_jsbytes("\xe2\x99\x80")],
       [1,caml_string_of_jsbytes("Pk$")],
       [2,caml_string_of_jsbytes(",")],
       [1,caml_string_of_jsbytes("\xc3\x97")],
       [2,caml_string_of_jsbytes("/")],
       [2,caml_string_of_jsbytes("A")],
       [2,caml_string_of_jsbytes("B")],
       [2,caml_string_of_jsbytes("C")],
       [2,caml_string_of_jsbytes("D")],
       [2,caml_string_of_jsbytes("E")],
       [2,caml_string_of_jsbytes("F")],
       [2,caml_string_of_jsbytes("G")],
       [2,caml_string_of_jsbytes("H")],
       [2,caml_string_of_jsbytes("I")],
       [2,caml_string_of_jsbytes("J")],
       [2,caml_string_of_jsbytes("K")],
       [2,caml_string_of_jsbytes("L")],
       [2,caml_string_of_jsbytes("M")],
       [2,caml_string_of_jsbytes("N")],
       [2,caml_string_of_jsbytes("O")],
       [2,caml_string_of_jsbytes("P")],
       [2,caml_string_of_jsbytes("Q")],
       [2,caml_string_of_jsbytes("R")],
       [2,caml_string_of_jsbytes("S")],
       [2,caml_string_of_jsbytes("T")],
       [2,caml_string_of_jsbytes("U")],
       [2,caml_string_of_jsbytes("V")],
       [2,caml_string_of_jsbytes("W")],
       [2,caml_string_of_jsbytes("X")],
       [2,caml_string_of_jsbytes("Y")],
       [2,caml_string_of_jsbytes("Z")],
       [2,caml_string_of_jsbytes("a")],
       [2,caml_string_of_jsbytes("b")],
       [2,caml_string_of_jsbytes("c")],
       [2,caml_string_of_jsbytes("d")],
       [2,caml_string_of_jsbytes("e")],
       [2,caml_string_of_jsbytes("f")],
       [2,caml_string_of_jsbytes("g")],
       [2,caml_string_of_jsbytes("h")],
       [2,caml_string_of_jsbytes("i")],
       [2,caml_string_of_jsbytes("j")],
       [2,caml_string_of_jsbytes("k")],
       [2,caml_string_of_jsbytes("l")],
       [2,caml_string_of_jsbytes("m")],
       [2,caml_string_of_jsbytes("n")],
       [2,caml_string_of_jsbytes("o")],
       [2,caml_string_of_jsbytes("p")],
       [2,caml_string_of_jsbytes("q")],
       [2,caml_string_of_jsbytes("r")],
       [2,caml_string_of_jsbytes("s")],
       [2,caml_string_of_jsbytes("t")],
       [2,caml_string_of_jsbytes("u")],
       [2,caml_string_of_jsbytes("v")],
       [2,caml_string_of_jsbytes("w")],
       [2,caml_string_of_jsbytes("x")],
       [2,caml_string_of_jsbytes("y")],
       [2,caml_string_of_jsbytes("z")],
       [1,caml_string_of_jsbytes("\xe2\x96\xb6")],
       [1,caml_string_of_jsbytes(":")],
       [1,caml_string_of_jsbytes("\xc3\x84")],
       [1,caml_string_of_jsbytes("\xc3\x96")],
       [1,caml_string_of_jsbytes("\xc3\x9c")],
       [1,caml_string_of_jsbytes("\xc3\xa4")],
       [1,caml_string_of_jsbytes("\xc3\xb6")],
       [1,caml_string_of_jsbytes("\xc3\xbc")],
       0,
       0,
       0,
       [0,caml_string_of_jsbytes("0xFA")],
       [0,caml_string_of_jsbytes("0xFB")],
       [0,caml_string_of_jsbytes("0xFC")],
       [0,caml_string_of_jsbytes("0xFD")],
       [0,caml_string_of_jsbytes("0xFE")],
       [0,caml_string_of_jsbytes("0xFF")]],
     _aF_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _aE_=[0,[2,0,[2,0,0]],caml_string_of_jsbytes("%s%s")],
     _aD_=[0,caml_string_of_jsbytes("Boxes/name.ml"),34,9],
     _aP_=[0,caml_string_of_jsbytes("ARM/optimizer.ml"),202,11],
     _aO_=[0,caml_string_of_jsbytes("ARM/optimizer.ml"),177,11],
     _aN_=[0,65536,65536,65536,512,64,8,1],
     _be_=[0,0,0,1,0],
     _bf_=[0,0,0,0,1],
     _bc_=[0,caml_string_of_jsbytes("S")],
     _bd_=[0,caml_string_of_jsbytes("L")],
     _a$_=[0,3],
     _ba_=[0,1],
     _bb_=[0,6],
     _a7_=[0,4],
     _a8_=[0,5],
     _a9_=[0,2],
     _a__=[0,0],
     _aZ_=[0,3],
     _a0_=[0,10],
     _a1_=[0,14],
     _a2_=[0,12],
     _a3_=[0,0],
     _a4_=[0,2],
     _a5_=[0,4],
     _a6_=[0,16],
     _aQ_=[0,8],
     _aR_=[0,9],
     _aS_=[0,7],
     _aT_=[0,1],
     _aU_=[0,6],
     _aV_=[0,13],
     _aW_=[0,11],
     _aX_=[0,5],
     _aY_=[0,15],
     _bg_=[0,caml_string_of_jsbytes("IO/parser.ml"),143,8],
     _bh_=[0,caml_string_of_jsbytes("IO/parser.ml"),167,8],
     _bi_=[0,caml_string_of_jsbytes("IO/parser.ml"),191,8],
     _bj_=[0,caml_string_of_jsbytes("IO/parser.ml"),215,8],
     _bk_=[0,caml_string_of_jsbytes("IO/parser.ml"),239,8],
     _bl_=[0,caml_string_of_jsbytes("IO/parser.ml"),263,8],
     _bm_=[0,caml_string_of_jsbytes("IO/parser.ml"),287,8],
     _bn_=[0,caml_string_of_jsbytes("IO/parser.ml"),311,8],
     _bo_=[0,caml_string_of_jsbytes("IO/parser.ml"),335,8],
     _bp_=[0,caml_string_of_jsbytes("IO/parser.ml"),359,8],
     _bq_=[0,caml_string_of_jsbytes("IO/parser.ml"),383,8],
     _br_=[0,caml_string_of_jsbytes("IO/parser.ml"),407,8],
     _bs_=[0,caml_string_of_jsbytes("IO/parser.ml"),431,8],
     _bt_=[0,caml_string_of_jsbytes("IO/parser.ml"),455,8],
     _bu_=[0,caml_string_of_jsbytes("IO/parser.ml"),479,8],
     _bv_=[0,caml_string_of_jsbytes("IO/parser.ml"),503,8],
     _bw_=[0,caml_string_of_jsbytes("IO/parser.ml"),540,16],
     _bx_=[0,caml_string_of_jsbytes("IO/parser.ml"),546,12],
     _by_=[0,caml_string_of_jsbytes("IO/parser.ml"),1320,8],
     _bz_=[0,caml_string_of_jsbytes("IO/parser.ml"),1367,12],
     _bA_=[0,caml_string_of_jsbytes("IO/parser.ml"),1266,8],
     _bB_=[0,caml_string_of_jsbytes("IO/parser.ml"),1313,12],
     _bC_=[0,caml_string_of_jsbytes("IO/parser.ml"),1139,8],
     _bD_=[0,caml_string_of_jsbytes("IO/parser.ml"),1176,12],
     _bE_=[0,caml_string_of_jsbytes("IO/parser.ml"),1093,8],
     _bF_=[0,caml_string_of_jsbytes("IO/parser.ml"),1132,12],
     _bG_=[0,caml_string_of_jsbytes("IO/parser.ml"),1043,8],
     _bH_=[0,caml_string_of_jsbytes("IO/parser.ml"),1086,12],
     _bI_=[0,caml_string_of_jsbytes("IO/parser.ml"),979,8],
     _bK_=[0,caml_string_of_jsbytes("IO/parser.ml"),1008,16],
     _bJ_=[0,caml_string_of_jsbytes("IO/parser.ml"),1036,12],
     _bL_=[0,caml_string_of_jsbytes("IO/parser.ml"),937,8],
     _bM_=[0,caml_string_of_jsbytes("IO/parser.ml"),972,12],
     _bN_=[0,caml_string_of_jsbytes("IO/parser.ml"),899,8],
     _bO_=[0,caml_string_of_jsbytes("IO/parser.ml"),930,12],
     _bP_=[0,caml_string_of_jsbytes("IO/parser.ml"),865,8],
     _bQ_=[0,caml_string_of_jsbytes("IO/parser.ml"),892,12],
     _bR_=[0,caml_string_of_jsbytes("IO/parser.ml"),835,8],
     _bS_=[0,caml_string_of_jsbytes("IO/parser.ml"),858,12],
     _bT_=[0,caml_string_of_jsbytes("IO/parser.ml"),801,8],
     _bU_=[0,caml_string_of_jsbytes("IO/parser.ml"),828,12],
     _bV_=[0,caml_string_of_jsbytes("IO/parser.ml"),775,8],
     _bW_=[0,caml_string_of_jsbytes("IO/parser.ml"),794,12],
     _bX_=[0,caml_string_of_jsbytes("IO/parser.ml"),729,8],
     _bY_=[0,caml_string_of_jsbytes("IO/parser.ml"),748,12],
     _bZ_=[0,caml_string_of_jsbytes("IO/parser.ml"),699,8],
     _b0_=[0,caml_string_of_jsbytes("IO/parser.ml"),722,12],
     _b1_=[0,caml_string_of_jsbytes("IO/parser.ml"),649,8],
     _b2_=[0,caml_string_of_jsbytes("IO/parser.ml"),682,12],
     _b3_=[0,caml_string_of_jsbytes("IO/parser.ml"),597,8],
     _b4_=[0,caml_string_of_jsbytes("IO/parser.ml"),642,12],
     _b5_=[0,caml_string_of_jsbytes("IO/parser.ml"),1213,8],
     _b6_=[0,caml_string_of_jsbytes("IO/parser.ml"),1259,12],
     _b7_=[0,caml_string_of_jsbytes("IO/parser.ml"),1379,4],
     _b8_=[0,caml_string_of_jsbytes("IO/parser.ml"),1402,12],
     _b9_=[0,caml_string_of_jsbytes("IO/parser.ml"),1406,8],
     _b__=[0,caml_string_of_jsbytes("IO/parser.ml"),1554,8],
     _b$_=[0,caml_string_of_jsbytes("IO/parser.ml"),1588,8],
     _cb_=[0,caml_string_of_jsbytes("IO/parser.ml"),1650,12],
     _cc_=[0,caml_string_of_jsbytes("IO/parser.ml"),1633,12],
     _ca_=[0,caml_string_of_jsbytes("IO/parser.ml"),1654,8],
     _cd_=[0,caml_string_of_jsbytes("IO/parser.ml"),1662,4],
     _cf_=[0,caml_string_of_jsbytes("IO/parser.ml"),1681,12],
     _ce_=[0,caml_string_of_jsbytes("IO/parser.ml"),1694,8],
     _cg_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Internal failure -- please contact the parser generator's developers.\n"),
        [10,0]],
       caml_string_of_jsbytes
        ("Internal failure -- please contact the parser generator's developers.\n%!")],
     _ch_=[0,caml_string_of_jsbytes("IO/parser.ml"),1703,4],
     _ci_=[0,caml_string_of_jsbytes("IO/parser.ml"),1726,8],
     _cj_=[0,caml_string_of_jsbytes("IO/parser.ml"),1772,8],
     _ck_=[0,caml_string_of_jsbytes("IO/parser.ml"),1797,8],
     _cl_=[0,caml_string_of_jsbytes("IO/parser.ml"),1822,8],
     _cm_=[0,caml_string_of_jsbytes("IO/parser.ml"),1868,8],
     _cn_=[0,caml_string_of_jsbytes("IO/parser.ml"),1876,4],
     _co_=[0,caml_string_of_jsbytes("IO/parser.ml"),1889,12],
     _cp_=[0,caml_string_of_jsbytes("IO/parser.ml"),1893,8],
     _cq_=[0,caml_string_of_jsbytes("IO/parser.ml"),1925,4],
     _cs_=[0,caml_string_of_jsbytes("IO/parser.ml"),1981,12],
     _cr_=[0,caml_string_of_jsbytes("IO/parser.ml"),2006,8],
     _cw_=[0,caml_string_of_jsbytes("IO/parser.ml"),2065,16],
     _cv_=[0,caml_string_of_jsbytes("IO/parser.ml"),2091,20],
     _cu_=[0,caml_string_of_jsbytes("IO/parser.ml"),2123,16],
     _cx_=[0,caml_string_of_jsbytes("IO/parser.ml"),2129,12],
     _ct_=[0,caml_string_of_jsbytes("IO/parser.ml"),2135,8],
     _cy_=[0,caml_string_of_jsbytes("IO/parser.ml"),2162,8],
     _cz_=[0,caml_string_of_jsbytes("IO/parser.ml"),2198,8],
     _cA_=[0,caml_string_of_jsbytes("IO/parser.ml"),2241,8],
     _cC_=[0,caml_string_of_jsbytes("IO/parser.ml"),2283,16],
     _cB_=[0,caml_string_of_jsbytes("IO/parser.ml"),2291,12],
     _cD_=[0,caml_string_of_jsbytes("IO/parser.ml"),2296,8],
     _cG_=[0,caml_string_of_jsbytes("IO/parser.ml"),2414,24],
     _cH_=[0,caml_string_of_jsbytes("IO/parser.ml"),2419,20],
     _cF_=[0,caml_string_of_jsbytes("IO/parser.ml"),2424,16],
     _cK_=[0,caml_string_of_jsbytes("IO/parser.ml"),2456,20],
     _cI_=[0,caml_string_of_jsbytes("IO/parser.ml"),2484,24],
     _cJ_=[0,caml_string_of_jsbytes("IO/parser.ml"),2488,20],
     _cL_=[0,caml_string_of_jsbytes("IO/parser.ml"),2493,16],
     _cE_=[0,caml_string_of_jsbytes("IO/parser.ml"),2498,12],
     _cM_=[0,caml_string_of_jsbytes("IO/parser.ml"),2686,8],
     _cN_=[0,caml_string_of_jsbytes("IO/parser.ml"),2719,8],
     _cO_=[0,caml_string_of_jsbytes("IO/parser.ml"),2740,8],
     _cP_=[3,1],
     _cQ_=[3,0],
     _cU_=
      [0,
       [15,[11,caml_string_of_jsbytes(": command error\n"),0]],
       caml_string_of_jsbytes("%a: command error\n")],
     _cS_=
      [0,
       [15,[11,caml_string_of_jsbytes(": "),[2,0,[12,10,0]]]],
       caml_string_of_jsbytes("%a: %s\n")],
     _cT_=
      [0,
       [15,[11,caml_string_of_jsbytes(": parser error\n"),0]],
       caml_string_of_jsbytes("%a: parser error\n")],
     _cR_=
      [0,
       [2,0,[12,58,[4,0,0,0,[12,58,[4,0,0,0,0]]]]],
       caml_string_of_jsbytes("%s:%d:%d")],
     _cV_=
      [0,
       [11,caml_string_of_jsbytes("Available characters: "),[17,4,0]],
       caml_string_of_jsbytes("Available characters: @.")],
     _cW_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _cX_=
      [0,
       [17,
        4,
        [11,caml_string_of_jsbytes("Please enter text to encode: "),[17,2,0]]],
       caml_string_of_jsbytes("@.Please enter text to encode: @?")],
     _cY_=
      [0,
       [4,8,[0,2,2],0,[4,8,[0,2,2],0,[12,32,0]]],
       caml_string_of_jsbytes("%02X%02X ")],
     _cZ_=[0,caml_string_of_jsbytes("Main/encoder_common.ml"),34,11],
     _c0_=
      [0,
       [4,
        8,
        [0,2,2],
        0,
        [4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[12,32,0]]]]],
       caml_string_of_jsbytes("%02X%02X%02X%02X ")],
     _c1_=[0,caml_string_of_jsbytes("Main/encoder_common.ml"),42,11],
     _c3_=
      [0,
       [11,caml_string_of_jsbytes("Encoded data (1-byte): "),[17,4,0]],
       caml_string_of_jsbytes("Encoded data (1-byte): @.")],
     _c4_=[0,[4,8,[0,2,2],0,[12,32,0]],caml_string_of_jsbytes("%02X ")],
     _c9_=[0,0,0],
     _c5_=
      [0,
       [17,4,[11,caml_string_of_jsbytes("Encoded data (2-bytes): "),[17,4,0]]],
       caml_string_of_jsbytes("@.Encoded data (2-bytes): @.")],
     _c8_=[0,0,[0,0,0]],
     _c6_=
      [0,
       [17,4,[11,caml_string_of_jsbytes("Encoded data (4-bytes): "),[17,4,0]]],
       caml_string_of_jsbytes("@.Encoded data (4-bytes): @.")],
     _c7_=[0,[17,4,0],caml_string_of_jsbytes("@.")],
     _c2_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("An error occured. Please check you only use available characters."),
        0],
       caml_string_of_jsbytes
        ("An error occured. Please check you only use available characters.")],
     _dd_=[0,0],
     _dh_=
      [0,[4,8,[0,2,2],0,[12,32,[17,2,0]]],caml_string_of_jsbytes("%02X @?")],
     _dg_=
      [0,
       [11,
        caml_string_of_jsbytes("Box "),
        [4,
         3,
         [0,1,2],
         0,
         [11,
          caml_string_of_jsbytes(": "),
          [15,[11,caml_string_of_jsbytes("\t["),[15,[12,93,[17,4,0]]]]]]]],
       caml_string_of_jsbytes("Box %2i: %a\t[%a]@.")],
     _df_=[0,1],
     _de_=[0,0],
     _dc_=[0,caml_string_of_jsbytes("Boxes/boxes.ml"),35,12],
     _c__=[0,0,[0,0,[0,0,[0,255,0]]]],
     _c$_=[0,0,[0,0,[0,255,[0,0,0]]]],
     _da_=[0,0,[0,255,[0,0,[0,0,0]]]],
     _db_=[0,255,[0,0,[0,0,[0,0,0]]]],
     _dr_=
      [0,
       [11,
        caml_string_of_jsbytes("LDR"),
        [2,0,[2,0,[12,32,[15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]],
       caml_string_of_jsbytes("LDR%s%s %a, %a")],
     _ds_=
      [0,
       [11,
        caml_string_of_jsbytes("STR"),
        [2,0,[2,0,[12,32,[15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]],
       caml_string_of_jsbytes("STR%s%s %a, %a")],
     _dt_=
      [0,
       [11,
        caml_string_of_jsbytes("MOV"),
        [2,0,[2,0,[12,32,[15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]],
       caml_string_of_jsbytes("MOV%s%s %a, %a")],
     _du_=
      [0,
       [11,
        caml_string_of_jsbytes("MVN"),
        [2,0,[2,0,[12,32,[15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]],
       caml_string_of_jsbytes("MVN%s%s %a, %a")],
     _dv_=
      [0,
       [11,
        caml_string_of_jsbytes("ADC"),
        [2,
         0,
         [2,
          0,
          [12,
           32,
           [15,
            [11,
             caml_string_of_jsbytes(", "),
             [15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]]]],
       caml_string_of_jsbytes("ADC%s%s %a, %a, %a")],
     _dw_=
      [0,
       [11,
        caml_string_of_jsbytes("SBC"),
        [2,
         0,
         [2,
          0,
          [12,
           32,
           [15,
            [11,
             caml_string_of_jsbytes(", "),
             [15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]]]],
       caml_string_of_jsbytes("SBC%s%s %a, %a, %a")],
     _dx_=
      [0,
       [11,
        caml_string_of_jsbytes("BIC"),
        [2,
         0,
         [2,
          0,
          [12,
           32,
           [15,
            [11,
             caml_string_of_jsbytes(", "),
             [15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]]]],
       caml_string_of_jsbytes("BIC%s%s %a, %a, %a")],
     _dy_=
      [0,
       [11,
        caml_string_of_jsbytes("AND"),
        [2,
         0,
         [2,
          0,
          [12,
           32,
           [15,
            [11,
             caml_string_of_jsbytes(", "),
             [15,[11,caml_string_of_jsbytes(", "),[15,0]]]]]]]]],
       caml_string_of_jsbytes("AND%s%s %a, %a, %a")],
     _dz_=
      [0,
       [12,66,[2,0,[2,0,[12,32,[15,0]]]]],
       caml_string_of_jsbytes("B%s%s %a")],
     _dn_=
      [0,
       [12,91,[15,[11,caml_string_of_jsbytes("], "),[15,0]]]],
       caml_string_of_jsbytes("[%a], %a")],
     _do_=
      [0,
       [12,91,[15,[11,caml_string_of_jsbytes(", "),[15,[12,93,[2,0,0]]]]]],
       caml_string_of_jsbytes("[%a, %a]%s")],
     _dp_=
      [0,
       [12,91,[15,[11,caml_string_of_jsbytes("], "),[2,0,[15,0]]]]],
       caml_string_of_jsbytes("[%a], %s%a")],
     _dq_=
      [0,
       [12,
        91,
        [15,[11,caml_string_of_jsbytes(", "),[2,0,[15,[12,93,[2,0,0]]]]]]],
       caml_string_of_jsbytes("[%a, %s%a]%s")],
     _dm_=[0,[12,35,[2,0,[5,7,0,0,0]]],caml_string_of_jsbytes("#%s%#lx")],
     _dl_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _dk_=[0,[12,35,[5,7,0,0,0]],caml_string_of_jsbytes("#%#lx")],
     _dj_=[0,[12,114,[4,0,0,0,0]],caml_string_of_jsbytes("r%d")],
     _di_=[0,[5,8,[0,2,8],0,0],caml_string_of_jsbytes("%08lX")],
     _dB_=
      [0,
       [11,caml_string_of_jsbytes("filler"),[21,1,0]],
       caml_string_of_jsbytes("filler%n")],
     _dC_=
      [0,
       [17,
        4,
        [11,caml_string_of_jsbytes("Raw data (in hexadecimal):"),[17,4,0]]],
       caml_string_of_jsbytes("@.Raw data (in hexadecimal):@.")],
     _dD_=
      [0,[4,8,[0,2,2],0,[12,32,[17,2,0]]],caml_string_of_jsbytes("%02X @?")],
     _dE_=[0,[17,4,0],caml_string_of_jsbytes("@.")],
     _dG_=[0,[17,4,[15,[17,4,0]]],caml_string_of_jsbytes("@.%a@.")],
     _dH_=
      [0,
       [11,
        caml_string_of_jsbytes("Warning: Not enough space... Need "),
        [21,1,[12,47,[21,1,[11,caml_string_of_jsbytes(" boxes."),[17,4,0]]]]]],
       caml_string_of_jsbytes
        ("Warning: Not enough space... Need %n/%n boxes.@.")],
     _dI_=
      [0,
       [11,
        caml_string_of_jsbytes("Warning: Contains unwritable characters..."),
        [17,4,0]],
       caml_string_of_jsbytes("Warning: Contains unwritable characters...@.")],
     _dM_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Warning: A box name cannot be written (only contains spaces)..."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("Warning: A box name cannot be written (only contains spaces)...@.")],
     _dJ_=
      [0,
       [11,caml_string_of_jsbytes("Raw data (in hexadecimal):"),[17,4,0]],
       caml_string_of_jsbytes("Raw data (in hexadecimal):@.")],
     _dK_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _dL_=[0,[17,4,0],caml_string_of_jsbytes("@.")],
     _dF_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Error: The exit code overlaps this code (too long?)."),
        [17,4,0]],
       caml_string_of_jsbytes
        ("Error: The exit code overlaps this code (too long?).@.")],
     _dA_=
      [0,
       [15,[11,caml_string_of_jsbytes(" \t"),[15,[12,9,[15,[17,4,0]]]]]],
       caml_string_of_jsbytes("%a \t%a\t%a@.")];
    function enumerate_files(dirname,ext)
     {var
       _mt_=runtime.caml_sys_read_directory(dirname),
       _mu_=caml_call1(Stdlib_array[11],_mt_);
      function _mv_(x)
       {return caml_string_equal(caml_call1(Stdlib_filename[10],x),ext)}
      return caml_call2(Stdlib_list[39],_mv_,_mu_)}
    function uint32_of_str(str)
     {var
       str$0=caml_call1(Stdlib_string[30],str),
       i64=runtime.caml_int64_of_string(str$0);
      if(caml_call2(Stdlib_int64[17],Stdlib_int64[1],caml_int64_and(_a_,i64)))
       return runtime.caml_int64_to_int32(i64);
      throw [0,Stdlib[7],cst_Not_a_valid_int32]}
    function uint32_to_int(v)
     {var match=caml_call1(Stdlib_int32[12],v);
      if(match){var i=match[1];return i}
      throw [0,Assert_failure,_b_]}
    function int64_of_uint32(x)
     {return caml_int64_and(_c_,caml_int64_of_int32(x))}
    function _d_(param){return 0}
    function _e_(param,_ms_,_mr_){return 0}
    var
     dummy_fmt=caml_call2(Stdlib_format[113],_e_,_d_),
     Utils=
      [0,
       enumerate_files,
       uint32_of_str,
       uint32_to_int,
       int64_of_uint32,
       dummy_fmt];
    caml_register_global(443,Utils,"Utils");
    function int32_from_low_high(l,h){return l | h << 16}
    function int32_to_low_high(i)
     {var l=65535 & i,h=i >>> 16 | 0;return [0,l,h]}
    var
     substructures_order=_f_.slice(),
     data_offset=32,
     len=48,
     pid_offset=0,
     otid_offset=4,
     checksum_offset=28;
    function pkmn_from_bytes(buf)
     {var
       pid=caml_call2(Stdlib_bytes[57],buf,pid_offset),
       otid=caml_call2(Stdlib_bytes[57],buf,otid_offset);
      return [0,pid,otid]}
    function substructure_position(param,ss)
     {var
       pid=param[1],
       i=uint32_to_int(caml_call2(Stdlib_int32[5],pid,24)),
       order=caml_check_bound(substructures_order,i)[1 + i],
       i$0=0;
      for(;;)
       {if(runtime.caml_string_get(order,i$0) === ss)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function substructure_offset(pkmn,ss)
     {var p=substructure_position(pkmn,ss);return 32 + (12 * p | 0) | 0}
    function encrypt_aligned_int32(pkmn,i)
     {var otid=pkmn[2],pid=pkmn[1],key=pid ^ otid;return i ^ key}
    function checksum_diff_for_aligned_int3(o,n)
     {var
       match=int32_to_low_high(o),
       ho=match[2],
       lo=match[1],
       match$0=int32_to_low_high(n),
       hn=match$0[2],
       ln=match$0[1],
       diff=(ln - lo | 0) + (hn - ho | 0) | 0;
      return diff & 65535}
    function enc_dec(pkmn,buf,offset,len)
     {var offset$0=offset;
      for(;;)
       {if((offset + len | 0) <= offset$0)return 0;
        var
         i=caml_call2(Stdlib_bytes[57],buf,offset$0),
         i$0=encrypt_aligned_int32(pkmn,i);
        caml_call3(Stdlib_bytes[71],buf,offset$0,i$0);
        var offset$1=offset$0 + 4 | 0,offset$0=offset$1;
        continue}}
    function extract_data(buf)
     {var
       pkmn=pkmn_from_bytes(buf),
       res=caml_call3(Stdlib_bytes[7],buf,data_offset,len);
      enc_dec(pkmn,res,0,len);
      return res}
    function update_with_data(buf,data)
     {var pkmn=pkmn_from_bytes(buf),acc=Stdlib_int32[1],i=0;
      for(;;)
       {if(48 <= i)
         {var low=acc & 65535,checksum=uint32_to_int(low);
          caml_call5(Stdlib_bytes[11],data,0,buf,data_offset,len);
          enc_dec(pkmn,buf,data_offset,len);
          return caml_call3(Stdlib_bytes[65],buf,checksum_offset,checksum)}
        var
         nb=caml_call2(Stdlib_bytes[51],data,i),
         i$0=i + 2 | 0,
         acc$0=acc + nb | 0,
         acc=acc$0,
         i=i$0;
        continue}}
    function species_offset(pkmn){return substructure_offset(pkmn,71)}
    function species_offset_relative_to_dat(pkmn)
     {return substructure_offset(pkmn,71) - 32 | 0}
    function ivea_offset(pkmn){return substructure_offset(pkmn,77) + 4 | 0}
    function ivea_data_to_ivs(data)
     {var
       hp=31 & data,
       data$0=data >>> 5 | 0,
       atk=31 & data$0,
       data$1=data$0 >>> 5 | 0,
       def=31 & data$1,
       data$2=data$1 >>> 5 | 0,
       speed=31 & data$2,
       data$3=data$2 >>> 5 | 0,
       sp_atk=31 & data$3,
       data$4=data$3 >>> 5 | 0,
       sp_def=31 & data$4,
       data$5=data$4 >>> 5 | 0;
      return [0,hp,atk,def,speed,sp_atk,sp_def,data$5]}
    function ivs_to_ivea_data(param)
     {var
       data=param[7],
       sp_def=param[6],
       sp_atk=param[5],
       speed=param[4],
       def=param[3],
       atk=param[2],
       hp=param[1],
       data$0=data << 5,
       data$1=data$0 | sp_def,
       data$2=data$1 << 5,
       data$3=data$2 | sp_atk,
       data$4=data$3 << 5,
       data$5=data$4 | speed,
       data$6=data$5 << 5,
       data$7=data$6 | def,
       data$8=data$7 << 5,
       data$9=data$8 | atk,
       data$10=data$9 << 5,
       data$11=data$10 | hp;
      return data$11}
    var
     Structure=
      [0,
       int32_from_low_high,
       int32_to_low_high,
       pkmn_from_bytes,
       substructure_position,
       extract_data,
       update_with_data,
       encrypt_aligned_int32,
       encrypt_aligned_int32,
       checksum_diff_for_aligned_int3,
       species_offset,
       species_offset_relative_to_dat,
       ivea_offset,
       ivea_data_to_ivs,
       ivs_to_ivea_data];
    caml_register_global(445,Structure,"Structure");
    function mult_mod(x,y,m)
     {var _mq_=caml_call2(Big_int[10],x,y);
      return caml_call2(Big_int[16],_mq_,m)}
    var
     _g_=Big_int[9],
     _i_=Big_int[11],
     _j_=Big_int[50],
     _k_=Big_int[53],
     _h_=Big_int[6],
     _l_=Big_int[54],
     two_big_int=caml_call1(Big_int[36],2);
    caml_call1(Big_int[36],3);
    caml_call1(Big_int[36],4);
    var
     a=caml_call1(Big_int[42],_m_),
     b=caml_call1(Big_int[42],_n_),
     a_inv=caml_call1(Big_int[42],_o_),
     b_inv=caml_call1(Big_int[42],_p_),
     m=caml_call1(Big_int[42],_q_),
     b_1=caml_call1(Big_int[42],_r_),
     _s_=caml_call2(_i_,4,m),
     cycle_part_product=mult_mod(caml_call1(_g_,a),b_1,_s_),
     mask32=caml_call1(Big_int[42],_t_);
    function even(n)
     {var _mp_=caml_call2(_j_,n,Big_int[2]);
      return caml_call2(Big_int[24],Big_int[1],_mp_)}
    function odd(n){return 1 - even(n)}
    function mpow(base,exp,n)
     {var base$0=base,exp$0=exp;
      for(;;)
       {var base$1=caml_call2(Big_int[16],base$0,n);
        if(caml_call2(Big_int[24],exp$0,Big_int[1]))return Big_int[2];
        if(caml_call2(Big_int[24],exp$0,Big_int[2]))return base$1;
        if(even(exp$0))
         {var
           exp$1=caml_call2(Big_int[15],exp$0,two_big_int),
           base$2=caml_call2(Big_int[10],base$1,base$1),
           base$0=base$2,
           exp$0=exp$1;
          continue}
        return mult_mod(base$1,mpow(base$1,caml_call1(_g_,exp$0),n),n)}}
    function pow(base,exp)
     {var base$0=base,exp$0=exp;
      for(;;)
       {if(caml_call2(Big_int[24],exp$0,Big_int[1]))return Big_int[2];
        if(caml_call2(Big_int[24],exp$0,Big_int[2]))return base$0;
        if(even(exp$0))
         {var
           exp$1=caml_call2(Big_int[15],exp$0,two_big_int),
           base$1=caml_call2(Big_int[10],base$0,base$0),
           base$0=base$1,
           exp$0=exp$1;
          continue}
        var _mo_=pow(base$0,caml_call1(_g_,exp$0));
        return caml_call2(Big_int[10],base$0,_mo_)}}
    caml_fresh_oo_id(0);
    function _v_(seed)
     {var _mn_=caml_call2(Big_int[10],seed,a);
      return caml_call2(_j_,mask32,caml_call2(Big_int[5],b,_mn_))}
    function _w_(seed)
     {var _mm_=caml_call2(Big_int[10],seed,a_inv);
      return caml_call2(_j_,mask32,caml_call2(Big_int[5],b_inv,_mm_))}
    function big_int_of_uint32(i32)
     {var _ml_=int64_of_uint32(i32);return caml_call1(Big_int[42],_ml_)}
    function uint32_of_bigint(bi)
     {var
       maxint32=caml_call1(Big_int[40],Stdlib_int32[9]),
       minint32=caml_call1(Big_int[40],Stdlib_int32[10]),
       _mk_=caml_call2(Big_int[8],maxint32,minint32),
       total=caml_call1(Big_int[6],_mk_),
       bi$0=
        caml_call2(Big_int[28],bi,maxint32)?caml_call2(Big_int[8],bi,total):bi;
      return caml_call1(Big_int[43],bi$0)}
    function rng_of(seed)
     {var _mj_=caml_call2(_l_,seed,16);return caml_call1(Big_int[38],_mj_)}
    var
     aPresses=[0,1,3,6],
     moreAPresses=[0,0,10,30],
     old_rod=0,
     good_rod=1,
     super_rod=2;
    function next_seed(seed)
     {return uint32_of_bigint(_v_(big_int_of_uint32(seed)))}
    function prev_seed(seed)
     {return uint32_of_bigint(_w_(big_int_of_uint32(seed)))}
    function cycle_to(seed)
     {var
       seed$0=big_int_of_uint32(seed),
       y=caml_call2(_i_,4,m),
       x=caml_call1(_h_,mult_mod(seed$0,cycle_part_product,y)),
       power=caml_call2(Big_int[26],x,y)?caml_call2(Big_int[8],x,y):x,
       m$0=pow(two_big_int,caml_call1(Big_int[36],34));
      if(odd(a) && odd(power))
       {var
         bitmask=caml_call1(_g_,pow(two_big_int,caml_call1(Big_int[36],31))),
         ls=runtime.caml_make_vect(32,power),
         i=1,
         l=power;
        for(;;)
         {if(i < 32)
           {var l$0=mult_mod(l,l,m$0);
            caml_check_bound(ls,i)[1 + i] = l$0;
            var i$0=i + 1 | 0,i=i$0,l=l$0;
            continue}
          var i$1=31,b=Big_int[1],bit=Big_int[2];
          for(;;)
           {if(0 <= i$1)
             {var
               _mh_=mpow(a,caml_call2(_j_,bitmask,caml_call2(_k_,b,i$1)),m$0),
               _mi_=caml_check_bound(ls,i$1)[1 + i$1],
               b$0=
                1 - caml_call2(Big_int[24],_mi_,_mh_)
                 ?caml_call2(Big_int[5],b,bit)
                 :b,
               bit$0=caml_call2(_k_,bit,1),
               i$2=i$1 - 1 | 0,
               i$1=i$2,
               b=b$0,
               bit=bit$0;
              continue}
            return uint32_of_bigint(b)}}}
      throw [0,Assert_failure,_u_]}
    function seed_at(cycle)
     {var
       cycle$0=big_int_of_uint32(cycle),
       _mf_=caml_call1(_g_,a),
       y=caml_call2(Big_int[10],_mf_,m),
       x=caml_call1(_g_,mpow(a,cycle$0,y)),
       op1=caml_call2(Big_int[26],x,Big_int[1])?x:caml_call2(Big_int[5],x,y),
       _mg_=caml_call1(_g_,a),
       aux=caml_call2(Big_int[15],op1,_mg_);
      return uint32_of_bigint(mult_mod(aux,b,m))}
    function best_seed_for_rod(route119,feebas,target_seed,rod)
     {var
       target_seed$0=big_int_of_uint32(target_seed),
       maxAdditionalOffsets=[0,0,1,4],
       bestResults=[0,0],
       starting_seed=[0,_w_(target_seed$0)],
       for$2=1;
      for(;;)
       {starting_seed[1] = _w_(starting_seed[1]);
        var _me_=for$2 + 1 | 0;
        if(8 !== for$2){var for$2=_me_;continue}
        var switch$0=0;
        if(route119 && ! feebas)
         {starting_seed[1] = _w_(starting_seed[1]);
          var offset119=1;
          switch$0 = 1}
        if(! switch$0)var offset119=0;
        var _l5_=caml_check_bound(maxAdditionalOffsets,rod)[1 + rod],_l4_=0;
        if(! (_l5_ < 0))
         {var additionalOffset=_l4_;
          a:
          for(;;)
           {var seed=[0,starting_seed[1]],for$1=1;
            for(;;)
             {seed[1] = _v_(seed[1]);
              var _l3_=for$1 + 1 | 0;
              if(7 !== for$1){var for$1=_l3_;continue}
              var
               _lY_=caml_check_bound(aPresses,rod)[1 + rod],
               minRounds=caml_mod(rng_of(seed[1]),_lY_) + 1 | 0;
              seed[1] = _v_(seed[1]);
              seed[1] = _v_(seed[1]);
              var
               biteRoll=rng_of(seed[1]) % 100 | 0,
               biteResult=0 === (biteRoll & 1)?0:14 < biteRoll?1:2,
               _l0_=minRounds - 1 | 0,
               _lZ_=1;
              if(! (_l0_ < 1))
               {var for$0=_lZ_;
                for(;;)
                 {seed[1] = _v_(seed[1]);
                  var _l2_=for$0 + 1 | 0;
                  if(_l0_ !== for$0){var for$0=_l2_;continue}
                  break}}
              var advancement=[0,7 + minRounds | 0];
              if(1 === minRounds)
               {seed[1] = _v_(seed[1]);
                advancement[1] = advancement[1] + 1 | 0;
                var biteRoll$0=rng_of(seed[1]) % 100 | 0;
                if(biteRoll$0 < caml_check_bound(moreAPresses,rod)[1 + rod])
                 {seed[1] = _v_(seed[1]);
                  advancement[1] = advancement[1] + 1 | 0}}
              seed[1] = _v_(seed[1]);
              var
               feebasResult=(rng_of(seed[1]) % 100 | 0) < 50?1:0,
               _l1_=route119?1 - feebas:route119;
              if(_l1_)advancement[1] = advancement[1] + 1 | 0;
              var advancement$0=advancement[1];
              starting_seed[1] = _w_(starting_seed[1]);
              var _l7_=biteResult < 2?1:0;
              if(_l7_)
               var
                _l8_=1 - feebas,
                _l9_=_l8_ || feebasResult,
                _l__=
                 _l9_
                  ?((9 + additionalOffset | 0) + offset119 | 0)
                    ===
                    advancement$0
                    ?1
                    :0
                  :_l9_;
              else
               var _l__=_l7_;
              if(_l__)
               {var _l$_=bestResults[1];
                if(_l$_)
                 {var
                   match=_l$_[1],
                   br=match[1],
                   s=match[3],
                   adv=match[2],
                   switch$1=0;
                  if(0 === br && 1 === biteResult)
                   {var _ma_=[0,[0,br,adv,s]];switch$1 = 1}
                  if(! switch$1)
                   {var s$0=match[3],adv$0=match[2],switch$2=0;
                    if(br === biteResult && adv$0 < advancement$0)
                     {var _md_=[0,[0,br,adv$0,s$0]];switch$2 = 1}
                    if(! switch$2)
                     var
                      _md_=
                       [0,[0,biteResult,advancement$0,_v_(starting_seed[1])]];
                    var _ma_=_md_}
                  var _mb_=_ma_}
                else
                 var
                  _mb_=
                   [0,[0,biteResult,advancement$0,_v_(starting_seed[1])]];
                bestResults[1] = _mb_}
              var _mc_=additionalOffset + 1 | 0;
              if(_l5_ !== additionalOffset)
               {var additionalOffset=_mc_;continue a}
              break}
            break}}
        var _l6_=bestResults[1];
        if(_l6_)
         {var match$0=_l6_[1],s$1=match$0[3],i=match$0[2],b=match$0[1];
          return [0,[0,1 === b?1:0,i,uint32_of_bigint(s$1)]]}
        return 0}}
    var
     Seed=
      [0,
       prev_seed,
       next_seed,
       cycle_to,
       seed_at,
       old_rod,
       good_rod,
       super_rod,
       best_seed_for_rod];
    caml_register_global(447,Seed,"Seed");
    function main(fmt)
     {caml_call2(Stdlib_format[125],fmt,_x_);return [0,main_1]}
    function main_3(seed,fmt,str)
     {if(caml_string_notequal(str,cst_1$0))
       if(caml_string_notequal(str,cst_2$0))
        if(caml_string_notequal(str,cst_3$0))
         var
          _lU_=caml_call1(Stdlib[2],cst_Unknown_answer),
          feebas=_lU_[2],
          route119=_lU_[1];
        else
         var feebas=1,route119=1;
       else
        var feebas=0,route119=1;
      else
       var feebas=0,route119=0;
      var rod=old_rod;
      for(;;)
       {if(rod === 0)
         var rodname=cst_Old_rod;
        else
         {if(rod === 1)
           var _lX_=cst_Good_rod;
          else
           {if(rod !== 2)throw [0,Assert_failure,_aa_];var _lX_=cst_Super_rod}
          var rodname=_lX_}
        caml_call3(Stdlib_format[125],fmt,_W_,rodname);
        var match=best_seed_for_rod(route119,feebas,seed,rod);
        if(match)
         {var _lV_=match[1];
          if(_lV_[1])
           {var seed$0=_lV_[3],adv=_lV_[2];
            caml_call2(Stdlib_format[125],fmt,_X_);
            caml_call4(Stdlib_format[125],fmt,_Y_,seed$0,adv)}
          else
           {var seed$1=_lV_[3],adv$0=_lV_[2];
            caml_call2(Stdlib_format[125],fmt,_Z_);
            caml_call4(Stdlib_format[125],fmt,___,seed$1,adv$0)}}
        else
         caml_call2(Stdlib_format[125],fmt,_$_);
        var _lW_=rod + 1 | 0;
        if(2 !== rod){var rod=_lW_;continue}
        caml_call2(Stdlib_format[125],fmt,_T_);
        caml_call2(Stdlib_format[125],fmt,_U_);
        caml_call2(Stdlib_format[125],fmt,_V_);
        return 0}}
    function show_vicinity(fmt,print_cycle,seed,start,stop)
     {var cycle=cycle_to(seed);
      if(print_cycle)caml_call3(Stdlib_format[125],fmt,_E_,cycle);
      var start_seed=[0,seed_at(cycle + start | 0)];
      if(! (stop < start))
       {var i=start;
        for(;;)
         {caml_call5(Stdlib_format[125],fmt,_F_,i,start_seed[1],start_seed[1]);
          start_seed[1] = next_seed(start_seed[1]);
          var _lT_=i + 1 | 0;
          if(stop !== i){var i=_lT_;continue}
          break}}
      return 0}
    function main_vicinity(seed,fmt,str)
     {function _lS_(i,j){return [0,i,j]}
      var
       match=caml_call3(Stdlib_scanf[4],str,_S_,_lS_),
       stop=match[2],
       start=match[1];
      show_vicinity(fmt,1,seed,start,stop);
      return 0}
    function main_2(seed,fmt,str)
     {if(caml_string_notequal(str,cst_1))
       return caml_string_notequal(str,cst_2)
               ?caml_string_notequal(str,cst_3)
                 ?caml_string_notequal(str,cst_4)
                   ?0
                   :(caml_call2(Stdlib_format[125],fmt,_G_),
                     [0,
                      function(_lO_,_lP_){return main_vicinity(seed,_lO_,_lP_)}])
                 :(caml_call2(Stdlib_format[125],fmt,_H_),
                   caml_call2(Stdlib_format[125],fmt,_I_),
                   caml_call2(Stdlib_format[125],fmt,_J_),
                   caml_call2(Stdlib_format[125],fmt,_K_),
                   show_vicinity(fmt,0,seed,-10,0),
                   0)
               :(caml_call2(Stdlib_format[125],fmt,_L_),
                 caml_call2(Stdlib_format[125],fmt,_M_),
                 caml_call2(Stdlib_format[125],fmt,_N_),
                 caml_call2(Stdlib_format[125],fmt,_O_),
                 [0,function(_lQ_,_lR_){return main_3(seed,_lQ_,_lR_)}]);
      var _lN_=prev_seed(prev_seed(seed));
      caml_call3(Stdlib_format[125],fmt,_P_,_lN_);
      caml_call2(Stdlib_format[125],fmt,_Q_);
      caml_call2(Stdlib_format[125],fmt,_R_);
      return 0}
    function main_1(fmt,str)
     {var seed=uint32_of_str(str);
      caml_call2(Stdlib_format[125],fmt,_y_);
      caml_call2(Stdlib_format[125],fmt,_z_);
      caml_call2(Stdlib_format[125],fmt,_A_);
      caml_call2(Stdlib_format[125],fmt,_B_);
      caml_call2(Stdlib_format[125],fmt,_C_);
      caml_call2(Stdlib_format[125],fmt,_D_);
      return [0,function(_lL_,_lM_){return main_2(seed,_lL_,_lM_)}]}
    var
     Seed_tools_common=
      [0,main,main_1,show_vicinity,main_2,main_vicinity,main_3];
    caml_register_global(449,Seed_tools_common,"Seed_tools_common");
    var
     InvalidSave=[248,cst_Save_InvalidSave,caml_fresh_oo_id(0)],
     game_save_A=0,
     game_save_B=57344,
     section_size=4096,
     section_id_offset=4084,
     checksum_offset$0=4086,
     save_index_offset=4092,
     box_names_section_id=13,
     box_names_section_data_length=2000,
     box_names_offset=1860,
     box_names_length=126,
     team_items_section_id=1,
     team_items_section_data_length=3968,
     team_size_offset=564,
     pkmn_data_size=100;
    function read_section(inc,section_id)
     {var rbuf=caml_create_bytes(4096);
      function aux(base,i)
       {var i$0=i;
        for(;;)
         {if(14 <= i$0)throw InvalidSave;
          var addr=base + (i$0 * 4096 | 0) | 0;
          caml_call2(Stdlib[90],inc,addr);
          caml_call4(Stdlib[85],inc,rbuf,0,section_size);
          var
           id=caml_call2(Stdlib_bytes[51],rbuf,section_id_offset),
           index=caml_call2(Stdlib_bytes[57],rbuf,save_index_offset);
          if(id === section_id)return [0,addr,index];
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      var
       match=aux(game_save_A,0),
       indexa=match[2],
       addra=match[1],
       match$0=aux(game_save_B,0),
       indexb=match$0[2],
       addrb=match$0[1],
       addr=0 <= caml_call2(Stdlib_int32[16],indexa,indexb)?addra:addrb,
       res=caml_create_bytes(4096);
      caml_call2(Stdlib[90],inc,addr);
      caml_call4(Stdlib[85],inc,res,0,section_size);
      return [0,addr,res]}
    function write_section(oc,addr,buf)
     {caml_call2(Stdlib[73],oc,addr);
      caml_call2(Stdlib[67],oc,buf);
      return caml_call1(Stdlib[63],oc)}
    function compute_checksum(buf,start,len)
     {var acc=Stdlib_int32[1],i=start;
      for(;;)
       {if((start + len | 0) <= i)
         {var high=acc >>> 16 | 0,low=acc & 65535,res=high + low | 0;
          return uint32_to_int(res & 65535)}
        var
         nb=caml_call2(Stdlib_bytes[57],buf,i),
         i$0=i + 4 | 0,
         acc$0=acc + nb | 0,
         acc=acc$0,
         i=i$0;
        continue}}
    function extract_box_names_from_section(buf)
     {return caml_call3(Stdlib_bytes[7],buf,box_names_offset,box_names_length)}
    function update_box_names(buf,box_names)
     {var len=runtime.caml_ml_bytes_length(box_names);
      caml_call5(Stdlib_bytes[11],box_names,0,buf,box_names_offset,len);
      var checksum=compute_checksum(buf,0,box_names_section_data_length);
      return caml_call3(Stdlib_bytes[65],buf,checksum_offset$0,checksum)}
    function empty_pkmn(param){return caml_create_bytes(100)}
    function extract_team_from_section(buf)
     {var
       nb=uint32_to_int(caml_call2(Stdlib_bytes[57],buf,team_size_offset)),
       i$1=nb - 1 | 0,
       acc=0,
       i=i$1;
      for(;;)
       {if(0 <= i)
         {var
           addr=568 + (100 * i | 0) | 0,
           pkmn=caml_call3(Stdlib_bytes[7],buf,addr,pkmn_data_size),
           i$0=i - 1 | 0,
           acc$0=[0,pkmn,acc],
           acc=acc$0,
           i=i$0;
          continue}
        return acc}}
    function update_team(buf,pkmns)
     {var len=caml_call1(Stdlib_list[1],pkmns);
      caml_call3(Stdlib_bytes[71],buf,team_size_offset,len);
      function update_pkmn(i,pkmn)
       {var addr=568 + (100 * i | 0) | 0;
        return caml_call5(Stdlib_bytes[11],pkmn,0,buf,addr,pkmn_data_size)}
      caml_call2(Stdlib_list[16],update_pkmn,pkmns);
      var checksum=compute_checksum(buf,0,team_items_section_data_length);
      return caml_call3(Stdlib_bytes[65],buf,checksum_offset$0,checksum)}
    var
     Save=
      [0,
       InvalidSave,
       box_names_section_id,
       team_items_section_id,
       extract_box_names_from_section,
       update_box_names,
       empty_pkmn,
       extract_team_from_section,
       update_team,
       write_section,
       read_section];
    caml_register_global(450,Save,"Save");
    var
     StrMap=caml_call1(Stdlib_map[1],[0,Stdlib_string[33]]),
     VarNotFound=[248,cst_Preprocess_VarNotFound,caml_fresh_oo_id(0)];
    function get_param(lst,name)
     {var lst$0=lst;
      for(;;)
       {if(lst$0)
         {var _lK_=lst$0[1];
          if(0 === _lK_[0])
           {var n=_lK_[1],v=_lK_[2];
            if(caml_call2(Stdlib_string[34],n,name))return v;
            var lst$1=lst$0[2],lst$0=lst$1;
            continue}
          var lst$2=lst$0[2],lst$0=lst$2;
          continue}
        return 0}}
    function eval_meta_expr(env,e)
     {function aux(e)
       {var e$0=e;
        for(;;)
         switch(e$0[0])
          {case 0:var i=e$0[1];return i;
           case 1:
            var e2=e$0[3],e1=e$0[2],op=e$0[1],i1=aux(e1),i2=aux(e2);
            switch(op)
             {case 0:return i1 + i2 | 0;
              case 1:return i1 - i2 | 0;
              case 2:return runtime.caml_mul(i1,i2);
              case 3:return caml_call2(Stdlib_int32[4],i1,i2);
              case 4:return caml_call2(Stdlib_int32[5],i1,i2);
              case 5:return i1 & i2;
              case 6:return i1 ^ i2;
              case 7:return i1 | i2;
              case 8:return i1 << uint32_to_int(i2);
              case 9:return i1 >>> uint32_to_int(i2) | 0;
              case 10:
               return caml_call2(Stdlib_int32[17],i1,i2)
                       ?Stdlib_int32[2]
                       :Stdlib_int32[1];
              case 11:
               return caml_call2(Stdlib_int32[17],i1,i2)
                       ?Stdlib_int32[1]
                       :Stdlib_int32[2];
              case 12:
               if
                (caml_call2(Stdlib_int32[17],i1,Stdlib_int32[1])
                 &&
                 caml_call2(Stdlib_int32[17],i2,Stdlib_int32[1]))
                return Stdlib_int32[1];
               return Stdlib_int32[2];
              default:
               if
                (!
                 caml_call2(Stdlib_int32[17],i1,Stdlib_int32[1])
                 &&
                 !
                 caml_call2(Stdlib_int32[17],i2,Stdlib_int32[1]))
                return Stdlib_int32[2];
               return Stdlib_int32[1]}
           case 2:
            var e$1=e$0[2],op$0=e$0[1],i$0=aux(e$1);
            switch(op$0)
             {case 0:return i$0;
              case 1:return - i$0 | 0;
              case 2:return caml_call1(Stdlib_int32[11],i$0);
              default:
               return caml_call2(Stdlib_int32[17],i$0,Stdlib_int32[1])
                       ?Stdlib_int32[2]
                       :Stdlib_int32[1]}
           case 3:
            var str=e$0[1];
            if(caml_call2(StrMap[3],str,env))
             return caml_call2(StrMap[28],str,env);
            throw [0,VarNotFound,str];
           default:
            var e2$0=e$0[3],e1$0=e$0[2],e0=e$0[1],i0=aux(e0);
            if(caml_call2(Stdlib_int32[17],i0,Stdlib_int32[1]))
             {var e$0=e2$0;continue}
            var e$0=e1$0;
            continue}}
      return aux(e)}
    var empty_env=StrMap[1];
    function env_from_headers(fmt,headers)
     {function treat_def(param,def)
       {var acc=param[2],printed=param[1];
        if(0 === def[0])return [0,printed,acc];
        var expr=def[3],print=def[2],str=def[1],i=eval_meta_expr(acc,expr);
        if(print)caml_call5(Stdlib_format[125],fmt,_ab_,str,i,i);
        var _lJ_=caml_call3(StrMap[4],str,i,acc),printed$0=printed || print;
        return [0,printed$0,_lJ_]}
      var
       match=caml_call3(Stdlib_list[23],treat_def,[0,0,StrMap[1]],headers),
       res=match[2],
       printed=match[1];
      if(printed)caml_call2(Stdlib_format[125],fmt,_ac_);
      return res}
    function concat_env(env1,env2)
     {function _lI_(k,v,acc){return caml_call3(StrMap[4],k,v,acc)}
      return caml_call3(StrMap[13],_lI_,env2,env1)}
    var
     Preprocess=
      [0,
       VarNotFound,
       get_param,
       eval_meta_expr,
       empty_env,
       env_from_headers,
       concat_env];
    caml_register_global(452,Preprocess,"Preprocess");
    function main$0(fmt)
     {caml_call2(Stdlib_format[125],fmt,_ad_);return [0,main_1$0]}
    function main_6(pkmn,livea,fmt,str)
     {function _lH_(i){return i}
      var
       hivea=caml_call3(Stdlib_scanf[4],str,_aq_,_lH_),
       ivea=int32_from_low_high(livea,hivea),
       uivea=encrypt_aligned_int32(pkmn,ivea);
      caml_call3(Stdlib_format[125],fmt,_ar_,uivea);
      var
       match=ivea_data_to_ivs(uivea),
       data=match[7],
       sp_def=match[6],
       sp_atk=match[5],
       speed=match[4],
       def=match[3],
       atk=match[2],
       hp=match[1];
      caml_call8(Stdlib_format[125],fmt,_as_,hp,atk,def,speed,sp_atk,sp_def);
      caml_call2(Stdlib_format[125],fmt,_at_);
      var uivea$0=ivs_to_ivea_data([0,31,31,31,31,31,31,data]);
      caml_call3(Stdlib_format[125],fmt,_au_,uivea$0);
      var
       ivea$0=encrypt_aligned_int32(pkmn,uivea$0),
       match$0=int32_to_low_high(ivea$0),
       hivea$0=match$0[2],
       livea$0=match$0[1];
      caml_call3(Stdlib_format[125],fmt,_av_,livea$0);
      caml_call3(Stdlib_format[125],fmt,_aw_,hivea$0);
      var checksum_diff=checksum_diff_for_aligned_int3(uivea,uivea$0);
      caml_call3(Stdlib_format[125],fmt,_ax_,checksum_diff);
      return 0}
    function main_5(pkmn,fmt,str)
     {function _lE_(i){return i}
      var livea=caml_call3(Stdlib_scanf[4],str,_ao_,_lE_);
      caml_call2(Stdlib_format[125],fmt,_ap_);
      return [0,function(_lF_,_lG_){return main_6(pkmn,livea,_lF_,_lG_)}]}
    function main_4(pid,vid,fmt,str)
     {function _lB_(i){return i}
      var
       sid=caml_call3(Stdlib_scanf[4],str,_ak_,_lB_),
       tid=int32_from_low_high(vid,sid),
       pkmn=[0,pid,tid],
       misc_pos=substructure_position(pkmn,77),
       ivea_offset$0=ivea_offset(pkmn);
      caml_call3(Stdlib_format[125],fmt,_al_,misc_pos + 1 | 0);
      caml_call3(Stdlib_format[125],fmt,_am_,ivea_offset$0);
      caml_call2(Stdlib_format[125],fmt,_an_);
      return [0,function(_lC_,_lD_){return main_5(pkmn,_lC_,_lD_)}]}
    function main_3$0(pid,fmt,str)
     {function _ly_(i){return i}
      var vid=caml_call3(Stdlib_scanf[4],str,_ai_,_ly_);
      caml_call2(Stdlib_format[125],fmt,_aj_);
      return [0,function(_lz_,_lA_){return main_4(pid,vid,_lz_,_lA_)}]}
    function main_2$0(lpid,fmt,str)
     {function _lv_(i){return i}
      var
       hpid=caml_call3(Stdlib_scanf[4],str,_ag_,_lv_),
       pid=int32_from_low_high(lpid,hpid);
      caml_call2(Stdlib_format[125],fmt,_ah_);
      return [0,function(_lw_,_lx_){return main_3$0(pid,_lw_,_lx_)}]}
    function main_1$0(fmt,str)
     {function _ls_(i){return i}
      var lpid=caml_call3(Stdlib_scanf[4],str,_ae_,_ls_);
      caml_call2(Stdlib_format[125],fmt,_af_);
      return [0,function(_lt_,_lu_){return main_2$0(lpid,_lt_,_lu_)}]}
    var
     Pkmn_data_common=
      [0,main$0,main_1$0,main_2$0,main_3$0,main_4,main_5,main_6];
    caml_register_global(453,Pkmn_data_common,"Pkmn_data_common");
    var
     InvalidCommand=[248,cst_Arm_InvalidCommand,caml_fresh_oo_id(0)],
     a1=0,
     a2=1,
     a3=2,
     a4=3,
     v1=4,
     v2=5,
     v3=6,
     v4=7,
     v5=8,
     v6=9,
     v7=10,
     v8=11,
     sb=9,
     sl=10,
     fp=11,
     ip=12,
     sp=13,
     lr=14,
     pc=15,
     sign_plus=1,
     sign_minus=0,
     mask8=255,
     mask9=511,
     mask12=4095;
    function add_condition_code(c,v)
     {switch(c)
       {case 0:var _lr_=0;break;
        case 1:var _lr_=1;break;
        case 6:var _lr_=4;break;
        case 7:var _lr_=5;break;
        case 8:var _lr_=6;break;
        case 9:var _lr_=7;break;
        case 10:var _lr_=8;break;
        case 11:var _lr_=9;break;
        case 12:var _lr_=10;break;
        case 13:var _lr_=11;break;
        case 14:var _lr_=12;break;
        case 15:var _lr_=13;break;
        case 16:var _lr_=14;break;
        case 2:
        case 3:var _lr_=2;break;
        default:var _lr_=3}
      return v | _lr_ << 28}
    function add_rn_code(rn,v){return v | rn << 16}
    function add_rd_code(rd,v){return v | rd << 12}
    function rotate_right(v)
     {var lb=v & 1,v$0=v >>> 1 | 0;return v$0 | lb << 31}
    function rotate_left(v)
     {var hb=v & -2147483648,v$0=v << 1;return v$0 | hb >>> 31 | 0}
    function addr_mode_1(rs)
     {switch(rs[0])
       {case 0:
         var
          i=rs[1],
          aux=
           function(n,imm)
            {if(15 < n)return 0;
             var
              others=aux(n + 1 | 0,rotate_left(rotate_left(imm))),
              imm8=imm & 255;
             return caml_call2(Stdlib_int32[17],imm8,imm)
                     ?[0,[0,n,imm8],others]
                     :others},
          res=aux(0,i);
         if(0 === res)throw InvalidCommand;
         var
          _lp_=
           function(param)
            {var imm8=param[2],rr=param[1];return [0,1,imm8 | rr << 8]},
          possibilities=caml_call2(Stdlib_list[17],_lp_,res);
         break;
        case 1:var rm=rs[1],possibilities=[0,[0,0,rm],0];break;
        default:var possibilities=caml_call1(Stdlib[2],cst_Not_implemented)}
      function _lq_(param)
       {var v=param[2],imm=param[1],i=imm << 25;return v | i}
      return caml_call2(Stdlib_list[17],_lq_,possibilities)}
    function p_and_w(addr_typ)
     {switch(addr_typ)
       {case 0:return _ay_;case 1:return _az_;default:return _aA_}}
    function ldr_str_to_binary(is_ldr,typ,cond,rd,param)
     {var addr_typ=param[2],rn=param[1];
      function check_post_addr(param)
       {if(2 <= addr_typ)return 0;throw InvalidCommand}
      if(is_ldr)
       switch(typ)
        {case 0:var opcode=72351744;break;
         case 1:var opcode=1048784;break;
         case 2:var opcode=1048752;break;
         case 3:var opcode=1048816;break;
         case 4:var opcode=68157440;break;
         case 5:check_post_addr(0);var opcode=70254592;break;
         default:check_post_addr(0);var opcode=74448896}
      else
       switch(typ)
        {case 0:var opcode=71303168;break;
         case 1:throw InvalidCommand;
         case 2:var opcode=176;break;
         case 3:throw InvalidCommand;
         case 4:var opcode=67108864;break;
         case 5:check_post_addr(0);var opcode=69206016;break;
         default:check_post_addr(0);var opcode=73400320}
      var
       _lo_=add_condition_code(cond,opcode),
       v$3=add_rd_code(rd,add_rn_code(rn[1],_lo_)),
       switcher=typ - 1 | 0;
      if(2 < switcher >>> 0)
       {switch(rn[0])
         {case 0:
           var v=rn[3],sign=rn[2];
           if(0 < caml_call2(Stdlib_int32[16],v,mask12))throw InvalidCommand;
           var v$0=v,reg=0,sign$0=sign;
           break;
          case 1:var rm=rn[3],sign$1=rn[2],v$0=rm,reg=1,sign$0=sign$1;break;
          default:
           var
            _ln_=caml_call1(Stdlib[2],cst_Not_implemented$0),
            v$0=_ln_[3],
            reg=_ln_[2],
            sign$0=_ln_[1]}
        var
         match=p_and_w(addr_typ),
         w=match[2],
         p=match[1],
         i=reg << 25,
         u=sign$0 << 23,
         p$0=p << 24,
         w$0=w << 21,
         addr_mode=i | w$0 | p$0 | v$0 | u}
      else
       {switch(rn[0])
         {case 0:
           var v$1=rn[3],sign$2=rn[2];
           if(0 < caml_call2(Stdlib_int32[16],v$1,mask8))throw InvalidCommand;
           var
            immedL=15 & v$1,
            immedH=15 & (v$1 >>> 4 | 0),
            v$2=immedL | immedH << 8,
            imm=1,
            sign$3=sign$2;
           break;
          case 1:
           var rm$0=rn[3],sign$4=rn[2],v$2=rm$0,imm=0,sign$3=sign$4;break;
          default:throw InvalidCommand}
        var
         match$0=p_and_w(addr_typ),
         w$1=match$0[2],
         p$1=match$0[1],
         i$0=imm << 22,
         u$0=sign$3 << 23,
         p$2=p$1 << 24,
         w$2=w$1 << 21,
         addr_mode=i$0 | w$2 | p$2 | v$2 | u$0}
      return [0,v$3 | addr_mode,0]}
    function mov_mvn_to_binary(is_mov,s,cond,rd,rs)
     {var
       opcode=is_mov?27262976:31457280,
       scode=s?1:0,
       scode$0=scode << 20,
       v=scode$0 | add_rd_code(rd,add_condition_code(cond,opcode)),
       _ll_=addr_mode_1(rs);
      function _lm_(addr_mode){return v | addr_mode}
      return caml_call2(Stdlib_list[17],_lm_,_ll_)}
    function calculation_to_binary(typ,s,cond,rd,rn,op2)
     {if(caml_string_notequal(typ,cst_adc))
       if(caml_string_notequal(typ,cst_and))
        if(caml_string_notequal(typ,cst_bic))
         {if(caml_string_notequal(typ,cst_sbc))throw [0,Assert_failure,_aB_];
          var opcode=12582912}
        else
         var opcode=29360128;
       else
        var opcode=0;
      else
       var opcode=10485760;
      var
       scode=s?1:0,
       scode$0=scode << 20,
       v=
        scode$0
        |
        add_rn_code(rn,add_rd_code(rd,add_condition_code(cond,opcode))),
       _lj_=addr_mode_1(op2);
      function _lk_(addr_mode){return v | addr_mode}
      return caml_call2(Stdlib_list[17],_lk_,_lj_)}
    function arm_to_binary(arm)
     {switch(arm[0])
       {case 0:var i$1=arm[1];return [0,i$1,0];
        case 1:
         var ro=arm[4],rd=arm[3],cond=arm[2],typ=arm[1];
         return ldr_str_to_binary(1,typ,cond,rd,ro);
        case 2:
         var ro$0=arm[4],rd$0=arm[3],cond$0=arm[2],typ$0=arm[1];
         return ldr_str_to_binary(0,typ$0,cond$0,rd$0,ro$0);
        case 3:
         var rs=arm[4],rd$1=arm[3],cond$1=arm[2],s=arm[1];
         return mov_mvn_to_binary(1,s,cond$1,rd$1,rs);
        case 4:
         var rs$0=arm[4],rd$2=arm[3],cond$2=arm[2],s$0=arm[1];
         return mov_mvn_to_binary(0,s$0,cond$2,rd$2,rs$0);
        case 5:
         var op2=arm[5],rn=arm[4],rd$3=arm[3],cond$3=arm[2],s$1=arm[1];
         return calculation_to_binary(cst_adc$0,s$1,cond$3,rd$3,rn,op2);
        case 6:
         var op2$0=arm[5],rn$0=arm[4],rd$4=arm[3],cond$4=arm[2],s$2=arm[1];
         return calculation_to_binary(cst_sbc$0,s$2,cond$4,rd$4,rn$0,op2$0);
        case 7:
         var op2$1=arm[5],rn$1=arm[4],rd$5=arm[3],cond$5=arm[2],s$3=arm[1];
         return calculation_to_binary(cst_bic$0,s$3,cond$5,rd$5,rn$1,op2$1);
        case 8:
         var op2$2=arm[5],rn$2=arm[4],rd$6=arm[3],cond$6=arm[2],s$4=arm[1];
         return calculation_to_binary(cst_and$0,s$4,cond$6,rd$6,rn$2,op2$2);
        default:
         var
          target=arm[3],
          cond$7=arm[2],
          l=arm[1],
          opcode=l?184549376:167772160,
          v=add_condition_code(cond$7,opcode),
          i$0=target - 8 | 0;
         if(caml_call2(Stdlib_int32[17],i$0 & 3,Stdlib_int32[1]))
          {var i=i$0 >> 2,ms9=i >>> 23 | 0;
           if
            (!
             caml_call2(Stdlib_int32[17],ms9,mask9)
             &&
             !
             caml_call2(Stdlib_int32[17],ms9,Stdlib_int32[1]))
            throw InvalidCommand;
           var imm=i & 16777215;
           return [0,v | imm,0]}
         throw InvalidCommand}}
    function reverse_endianness(v)
     {var
       v1=(255 & v) << 24,
       v$0=v >>> 8 | 0,
       v2=(255 & v$0) << 16,
       v$1=v$0 >>> 8 | 0,
       v3=(255 & v$1) << 8,
       v$2=v$1 >>> 8 | 0,
       v4=255 & v$2;
      return v4 | v3 | v1 | v2}
    var
     Arm=
      [0,
       InvalidCommand,
       sign_plus,
       sign_minus,
       a1,
       a2,
       a3,
       a4,
       v1,
       v2,
       v3,
       v4,
       v5,
       v6,
       v7,
       v8,
       sb,
       sl,
       fp,
       ip,
       sp,
       lr,
       pc,
       arm_to_binary,
       reverse_endianness,
       rotate_right,
       rotate_left];
    caml_register_global(454,Arm,"Arm");
    var charset=_aC_.slice();
    function is_code_available(code)
     {var match=caml_check_bound(charset,code)[1 + code];
      if(typeof match !== "number" && 2 === match[0])return 1;
      return 0}
    function is_code_readable(code)
     {var match=caml_check_bound(charset,code)[1 + code];
      if(typeof match !== "number" && 0 !== match[0])return 1;
      return 0}
    function is_code_used(code)
     {var match=caml_check_bound(charset,code)[1 + code];
      return typeof match === "number"?0:1}
    function char_at(code)
     {var match=caml_check_bound(charset,code)[1 + code];
      if(typeof match === "number")return invalid_str;
      var str=match[1];
      return str}
    function readable_char_at(code)
     {var match=caml_check_bound(charset,code)[1 + code];
      if(typeof match !== "number" && 0 !== match[0])
       {var str=match[1];return str}
      return invalid_str}
    function writable_char_at(code)
     {var match=caml_check_bound(charset,code)[1 + code];
      if(typeof match !== "number" && 2 === match[0])
       {var str=match[1];return str}
      return invalid_str}
    var acc=0,i=255;
    for(;;)
     {if(0 <= i)
       {var match=caml_check_bound(charset,i)[1 + i];
        if(typeof match !== "number" && 2 === match[0])
         {var str=match[1],i$1=i - 1 | 0,acc$0=[0,str,acc],acc=acc$0,i=i$1;
          continue}
        var i$0=i - 1 | 0,i=i$0;
        continue}
      var
       encode_writable_char=
        function(str)
         {var i=255;
          for(;;)
           {if(0 <= i)
             {var match=caml_check_bound(charset,i)[1 + i];
              if(typeof match !== "number" && 2 === match[0])
               {var str$0=match[1];
                if(caml_call2(Stdlib_string[34],str,str$0))return i}
              var i$0=i - 1 | 0,i=i$0;
              continue}
            throw Stdlib[8]}},
       Charset=
        [0,
         is_code_available,
         is_code_readable,
         is_code_used,
         char_at,
         readable_char_at,
         writable_char_at,
         acc,
         encode_writable_char];
      caml_register_global(455,Charset,"Charset");
      var
       eof=255,
       space=0,
       codes_for_command=
        function(v)
         {var
           v1=255 & v,
           v$0=v >>> 8 | 0,
           v2=255 & v$0,
           v$1=v$0 >>> 8 | 0,
           v3=255 & v$1,
           v$2=v$1 >>> 8 | 0,
           v4=255 & v$2,
           _lg_=[0,uint32_to_int(v4),0],
           _lh_=[0,uint32_to_int(v3),_lg_],
           _li_=[0,uint32_to_int(v2),_lh_];
          return [0,uint32_to_int(v1),_li_]},
       command_for_codes=
        function(codes)
         {if(codes)
           {var _ld_=codes[2];
            if(_ld_)
             {var _le_=_ld_[2];
              if(_le_)
               {var _lf_=_le_[2];
                if(_lf_ && ! _lf_[2])
                 {var
                   c4=_lf_[1],
                   c3=_le_[1],
                   c2=_ld_[1],
                   c1=codes[1],
                   v=c4 << 8,
                   v$0=v | c3,
                   v$1=v$0 << 8,
                   v$2=v$1 | c2,
                   v$3=v$2 << 8;
                  return v$3 | c1}}}}
          throw [0,Assert_failure,_aD_]},
       codes_to_chars=
        function(c){return caml_call2(Stdlib_list[17],writable_char_at,c)},
       chars_for_command=
        function(v){return codes_to_chars(codes_for_command(v))},
       pp_chars=
        function(fmt,lst)
         {function _lb_(i,str)
           {var _lc_=0 === i?cst:cst$0;
            return caml_call4(Stdlib_format[125],fmt,_aE_,_lc_,str)}
          return caml_call2(Stdlib_list[16],_lb_,lst)},
       pp_chars_raw=
        function(fmt,lst)
         {function _la_(str)
           {var str$0=caml_string_equal(str,cst$1)?cst$2:str;
            return caml_call3(Stdlib_format[125],fmt,_aF_,str$0)}
          return caml_call2(Stdlib_list[15],_la_,lst)},
       is_code_writable=
        function(codes)
         {return caml_call2(Stdlib_list[30],is_code_available,codes)},
       first_code=
        function(f,codes)
         {var codes$0=codes;
          for(;;)
           {if(codes$0)
             {var codes$1=codes$0[2],code=codes$0[1];
              if(caml_call1(f,code))return code;
              var codes$0=codes$1;
              continue}
            throw Stdlib[8]}},
       first_writable_code=
        function(codes){return first_code(is_code_writable,codes)},
       is_code_writable_or_one_eof=
        function(code)
         {function _k7_(c){return c !== 255?1:0}
          var _k8_=is_code_writable(caml_call2(Stdlib_list[39],_k7_,code));
          if(_k8_)
           var
            _k9_=0,
            _k__=function(nb,c){return c === 255?nb + 1 | 0:nb},
            _k$_=caml_call3(Stdlib_list[23],_k__,_k9_,code) <= 1?1:0;
          else
           var _k$_=_k8_;
          return _k$_},
       preferred_code=
        function(codes)
         {try
           {var _k4_=first_writable_code(codes);return _k4_}
          catch(_k5_)
           {_k5_ = caml_wrap_exception(_k5_);
            if(_k5_ === Stdlib[8])
             try
              {var _k3_=first_code(is_code_writable_or_one_eof,codes);
               return _k3_}
             catch(_k6_)
              {_k6_ = caml_wrap_exception(_k6_);
               if(_k6_ === Stdlib[8])return caml_call1(Stdlib_list[5],codes);
               throw _k6_}
            throw _k5_}},
       is_full_of_spaces=
        function(codes)
         {function _k2_(c){return c === 0?1:0}
          return caml_call2(Stdlib_list[30],_k2_,codes)},
       Name=
        [0,
         eof,
         space,
         codes_for_command,
         command_for_codes,
         chars_for_command,
         codes_to_chars,
         pp_chars,
         pp_chars_raw,
         is_code_writable,
         first_writable_code,
         preferred_code,
         is_full_of_spaces];
      caml_register_global(456,Name,"Name");
      var
       CannotOptimize=[248,cst_Optimizer_CannotOptimize,caml_fresh_oo_id(0)],
       compare=Stdlib_int32[16],
       UInt32=[0,compare],
       UInt32Set=caml_call1(Stdlib_set[1],UInt32),
       padding_code=[0,Stdlib_int32[1]],
       acc$1=0,
       i$2=Stdlib_int32[1],
       max=255;
      for(;;)
       {if(caml_call2(Stdlib_int32[17],i$2,max))
         {var
           immed8=[0,i$2,acc$1],
           _aG_=function(i){return is_code_writable([0,uint32_to_int(i),0])},
           immed8$0=caml_call2(Stdlib_list[39],_aG_,immed8),
           _aH_=
            function(i$1)
             {var acc$1=[0,i$1,0],acc=acc$1,i=i$1;
              for(;;)
               {var i$0=rotate_right(rotate_right(i));
                if(caml_call2(Stdlib_int32[17],i$0,i$1))return acc;
                var acc$0=[0,i$0,acc],acc=acc$0,i=i$0;
                continue}},
           _aI_=caml_call2(Stdlib_list[17],_aH_,immed8$0),
           _aJ_=caml_call1(Stdlib_list[14],_aI_),
           constants_set=caml_call1(UInt32Set[37],_aJ_),
           _aK_=
            function(i)
             {return 1
                     -
                     (caml_call2(Stdlib_int32[15],i,Stdlib_int32[1]) < 0?1:0)},
           _aL_=caml_call2(UInt32Set[19],_aK_,constants_set),
           constants_set_no_carry=
            caml_call2(UInt32Set[6],Stdlib_int32[1],_aL_),
           constants=caml_call1(UInt32Set[23],constants_set),
           rev_constants=caml_call1(Stdlib_list[9],constants),
           nset=caml_call2(UInt32Set[15],Stdlib_int32[11],constants_set),
           _aM_=caml_call2(UInt32Set[7],constants_set_no_carry,nset),
           constants_mov_mvn=caml_call1(UInt32Set[23],_aM_),
           rev_constants_mov_mvn=caml_call1(Stdlib_list[9],constants_mov_mvn),
           tad0=_aN_.slice(),
           remove_while=
            function(f,lst)
             {var lst$0=lst;
              for(;;)
               {if(lst$0)
                 {var lst$1=lst$0[2],i=lst$0[1];
                  if(caml_call1(f,i)){var lst$0=lst$1;continue}
                  return lst$0}
                return 0}},
           synthesis=
            function(mov_mvn,additive,incr,max_card,i,is_valid_fst,is_valid)
             {var tad0_len=tad0.length - 1;
              if(tad0_len < max_card)
               var
                _kR_=tad0_len - 1 | 0,
                tad0$0=caml_check_bound(tad0,_kR_)[1 + _kR_];
              else
               var
                _kT_=max_card - 1 | 0,
                tad0$0=caml_check_bound(tad0,_kT_)[1 + _kT_];
              function remove(i)
               {function _k0_(j)
                 {return caml_call2(Stdlib_int32[16],i,j) < 0?1:0}
                return function(_k1_){return remove_while(_k0_,_k1_)}}
              function next(acc,rc,i)
               {var rc$0=rc;
                for(;;)
                 {if(caml_call2(Stdlib_int32[17],i,Stdlib_int32[1]))
                   return [0,acc];
                  var depth=caml_call1(Stdlib_list[1],acc);
                  if(max_card <= depth)return 0;
                  var
                   rem_depth=caml_int64_of_int32(max_card - depth | 0),
                   i64=int64_of_uint32(i),
                   ii=incr?caml_call1(Stdlib_int32[7],i):i,
                   match=caml_call1(remove(ii),rc$0);
                  if(match)
                   {var
                     fst=match[1],
                     _kY_=incr?caml_call1(Stdlib_int32[6],fst):fst,
                     _kZ_=runtime.caml_int64_mul(int64_of_uint32(_kY_),rem_depth);
                    if(0 <= caml_call2(Stdlib_int64[16],_kZ_,i64))
                     {var
                       rc$1=match[2],
                       remainder=ii - fst | 0,
                       match$0=next([0,fst,acc],[0,fst,rc$1],remainder);
                      if(match$0){var res=match$0[1];return [0,res]}
                      var rc$0=rc$1;
                      continue}
                    return 0}
                  return 0}}
              var
               filtered_rev_constants=
                caml_call2(Stdlib_list[39],is_valid,rev_constants),
               remove_init=
                additive
                 ?remove
                 :function(i)
                   {function _kW_(j)
                     {return 0 < caml_call2(Stdlib_int32[16],i,j)?1:0}
                    return function(_kX_){return remove_while(_kW_,_kX_)}},
               op_init=
                additive
                 ?function(_kV_,_kU_){return _kV_ - _kU_ | 0}
                 :function(x,y){return y - x | 0},
               init_rc=
                additive
                 ?mov_mvn?rev_constants_mov_mvn:rev_constants
                 :mov_mvn?constants_mov_mvn:constants,
               rc$1=caml_call2(Stdlib_list[39],is_valid_fst,init_rc),
               try_nb=0,
               rc=rc$1;
              for(;;)
               {if(tad0$0 <= try_nb)
                 var _kS_=0;
                else
                 {var match=caml_call1(remove_init(i),rc);
                  if(match)
                   {var
                     rc$0=match[2],
                     fst=match[1],
                     remainder=op_init(i,fst),
                     match$0=next([0,fst,0],filtered_rev_constants,remainder);
                    if(! match$0)
                     {var try_nb$0=try_nb + 1 | 0,try_nb=try_nb$0,rc=rc$0;
                      continue}
                    var res=match$0[1],_kS_=[0,res]}
                  else
                   var _kS_=0}
                if(_kS_)
                 {var lst=_kS_[1];return [0,caml_call1(Stdlib_list[9],lst)]}
                return 0}},
           synthesis_optimal=
            function(mov_mvn,inv,max_card,i,is_valid_fst,is_valid)
             {var card=1;
              for(;;)
               {if(max_card < card)return 0;
                var
                 match=
                  synthesis
                   (mov_mvn,1,inv,card,i,is_valid_fst,caml_call1(is_valid,1));
                if(match){var lst=match[1];return [0,[0,lst,1]]}
                var
                 match$0=
                  synthesis
                   (mov_mvn,
                    0,
                    1 - inv,
                    card,
                    i,
                    is_valid_fst,
                    caml_call1(is_valid,0));
                if(match$0){var lst$0=match$0[1];return [0,[0,lst$0,0]]}
                var card$0=card + 1 | 0,card=card$0;
                continue}},
           synthesis_test=
            function(max_card,i)
             {function _kP_(param,_kQ_){return 1}
              return synthesis_optimal
                      (1,0,max_card,i,function(param){return 1},_kP_)},
           is_command_valid=
            function(arm)
             {try
               {var
                 _kL_=arm_to_binary(arm),
                 _kM_=
                  function(i){return is_code_writable(codes_for_command(i))},
                 _kN_=caml_call2(Stdlib_list[31],_kM_,_kL_);
                return _kN_}
              catch(_kO_)
               {_kO_ = caml_wrap_exception(_kO_);
                if(_kO_ === InvalidCommand)return 0;
                throw _kO_}},
           tweak_mov_or_mvn=
            function(is_mov,s,cond,rd,rs,max_card)
             {var cmd=is_mov?[3,s,cond,rd,rs]:[4,s,cond,rd,rs];
              switch(rs[0])
               {case 0:
                 var
                  i=rs[1],
                  mk_cmd_first=
                   function(fst)
                    {var
                      nfst=caml_call1(Stdlib_int32[11],fst),
                      _kK_=
                       is_mov
                        ?caml_call2(UInt32Set[3],fst,constants_set_no_carry)
                        :is_mov,
                      is_mov$0=
                       _kK_
                       ||
                       1
                       -
                       caml_call2(UInt32Set[3],nfst,constants_set);
                     return is_mov$0?[3,1,cond,rd,[0,fst]]:[4,0,cond,rd,[0,nfst]]},
                  mk_cmd=
                   function(additive,i)
                    {if(additive)
                      {var
                        _kI_=15 === rd?1:0,
                        _kH_=[0,i],
                        _kJ_=_kI_ || (0 === rd?1:0);
                       return [5,_kJ_,cond,rd,rd,_kH_]}
                     return [6,0,cond,rd,rd,[0,i]]},
                  i$0=is_mov?i:caml_call1(Stdlib_int32[11],i),
                  _kB_=function(add,i){return is_command_valid(mk_cmd(add,i))},
                  match=
                   synthesis_optimal
                    (1,
                     0,
                     max_card,
                     i$0,
                     function(i){return is_command_valid(mk_cmd_first(i))},
                     _kB_);
                 if(match)
                  {var _kC_=match[1],_kD_=_kC_[1];
                   if(_kD_)
                    {var
                      additive=_kC_[2],
                      lst=_kD_[2],
                      fst=_kD_[1],
                      _kE_=function(_kG_){return mk_cmd(additive,_kG_)},
                      _kF_=caml_call2(Stdlib_list[17],_kE_,lst);
                     return [0,mk_cmd_first(fst),_kF_]}
                   throw [0,Assert_failure,_aO_]}
                 return [0,cmd,0];
                case 1:return [0,cmd,0];
                default:return caml_call1(Stdlib[2],cst_Not_implemented$1)}},
           tweak_adc_or_sbc=
            function(is_adc,s,cond,rd,rn,op2,max_card)
             {var cmd=is_adc?[5,s,cond,rd,rn,op2]:[6,s,cond,rd,rn,op2];
              switch(op2[0])
               {case 0:
                 var
                  i=op2[1],
                  mk_cmd_first=
                   function(fst)
                    {if(is_adc)
                      {var
                        _kz_=15 === rn?1:0,
                        _ky_=[0,fst],
                        _kA_=_kz_ || (0 === rn?1:0);
                       return [5,_kA_,cond,rd,rn,_ky_]}
                     return [6,0,cond,rd,rn,[0,fst]]},
                  mk_cmd=
                   function(additive,i)
                    {var switch$0=0;
                     if(additive && is_adc)switch$0 = 1;
                     if(! switch$0)
                      {var switch$1=0;
                       if(additive || is_adc)switch$1 = 1;
                       if(switch$1)return [6,0,cond,rd,rd,[0,i]]}
                     var
                      _kw_=15 === rd?1:0,
                      _kv_=[0,i],
                      _kx_=_kw_ || (0 === rd?1:0);
                     return [5,_kx_,cond,rd,rd,_kv_]},
                  _kp_=function(add,i){return is_command_valid(mk_cmd(add,i))},
                  match=
                   synthesis_optimal
                    (0,
                     1 - is_adc,
                     max_card,
                     i,
                     function(i){return is_command_valid(mk_cmd_first(i))},
                     _kp_);
                 if(match)
                  {var _kq_=match[1],_kr_=_kq_[1];
                   if(_kr_)
                    {var
                      additive=_kq_[2],
                      lst=_kr_[2],
                      fst=_kr_[1],
                      _ks_=function(_ku_){return mk_cmd(additive,_ku_)},
                      _kt_=caml_call2(Stdlib_list[17],_ks_,lst);
                     return [0,mk_cmd_first(fst),_kt_]}
                   throw [0,Assert_failure,_aP_]}
                 return [0,cmd,0];
                case 1:return [0,cmd,0];
                default:return caml_call1(Stdlib[2],cst_Not_implemented$2)}},
           tweak_command=
            function(param)
             {var optimize=param[2],arm=param[1];
              function optimize_with_card(arm,n,pad)
               {switch(arm[0])
                 {case 3:
                   var
                    rs=arm[4],
                    rd=arm[3],
                    cond=arm[2],
                    s=arm[1],
                    res=tweak_mov_or_mvn(1,s,cond,rd,rs,n);
                   break;
                  case 4:
                   var
                    rs$0=arm[4],
                    rd$0=arm[3],
                    cond$0=arm[2],
                    s$0=arm[1],
                    res=tweak_mov_or_mvn(0,s$0,cond$0,rd$0,rs$0,n);
                   break;
                  case 5:
                   var
                    op2=arm[5],
                    rn=arm[4],
                    rd$1=arm[3],
                    cond$1=arm[2],
                    s$1=arm[1],
                    res=tweak_adc_or_sbc(1,s$1,cond$1,rd$1,rn,op2,n);
                   break;
                  case 6:
                   var
                    op2$0=arm[5],
                    rn$0=arm[4],
                    rd$2=arm[3],
                    cond$2=arm[2],
                    s$2=arm[1],
                    res=tweak_adc_or_sbc(0,s$2,cond$2,rd$2,rn$0,op2$0,n);
                   break;
                  default:var res=[0,arm,0]}
                if(pad)
                 {var
                   _kn_=function(param){return padding_code},
                   _ko_=n - caml_call1(Stdlib_list[1],res) | 0,
                   padding=caml_call2(Stdlib_list[10],_ko_,_kn_);
                  return caml_call2(Stdlib[37],res,padding)}
                return res}
              if(typeof optimize === "number")
               return optimize?optimize_with_card(arm,5,0):[0,arm,0];
              var card=optimize[1];
              return optimize_with_card(arm,card,1)},
           tweak_arm=
            function(lst)
             {var _km_=caml_call2(Stdlib_list[17],tweak_command,lst);
              return caml_call1(Stdlib_list[14],_km_)},
           do_not_tweak_arm=
            function(lst)
             {function _kl_(param)
               {var optimize=param[2],arm=param[1];
                if(0 === optimize)return arm;
                throw CannotOptimize}
              return caml_call2(Stdlib_list[17],_kl_,lst)},
           Optimizer=
            [0,CannotOptimize,synthesis_test,tweak_arm,do_not_tweak_arm];
          caml_register_global(458,Optimizer,"Optimizer");
          var
           CommandError=[248,cst_Parser_ast_CommandError,caml_fresh_oo_id(0)],
           StructError=[248,cst_Parser_ast_StructError,caml_fresh_oo_id(0)],
           preprocess=
            function(env,ui)
             {if(0 === ui[0]){var i=ui[1];return i}
              var e=ui[1];
              return eval_meta_expr(env,e)},
           combine_opt=
            function(o1,o2)
             {if(o1)
               {var _kk_=o1[1];if(o2)throw StructError;var s=_kk_}
              else
               {if(! o2)return 0;var s=o2[1]}
              return [0,s]},
           combine_bool=
            function(b1,b2)
             {if(b1){if(b2)throw StructError}else if(! b2)return 0;return 1},
           recognize_modifiers=
            function(str$3,i)
             {var n$2=caml_ml_string_length(str$3),mods$1=mods,i$0=i;
              for(;;)
               {if(n$2 <= i$0)return mods$1;
                var
                 n=caml_ml_string_length(str$3),
                 _ka_=caml_call2(Stdlib[16],2,n - i$0 | 0),
                 str=caml_call3(Stdlib_string[4],str$3,i$0,_ka_),
                 switch$0=caml_string_compare(str,cst_LE),
                 switch$1=0;
                if(0 <= switch$0)
                 if(0 < switch$0)
                  if(caml_string_notequal(str,cst_LO))
                   if(caml_string_notequal(str,cst_LS))
                    if(caml_string_notequal(str,cst_LT))
                     if(caml_string_notequal(str,cst_MI))
                      if(caml_string_notequal(str,cst_NE))
                       if(caml_string_notequal(str,cst_PL))
                        if(caml_string_notequal(str,cst_VC))
                         if(caml_string_notequal(str,cst_VS))
                          switch$1 = 1;
                         else
                          var _ke_=[0,_aQ_,i$0 + 2 | 0];
                        else
                         var _ke_=[0,_aR_,i$0 + 2 | 0];
                       else
                        var _ke_=[0,_aS_,i$0 + 2 | 0];
                      else
                       var _ke_=[0,_aT_,i$0 + 2 | 0];
                     else
                      var _ke_=[0,_aU_,i$0 + 2 | 0];
                    else
                     var _ke_=[0,_aV_,i$0 + 2 | 0];
                   else
                    var _ke_=[0,_aW_,i$0 + 2 | 0];
                  else
                   var _ke_=[0,_aX_,i$0 + 2 | 0];
                 else
                  var _ke_=[0,_aY_,i$0 + 2 | 0];
                else
                 if(caml_string_notequal(str,cst_AL))
                  if(caml_string_notequal(str,cst_CC))
                   if(caml_string_notequal(str,cst_CS))
                    if(caml_string_notequal(str,cst_EQ))
                     if(caml_string_notequal(str,cst_GE))
                      if(caml_string_notequal(str,cst_GT))
                       if(caml_string_notequal(str,cst_HI))
                        if(caml_string_notequal(str,cst_HS))
                         switch$1 = 1;
                        else
                         var _ke_=[0,_aZ_,i$0 + 2 | 0];
                       else
                        var _ke_=[0,_a0_,i$0 + 2 | 0];
                      else
                       var _ke_=[0,_a1_,i$0 + 2 | 0];
                     else
                      var _ke_=[0,_a2_,i$0 + 2 | 0];
                    else
                     var _ke_=[0,_a3_,i$0 + 2 | 0];
                   else
                    var _ke_=[0,_a4_,i$0 + 2 | 0];
                  else
                   var _ke_=[0,_a5_,i$0 + 2 | 0];
                 else
                  var _ke_=[0,_a6_,i$0 + 2 | 0];
                if(switch$1)var _ke_=[0,0,i$0];
                var _kf_=_ke_[1];
                if(_kf_)
                 var i$1=_ke_[2],c=_kf_[1],i$2=i$1,nmods=[0,[0,c],0,0,0];
                else
                 {var
                   i$3=_ke_[2],
                   n$0=caml_ml_string_length(str$3),
                   _kb_=caml_call2(Stdlib[16],2,n$0 - i$3 | 0),
                   str$0=caml_call3(Stdlib_string[4],str$3,i$3,_kb_);
                  if(caml_string_notequal(str$0,cst_BT))
                   if(caml_string_notequal(str$0,cst_SB))
                    if(caml_string_notequal(str$0,cst_SH))
                     var
                      _kc_=caml_call2(Stdlib[16],1,n$0 - i$3 | 0),
                      str$1=caml_call3(Stdlib_string[4],str$0,0,_kc_),
                      _kg_=
                       caml_string_notequal(str$1,cst_B)
                        ?caml_string_notequal(str$1,cst_H)
                          ?caml_string_notequal(str$1,cst_T)
                            ?caml_string_notequal(str$1,cst_W)
                              ?[0,0,i$3]
                              :[0,_a7_,i$3 + 1 | 0]
                            :[0,_a8_,i$3 + 1 | 0]
                          :[0,_a9_,i$3 + 1 | 0]
                        :[0,_a__,i$3 + 1 | 0];
                    else
                     var _kg_=[0,_a$_,i$3 + 2 | 0];
                   else
                    var _kg_=[0,_ba_,i$3 + 2 | 0];
                  else
                   var _kg_=[0,_bb_,i$3 + 2 | 0];
                  var _kh_=_kg_[1];
                  if(_kh_)
                   var
                    i$4=_kg_[2],
                    lst$2=_kh_[1],
                    i$2=i$4,
                    nmods=[0,0,[0,lst$2],0,0];
                  else
                   {var
                     i$5=_kg_[2],
                     n$1=caml_ml_string_length(str$3),
                     _kd_=caml_call2(Stdlib[16],1,n$1 - i$5 | 0),
                     str$2=caml_call3(Stdlib_string[4],str$3,i$5,_kd_),
                     match=
                      caml_string_notequal(str$2,cst_L)
                       ?caml_string_notequal(str$2,cst_S)
                         ?[0,0,i$5]
                         :[0,_bc_,i$5 + 1 | 0]
                       :[0,_bd_,i$5 + 1 | 0],
                     _ki_=match[1],
                     switch$2=0;
                    if(_ki_)
                     {var _kj_=_ki_[1];
                      if(caml_string_notequal(_kj_,cst_L$0))
                       if(caml_string_notequal(_kj_,cst_S$0))
                        switch$2 = 1;
                       else
                        var i$6=match[2],i$2=i$6,nmods=_be_;
                      else
                       var i$7=match[2],i$2=i$7,nmods=_bf_}
                    else
                     switch$2 = 1;
                    if(switch$2)throw StructError}}
                var
                 l=nmods[4],
                 s=nmods[3],
                 lst=nmods[2],
                 cond=nmods[1],
                 l$0=mods$1[4],
                 s$0=mods$1[3],
                 lst$0=mods$1[2],
                 cond$0=mods$1[1],
                 cond$1=combine_opt(cond$0,cond),
                 lst$1=combine_opt(lst$0,lst),
                 s$1=combine_bool(s$0,s),
                 l$1=combine_bool(l$0,l),
                 mods$0=[0,cond$1,lst$1,s$1,l$1],
                 mods$1=mods$0,
                 i$0=i$2;
                continue}},
           register_of_str=
            function(str)
             {var
               str$0=caml_call1(Stdlib_string[30],str),
               switch$0=caml_string_compare(str$0,cst_r15);
              if(0 <= switch$0)
               {if(! (0 < switch$0))return 15;
                var switch$1=caml_string_compare(str$0,cst_r7);
                if(0 <= switch$1)
                 {if(! (0 < switch$1))return 7;
                  if(! caml_string_notequal(str$0,cst_r8))return 8;
                  if(! caml_string_notequal(str$0,cst_r9))return 9;
                  if(! caml_string_notequal(str$0,cst_sb))return sb;
                  if(! caml_string_notequal(str$0,cst_sl))return sl;
                  if(! caml_string_notequal(str$0,cst_sp))return sp}
                else
                 {if(! caml_string_notequal(str$0,cst_r2))return 2;
                  if(! caml_string_notequal(str$0,cst_r3))return 3;
                  if(! caml_string_notequal(str$0,cst_r4))return 4;
                  if(! caml_string_notequal(str$0,cst_r5))return 5;
                  if(! caml_string_notequal(str$0,cst_r6))return 6}}
              else
               {var switch$2=caml_string_compare(str$0,cst_r1);
                if(0 <= switch$2)
                 {if(! (0 < switch$2))return 1;
                  if(! caml_string_notequal(str$0,cst_r10))return 10;
                  if(! caml_string_notequal(str$0,cst_r11))return 11;
                  if(! caml_string_notequal(str$0,cst_r12))return 12;
                  if(! caml_string_notequal(str$0,cst_r13))return 13;
                  if(! caml_string_notequal(str$0,cst_r14))return 14}
                else
                 {if(! caml_string_notequal(str$0,cst_fp))return fp;
                  if(! caml_string_notequal(str$0,cst_ip))return ip;
                  if(! caml_string_notequal(str$0,cst_lr))return lr;
                  if(! caml_string_notequal(str$0,cst_pc))return pc;
                  if(! caml_string_notequal(str$0,cst_r0))return 0}}
              throw StructError},
           get_register=
            function(arg)
             {if(0 === arg[0]){var str=arg[1];return register_of_str(str)}
              throw StructError},
           get_rd=
            function(args)
             {return get_register(caml_call1(Stdlib_list[5],args))},
           get_rn=
            function(args)
             {var n=caml_call1(Stdlib_list[1],args);
              return get_register(caml_call2(Stdlib_list[7],args,n - 2 | 0))},
           get_op2=
            function(env,args)
             {var
               n=caml_call1(Stdlib_list[1],args),
               arg=caml_call2(Stdlib_list[7],args,n - 1 | 0);
              switch(arg[0])
               {case 0:var str=arg[1];return [1,register_of_str(str)];
                case 1:var i=arg[1];return [0,preprocess(env,i)];
                default:throw StructError}},
           get_ro=
            function(env,args)
             {var
               n=caml_call1(Stdlib_list[1],args),
               match=caml_call2(Stdlib_list[7],args,n - 1 | 0);
              if(2 === match[0])
               {var
                 addr_typ=match[3],
                 offset=match[2],
                 str=match[1],
                 r=register_of_str(str);
                if(0 === offset[0])
                 var
                  i=offset[2],
                  sign=offset[1],
                  ro=[0,r,sign,preprocess(env,i)];
                else
                 var
                  str$0=offset[2],
                  sign$0=offset[1],
                  ro=[1,r,sign$0,register_of_str(str$0)];
                return [0,ro,addr_typ]}
              throw StructError},
           get_target=
            function(env,args)
             {var arg=caml_call1(Stdlib_list[5],args);
              if(1 === arg[0]){var i=arg[1];return preprocess(env,i)}
              throw StructError},
           cmd_to_arm=
            function(env,cmd$1)
             {if(0 === cmd$1[0])
               {var
                 optimize=cmd$1[4],
                 args=cmd$1[3],
                 cmd$2=cmd$1[2],
                 pos=cmd$1[1];
                try
                 {try
                   {if(caml_ml_string_length(cmd$2) < 3)throw StructError;
                    var
                     cmd=caml_call1(Stdlib_string[29],cmd$2),
                     match=recognize_modifiers(cmd,3),
                     s=match[3],
                     typ=match[2],
                     cond=match[1];
                    if(cond)var c=cond[1],cond$0=c;else var cond$0=16;
                    if(typ)var typ$0=typ[1],typ$1=typ$0;else var typ$1=4;
                    try
                     {var match$0=caml_call3(Stdlib_string[4],cmd,0,3);
                      if(caml_string_notequal(match$0,cst_ADC))
                       if(caml_string_notequal(match$0,cst_AND))
                        if(caml_string_notequal(match$0,cst_BIC))
                         if(caml_string_notequal(match$0,cst_LDR))
                          if(caml_string_notequal(match$0,cst_MOV))
                           if(caml_string_notequal(match$0,cst_MVN))
                            if(caml_string_notequal(match$0,cst_SBC))
                             {if(caml_string_notequal(match$0,cst_STR))throw StructError;
                              var
                               _jS_=get_ro(env,args),
                               _jT_=[2,typ$1,cond$0,get_rd(args),_jS_]}
                            else
                             var
                              _jU_=get_op2(env,args),
                              _jV_=get_rn(args),
                              _jT_=[6,s,cond$0,get_rd(args),_jV_,_jU_];
                           else
                            var
                             _jW_=get_op2(env,args),
                             _jT_=[4,s,cond$0,get_rd(args),_jW_];
                          else
                           var
                            _jX_=get_op2(env,args),
                            _jT_=[3,s,cond$0,get_rd(args),_jX_];
                         else
                          var
                           _jY_=get_ro(env,args),
                           _jT_=[1,typ$1,cond$0,get_rd(args),_jY_];
                        else
                         var
                          _jZ_=get_op2(env,args),
                          _j0_=get_rn(args),
                          _jT_=[7,s,cond$0,get_rd(args),_j0_,_jZ_];
                       else
                        var
                         _j1_=get_op2(env,args),
                         _j2_=get_rn(args),
                         _jT_=[8,s,cond$0,get_rd(args),_j2_,_j1_];
                      else
                       var
                        _j3_=get_op2(env,args),
                        _j4_=get_rn(args),
                        _jT_=[5,s,cond$0,get_rd(args),_j4_,_j3_]}
                    catch(_j$_)
                     {_j$_ = caml_wrap_exception(_j$_);
                      if(_j$_[1] !== Stdlib[7] && _j$_[1] !== Stdlib[6])
                       throw _j$_;
                      throw StructError}
                    var _j6_=_jT_}
                  catch(_j9_)
                   {_j9_ = caml_wrap_exception(_j9_);
                    if(_j9_ !== StructError)throw _j9_;
                    if(caml_ml_string_length(cmd$2) < 1)throw StructError;
                    var
                     cmd$0=caml_call1(Stdlib_string[29],cmd$2),
                     match$1=recognize_modifiers(cmd$0,1),
                     l=match$1[4],
                     cond$1=match$1[1];
                    if(cond$1)var c$0=cond$1[1],cond$2=c$0;else var cond$2=16;
                    try
                     {var match$2=caml_call3(Stdlib_string[4],cmd$0,0,1);
                      if(caml_string_notequal(match$2,cst_B$0))throw StructError;
                      var _j5_=[9,l,cond$2,get_target(env,args)]}
                    catch(_j__)
                     {_j__ = caml_wrap_exception(_j__);
                      if(_j__[1] !== Stdlib[7] && _j__[1] !== Stdlib[6])
                       throw _j__;
                      throw StructError}
                    var _j6_=_j5_}
                  var _j7_=[0,_j6_,optimize];
                  return _j7_}
                catch(_j8_)
                 {_j8_ = caml_wrap_exception(_j8_);
                  if(_j8_ === StructError)throw [0,CommandError,pos];
                  throw _j8_}}
              var i=cmd$1[2];
              return [0,[0,preprocess(env,i)],0]},
           to_arm=
            function(env,ast)
             {function _jQ_(_jR_){return cmd_to_arm(env,_jR_)}
              return caml_call2(Stdlib_list[17],_jQ_,ast)},
           Parser_ast=[0,CommandError,to_arm];
          caml_register_global(459,Parser_ast,"Parser_ast");
          var
           eRR=[248,cst_Parser_MenhirBasics_Error,caml_fresh_oo_id(0)],
           menhir_discard=
            function(menhir_env)
             {var
               lexer=menhir_env[1],
               lexbuf=menhir_env[2],
               tok=caml_call1(lexer,lexbuf);
              return [0,lexer,lexbuf,tok,0]},
           menhir_errorcase=
            function(menhir_env,menhir_stack,menhir_s)
             {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s;
              for(;;)
               switch(menhir_s$0)
                {case 0:
                  var
                   match=menhir_stack$0[1],
                   menhir_s$1=match[2],
                   menhir_stack$1=match[1],
                   menhir_stack$0=menhir_stack$1,
                   menhir_s$0=menhir_s$1;
                  continue;
                 case 1:throw eRR;
                 case 2:throw eRR;
                 case 3:throw eRR;
                 case 4:
                  var
                   menhir_s$2=menhir_stack$0[2],
                   menhir_stack$2=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$2,
                   menhir_s$0=menhir_s$2;
                  continue;
                 case 5:
                  var
                   menhir_s$3=menhir_stack$0[2],
                   menhir_stack$3=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$3,
                   menhir_s$0=menhir_s$3;
                  continue;
                 case 6:
                  var
                   menhir_s$4=menhir_stack$0[2],
                   menhir_stack$4=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$4,
                   menhir_s$0=menhir_s$4;
                  continue;
                 case 7:
                  var
                   match$0=menhir_stack$0[1],
                   menhir_s$5=match$0[2],
                   menhir_stack$5=match$0[1],
                   menhir_stack$0=menhir_stack$5,
                   menhir_s$0=menhir_s$5;
                  continue;
                 case 8:
                  var
                   menhir_s$6=menhir_stack$0[2],
                   menhir_stack$6=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$6,
                   menhir_s$0=menhir_s$6;
                  continue;
                 case 9:
                  var
                   menhir_s$7=menhir_stack$0[2],
                   menhir_stack$7=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$7,
                   menhir_s$0=menhir_s$7;
                  continue;
                 case 10:
                  var
                   menhir_s$8=menhir_stack$0[2],
                   menhir_stack$8=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$8,
                   menhir_s$0=menhir_s$8;
                  continue;
                 case 11:
                  var
                   menhir_s$9=menhir_stack$0[2],
                   menhir_stack$9=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$9,
                   menhir_s$0=menhir_s$9;
                  continue;
                 case 12:
                  var
                   menhir_s$10=menhir_stack$0[2],
                   menhir_stack$10=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$10,
                   menhir_s$0=menhir_s$10;
                  continue;
                 case 13:
                  var
                   match$1=menhir_stack$0[1],
                   menhir_s$11=match$1[2],
                   menhir_stack$11=match$1[1],
                   menhir_stack$0=menhir_stack$11,
                   menhir_s$0=menhir_s$11;
                  continue;
                 case 14:
                  var
                   menhir_s$12=menhir_stack$0[2],
                   menhir_stack$12=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$12,
                   menhir_s$0=menhir_s$12;
                  continue;
                 case 15:
                  var
                   menhir_s$13=menhir_stack$0[2],
                   menhir_stack$13=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$13,
                   menhir_s$0=menhir_s$13;
                  continue;
                 case 16:
                  var
                   menhir_s$14=menhir_stack$0[2],
                   menhir_stack$14=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$14,
                   menhir_s$0=menhir_s$14;
                  continue;
                 case 17:
                  var
                   menhir_s$15=menhir_stack$0[2],
                   menhir_stack$15=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$15,
                   menhir_s$0=menhir_s$15;
                  continue;
                 case 18:
                  var
                   menhir_s$16=menhir_stack$0[2],
                   menhir_stack$16=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$16,
                   menhir_s$0=menhir_s$16;
                  continue;
                 case 19:
                  var
                   menhir_s$17=menhir_stack$0[2],
                   menhir_stack$17=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$17,
                   menhir_s$0=menhir_s$17;
                  continue;
                 case 20:
                  var
                   menhir_s$18=menhir_stack$0[2],
                   menhir_stack$18=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$18,
                   menhir_s$0=menhir_s$18;
                  continue;
                 case 21:
                  var
                   menhir_s$19=menhir_stack$0[2],
                   menhir_stack$19=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$19,
                   menhir_s$0=menhir_s$19;
                  continue;
                 case 22:
                  var
                   menhir_s$20=menhir_stack$0[2],
                   menhir_stack$20=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$20,
                   menhir_s$0=menhir_s$20;
                  continue;
                 case 23:
                  var
                   menhir_s$21=menhir_stack$0[2],
                   menhir_stack$21=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$21,
                   menhir_s$0=menhir_s$21;
                  continue;
                 case 24:
                  var
                   menhir_s$22=menhir_stack$0[2],
                   menhir_stack$22=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$22,
                   menhir_s$0=menhir_s$22;
                  continue;
                 case 25:
                  var
                   menhir_s$23=menhir_stack$0[2],
                   menhir_stack$23=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$23,
                   menhir_s$0=menhir_s$23;
                  continue;
                 case 26:
                  var
                   menhir_s$24=menhir_stack$0[2],
                   menhir_stack$24=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$24,
                   menhir_s$0=menhir_s$24;
                  continue;
                 case 27:
                  var
                   menhir_s$25=menhir_stack$0[2],
                   menhir_stack$25=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$25,
                   menhir_s$0=menhir_s$25;
                  continue;
                 case 28:
                  var
                   menhir_s$26=menhir_stack$0[2],
                   menhir_stack$26=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$26,
                   menhir_s$0=menhir_s$26;
                  continue;
                 case 29:
                  var
                   menhir_s$27=menhir_stack$0[2],
                   menhir_stack$27=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$27,
                   menhir_s$0=menhir_s$27;
                  continue;
                 case 30:
                  var
                   menhir_s$28=menhir_stack$0[2],
                   menhir_stack$28=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$28,
                   menhir_s$0=menhir_s$28;
                  continue;
                 case 31:
                  var
                   menhir_s$29=menhir_stack$0[2],
                   menhir_stack$29=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$29,
                   menhir_s$0=menhir_s$29;
                  continue;
                 case 32:
                  var
                   menhir_s$30=menhir_stack$0[2],
                   menhir_stack$30=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$30,
                   menhir_s$0=menhir_s$30;
                  continue;
                 case 33:
                  var
                   menhir_s$31=menhir_stack$0[2],
                   menhir_stack$31=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$31,
                   menhir_s$0=menhir_s$31;
                  continue;
                 case 34:
                  var
                   menhir_s$32=menhir_stack$0[2],
                   menhir_stack$32=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$32,
                   menhir_s$0=menhir_s$32;
                  continue;
                 case 35:
                  var
                   menhir_s$33=menhir_stack$0[2],
                   menhir_stack$33=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$33,
                   menhir_s$0=menhir_s$33;
                  continue;
                 case 36:
                  var
                   menhir_s$34=menhir_stack$0[2],
                   menhir_stack$34=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$34,
                   menhir_s$0=menhir_s$34;
                  continue;
                 case 37:
                  var
                   menhir_s$35=menhir_stack$0[2],
                   menhir_stack$35=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$35,
                   menhir_s$0=menhir_s$35;
                  continue;
                 case 38:
                  var
                   menhir_s$36=menhir_stack$0[2],
                   menhir_stack$36=menhir_stack$0[1],
                   menhir_stack$0=menhir_stack$36,
                   menhir_s$0=menhir_s$36;
                  continue;
                 default:throw eRR}},
           menhir_fail=
            function(param)
             {caml_call2(Stdlib_printf[1],Stdlib[40],_cg_);
              throw [0,Assert_failure,_ch_]},
           menhir_goto_ast=
            function(menhir_env,menhir_stack,menhir_s,v)
             {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,v$0=v;
              for(;;)
               {if(4 === menhir_s$0)
                 {var
                   cmd=menhir_stack$0[3],
                   match=menhir_stack$0[1],
                   menhir_s$1=match[2],
                   menhir_stack$1=match[1],
                   v$1=[0,cmd,v$0],
                   menhir_stack$0=menhir_stack$1,
                   menhir_s$0=menhir_s$1,
                   v$0=v$1;
                  continue}
                return 39 <= menhir_s$0?v$0:menhir_fail(0)}},
           menhir_goto_headers=
            function(menhir_env,menhir_stack,menhir_s,v)
             {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,v$0=v;
              for(;;)
               {if(3 === menhir_s$0)return v$0;
                if(menhir_s$0)return menhir_fail(0);
                var
                 d=menhir_stack$0[2],
                 match=menhir_stack$0[1],
                 menhir_s$1=match[2],
                 menhir_stack$1=match[1],
                 v$1=[0,d,v$0],
                 menhir_stack$0=menhir_stack$1,
                 menhir_s$0=menhir_s$1,
                 v$0=v$1;
                continue}},
           menhir_run15=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _jH_=30;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_jH_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_jH_]);
                 case 9:
                  var _jI_=30;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_jI_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_jI_]);
                 case 12:
                  var _jJ_=30;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_jJ_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_jJ_]);
                 case 14:
                  var _jK_=30;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_jK_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_jK_]);
                 case 20:
                  var _jL_=30;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_jL_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_jL_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_jM_=menhir_env$0[2][11],_jN_=30;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_jN_,v,_jM_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_jN_,v,_jM_]);
                 case 2:
                  var v$0=tok[1],_jO_=menhir_env$0[2][11],_jP_=30;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_jP_,v$0,_jO_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_jP_,v$0,_jO_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bg_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,30)},
           menhir_run17=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _jy_=29;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_jy_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_jy_]);
                 case 9:
                  var _jz_=29;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_jz_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_jz_]);
                 case 12:
                  var _jA_=29;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_jA_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_jA_]);
                 case 14:
                  var _jB_=29;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_jB_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_jB_]);
                 case 20:
                  var _jC_=29;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_jC_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_jC_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_jD_=menhir_env$0[2][11],_jE_=29;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_jE_,v,_jD_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_jE_,v,_jD_]);
                 case 2:
                  var v$0=tok[1],_jF_=menhir_env$0[2][11],_jG_=29;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_jG_,v$0,_jF_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_jG_,v$0,_jF_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bh_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,29)},
           menhir_run19=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _jp_=28;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_jp_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_jp_]);
                 case 9:
                  var _jq_=28;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_jq_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_jq_]);
                 case 12:
                  var _jr_=28;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_jr_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_jr_]);
                 case 14:
                  var _js_=28;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_js_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_js_]);
                 case 20:
                  var _jt_=28;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_jt_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_jt_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_ju_=menhir_env$0[2][11],_jv_=28;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_jv_,v,_ju_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_jv_,v,_ju_]);
                 case 2:
                  var v$0=tok[1],_jw_=menhir_env$0[2][11],_jx_=28;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_jx_,v$0,_jw_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_jx_,v$0,_jw_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bi_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,28)},
           menhir_run21=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _jg_=27;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_jg_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_jg_]);
                 case 9:
                  var _jh_=27;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_jh_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_jh_]);
                 case 12:
                  var _ji_=27;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_ji_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_ji_]);
                 case 14:
                  var _jj_=27;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_jj_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_jj_]);
                 case 20:
                  var _jk_=27;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_jk_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_jk_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_jl_=menhir_env$0[2][11],_jm_=27;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_jm_,v,_jl_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_jm_,v,_jl_]);
                 case 2:
                  var v$0=tok[1],_jn_=menhir_env$0[2][11],_jo_=27;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_jo_,v$0,_jn_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_jo_,v$0,_jn_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bj_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,27)},
           menhir_run38=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _i9_=19;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_i9_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_i9_]);
                 case 9:
                  var _i__=19;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_i__)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_i__]);
                 case 12:
                  var _i$_=19;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_i$_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_i$_]);
                 case 14:
                  var _ja_=19;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_ja_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_ja_]);
                 case 20:
                  var _jb_=19;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_jb_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_jb_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_jc_=menhir_env$0[2][11],_jd_=19;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_jd_,v,_jc_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_jd_,v,_jc_]);
                 case 2:
                  var v$0=tok[1],_je_=menhir_env$0[2][11],_jf_=19;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_jf_,v$0,_je_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_jf_,v$0,_je_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bk_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,19)},
           menhir_run29=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _i0_=23;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_i0_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_i0_]);
                 case 9:
                  var _i1_=23;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_i1_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_i1_]);
                 case 12:
                  var _i2_=23;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_i2_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_i2_]);
                 case 14:
                  var _i3_=23;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_i3_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_i3_]);
                 case 20:
                  var _i4_=23;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_i4_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_i4_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_i5_=menhir_env$0[2][11],_i6_=23;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_i6_,v,_i5_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_i6_,v,_i5_]);
                 case 2:
                  var v$0=tok[1],_i7_=menhir_env$0[2][11],_i8_=23;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_i8_,v$0,_i7_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_i8_,v$0,_i7_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bl_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,23)},
           menhir_run23=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _iR_=26;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_iR_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_iR_]);
                 case 9:
                  var _iS_=26;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_iS_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_iS_]);
                 case 12:
                  var _iT_=26;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_iT_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_iT_]);
                 case 14:
                  var _iU_=26;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_iU_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_iU_]);
                 case 20:
                  var _iV_=26;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_iV_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_iV_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_iW_=menhir_env$0[2][11],_iX_=26;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_iX_,v,_iW_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_iX_,v,_iW_]);
                 case 2:
                  var v$0=tok[1],_iY_=menhir_env$0[2][11],_iZ_=26;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_iZ_,v$0,_iY_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_iZ_,v$0,_iY_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bm_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,26)},
           menhir_run27=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _iI_=24;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_iI_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_iI_]);
                 case 9:
                  var _iJ_=24;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_iJ_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_iJ_]);
                 case 12:
                  var _iK_=24;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_iK_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_iK_]);
                 case 14:
                  var _iL_=24;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_iL_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_iL_]);
                 case 20:
                  var _iM_=24;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_iM_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_iM_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_iN_=menhir_env$0[2][11],_iO_=24;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_iO_,v,_iN_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_iO_,v,_iN_]);
                 case 2:
                  var v$0=tok[1],_iP_=menhir_env$0[2][11],_iQ_=24;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_iQ_,v$0,_iP_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_iQ_,v$0,_iP_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bn_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,24)},
           menhir_run31=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _iz_=22;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_iz_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_iz_]);
                 case 9:
                  var _iA_=22;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_iA_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_iA_]);
                 case 12:
                  var _iB_=22;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_iB_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_iB_]);
                 case 14:
                  var _iC_=22;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_iC_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_iC_]);
                 case 20:
                  var _iD_=22;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_iD_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_iD_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_iE_=menhir_env$0[2][11],_iF_=22;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_iF_,v,_iE_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_iF_,v,_iE_]);
                 case 2:
                  var v$0=tok[1],_iG_=menhir_env$0[2][11],_iH_=22;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_iH_,v$0,_iG_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_iH_,v$0,_iG_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bo_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,22)},
           menhir_run40=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _iq_=18;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_iq_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_iq_]);
                 case 9:
                  var _ir_=18;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_ir_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_ir_]);
                 case 12:
                  var _is_=18;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_is_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_is_]);
                 case 14:
                  var _it_=18;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_it_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_it_]);
                 case 20:
                  var _iu_=18;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_iu_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_iu_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_iv_=menhir_env$0[2][11],_iw_=18;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_iw_,v,_iv_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_iw_,v,_iv_]);
                 case 2:
                  var v$0=tok[1],_ix_=menhir_env$0[2][11],_iy_=18;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_iy_,v$0,_ix_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_iy_,v$0,_ix_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bp_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,18)},
           menhir_run33=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _ih_=21;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_ih_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_ih_]);
                 case 9:
                  var _ii_=21;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_ii_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_ii_]);
                 case 12:
                  var _ij_=21;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_ij_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_ij_]);
                 case 14:
                  var _ik_=21;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_ik_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_ik_]);
                 case 20:
                  var _il_=21;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_il_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_il_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_im_=menhir_env$0[2][11],_in_=21;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_in_,v,_im_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_in_,v,_im_]);
                 case 2:
                  var v$0=tok[1],_io_=menhir_env$0[2][11],_ip_=21;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_ip_,v$0,_io_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_ip_,v$0,_io_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bq_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,21)},
           menhir_run25=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _h__=25;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_h__)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_h__]);
                 case 9:
                  var _h$_=25;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_h$_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_h$_]);
                 case 12:
                  var _ia_=25;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_ia_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_ia_]);
                 case 14:
                  var _ib_=25;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_ib_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_ib_]);
                 case 20:
                  var _ic_=25;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_ic_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_ic_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_id_=menhir_env$0[2][11],_ie_=25;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_ie_,v,_id_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_ie_,v,_id_]);
                 case 2:
                  var v$0=tok[1],_if_=menhir_env$0[2][11],_ig_=25;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_ig_,v$0,_if_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_ig_,v$0,_if_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_br_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,25)},
           menhir_run44=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _h1_=16;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_h1_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_h1_]);
                 case 9:
                  var _h2_=16;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_h2_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_h2_]);
                 case 12:
                  var _h3_=16;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_h3_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_h3_]);
                 case 14:
                  var _h4_=16;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_h4_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_h4_]);
                 case 20:
                  var _h5_=16;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_h5_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_h5_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_h6_=menhir_env$0[2][11],_h7_=16;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_h7_,v,_h6_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_h7_,v,_h6_]);
                 case 2:
                  var v$0=tok[1],_h8_=menhir_env$0[2][11],_h9_=16;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_h9_,v$0,_h8_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_h9_,v$0,_h8_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bs_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,16)},
           menhir_run46=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _hS_=15;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_hS_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_hS_]);
                 case 9:
                  var _hT_=15;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_hT_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_hT_]);
                 case 12:
                  var _hU_=15;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_hU_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_hU_]);
                 case 14:
                  var _hV_=15;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_hV_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_hV_]);
                 case 20:
                  var _hW_=15;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_hW_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_hW_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_hX_=menhir_env$0[2][11],_hY_=15;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_hY_,v,_hX_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_hY_,v,_hX_]);
                 case 2:
                  var v$0=tok[1],_hZ_=menhir_env$0[2][11],_h0_=15;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_h0_,v$0,_hZ_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_h0_,v$0,_hZ_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bt_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,15)},
           menhir_run35=
            function(counter,menhir_env,menhir_stack)
             {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _hJ_=20;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6(counter$6,menhir_env$0,menhir_stack,_hJ_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack,_hJ_]);
                 case 9:
                  var _hK_=20;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8(counter$4,menhir_env$0,menhir_stack,_hK_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack,_hK_]);
                 case 12:
                  var _hL_=20;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9(counter$3,menhir_env$0,menhir_stack,_hL_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack,_hL_]);
                 case 14:
                  var _hM_=20;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack,_hM_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack,_hM_]);
                 case 20:
                  var _hN_=20;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack,_hN_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack,_hN_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_hO_=menhir_env$0[2][11],_hP_=20;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack,_hP_,v,_hO_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack,_hP_,v,_hO_]);
                 case 2:
                  var v$0=tok[1],_hQ_=menhir_env$0[2][11],_hR_=20;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack,_hR_,v$0,_hQ_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack,_hR_,v$0,_hQ_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_bu_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,20)},
           menhir_goto_offset=
            function(counter,menhir_env,menhir_stack,menhir_s,o)
             {if(7 === menhir_s)
               {if(menhir_env[4])throw [0,Assert_failure,_bv_];
                var tok=menhir_env[3];
                if(typeof tok === "number" && 4 === tok)
                 {var
                   menhir_env$0=menhir_discard(menhir_env),
                   tok$0=menhir_env$0[3];
                  if(typeof tok$0 === "number" && 17 <= tok$0)
                   {var switcher=tok$0 - 17 | 0;
                    switch(switcher)
                     {case 3:
                       var
                        menhir_env$1=menhir_discard(menhir_env$0),
                        id$0=menhir_stack[2],
                        match$0=menhir_stack[1],
                        menhir_s$1=match$0[2],
                        menhir_stack$1=match$0[1],
                        v$0=[2,id$0,o,1];
                       if(counter < 50)
                        {var counter$1=counter + 1 | 0;
                         return menhir_goto_arg
                                 (counter$1,menhir_env$1,menhir_stack$1,menhir_s$1,v$0)}
                       return caml_trampoline_return
                               (menhir_goto_arg,
                                [0,menhir_env$1,menhir_stack$1,menhir_s$1,v$0]);
                      case 0:
                      case 6:
                      case 7:
                      case 9:
                       var
                        id=menhir_stack[2],
                        match=menhir_stack[1],
                        menhir_s$0=match[2],
                        menhir_stack$0=match[1],
                        v=[2,id,o,0];
                       if(counter < 50)
                        {var counter$2=counter + 1 | 0;
                         return menhir_goto_arg
                                 (counter$2,menhir_env$0,menhir_stack$0,menhir_s$0,v)}
                       return caml_trampoline_return
                               (menhir_goto_arg,
                                [0,menhir_env$0,menhir_stack$0,menhir_s$0,v])
                      }}
                  if(menhir_env$0[4])throw [0,Assert_failure,_bw_];
                  menhir_env$0[4] = 1;
                  return menhir_errorcase(menhir_env$0,menhir_stack,menhir_s)}
                if(menhir_env[4])throw [0,Assert_failure,_bx_];
                menhir_env[4] = 1;
                return menhir_errorcase(menhir_env,menhir_stack,menhir_s)}
              if(13 === menhir_s)
               {var
                 id$1=menhir_stack[2],
                 match$1=menhir_stack[1],
                 menhir_s$2=match$1[2],
                 menhir_stack$2=match$1[1],
                 v$1=[2,id$1,o,2];
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return menhir_goto_arg
                          (counter$0,menhir_env,menhir_stack$2,menhir_s$2,v$1)}
                return caml_trampoline_return
                        (menhir_goto_arg,
                         [0,menhir_env,menhir_stack$2,menhir_s$2,v$1])}
              return menhir_fail(0)},
           menhir_goto_meta_expr=
            function(counter,menhir_env,menhir_stack,menhir_s,v)
             {var
               menhir_env$0=menhir_env,
               menhir_stack$0=menhir_stack,
               menhir_s$0=menhir_s,
               v$0=v;
              for(;;)
               {var menhir_stack$1=[0,menhir_stack$0,menhir_s$0,v$0];
                switch(menhir_s$0)
                 {case 1:
                   if(menhir_env$0[4])throw [0,Assert_failure,_by_];
                   var tok=menhir_env$0[3];
                   if(typeof tok === "number")
                    switch(tok)
                     {case 0:
                       if(counter < 50)
                        {var counter$176=counter + 1 | 0;
                         return menhir_run15(counter$176,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$159=counter + 1 | 0;
                         return menhir_run17(counter$159,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$146=counter + 1 | 0;
                         return menhir_run19(counter$146,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$131=counter + 1 | 0;
                         return menhir_run21(counter$131,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$123=counter + 1 | 0;
                         return menhir_run38(counter$123,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$112=counter + 1 | 0;
                         return menhir_run29(counter$112,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$95=counter + 1 | 0;
                         return menhir_run23(counter$95,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$80=counter + 1 | 0;
                         return menhir_run27(counter$80,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$67=counter + 1 | 0;
                         return menhir_run31(counter$67,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 17:
                       if(counter < 50)
                        {var counter$61=counter + 1 | 0;
                         return menhir_run40(counter$61,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run40,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$50=counter + 1 | 0;
                         return menhir_run33(counter$50,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 23:
                       var
                        e=menhir_stack$1[3],
                        match=menhir_stack$1[1],
                        id=match[2],
                        menhir_stack$3=match[1],
                        v$1=[1,id,0,e];
                       if(counter < 50)
                        {var counter$0=counter + 1 | 0;
                         return menhir_goto_definition
                                 (counter$0,menhir_env$0,menhir_stack$3,v$1)}
                       return caml_trampoline_return
                               (menhir_goto_definition,[0,menhir_env$0,menhir_stack$3,v$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$33=counter + 1 | 0;
                         return menhir_run25(counter$33,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 28:
                       if(counter < 50)
                        {var counter$27=counter + 1 | 0;
                         return menhir_run44(counter$27,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run44,[0,menhir_env$0,menhir_stack$1]);
                      case 29:
                       if(counter < 50)
                        {var counter$20=counter + 1 | 0;
                         return menhir_run46(counter$20,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run46,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$10=counter + 1 | 0;
                         return menhir_run35(counter$10,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1])
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bz_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$1=menhir_stack$1[2],
                    menhir_stack$2=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$2,menhir_s$1);
                  case 2:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bA_];
                   var tok$0=menhir_env$0[3];
                   if(typeof tok$0 === "number")
                    switch(tok$0)
                     {case 0:
                       if(counter < 50)
                        {var counter$177=counter + 1 | 0;
                         return menhir_run15(counter$177,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$160=counter + 1 | 0;
                         return menhir_run17(counter$160,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$147=counter + 1 | 0;
                         return menhir_run19(counter$147,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$132=counter + 1 | 0;
                         return menhir_run21(counter$132,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$124=counter + 1 | 0;
                         return menhir_run38(counter$124,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$113=counter + 1 | 0;
                         return menhir_run29(counter$113,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$96=counter + 1 | 0;
                         return menhir_run23(counter$96,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$81=counter + 1 | 0;
                         return menhir_run27(counter$81,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$68=counter + 1 | 0;
                         return menhir_run31(counter$68,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 17:
                       if(counter < 50)
                        {var counter$62=counter + 1 | 0;
                         return menhir_run40(counter$62,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run40,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$51=counter + 1 | 0;
                         return menhir_run33(counter$51,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 23:
                       var
                        e$0=menhir_stack$1[3],
                        match$0=menhir_stack$1[1],
                        id$0=match$0[2],
                        menhir_stack$5=match$0[1],
                        v$2=[1,id$0,1,e$0];
                       if(counter < 50)
                        {var counter$1=counter + 1 | 0;
                         return menhir_goto_definition
                                 (counter$1,menhir_env$0,menhir_stack$5,v$2)}
                       return caml_trampoline_return
                               (menhir_goto_definition,[0,menhir_env$0,menhir_stack$5,v$2]);
                      case 25:
                       if(counter < 50)
                        {var counter$34=counter + 1 | 0;
                         return menhir_run25(counter$34,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 28:
                       if(counter < 50)
                        {var counter$28=counter + 1 | 0;
                         return menhir_run44(counter$28,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run44,[0,menhir_env$0,menhir_stack$1]);
                      case 29:
                       if(counter < 50)
                        {var counter$21=counter + 1 | 0;
                         return menhir_run46(counter$21,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run46,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$11=counter + 1 | 0;
                         return menhir_run35(counter$11,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1])
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bB_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$2=menhir_stack$1[2],
                    menhir_stack$4=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$4,menhir_s$2);
                  case 15:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bC_];
                   var tok$1=menhir_env$0[3];
                   if(typeof tok$1 === "number")
                    switch(tok$1)
                     {case 0:
                       if(counter < 50)
                        {var counter$178=counter + 1 | 0;
                         return menhir_run15(counter$178,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$161=counter + 1 | 0;
                         return menhir_run17(counter$161,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$148=counter + 1 | 0;
                         return menhir_run19(counter$148,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$133=counter + 1 | 0;
                         return menhir_run21(counter$133,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$125=counter + 1 | 0;
                         return menhir_run38(counter$125,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$114=counter + 1 | 0;
                         return menhir_run29(counter$114,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$97=counter + 1 | 0;
                         return menhir_run23(counter$97,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$82=counter + 1 | 0;
                         return menhir_run27(counter$82,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$69=counter + 1 | 0;
                         return menhir_run31(counter$69,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$52=counter + 1 | 0;
                         return menhir_run33(counter$52,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$35=counter + 1 | 0;
                         return menhir_run25(counter$35,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$12=counter + 1 | 0;
                         return menhir_run35(counter$12,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1]);
                      case 3:
                      case 5:
                      case 17:
                      case 23:
                      case 27:
                      case 28:
                      case 29:
                       var
                        e2=menhir_stack$1[3],
                        match$1=menhir_stack$1[1],
                        e1=match$1[3],
                        menhir_s$3=match$1[2],
                        menhir_stack$6=match$1[1],
                        v$3=[1,13,e1,e2],
                        menhir_stack$0=menhir_stack$6,
                        menhir_s$0=menhir_s$3,
                        v$0=v$3;
                       continue
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bD_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$4=menhir_stack$1[2],
                    menhir_stack$7=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$7,menhir_s$4);
                  case 16:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bE_];
                   var tok$2=menhir_env$0[3];
                   if(typeof tok$2 === "number")
                    switch(tok$2)
                     {case 0:
                       if(counter < 50)
                        {var counter$179=counter + 1 | 0;
                         return menhir_run15(counter$179,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$162=counter + 1 | 0;
                         return menhir_run17(counter$162,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$149=counter + 1 | 0;
                         return menhir_run19(counter$149,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$134=counter + 1 | 0;
                         return menhir_run21(counter$134,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$126=counter + 1 | 0;
                         return menhir_run38(counter$126,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$115=counter + 1 | 0;
                         return menhir_run29(counter$115,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$98=counter + 1 | 0;
                         return menhir_run23(counter$98,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$83=counter + 1 | 0;
                         return menhir_run27(counter$83,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$70=counter + 1 | 0;
                         return menhir_run31(counter$70,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$53=counter + 1 | 0;
                         return menhir_run33(counter$53,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$36=counter + 1 | 0;
                         return menhir_run25(counter$36,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 29:
                       if(counter < 50)
                        {var counter$22=counter + 1 | 0;
                         return menhir_run46(counter$22,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run46,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$13=counter + 1 | 0;
                         return menhir_run35(counter$13,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1]);
                      case 3:
                      case 5:
                      case 17:
                      case 23:
                      case 27:
                      case 28:
                       var
                        e2$0=menhir_stack$1[3],
                        match$2=menhir_stack$1[1],
                        e1$0=match$2[3],
                        menhir_s$5=match$2[2],
                        menhir_stack$8=match$2[1],
                        v$4=[1,12,e1$0,e2$0],
                        menhir_stack$0=menhir_stack$8,
                        menhir_s$0=menhir_s$5,
                        v$0=v$4;
                       continue
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bF_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$6=menhir_stack$1[2],
                    menhir_stack$9=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$9,menhir_s$6);
                  case 17:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bG_];
                   var tok$3=menhir_env$0[3];
                   if(typeof tok$3 === "number")
                    switch(tok$3)
                     {case 0:
                       if(counter < 50)
                        {var counter$180=counter + 1 | 0;
                         return menhir_run15(counter$180,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$163=counter + 1 | 0;
                         return menhir_run17(counter$163,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$150=counter + 1 | 0;
                         return menhir_run19(counter$150,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$135=counter + 1 | 0;
                         return menhir_run21(counter$135,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$127=counter + 1 | 0;
                         return menhir_run38(counter$127,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$116=counter + 1 | 0;
                         return menhir_run29(counter$116,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$99=counter + 1 | 0;
                         return menhir_run23(counter$99,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$84=counter + 1 | 0;
                         return menhir_run27(counter$84,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$71=counter + 1 | 0;
                         return menhir_run31(counter$71,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 17:
                       if(counter < 50)
                        {var counter$63=counter + 1 | 0;
                         return menhir_run40(counter$63,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run40,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$54=counter + 1 | 0;
                         return menhir_run33(counter$54,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$37=counter + 1 | 0;
                         return menhir_run25(counter$37,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 28:
                       if(counter < 50)
                        {var counter$29=counter + 1 | 0;
                         return menhir_run44(counter$29,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run44,[0,menhir_env$0,menhir_stack$1]);
                      case 29:
                       if(counter < 50)
                        {var counter$23=counter + 1 | 0;
                         return menhir_run46(counter$23,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run46,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$14=counter + 1 | 0;
                         return menhir_run35(counter$14,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1]);
                      case 3:
                      case 5:
                      case 23:
                      case 27:
                       var
                        e2$1=menhir_stack$1[3],
                        _hz_=menhir_stack$1[1],
                        e1$1=_hz_[3],
                        match$3=_hz_[1],
                        e0=match$3[3],
                        menhir_s$7=match$3[2],
                        menhir_stack$10=match$3[1],
                        v$5=[4,e0,e1$1,e2$1],
                        menhir_stack$0=menhir_stack$10,
                        menhir_s$0=menhir_s$7,
                        v$0=v$5;
                       continue
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bH_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$8=menhir_stack$1[2],
                    menhir_stack$11=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$11,menhir_s$8);
                  case 18:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bI_];
                   var tok$4=menhir_env$0[3];
                   if(typeof tok$4 === "number")
                    switch(tok$4)
                     {case 0:
                       if(counter < 50)
                        {var counter$181=counter + 1 | 0;
                         return menhir_run15(counter$181,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$164=counter + 1 | 0;
                         return menhir_run17(counter$164,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$151=counter + 1 | 0;
                         return menhir_run19(counter$151,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$136=counter + 1 | 0;
                         return menhir_run21(counter$136,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$128=counter + 1 | 0;
                         return menhir_run38(counter$128,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$117=counter + 1 | 0;
                         return menhir_run29(counter$117,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$100=counter + 1 | 0;
                         return menhir_run23(counter$100,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$85=counter + 1 | 0;
                         return menhir_run27(counter$85,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$72=counter + 1 | 0;
                         return menhir_run31(counter$72,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 17:
                       if(counter < 50)
                        {var counter$64=counter + 1 | 0;
                         return menhir_run40(counter$64,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run40,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$55=counter + 1 | 0;
                         return menhir_run33(counter$55,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$38=counter + 1 | 0;
                         return menhir_run25(counter$38,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 27:
                       var
                        menhir_env$1=menhir_discard(menhir_env$0),
                        tok$5=menhir_env$1[3];
                       if(typeof tok$5 === "number")
                        switch(tok$5)
                         {case 6:
                           var _hA_=17;
                           if(counter < 50)
                            {var counter$8=counter + 1 | 0;
                             return menhir_run6
                                     (counter$8,menhir_env$1,menhir_stack$1,_hA_)}
                           return caml_trampoline_return
                                   (menhir_run6,[0,menhir_env$1,menhir_stack$1,_hA_]);
                          case 9:
                           var _hB_=17;
                           if(counter < 50)
                            {var counter$6=counter + 1 | 0;
                             return menhir_run8
                                     (counter$6,menhir_env$1,menhir_stack$1,_hB_)}
                           return caml_trampoline_return
                                   (menhir_run8,[0,menhir_env$1,menhir_stack$1,_hB_]);
                          case 12:
                           var _hC_=17;
                           if(counter < 50)
                            {var counter$5=counter + 1 | 0;
                             return menhir_run9
                                     (counter$5,menhir_env$1,menhir_stack$1,_hC_)}
                           return caml_trampoline_return
                                   (menhir_run9,[0,menhir_env$1,menhir_stack$1,_hC_]);
                          case 14:
                           var _hD_=17;
                           if(counter < 50)
                            {var counter$4=counter + 1 | 0;
                             return menhir_run10
                                     (counter$4,menhir_env$1,menhir_stack$1,_hD_)}
                           return caml_trampoline_return
                                   (menhir_run10,[0,menhir_env$1,menhir_stack$1,_hD_]);
                          case 20:
                           var _hE_=17;
                           if(counter < 50)
                            {var counter$2=counter + 1 | 0;
                             return menhir_run12
                                     (counter$2,menhir_env$1,menhir_stack$1,_hE_)}
                           return caml_trampoline_return
                                   (menhir_run12,[0,menhir_env$1,menhir_stack$1,_hE_])
                          }
                       else
                        switch(tok$5[0])
                         {case 1:
                           var v$6=tok$5[1],_hF_=menhir_env$1[2][11],_hG_=17;
                           if(counter < 50)
                            {var counter$7=counter + 1 | 0;
                             return menhir_run7
                                     (counter$7,menhir_env$1,menhir_stack$1,_hG_,v$6,_hF_)}
                           return caml_trampoline_return
                                   (menhir_run7,[0,menhir_env$1,menhir_stack$1,_hG_,v$6,_hF_]);
                          case 2:
                           var v$7=tok$5[1],_hH_=menhir_env$1[2][11],_hI_=17;
                           if(counter < 50)
                            {var counter$3=counter + 1 | 0;
                             return menhir_run11
                                     (counter$3,menhir_env$1,menhir_stack$1,_hI_,v$7,_hH_)}
                           return caml_trampoline_return
                                   (menhir_run11,[0,menhir_env$1,menhir_stack$1,_hI_,v$7,_hH_])
                          }
                       if(menhir_env$1[4])throw [0,Assert_failure,_bK_];
                       menhir_env$1[4] = 1;
                       return menhir_errorcase(menhir_env$1,menhir_stack$1,17);
                      case 28:
                       if(counter < 50)
                        {var counter$30=counter + 1 | 0;
                         return menhir_run44(counter$30,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run44,[0,menhir_env$0,menhir_stack$1]);
                      case 29:
                       if(counter < 50)
                        {var counter$24=counter + 1 | 0;
                         return menhir_run46(counter$24,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run46,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$15=counter + 1 | 0;
                         return menhir_run35(counter$15,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1])
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bJ_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$9=menhir_stack$1[2],
                    menhir_stack$12=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$12,menhir_s$9);
                  case 19:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bL_];
                   var tok$6=menhir_env$0[3];
                   if(typeof tok$6 === "number")
                    switch(tok$6)
                     {case 0:
                       if(counter < 50)
                        {var counter$182=counter + 1 | 0;
                         return menhir_run15(counter$182,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$165=counter + 1 | 0;
                         return menhir_run17(counter$165,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$152=counter + 1 | 0;
                         return menhir_run19(counter$152,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$137=counter + 1 | 0;
                         return menhir_run21(counter$137,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$118=counter + 1 | 0;
                         return menhir_run29(counter$118,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$101=counter + 1 | 0;
                         return menhir_run23(counter$101,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$86=counter + 1 | 0;
                         return menhir_run27(counter$86,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$73=counter + 1 | 0;
                         return menhir_run31(counter$73,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$56=counter + 1 | 0;
                         return menhir_run33(counter$56,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$39=counter + 1 | 0;
                         return menhir_run25(counter$39,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$16=counter + 1 | 0;
                         return menhir_run35(counter$16,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1]);
                      case 3:
                      case 5:
                      case 7:
                      case 17:
                      case 23:
                      case 27:
                      case 28:
                      case 29:
                       var
                        e2$2=menhir_stack$1[3],
                        match$4=menhir_stack$1[1],
                        e1$2=match$4[3],
                        menhir_s$10=match$4[2],
                        menhir_stack$13=match$4[1],
                        v$8=[1,7,e1$2,e2$2],
                        menhir_stack$0=menhir_stack$13,
                        menhir_s$0=menhir_s$10,
                        v$0=v$8;
                       continue
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bM_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$11=menhir_stack$1[2],
                    menhir_stack$14=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$14,menhir_s$11);
                  case 20:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bN_];
                   var tok$7=menhir_env$0[3];
                   if(typeof tok$7 === "number")
                    switch(tok$7)
                     {case 1:
                       if(counter < 50)
                        {var counter$166=counter + 1 | 0;
                         return menhir_run17(counter$166,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$153=counter + 1 | 0;
                         return menhir_run19(counter$153,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$138=counter + 1 | 0;
                         return menhir_run21(counter$138,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$119=counter + 1 | 0;
                         return menhir_run29(counter$119,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$102=counter + 1 | 0;
                         return menhir_run23(counter$102,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$87=counter + 1 | 0;
                         return menhir_run27(counter$87,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$74=counter + 1 | 0;
                         return menhir_run31(counter$74,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$57=counter + 1 | 0;
                         return menhir_run33(counter$57,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$40=counter + 1 | 0;
                         return menhir_run25(counter$40,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 0:
                      case 3:
                      case 5:
                      case 7:
                      case 17:
                      case 23:
                      case 27:
                      case 28:
                      case 29:
                      case 30:
                       var
                        e2$3=menhir_stack$1[3],
                        match$5=menhir_stack$1[1],
                        e1$3=match$5[3],
                        menhir_s$12=match$5[2],
                        menhir_stack$15=match$5[1],
                        v$9=[1,5,e1$3,e2$3],
                        menhir_stack$0=menhir_stack$15,
                        menhir_s$0=menhir_s$12,
                        v$0=v$9;
                       continue
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_bO_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$13=menhir_stack$1[2],
                    menhir_stack$16=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$16,menhir_s$13);
                  case 21:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bP_];
                   var tok$8=menhir_env$0[3];
                   if(typeof tok$8 === "number")
                    switch(tok$8)
                     {case 1:
                       if(counter < 50)
                        {var counter$167=counter + 1 | 0;
                         return menhir_run17(counter$167,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$154=counter + 1 | 0;
                         return menhir_run19(counter$154,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$139=counter + 1 | 0;
                         return menhir_run21(counter$139,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$103=counter + 1 | 0;
                         return menhir_run23(counter$103,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$88=counter + 1 | 0;
                         return menhir_run27(counter$88,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$75=counter + 1 | 0;
                         return menhir_run31(counter$75,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$41=counter + 1 | 0;
                         return menhir_run25(counter$41,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 4:
                      case 8:
                      case 9:
                      case 14:
                      case 15:
                      case 16:
                      case 18:
                      case 19:
                      case 20:
                      case 21:
                      case 24:
                      case 26:break;
                      default:
                       var
                        e2$4=menhir_stack$1[3],
                        match$6=menhir_stack$1[1],
                        e1$4=match$6[3],
                        menhir_s$14=match$6[2],
                        menhir_stack$17=match$6[1],
                        v$10=[1,10,e1$4,e2$4],
                        menhir_stack$0=menhir_stack$17,
                        menhir_s$0=menhir_s$14,
                        v$0=v$10;
                       continue}
                   if(menhir_env$0[4])throw [0,Assert_failure,_bQ_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$15=menhir_stack$1[2],
                    menhir_stack$18=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$18,menhir_s$15);
                  case 22:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bR_];
                   var tok$9=menhir_env$0[3];
                   if(typeof tok$9 === "number")
                    switch(tok$9)
                     {case 1:
                       if(counter < 50)
                        {var counter$168=counter + 1 | 0;
                         return menhir_run17(counter$168,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$140=counter + 1 | 0;
                         return menhir_run21(counter$140,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$104=counter + 1 | 0;
                         return menhir_run23(counter$104,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$89=counter + 1 | 0;
                         return menhir_run27(counter$89,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$42=counter + 1 | 0;
                         return menhir_run25(counter$42,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 4:
                      case 8:
                      case 9:
                      case 14:
                      case 15:
                      case 16:
                      case 18:
                      case 19:
                      case 20:
                      case 21:
                      case 24:
                      case 26:break;
                      default:
                       var
                        e2$5=menhir_stack$1[3],
                        match$7=menhir_stack$1[1],
                        e1$5=match$7[3],
                        menhir_s$16=match$7[2],
                        menhir_stack$19=match$7[1],
                        v$11=[1,8,e1$5,e2$5],
                        menhir_stack$0=menhir_stack$19,
                        menhir_s$0=menhir_s$16,
                        v$0=v$11;
                       continue}
                   if(menhir_env$0[4])throw [0,Assert_failure,_bS_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$17=menhir_stack$1[2],
                    menhir_stack$20=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$20,menhir_s$17);
                  case 23:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bT_];
                   var tok$10=menhir_env$0[3];
                   if(typeof tok$10 === "number")
                    switch(tok$10)
                     {case 1:
                       if(counter < 50)
                        {var counter$169=counter + 1 | 0;
                         return menhir_run17(counter$169,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$155=counter + 1 | 0;
                         return menhir_run19(counter$155,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$141=counter + 1 | 0;
                         return menhir_run21(counter$141,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$105=counter + 1 | 0;
                         return menhir_run23(counter$105,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$90=counter + 1 | 0;
                         return menhir_run27(counter$90,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$76=counter + 1 | 0;
                         return menhir_run31(counter$76,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$43=counter + 1 | 0;
                         return menhir_run25(counter$43,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 4:
                      case 8:
                      case 9:
                      case 14:
                      case 15:
                      case 16:
                      case 18:
                      case 19:
                      case 20:
                      case 21:
                      case 24:
                      case 26:break;
                      default:
                       var
                        e2$6=menhir_stack$1[3],
                        match$8=menhir_stack$1[1],
                        e1$6=match$8[3],
                        menhir_s$18=match$8[2],
                        menhir_stack$21=match$8[1],
                        v$12=[1,11,e1$6,e2$6],
                        menhir_stack$0=menhir_stack$21,
                        menhir_s$0=menhir_s$18,
                        v$0=v$12;
                       continue}
                   if(menhir_env$0[4])throw [0,Assert_failure,_bU_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$19=menhir_stack$1[2],
                    menhir_stack$22=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$22,menhir_s$19);
                  case 24:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bV_];
                   var tok$11=menhir_env$0[3];
                   if(typeof tok$11 === "number")
                    switch(tok$11)
                     {case 1:
                       if(counter < 50)
                        {var counter$170=counter + 1 | 0;
                         return menhir_run17(counter$170,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$106=counter + 1 | 0;
                         return menhir_run23(counter$106,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$44=counter + 1 | 0;
                         return menhir_run25(counter$44,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 4:
                      case 8:
                      case 9:
                      case 14:
                      case 15:
                      case 16:
                      case 18:
                      case 19:
                      case 20:
                      case 21:
                      case 24:
                      case 26:break;
                      default:
                       var
                        e2$7=menhir_stack$1[3],
                        match$9=menhir_stack$1[1],
                        e1$7=match$9[3],
                        menhir_s$20=match$9[2],
                        menhir_stack$23=match$9[1],
                        v$13=[1,1,e1$7,e2$7],
                        menhir_stack$0=menhir_stack$23,
                        menhir_s$0=menhir_s$20,
                        v$0=v$13;
                       continue}
                   if(menhir_env$0[4])throw [0,Assert_failure,_bW_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$21=menhir_stack$1[2],
                    menhir_stack$24=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$24,menhir_s$21);
                  case 25:
                   var
                    e2$8=menhir_stack$1[3],
                    match$10=menhir_stack$1[1],
                    e1$8=match$10[3],
                    menhir_s$22=match$10[2],
                    menhir_stack$25=match$10[1],
                    v$14=[1,3,e1$8,e2$8],
                    menhir_stack$0=menhir_stack$25,
                    menhir_s$0=menhir_s$22,
                    v$0=v$14;
                   continue;
                  case 26:
                   var
                    e2$9=menhir_stack$1[3],
                    match$11=menhir_stack$1[1],
                    e1$9=match$11[3],
                    menhir_s$23=match$11[2],
                    menhir_stack$26=match$11[1],
                    v$15=[1,4,e1$9,e2$9],
                    menhir_stack$0=menhir_stack$26,
                    menhir_s$0=menhir_s$23,
                    v$0=v$15;
                   continue;
                  case 27:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bX_];
                   var tok$12=menhir_env$0[3];
                   if(typeof tok$12 === "number")
                    switch(tok$12)
                     {case 1:
                       if(counter < 50)
                        {var counter$171=counter + 1 | 0;
                         return menhir_run17(counter$171,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$107=counter + 1 | 0;
                         return menhir_run23(counter$107,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$45=counter + 1 | 0;
                         return menhir_run25(counter$45,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 4:
                      case 8:
                      case 9:
                      case 14:
                      case 15:
                      case 16:
                      case 18:
                      case 19:
                      case 20:
                      case 21:
                      case 24:
                      case 26:break;
                      default:
                       var
                        e2$10=menhir_stack$1[3],
                        match$12=menhir_stack$1[1],
                        e1$10=match$12[3],
                        menhir_s$24=match$12[2],
                        menhir_stack$27=match$12[1],
                        v$16=[1,0,e1$10,e2$10],
                        menhir_stack$0=menhir_stack$27,
                        menhir_s$0=menhir_s$24,
                        v$0=v$16;
                       continue}
                   if(menhir_env$0[4])throw [0,Assert_failure,_bY_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$25=menhir_stack$1[2],
                    menhir_stack$28=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$28,menhir_s$25);
                  case 28:
                   if(menhir_env$0[4])throw [0,Assert_failure,_bZ_];
                   var tok$13=menhir_env$0[3];
                   if(typeof tok$13 === "number")
                    switch(tok$13)
                     {case 1:
                       if(counter < 50)
                        {var counter$172=counter + 1 | 0;
                         return menhir_run17(counter$172,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$142=counter + 1 | 0;
                         return menhir_run21(counter$142,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$108=counter + 1 | 0;
                         return menhir_run23(counter$108,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$91=counter + 1 | 0;
                         return menhir_run27(counter$91,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$46=counter + 1 | 0;
                         return menhir_run25(counter$46,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 4:
                      case 8:
                      case 9:
                      case 14:
                      case 15:
                      case 16:
                      case 18:
                      case 19:
                      case 20:
                      case 21:
                      case 24:
                      case 26:break;
                      default:
                       var
                        e2$11=menhir_stack$1[3],
                        match$13=menhir_stack$1[1],
                        e1$11=match$13[3],
                        menhir_s$26=match$13[2],
                        menhir_stack$29=match$13[1],
                        v$17=[1,9,e1$11,e2$11],
                        menhir_stack$0=menhir_stack$29,
                        menhir_s$0=menhir_s$26,
                        v$0=v$17;
                       continue}
                   if(menhir_env$0[4])throw [0,Assert_failure,_b0_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$27=menhir_stack$1[2],
                    menhir_stack$30=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$30,menhir_s$27);
                  case 29:
                   var
                    e2$12=menhir_stack$1[3],
                    match$14=menhir_stack$1[1],
                    e1$12=match$14[3],
                    menhir_s$28=match$14[2],
                    menhir_stack$31=match$14[1],
                    v$18=[1,2,e1$12,e2$12],
                    menhir_stack$0=menhir_stack$31,
                    menhir_s$0=menhir_s$28,
                    v$0=v$18;
                   continue;
                  case 30:
                   if(menhir_env$0[4])throw [0,Assert_failure,_b1_];
                   var tok$14=menhir_env$0[3];
                   if(typeof tok$14 === "number")
                    switch(tok$14)
                     {case 1:
                       if(counter < 50)
                        {var counter$173=counter + 1 | 0;
                         return menhir_run17(counter$173,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$156=counter + 1 | 0;
                         return menhir_run19(counter$156,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 6:
                       if(counter < 50)
                        {var counter$143=counter + 1 | 0;
                         return menhir_run21(counter$143,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$120=counter + 1 | 0;
                         return menhir_run29(counter$120,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$109=counter + 1 | 0;
                         return menhir_run23(counter$109,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$92=counter + 1 | 0;
                         return menhir_run27(counter$92,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$77=counter + 1 | 0;
                         return menhir_run31(counter$77,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$58=counter + 1 | 0;
                         return menhir_run33(counter$58,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$47=counter + 1 | 0;
                         return menhir_run25(counter$47,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$17=counter + 1 | 0;
                         return menhir_run35(counter$17,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1]);
                      case 0:
                      case 3:
                      case 5:
                      case 7:
                      case 17:
                      case 23:
                      case 27:
                      case 28:
                      case 29:
                       var
                        e2$13=menhir_stack$1[3],
                        match$15=menhir_stack$1[1],
                        e1$13=match$15[3],
                        menhir_s$29=match$15[2],
                        menhir_stack$32=match$15[1],
                        v$19=[1,6,e1$13,e2$13],
                        menhir_stack$0=menhir_stack$32,
                        menhir_s$0=menhir_s$29,
                        v$0=v$19;
                       continue
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_b2_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$30=menhir_stack$1[2],
                    menhir_stack$33=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$33,menhir_s$30);
                  case 31:
                   var
                    e$1=menhir_stack$1[3],
                    match$16=menhir_stack$1[1],
                    menhir_s$31=match$16[2],
                    menhir_stack$34=match$16[1],
                    v$20=[2,3,e$1],
                    menhir_stack$0=menhir_stack$34,
                    menhir_s$0=menhir_s$31,
                    v$0=v$20;
                   continue;
                  case 32:
                   if(menhir_env$0[4])throw [0,Assert_failure,_b3_];
                   var tok$15=menhir_env$0[3];
                   if(typeof tok$15 === "number")
                    switch(tok$15)
                     {case 0:
                       if(counter < 50)
                        {var counter$183=counter + 1 | 0;
                         return menhir_run15(counter$183,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$174=counter + 1 | 0;
                         return menhir_run17(counter$174,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$157=counter + 1 | 0;
                         return menhir_run19(counter$157,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 3:
                       var
                        menhir_env$2=menhir_discard(menhir_env$0),
                        v$21=menhir_stack$1[3],
                        match$17=menhir_stack$1[1],
                        menhir_s$32=match$17[2],
                        menhir_stack$35=match$17[1],
                        menhir_env$0=menhir_env$2,
                        menhir_stack$0=menhir_stack$35,
                        menhir_s$0=menhir_s$32,
                        v$0=v$21;
                       continue;
                      case 6:
                       if(counter < 50)
                        {var counter$144=counter + 1 | 0;
                         return menhir_run21(counter$144,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$129=counter + 1 | 0;
                         return menhir_run38(counter$129,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$121=counter + 1 | 0;
                         return menhir_run29(counter$121,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$110=counter + 1 | 0;
                         return menhir_run23(counter$110,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$93=counter + 1 | 0;
                         return menhir_run27(counter$93,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$78=counter + 1 | 0;
                         return menhir_run31(counter$78,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 17:
                       if(counter < 50)
                        {var counter$65=counter + 1 | 0;
                         return menhir_run40(counter$65,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run40,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$59=counter + 1 | 0;
                         return menhir_run33(counter$59,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$48=counter + 1 | 0;
                         return menhir_run25(counter$48,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 28:
                       if(counter < 50)
                        {var counter$31=counter + 1 | 0;
                         return menhir_run44(counter$31,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run44,[0,menhir_env$0,menhir_stack$1]);
                      case 29:
                       if(counter < 50)
                        {var counter$25=counter + 1 | 0;
                         return menhir_run46(counter$25,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run46,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$18=counter + 1 | 0;
                         return menhir_run35(counter$18,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1])
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_b4_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$33=menhir_stack$1[2],
                    menhir_stack$36=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$36,menhir_s$33);
                  case 33:
                   var
                    e$2=menhir_stack$1[3],
                    match$18=menhir_stack$1[1],
                    menhir_s$34=match$18[2],
                    menhir_stack$37=match$18[1],
                    v$22=[2,1,e$2],
                    menhir_stack$0=menhir_stack$37,
                    menhir_s$0=menhir_s$34,
                    v$0=v$22;
                   continue;
                  case 34:
                   var
                    e$3=menhir_stack$1[3],
                    match$19=menhir_stack$1[1],
                    menhir_s$35=match$19[2],
                    menhir_stack$38=match$19[1],
                    v$23=[2,2,e$3],
                    menhir_stack$0=menhir_stack$38,
                    menhir_s$0=menhir_s$35,
                    v$0=v$23;
                   continue;
                  case 35:
                   var
                    e$4=menhir_stack$1[3],
                    match$20=menhir_stack$1[1],
                    menhir_s$36=match$20[2],
                    menhir_stack$39=match$20[1],
                    v$24=[2,0,e$4],
                    menhir_stack$0=menhir_stack$39,
                    menhir_s$0=menhir_s$36,
                    v$0=v$24;
                   continue;
                  case 36:
                   if(menhir_env$0[4])throw [0,Assert_failure,_b5_];
                   var tok$16=menhir_env$0[3];
                   if(typeof tok$16 === "number")
                    switch(tok$16)
                     {case 0:
                       if(counter < 50)
                        {var counter$184=counter + 1 | 0;
                         return menhir_run15(counter$184,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run15,[0,menhir_env$0,menhir_stack$1]);
                      case 1:
                       if(counter < 50)
                        {var counter$175=counter + 1 | 0;
                         return menhir_run17(counter$175,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run17,[0,menhir_env$0,menhir_stack$1]);
                      case 2:
                       if(counter < 50)
                        {var counter$158=counter + 1 | 0;
                         return menhir_run19(counter$158,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run19,[0,menhir_env$0,menhir_stack$1]);
                      case 5:
                       var
                        menhir_env$3=menhir_discard(menhir_env$0),
                        e$5=menhir_stack$1[3],
                        match$21=menhir_stack$1[1],
                        startpos_1=match$21[3],
                        menhir_s$38=match$21[2],
                        menhir_stack$41=match$21[1],
                        v$25=[1,e$5];
                       if(counter < 50)
                        {var counter$9=counter + 1 | 0;
                         return menhir_goto_number
                                 (counter$9,
                                  menhir_env$3,
                                  menhir_stack$41,
                                  menhir_s$38,
                                  v$25,
                                  startpos_1)}
                       return caml_trampoline_return
                               (menhir_goto_number,
                                [0,menhir_env$3,menhir_stack$41,menhir_s$38,v$25,startpos_1]);
                      case 6:
                       if(counter < 50)
                        {var counter$145=counter + 1 | 0;
                         return menhir_run21(counter$145,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run21,[0,menhir_env$0,menhir_stack$1]);
                      case 7:
                       if(counter < 50)
                        {var counter$130=counter + 1 | 0;
                         return menhir_run38(counter$130,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run38,[0,menhir_env$0,menhir_stack$1]);
                      case 10:
                       if(counter < 50)
                        {var counter$122=counter + 1 | 0;
                         return menhir_run29(counter$122,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run29,[0,menhir_env$0,menhir_stack$1]);
                      case 11:
                       if(counter < 50)
                        {var counter$111=counter + 1 | 0;
                         return menhir_run23(counter$111,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run23,[0,menhir_env$0,menhir_stack$1]);
                      case 12:
                       if(counter < 50)
                        {var counter$94=counter + 1 | 0;
                         return menhir_run27(counter$94,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run27,[0,menhir_env$0,menhir_stack$1]);
                      case 13:
                       if(counter < 50)
                        {var counter$79=counter + 1 | 0;
                         return menhir_run31(counter$79,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run31,[0,menhir_env$0,menhir_stack$1]);
                      case 17:
                       if(counter < 50)
                        {var counter$66=counter + 1 | 0;
                         return menhir_run40(counter$66,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run40,[0,menhir_env$0,menhir_stack$1]);
                      case 22:
                       if(counter < 50)
                        {var counter$60=counter + 1 | 0;
                         return menhir_run33(counter$60,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run33,[0,menhir_env$0,menhir_stack$1]);
                      case 25:
                       if(counter < 50)
                        {var counter$49=counter + 1 | 0;
                         return menhir_run25(counter$49,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run25,[0,menhir_env$0,menhir_stack$1]);
                      case 28:
                       if(counter < 50)
                        {var counter$32=counter + 1 | 0;
                         return menhir_run44(counter$32,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run44,[0,menhir_env$0,menhir_stack$1]);
                      case 29:
                       if(counter < 50)
                        {var counter$26=counter + 1 | 0;
                         return menhir_run46(counter$26,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run46,[0,menhir_env$0,menhir_stack$1]);
                      case 30:
                       if(counter < 50)
                        {var counter$19=counter + 1 | 0;
                         return menhir_run35(counter$19,menhir_env$0,menhir_stack$1)}
                       return caml_trampoline_return
                               (menhir_run35,[0,menhir_env$0,menhir_stack$1])
                      }
                   if(menhir_env$0[4])throw [0,Assert_failure,_b6_];
                   menhir_env$0[4] = 1;
                   var
                    menhir_s$37=menhir_stack$1[2],
                    menhir_stack$40=menhir_stack$1[1];
                   return menhir_errorcase
                           (menhir_env$0,menhir_stack$40,menhir_s$37);
                  default:return menhir_fail(0)}}},
           menhir_goto_command=
            function(counter,menhir_env,menhir_stack,menhir_s,v)
             {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
              if(menhir_env[4])throw [0,Assert_failure,_b7_];
              var tok=menhir_env[3];
              if(typeof tok === "number")
               {if(23 === tok)
                 {var
                   menhir_env$0=menhir_discard(menhir_env),
                   tok$0=menhir_env$0[3],
                   switch$0=0;
                  if(typeof tok$0 === "number")
                   switch(tok$0)
                    {case 23:
                      var _hy_=4;
                      if(counter < 50)
                       {var counter$0=counter + 1 | 0;
                        return menhir_run1$0
                                (counter$0,menhir_env$0,menhir_stack$0,_hy_)}
                      return caml_trampoline_return
                              (menhir_run1$0,[0,menhir_env$0,menhir_stack$0,_hy_]);
                     case 16:
                     case 24:switch$0 = 1;break
                     }
                  else
                   switch(tok$0[0]){case 0:case 3:break;default:switch$0 = 1}
                  if(switch$0)
                   {var _hx_=4;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return menhir_reduce26$0
                              (counter$1,menhir_env$0,menhir_stack$0,_hx_)}
                    return caml_trampoline_return
                            (menhir_reduce26$0,[0,menhir_env$0,menhir_stack$0,_hx_])}
                  if(menhir_env$0[4])throw [0,Assert_failure,_b8_];
                  menhir_env$0[4] = 1;
                  return menhir_errorcase(menhir_env$0,menhir_stack$0,4)}
                if(24 === tok)
                 {var
                   cmd=menhir_stack$0[3],
                   match=menhir_stack$0[1],
                   menhir_s$0=match[2],
                   menhir_stack$1=match[1],
                   v$0=[0,cmd,0];
                  return menhir_goto_ast
                          (menhir_env,menhir_stack$1,menhir_s$0,v$0)}}
              if(menhir_env[4])throw [0,Assert_failure,_b9_];
              menhir_env[4] = 1;
              var
               menhir_s$1=menhir_stack$0[2],
               menhir_stack$2=menhir_stack$0[1];
              return menhir_errorcase(menhir_env,menhir_stack$2,menhir_s$1)},
           menhir_goto_number=
            function(counter,menhir_env,menhir_stack,menhir_s,nb,startpos)
             {switch(menhir_s)
               {case 6:
                 var
                  menhir_s$0=menhir_stack[2],
                  menhir_stack$0=menhir_stack[1],
                  v$0=[1,nb];
                 if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return menhir_goto_arg
                           (counter$0,menhir_env,menhir_stack$0,menhir_s$0,v$0)}
                 return caml_trampoline_return
                         (menhir_goto_arg,
                          [0,menhir_env,menhir_stack$0,menhir_s$0,v$0]);
                case 8:
                 var
                  match=menhir_stack[1],
                  menhir_s$1=match[2],
                  menhir_stack$1=match[1],
                  v$2=[0,sign_minus,nb];
                 if(counter < 50)
                  {var counter$3=counter + 1 | 0;
                   return menhir_goto_offset
                           (counter$3,menhir_env,menhir_stack$1,menhir_s$1,v$2)}
                 return caml_trampoline_return
                         (menhir_goto_offset,
                          [0,menhir_env,menhir_stack$1,menhir_s$1,v$2]);
                case 9:
                 var
                  match$0=menhir_stack[1],
                  menhir_s$2=match$0[2],
                  menhir_stack$2=match$0[1],
                  v$3=[0,sign_plus,nb];
                 if(counter < 50)
                  {var counter$4=counter + 1 | 0;
                   return menhir_goto_offset
                           (counter$4,menhir_env,menhir_stack$2,menhir_s$2,v$3)}
                 return caml_trampoline_return
                         (menhir_goto_offset,
                          [0,menhir_env,menhir_stack$2,menhir_s$2,v$3]);
                case 10:
                 var
                  menhir_s$3=menhir_stack[2],
                  menhir_stack$3=menhir_stack[1],
                  v$4=[0,sign_plus,nb];
                 if(counter < 50)
                  {var counter$5=counter + 1 | 0;
                   return menhir_goto_offset
                           (counter$5,menhir_env,menhir_stack$3,menhir_s$3,v$4)}
                 return caml_trampoline_return
                         (menhir_goto_offset,
                          [0,menhir_env,menhir_stack$3,menhir_s$3,v$4]);
                case 11:
                 var
                  menhir_s$4=menhir_stack[2],
                  menhir_stack$4=menhir_stack[1],
                  v$5=[0,sign_minus,nb];
                 if(counter < 50)
                  {var counter$6=counter + 1 | 0;
                   return menhir_goto_offset
                           (counter$6,menhir_env,menhir_stack$4,menhir_s$4,v$5)}
                 return caml_trampoline_return
                         (menhir_goto_offset,
                          [0,menhir_env,menhir_stack$4,menhir_s$4,v$5]);
                case 12:
                 var
                  menhir_s$5=menhir_stack[2],
                  menhir_stack$5=menhir_stack[1],
                  v$6=[0,sign_plus,nb];
                 if(counter < 50)
                  {var counter$7=counter + 1 | 0;
                   return menhir_goto_offset
                           (counter$7,menhir_env,menhir_stack$5,menhir_s$5,v$6)}
                 return caml_trampoline_return
                         (menhir_goto_offset,
                          [0,menhir_env,menhir_stack$5,menhir_s$5,v$6]);
                case 37:
                 var v$7=[1,startpos,nb];
                 if(counter < 50)
                  {var counter$2=counter + 1 | 0;
                   return menhir_goto_command
                           (counter$2,menhir_env,menhir_stack,menhir_s,v$7)}
                 return caml_trampoline_return
                         (menhir_goto_command,
                          [0,menhir_env,menhir_stack,menhir_s,v$7]);
                case 7:
                case 13:
                 var v$1=[0,sign_plus,nb];
                 if(counter < 50)
                  {var counter$8=counter + 1 | 0;
                   return menhir_goto_offset
                           (counter$8,menhir_env,menhir_stack,menhir_s,v$1)}
                 return caml_trampoline_return
                         (menhir_goto_offset,
                          [0,menhir_env,menhir_stack,menhir_s,v$1]);
                case 5:
                case 14:
                 var v=[1,nb];
                 if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return menhir_goto_arg
                           (counter$1,menhir_env,menhir_stack,menhir_s,v)}
                 return caml_trampoline_return
                         (menhir_goto_arg,[0,menhir_env,menhir_stack,menhir_s,v]);
                default:return menhir_fail(0)}},
           menhir_run59=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_stack$0=[0,menhir_stack,menhir_s],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3];
              if(typeof tok === "number")
               {if(16 === tok)
                 {var _ht_=menhir_env$0[2][11],_hu_=12;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run5
                            (counter$0,menhir_env$0,menhir_stack$0,_hu_,_ht_)}
                  return caml_trampoline_return
                          (menhir_run5,[0,menhir_env$0,menhir_stack$0,_hu_,_ht_])}}
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_hv_=menhir_env$0[2][11],_hw_=12;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run4
                            (counter$1,menhir_env$0,menhir_stack$0,_hw_,v,_hv_)}
                  return caml_trampoline_return
                          (menhir_run4,[0,menhir_env$0,menhir_stack$0,_hw_,v,_hv_]);
                 case 2:
                  var
                   v$0=tok[1],
                   menhir_env$1=menhir_discard(menhir_env$0),
                   menhir_s$0=menhir_stack$0[2],
                   menhir_stack$1=menhir_stack$0[1],
                   v$1=[1,sign_plus,v$0];
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_goto_offset
                            (counter$2,menhir_env$1,menhir_stack$1,menhir_s$0,v$1)}
                  return caml_trampoline_return
                          (menhir_goto_offset,
                           [0,menhir_env$1,menhir_stack$1,menhir_s$0,v$1])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_b__];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack$0,12)},
           menhir_run62=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_stack$0=[0,menhir_stack,menhir_s],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3];
              if(typeof tok === "number")
               {if(16 === tok)
                 {var _hp_=menhir_env$0[2][11],_hq_=11;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run5
                            (counter$0,menhir_env$0,menhir_stack$0,_hq_,_hp_)}
                  return caml_trampoline_return
                          (menhir_run5,[0,menhir_env$0,menhir_stack$0,_hq_,_hp_])}}
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_hr_=menhir_env$0[2][11],_hs_=11;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run4
                            (counter$1,menhir_env$0,menhir_stack$0,_hs_,v,_hr_)}
                  return caml_trampoline_return
                          (menhir_run4,[0,menhir_env$0,menhir_stack$0,_hs_,v,_hr_]);
                 case 2:
                  var
                   v$0=tok[1],
                   menhir_env$1=menhir_discard(menhir_env$0),
                   menhir_s$0=menhir_stack$0[2],
                   menhir_stack$1=menhir_stack$0[1],
                   v$1=[1,sign_minus,v$0];
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_goto_offset
                            (counter$2,menhir_env$1,menhir_stack$1,menhir_s$0,v$1)}
                  return caml_trampoline_return
                          (menhir_goto_offset,
                           [0,menhir_env$1,menhir_stack$1,menhir_s$0,v$1])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_b$_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack$0,11)},
           menhir_run65=
            function(counter,menhir_env,menhir_stack,menhir_s,id,startpos)
             {var menhir_env$0=menhir_discard(menhir_env),v=[1,sign_plus,id];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return menhir_goto_offset
                        (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
              return caml_trampoline_return
                      (menhir_goto_offset,
                       [0,menhir_env$0,menhir_stack,menhir_s,v])},
           menhir_run66=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_stack$0=[0,menhir_stack,menhir_s],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var
                   menhir_stack$1=[0,menhir_stack$0,10],
                   menhir_env$1=menhir_discard(menhir_env$0),
                   tok$0=menhir_env$1[3];
                  if(typeof tok$0 === "number")
                   {if(16 === tok$0)
                     {var _hd_=menhir_env$1[2][11],_he_=9;
                      if(counter < 50)
                       {var counter$0=counter + 1 | 0;
                        return menhir_run5
                                (counter$0,menhir_env$1,menhir_stack$1,_he_,_hd_)}
                      return caml_trampoline_return
                              (menhir_run5,[0,menhir_env$1,menhir_stack$1,_he_,_hd_])}}
                  else
                   if(1 === tok$0[0])
                    {var v=tok$0[1],_hf_=menhir_env$1[2][11],_hg_=9;
                     if(counter < 50)
                      {var counter$3=counter + 1 | 0;
                       return menhir_run4
                               (counter$3,menhir_env$1,menhir_stack$1,_hg_,v,_hf_)}
                     return caml_trampoline_return
                             (menhir_run4,[0,menhir_env$1,menhir_stack$1,_hg_,v,_hf_])}
                  if(menhir_env$1[4])throw [0,Assert_failure,_cb_];
                  menhir_env$1[4] = 1;
                  return menhir_errorcase(menhir_env$1,menhir_stack$1,9);
                 case 12:
                  var
                   menhir_stack$2=[0,menhir_stack$0,10],
                   menhir_env$2=menhir_discard(menhir_env$0),
                   tok$1=menhir_env$2[3];
                  if(typeof tok$1 === "number")
                   {if(16 === tok$1)
                     {var _hh_=menhir_env$2[2][11],_hi_=8;
                      if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return menhir_run5
                                (counter$1,menhir_env$2,menhir_stack$2,_hi_,_hh_)}
                      return caml_trampoline_return
                              (menhir_run5,[0,menhir_env$2,menhir_stack$2,_hi_,_hh_])}}
                  else
                   if(1 === tok$1[0])
                    {var v$0=tok$1[1],_hj_=menhir_env$2[2][11],_hk_=8;
                     if(counter < 50)
                      {var counter$4=counter + 1 | 0;
                       return menhir_run4
                               (counter$4,menhir_env$2,menhir_stack$2,_hk_,v$0,_hj_)}
                     return caml_trampoline_return
                             (menhir_run4,[0,menhir_env$2,menhir_stack$2,_hk_,v$0,_hj_])}
                  if(menhir_env$2[4])throw [0,Assert_failure,_cc_];
                  menhir_env$2[4] = 1;
                  return menhir_errorcase(menhir_env$2,menhir_stack$2,8);
                 case 16:
                  var _hl_=menhir_env$0[2][11],_hm_=10;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run5
                            (counter$2,menhir_env$0,menhir_stack$0,_hm_,_hl_)}
                  return caml_trampoline_return
                          (menhir_run5,[0,menhir_env$0,menhir_stack$0,_hm_,_hl_])
                 }
              else
               if(1 === tok[0])
                {var v$1=tok[1],_hn_=menhir_env$0[2][11],_ho_=10;
                 if(counter < 50)
                  {var counter$5=counter + 1 | 0;
                   return menhir_run4
                           (counter$5,menhir_env$0,menhir_stack$0,_ho_,v$1,_hn_)}
                 return caml_trampoline_return
                         (menhir_run4,[0,menhir_env$0,menhir_stack$0,_ho_,v$1,_hn_])}
              if(menhir_env$0[4])throw [0,Assert_failure,_ca_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack$0,10)},
           menhir_goto_arg=
            function(counter,menhir_env,menhir_stack$1,menhir_s$1,v$1)
             {var menhir_stack$2=[0,menhir_stack$1,menhir_s$1,v$1];
              if(menhir_env[4])throw [0,Assert_failure,_cd_];
              var tok=menhir_env[3];
              if(typeof tok === "number")
               {var switcher=tok - 17 | 0;
                if(! (9 < switcher >>> 0))
                 switch(switcher)
                  {case 9:
                    var
                     menhir_env$0=menhir_discard(menhir_env),
                     tok$0=menhir_env$0[3];
                    if(typeof tok$0 === "number")
                     switch(tok$0)
                      {case 15:
                        var _g7_=5;
                        if(counter < 50)
                         {var counter$3=counter + 1 | 0;
                          return menhir_run54
                                  (counter$3,menhir_env$0,menhir_stack$2,_g7_)}
                        return caml_trampoline_return
                                (menhir_run54,[0,menhir_env$0,menhir_stack$2,_g7_]);
                       case 16:
                        var _g8_=menhir_env$0[2][11],_g9_=5;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return menhir_run5
                                  (counter$2,menhir_env$0,menhir_stack$2,_g9_,_g8_)}
                        return caml_trampoline_return
                                (menhir_run5,[0,menhir_env$0,menhir_stack$2,_g9_,_g8_]);
                       case 19:
                        var _g__=5;
                        if(counter < 50)
                         {var counter$0=counter + 1 | 0;
                          return menhir_run79
                                  (counter$0,menhir_env$0,menhir_stack$2,_g__)}
                        return caml_trampoline_return
                                (menhir_run79,[0,menhir_env$0,menhir_stack$2,_g__])
                       }
                    else
                     switch(tok$0[0])
                      {case 1:
                        var v$3=tok$0[1],_g$_=menhir_env$0[2][11],_ha_=5;
                        if(counter < 50)
                         {var counter$4=counter + 1 | 0;
                          return menhir_run4
                                  (counter$4,menhir_env$0,menhir_stack$2,_ha_,v$3,_g$_)}
                        return caml_trampoline_return
                                (menhir_run4,[0,menhir_env$0,menhir_stack$2,_ha_,v$3,_g$_]);
                       case 2:
                        var v$4=tok$0[1],_hb_=menhir_env$0[2][11],_hc_=5;
                        if(counter < 50)
                         {var counter$1=counter + 1 | 0;
                          return menhir_run78
                                  (counter$1,menhir_env$0,menhir_stack$2,_hc_,v$4,_hb_)}
                        return caml_trampoline_return
                                (menhir_run78,[0,menhir_env$0,menhir_stack$2,_hc_,v$4,_hb_])
                       }
                    if(menhir_env$0[4])throw [0,Assert_failure,_cf_];
                    menhir_env$0[4] = 1;
                    return menhir_errorcase(menhir_env$0,menhir_stack$2,5);
                   case 0:
                   case 6:
                   case 7:
                    var
                     x$0=menhir_stack$2[3],
                     menhir_s$3=menhir_stack$2[2],
                     menhir_stack$4=menhir_stack$2[1],
                     v$2=[0,x$0,0],
                     menhir_stack=menhir_stack$4,
                     menhir_s=menhir_s$3,
                     v=v$2;
                    for(;;)
                     {if(5 === menhir_s)
                       {var
                         x=menhir_stack[3],
                         menhir_s$0=menhir_stack[2],
                         menhir_stack$0=menhir_stack[1],
                         v$0=[0,x,v],
                         menhir_stack=menhir_stack$0,
                         menhir_s=menhir_s$0,
                         v=v$0;
                        continue}
                      if(14 === menhir_s)
                       {if(counter < 50)
                         {var counter$5=counter + 1 | 0;
                          return menhir_goto_loption_separated_
                                  (counter$5,menhir_env,menhir_stack,menhir_s,v)}
                        return caml_trampoline_return
                                (menhir_goto_loption_separated_,
                                 [0,menhir_env,menhir_stack,menhir_s,v])}
                      return menhir_fail(0)}
                   }}
              if(menhir_env[4])throw [0,Assert_failure,_ce_];
              menhir_env[4] = 1;
              var
               menhir_s$2=menhir_stack$2[2],
               menhir_stack$3=menhir_stack$2[1];
              return menhir_errorcase(menhir_env,menhir_stack$3,menhir_s$2)},
           menhir_run6=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_env$0=menhir_env,
               menhir_stack$0=menhir_stack,
               menhir_s$0=menhir_s;
              for(;;)
               {var
                 menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok=menhir_env$1[3];
                if(typeof tok === "number")
                 switch(tok)
                  {case 6:
                    var
                     menhir_env$0=menhir_env$1,
                     menhir_stack$0=menhir_stack$1,
                     menhir_s$0=35;
                    continue;
                   case 9:
                    var _gZ_=35;
                    if(counter < 50)
                     {var counter$4=counter + 1 | 0;
                      return menhir_run8
                              (counter$4,menhir_env$1,menhir_stack$1,_gZ_)}
                    return caml_trampoline_return
                            (menhir_run8,[0,menhir_env$1,menhir_stack$1,_gZ_]);
                   case 12:
                    var _g0_=35;
                    if(counter < 50)
                     {var counter$3=counter + 1 | 0;
                      return menhir_run9
                              (counter$3,menhir_env$1,menhir_stack$1,_g0_)}
                    return caml_trampoline_return
                            (menhir_run9,[0,menhir_env$1,menhir_stack$1,_g0_]);
                   case 14:
                    var _g1_=35;
                    if(counter < 50)
                     {var counter$2=counter + 1 | 0;
                      return menhir_run10
                              (counter$2,menhir_env$1,menhir_stack$1,_g1_)}
                    return caml_trampoline_return
                            (menhir_run10,[0,menhir_env$1,menhir_stack$1,_g1_]);
                   case 20:
                    var _g2_=35;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return menhir_run12
                              (counter$0,menhir_env$1,menhir_stack$1,_g2_)}
                    return caml_trampoline_return
                            (menhir_run12,[0,menhir_env$1,menhir_stack$1,_g2_])
                   }
                else
                 switch(tok[0])
                  {case 1:
                    var v=tok[1],_g3_=menhir_env$1[2][11],_g4_=35;
                    if(counter < 50)
                     {var counter$5=counter + 1 | 0;
                      return menhir_run7
                              (counter$5,menhir_env$1,menhir_stack$1,_g4_,v,_g3_)}
                    return caml_trampoline_return
                            (menhir_run7,[0,menhir_env$1,menhir_stack$1,_g4_,v,_g3_]);
                   case 2:
                    var v$0=tok[1],_g5_=menhir_env$1[2][11],_g6_=35;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return menhir_run11
                              (counter$1,menhir_env$1,menhir_stack$1,_g6_,v$0,_g5_)}
                    return caml_trampoline_return
                            (menhir_run11,[0,menhir_env$1,menhir_stack$1,_g6_,v$0,_g5_])
                   }
                if(menhir_env$1[4])throw [0,Assert_failure,_ci_];
                menhir_env$1[4] = 1;
                return menhir_errorcase(menhir_env$1,menhir_stack$1,35)}},
           menhir_run7=
            function(counter,menhir_env,menhir_stack,menhir_s,i,startpos)
             {var menhir_env$0=menhir_discard(menhir_env),v=[0,i];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return menhir_goto_meta_expr
                        (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
              return caml_trampoline_return
                      (menhir_goto_meta_expr,
                       [0,menhir_env$0,menhir_stack,menhir_s,v])},
           menhir_run8=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_env$0=menhir_env,
               menhir_stack$0=menhir_stack,
               menhir_s$0=menhir_s;
              for(;;)
               {var
                 menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok=menhir_env$1[3];
                if(typeof tok === "number")
                 switch(tok)
                  {case 6:
                    var _gR_=34;
                    if(counter < 50)
                     {var counter$5=counter + 1 | 0;
                      return menhir_run6
                              (counter$5,menhir_env$1,menhir_stack$1,_gR_)}
                    return caml_trampoline_return
                            (menhir_run6,[0,menhir_env$1,menhir_stack$1,_gR_]);
                   case 9:
                    var
                     menhir_env$0=menhir_env$1,
                     menhir_stack$0=menhir_stack$1,
                     menhir_s$0=34;
                    continue;
                   case 12:
                    var _gS_=34;
                    if(counter < 50)
                     {var counter$3=counter + 1 | 0;
                      return menhir_run9
                              (counter$3,menhir_env$1,menhir_stack$1,_gS_)}
                    return caml_trampoline_return
                            (menhir_run9,[0,menhir_env$1,menhir_stack$1,_gS_]);
                   case 14:
                    var _gT_=34;
                    if(counter < 50)
                     {var counter$2=counter + 1 | 0;
                      return menhir_run10
                              (counter$2,menhir_env$1,menhir_stack$1,_gT_)}
                    return caml_trampoline_return
                            (menhir_run10,[0,menhir_env$1,menhir_stack$1,_gT_]);
                   case 20:
                    var _gU_=34;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return menhir_run12
                              (counter$0,menhir_env$1,menhir_stack$1,_gU_)}
                    return caml_trampoline_return
                            (menhir_run12,[0,menhir_env$1,menhir_stack$1,_gU_])
                   }
                else
                 switch(tok[0])
                  {case 1:
                    var v=tok[1],_gV_=menhir_env$1[2][11],_gW_=34;
                    if(counter < 50)
                     {var counter$4=counter + 1 | 0;
                      return menhir_run7
                              (counter$4,menhir_env$1,menhir_stack$1,_gW_,v,_gV_)}
                    return caml_trampoline_return
                            (menhir_run7,[0,menhir_env$1,menhir_stack$1,_gW_,v,_gV_]);
                   case 2:
                    var v$0=tok[1],_gX_=menhir_env$1[2][11],_gY_=34;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return menhir_run11
                              (counter$1,menhir_env$1,menhir_stack$1,_gY_,v$0,_gX_)}
                    return caml_trampoline_return
                            (menhir_run11,[0,menhir_env$1,menhir_stack$1,_gY_,v$0,_gX_])
                   }
                if(menhir_env$1[4])throw [0,Assert_failure,_cj_];
                menhir_env$1[4] = 1;
                return menhir_errorcase(menhir_env$1,menhir_stack$1,34)}},
           menhir_run9=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_env$0=menhir_env,
               menhir_stack$0=menhir_stack,
               menhir_s$0=menhir_s;
              for(;;)
               {var
                 menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok=menhir_env$1[3];
                if(typeof tok === "number")
                 switch(tok)
                  {case 6:
                    var _gJ_=33;
                    if(counter < 50)
                     {var counter$5=counter + 1 | 0;
                      return menhir_run6
                              (counter$5,menhir_env$1,menhir_stack$1,_gJ_)}
                    return caml_trampoline_return
                            (menhir_run6,[0,menhir_env$1,menhir_stack$1,_gJ_]);
                   case 9:
                    var _gK_=33;
                    if(counter < 50)
                     {var counter$3=counter + 1 | 0;
                      return menhir_run8
                              (counter$3,menhir_env$1,menhir_stack$1,_gK_)}
                    return caml_trampoline_return
                            (menhir_run8,[0,menhir_env$1,menhir_stack$1,_gK_]);
                   case 12:
                    var
                     menhir_env$0=menhir_env$1,
                     menhir_stack$0=menhir_stack$1,
                     menhir_s$0=33;
                    continue;
                   case 14:
                    var _gL_=33;
                    if(counter < 50)
                     {var counter$2=counter + 1 | 0;
                      return menhir_run10
                              (counter$2,menhir_env$1,menhir_stack$1,_gL_)}
                    return caml_trampoline_return
                            (menhir_run10,[0,menhir_env$1,menhir_stack$1,_gL_]);
                   case 20:
                    var _gM_=33;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return menhir_run12
                              (counter$0,menhir_env$1,menhir_stack$1,_gM_)}
                    return caml_trampoline_return
                            (menhir_run12,[0,menhir_env$1,menhir_stack$1,_gM_])
                   }
                else
                 switch(tok[0])
                  {case 1:
                    var v=tok[1],_gN_=menhir_env$1[2][11],_gO_=33;
                    if(counter < 50)
                     {var counter$4=counter + 1 | 0;
                      return menhir_run7
                              (counter$4,menhir_env$1,menhir_stack$1,_gO_,v,_gN_)}
                    return caml_trampoline_return
                            (menhir_run7,[0,menhir_env$1,menhir_stack$1,_gO_,v,_gN_]);
                   case 2:
                    var v$0=tok[1],_gP_=menhir_env$1[2][11],_gQ_=33;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return menhir_run11
                              (counter$1,menhir_env$1,menhir_stack$1,_gQ_,v$0,_gP_)}
                    return caml_trampoline_return
                            (menhir_run11,[0,menhir_env$1,menhir_stack$1,_gQ_,v$0,_gP_])
                   }
                if(menhir_env$1[4])throw [0,Assert_failure,_ck_];
                menhir_env$1[4] = 1;
                return menhir_errorcase(menhir_env$1,menhir_stack$1,33)}},
           menhir_run10=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_env$0=menhir_env,
               menhir_stack$0=menhir_stack,
               menhir_s$0=menhir_s;
              for(;;)
               {var
                 menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok=menhir_env$1[3];
                if(typeof tok === "number")
                 switch(tok)
                  {case 6:
                    var _gB_=32;
                    if(counter < 50)
                     {var counter$5=counter + 1 | 0;
                      return menhir_run6
                              (counter$5,menhir_env$1,menhir_stack$1,_gB_)}
                    return caml_trampoline_return
                            (menhir_run6,[0,menhir_env$1,menhir_stack$1,_gB_]);
                   case 9:
                    var _gC_=32;
                    if(counter < 50)
                     {var counter$3=counter + 1 | 0;
                      return menhir_run8
                              (counter$3,menhir_env$1,menhir_stack$1,_gC_)}
                    return caml_trampoline_return
                            (menhir_run8,[0,menhir_env$1,menhir_stack$1,_gC_]);
                   case 12:
                    var _gD_=32;
                    if(counter < 50)
                     {var counter$2=counter + 1 | 0;
                      return menhir_run9
                              (counter$2,menhir_env$1,menhir_stack$1,_gD_)}
                    return caml_trampoline_return
                            (menhir_run9,[0,menhir_env$1,menhir_stack$1,_gD_]);
                   case 14:
                    var
                     menhir_env$0=menhir_env$1,
                     menhir_stack$0=menhir_stack$1,
                     menhir_s$0=32;
                    continue;
                   case 20:
                    var _gE_=32;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return menhir_run12
                              (counter$0,menhir_env$1,menhir_stack$1,_gE_)}
                    return caml_trampoline_return
                            (menhir_run12,[0,menhir_env$1,menhir_stack$1,_gE_])
                   }
                else
                 switch(tok[0])
                  {case 1:
                    var v=tok[1],_gF_=menhir_env$1[2][11],_gG_=32;
                    if(counter < 50)
                     {var counter$4=counter + 1 | 0;
                      return menhir_run7
                              (counter$4,menhir_env$1,menhir_stack$1,_gG_,v,_gF_)}
                    return caml_trampoline_return
                            (menhir_run7,[0,menhir_env$1,menhir_stack$1,_gG_,v,_gF_]);
                   case 2:
                    var v$0=tok[1],_gH_=menhir_env$1[2][11],_gI_=32;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return menhir_run11
                              (counter$1,menhir_env$1,menhir_stack$1,_gI_,v$0,_gH_)}
                    return caml_trampoline_return
                            (menhir_run11,[0,menhir_env$1,menhir_stack$1,_gI_,v$0,_gH_])
                   }
                if(menhir_env$1[4])throw [0,Assert_failure,_cl_];
                menhir_env$1[4] = 1;
                return menhir_errorcase(menhir_env$1,menhir_stack$1,32)}},
           menhir_run11=
            function(counter,menhir_env,menhir_stack,menhir_s,v,startpos)
             {var menhir_env$0=menhir_discard(menhir_env),v$0=[3,v];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return menhir_goto_meta_expr
                        (counter$0,menhir_env$0,menhir_stack,menhir_s,v$0)}
              return caml_trampoline_return
                      (menhir_goto_meta_expr,
                       [0,menhir_env$0,menhir_stack,menhir_s,v$0])},
           menhir_run12=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_env$0=menhir_env,
               menhir_stack$0=menhir_stack,
               menhir_s$0=menhir_s;
              for(;;)
               {var
                 menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok=menhir_env$1[3];
                if(typeof tok === "number")
                 switch(tok)
                  {case 6:
                    var _gt_=31;
                    if(counter < 50)
                     {var counter$5=counter + 1 | 0;
                      return menhir_run6
                              (counter$5,menhir_env$1,menhir_stack$1,_gt_)}
                    return caml_trampoline_return
                            (menhir_run6,[0,menhir_env$1,menhir_stack$1,_gt_]);
                   case 9:
                    var _gu_=31;
                    if(counter < 50)
                     {var counter$3=counter + 1 | 0;
                      return menhir_run8
                              (counter$3,menhir_env$1,menhir_stack$1,_gu_)}
                    return caml_trampoline_return
                            (menhir_run8,[0,menhir_env$1,menhir_stack$1,_gu_]);
                   case 12:
                    var _gv_=31;
                    if(counter < 50)
                     {var counter$2=counter + 1 | 0;
                      return menhir_run9
                              (counter$2,menhir_env$1,menhir_stack$1,_gv_)}
                    return caml_trampoline_return
                            (menhir_run9,[0,menhir_env$1,menhir_stack$1,_gv_]);
                   case 14:
                    var _gw_=31;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return menhir_run10
                              (counter$1,menhir_env$1,menhir_stack$1,_gw_)}
                    return caml_trampoline_return
                            (menhir_run10,[0,menhir_env$1,menhir_stack$1,_gw_]);
                   case 20:
                    var
                     menhir_env$0=menhir_env$1,
                     menhir_stack$0=menhir_stack$1,
                     menhir_s$0=31;
                    continue
                   }
                else
                 switch(tok[0])
                  {case 1:
                    var v=tok[1],_gx_=menhir_env$1[2][11],_gy_=31;
                    if(counter < 50)
                     {var counter$4=counter + 1 | 0;
                      return menhir_run7
                              (counter$4,menhir_env$1,menhir_stack$1,_gy_,v,_gx_)}
                    return caml_trampoline_return
                            (menhir_run7,[0,menhir_env$1,menhir_stack$1,_gy_,v,_gx_]);
                   case 2:
                    var v$0=tok[1],_gz_=menhir_env$1[2][11],_gA_=31;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return menhir_run11
                              (counter$0,menhir_env$1,menhir_stack$1,_gA_,v$0,_gz_)}
                    return caml_trampoline_return
                            (menhir_run11,[0,menhir_env$1,menhir_stack$1,_gA_,v$0,_gz_])
                   }
                if(menhir_env$1[4])throw [0,Assert_failure,_cm_];
                menhir_env$1[4] = 1;
                return menhir_errorcase(menhir_env$1,menhir_stack$1,31)}},
           menhir_goto_definition=
            function(counter,menhir_env,menhir_stack,v)
             {var menhir_stack$0=[0,menhir_stack,v];
              if(menhir_env[4])throw [0,Assert_failure,_cn_];
              var tok=menhir_env[3];
              if(typeof tok === "number" && 23 === tok)
               {var
                 menhir_env$0=menhir_discard(menhir_env),
                 tok$0=menhir_env$0[3],
                 switch$0=0;
                if(typeof tok$0 === "number")
                 switch(tok$0)
                  {case 23:
                    var _gs_=0;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return menhir_run1$0
                              (counter$0,menhir_env$0,menhir_stack$0,_gs_)}
                    return caml_trampoline_return
                            (menhir_run1$0,[0,menhir_env$0,menhir_stack$0,_gs_]);
                   case 18:switch$0 = 1;break
                   }
                else
                 if(2 === tok$0[0])switch$0 = 1;
                if(switch$0)
                 {var _gr_=0;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_reduce26$0
                            (counter$1,menhir_env$0,menhir_stack$0,_gr_)}
                  return caml_trampoline_return
                          (menhir_reduce26$0,[0,menhir_env$0,menhir_stack$0,_gr_])}
                if(menhir_env$0[4])throw [0,Assert_failure,_co_];
                menhir_env$0[4] = 1;
                return menhir_errorcase(menhir_env$0,menhir_stack$0,0)}
              if(menhir_env[4])throw [0,Assert_failure,_cp_];
              menhir_env[4] = 1;
              var
               match=menhir_stack$0[1],
               menhir_s=match[2],
               menhir_stack$1=match[1];
              return menhir_errorcase(menhir_env,menhir_stack$1,menhir_s)},
           menhir_goto_loption_separated_=
            function(counter,menhir_env,match,menhir_s,args)
             {if(menhir_env[4])throw [0,Assert_failure,_cq_];
              var tok=menhir_env[3];
              if(typeof tok === "number")
               if(23 <= tok)
                {if(! (25 <= tok))
                  {var
                    startpos_id=match[4],
                    id=match[3],
                    menhir_s$0=match[2],
                    menhir_stack=match[1],
                    v=[0,startpos_id,id,args,0];
                   if(counter < 50)
                    {var counter$0=counter + 1 | 0;
                     return menhir_goto_command
                             (counter$0,menhir_env,menhir_stack,menhir_s$0,v)}
                   return caml_trampoline_return
                           (menhir_goto_command,
                            [0,menhir_env,menhir_stack,menhir_s$0,v])}}
               else
                if(17 === tok)
                 {var
                   menhir_env$0=menhir_discard(menhir_env),
                   tok$0=menhir_env$0[3];
                  if(typeof tok$0 === "number")
                   switch(tok$0)
                    {case 23:
                     case 24:
                      var
                       startpos_id$0=match[4],
                       id$0=match[3],
                       menhir_s$1=match[2],
                       menhir_stack$0=match[1],
                       v$0=[0,startpos_id$0,id$0,args,1];
                      if(counter < 50)
                       {var counter$2=counter + 1 | 0;
                        return menhir_goto_command
                                (counter$2,menhir_env$0,menhir_stack$0,menhir_s$1,v$0)}
                      return caml_trampoline_return
                              (menhir_goto_command,
                               [0,menhir_env$0,menhir_stack$0,menhir_s$1,v$0])
                     }
                  else
                   if(1 === tok$0[0])
                    {var
                      v$1=tok$0[1],
                      menhir_env$1=menhir_discard(menhir_env$0),
                      startpos_id$1=match[4],
                      id$1=match[3],
                      menhir_s$2=match[2],
                      menhir_stack$1=match[1],
                      v$2=[0,startpos_id$1,id$1,args,[0,uint32_to_int(v$1)]];
                     if(counter < 50)
                      {var counter$1=counter + 1 | 0;
                       return menhir_goto_command
                               (counter$1,menhir_env$1,menhir_stack$1,menhir_s$2,v$2)}
                     return caml_trampoline_return
                             (menhir_goto_command,
                              [0,menhir_env$1,menhir_stack$1,menhir_s$2,v$2])}
                  if(menhir_env$0[4])throw [0,Assert_failure,_cs_];
                  menhir_env$0[4] = 1;
                  return menhir_errorcase(menhir_env$0,match,menhir_s)}
              if(menhir_env[4])throw [0,Assert_failure,_cr_];
              menhir_env[4] = 1;
              return menhir_errorcase(menhir_env,match,menhir_s)},
           menhir_run4=
            function(counter,menhir_env,menhir_stack,menhir_s,i,startpos_i)
             {var menhir_env$0=menhir_discard(menhir_env),v=[0,i];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return menhir_goto_number
                        (counter$0,menhir_env$0,menhir_stack,menhir_s,v,startpos_i)}
              return caml_trampoline_return
                      (menhir_goto_number,
                       [0,menhir_env$0,menhir_stack,menhir_s,v,startpos_i])},
           menhir_run54=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_stack$0=[0,menhir_stack,menhir_s],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3];
              if(typeof tok !== "number" && 2 === tok[0])
               {var
                 v=tok[1],
                 startpos=menhir_env$0[2][11],
                 menhir_stack$2=[0,menhir_stack$0,v,startpos],
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok$0=menhir_env$1[3];
                if(typeof tok$0 === "number")
                 {if(4 === tok$0)
                   {var
                     menhir_env$2=menhir_discard(menhir_env$1),
                     tok$1=menhir_env$2[3];
                    if(typeof tok$1 === "number" && 17 <= tok$1)
                     {var switcher=tok$1 - 17 | 0;
                      switch(switcher)
                       {case 3:
                         var
                          menhir_env$3=menhir_discard(menhir_env$2),
                          id$0=menhir_stack$2[2],
                          match$1=menhir_stack$2[1],
                          menhir_s$3=match$1[2],
                          menhir_stack$5=match$1[1],
                          v$1=[2,id$0,[0,sign_plus,[0,Stdlib_int32[1]]],1];
                         if(counter < 50)
                          {var counter$4=counter + 1 | 0;
                           return menhir_goto_arg
                                   (counter$4,menhir_env$3,menhir_stack$5,menhir_s$3,v$1)}
                         return caml_trampoline_return
                                 (menhir_goto_arg,
                                  [0,menhir_env$3,menhir_stack$5,menhir_s$3,v$1]);
                        case 9:
                         var
                          menhir_env$4=menhir_discard(menhir_env$2),
                          tok$2=menhir_env$4[3];
                         if(typeof tok$2 === "number")
                          switch(tok$2)
                           {case 6:
                             var _f$_=13;
                             if(counter < 50)
                              {var counter$13=counter + 1 | 0;
                               return menhir_run59
                                       (counter$13,menhir_env$4,menhir_stack$2,_f$_)}
                             return caml_trampoline_return
                                     (menhir_run59,[0,menhir_env$4,menhir_stack$2,_f$_]);
                            case 12:
                             var _ga_=13;
                             if(counter < 50)
                              {var counter$11=counter + 1 | 0;
                               return menhir_run62
                                       (counter$11,menhir_env$4,menhir_stack$2,_ga_)}
                             return caml_trampoline_return
                                     (menhir_run62,[0,menhir_env$4,menhir_stack$2,_ga_]);
                            case 16:
                             var _gb_=menhir_env$4[2][11],_gc_=13;
                             if(counter < 50)
                              {var counter$1=counter + 1 | 0;
                               return menhir_run5
                                       (counter$1,menhir_env$4,menhir_stack$2,_gc_,_gb_)}
                             return caml_trampoline_return
                                     (menhir_run5,[0,menhir_env$4,menhir_stack$2,_gc_,_gb_]);
                            case 19:
                             var _gd_=13;
                             if(counter < 50)
                              {var counter$7=counter + 1 | 0;
                               return menhir_run66
                                       (counter$7,menhir_env$4,menhir_stack$2,_gd_)}
                             return caml_trampoline_return
                                     (menhir_run66,[0,menhir_env$4,menhir_stack$2,_gd_])
                            }
                         else
                          switch(tok$2[0])
                           {case 1:
                             var v$2=tok$2[1],_ge_=menhir_env$4[2][11],_gf_=13;
                             if(counter < 50)
                              {var counter$3=counter + 1 | 0;
                               return menhir_run4
                                       (counter$3,menhir_env$4,menhir_stack$2,_gf_,v$2,_ge_)}
                             return caml_trampoline_return
                                     (menhir_run4,[0,menhir_env$4,menhir_stack$2,_gf_,v$2,_ge_]);
                            case 2:
                             var v$3=tok$2[1],_gg_=menhir_env$4[2][11],_gh_=13;
                             if(counter < 50)
                              {var counter$9=counter + 1 | 0;
                               return menhir_run65
                                       (counter$9,menhir_env$4,menhir_stack$2,_gh_,v$3,_gg_)}
                             return caml_trampoline_return
                                     (menhir_run65,[0,menhir_env$4,menhir_stack$2,_gh_,v$3,_gg_])
                            }
                         if(menhir_env$4[4])throw [0,Assert_failure,_cv_];
                         menhir_env$4[4] = 1;
                         return menhir_errorcase(menhir_env$4,menhir_stack$2,13);
                        case 0:
                        case 6:
                        case 7:
                         var
                          id=menhir_stack$2[2],
                          match=menhir_stack$2[1],
                          menhir_s$1=match[2],
                          menhir_stack$3=match[1],
                          v$0=[2,id,[0,sign_plus,[0,Stdlib_int32[1]]],0];
                         if(counter < 50)
                          {var counter$5=counter + 1 | 0;
                           return menhir_goto_arg
                                   (counter$5,menhir_env$2,menhir_stack$3,menhir_s$1,v$0)}
                         return caml_trampoline_return
                                 (menhir_goto_arg,
                                  [0,menhir_env$2,menhir_stack$3,menhir_s$1,v$0])
                        }}
                    if(menhir_env$2[4])throw [0,Assert_failure,_cu_];
                    menhir_env$2[4] = 1;
                    var
                     match$0=menhir_stack$2[1],
                     menhir_s$2=match$0[2],
                     menhir_stack$4=match$0[1];
                    return menhir_errorcase
                            (menhir_env$2,menhir_stack$4,menhir_s$2)}
                  if(26 === tok$0)
                   {var
                     menhir_env$5=menhir_discard(menhir_env$1),
                     tok$3=menhir_env$5[3];
                    if(typeof tok$3 === "number")
                     switch(tok$3)
                      {case 6:
                        var _gi_=7;
                        if(counter < 50)
                         {var counter$12=counter + 1 | 0;
                          return menhir_run59
                                  (counter$12,menhir_env$5,menhir_stack$2,_gi_)}
                        return caml_trampoline_return
                                (menhir_run59,[0,menhir_env$5,menhir_stack$2,_gi_]);
                       case 12:
                        var _gj_=7;
                        if(counter < 50)
                         {var counter$10=counter + 1 | 0;
                          return menhir_run62
                                  (counter$10,menhir_env$5,menhir_stack$2,_gj_)}
                        return caml_trampoline_return
                                (menhir_run62,[0,menhir_env$5,menhir_stack$2,_gj_]);
                       case 16:
                        var _gk_=menhir_env$5[2][11],_gl_=7;
                        if(counter < 50)
                         {var counter$0=counter + 1 | 0;
                          return menhir_run5
                                  (counter$0,menhir_env$5,menhir_stack$2,_gl_,_gk_)}
                        return caml_trampoline_return
                                (menhir_run5,[0,menhir_env$5,menhir_stack$2,_gl_,_gk_]);
                       case 19:
                        var _gm_=7;
                        if(counter < 50)
                         {var counter$6=counter + 1 | 0;
                          return menhir_run66
                                  (counter$6,menhir_env$5,menhir_stack$2,_gm_)}
                        return caml_trampoline_return
                                (menhir_run66,[0,menhir_env$5,menhir_stack$2,_gm_])
                       }
                    else
                     switch(tok$3[0])
                      {case 1:
                        var v$4=tok$3[1],_gn_=menhir_env$5[2][11],_go_=7;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return menhir_run4
                                  (counter$2,menhir_env$5,menhir_stack$2,_go_,v$4,_gn_)}
                        return caml_trampoline_return
                                (menhir_run4,[0,menhir_env$5,menhir_stack$2,_go_,v$4,_gn_]);
                       case 2:
                        var v$5=tok$3[1],_gp_=menhir_env$5[2][11],_gq_=7;
                        if(counter < 50)
                         {var counter$8=counter + 1 | 0;
                          return menhir_run65
                                  (counter$8,menhir_env$5,menhir_stack$2,_gq_,v$5,_gp_)}
                        return caml_trampoline_return
                                (menhir_run65,[0,menhir_env$5,menhir_stack$2,_gq_,v$5,_gp_])
                       }
                    if(menhir_env$5[4])throw [0,Assert_failure,_cw_];
                    menhir_env$5[4] = 1;
                    return menhir_errorcase(menhir_env$5,menhir_stack$2,7)}}
                if(menhir_env$1[4])throw [0,Assert_failure,_cx_];
                menhir_env$1[4] = 1;
                var
                 match$2=menhir_stack$2[1],
                 menhir_s$4=match$2[2],
                 menhir_stack$6=match$2[1];
                return menhir_errorcase
                        (menhir_env$1,menhir_stack$6,menhir_s$4)}
              if(menhir_env$0[4])throw [0,Assert_failure,_ct_];
              menhir_env$0[4] = 1;
              var
               menhir_s$0=menhir_stack$0[2],
               menhir_stack$1=menhir_stack$0[1];
              return menhir_errorcase(menhir_env$0,menhir_stack$1,menhir_s$0)},
           menhir_run5=
            function(counter,menhir_env,menhir_stack,menhir_s,startpos)
             {var
               menhir_stack$0=[0,menhir_stack,menhir_s,startpos],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3];
              if(typeof tok === "number")
               switch(tok)
                {case 6:
                  var _f2_=36;
                  if(counter < 50)
                   {var counter$6=counter + 1 | 0;
                    return menhir_run6
                            (counter$6,menhir_env$0,menhir_stack$0,_f2_)}
                  return caml_trampoline_return
                          (menhir_run6,[0,menhir_env$0,menhir_stack$0,_f2_]);
                 case 9:
                  var _f3_=36;
                  if(counter < 50)
                   {var counter$4=counter + 1 | 0;
                    return menhir_run8
                            (counter$4,menhir_env$0,menhir_stack$0,_f3_)}
                  return caml_trampoline_return
                          (menhir_run8,[0,menhir_env$0,menhir_stack$0,_f3_]);
                 case 12:
                  var _f4_=36;
                  if(counter < 50)
                   {var counter$3=counter + 1 | 0;
                    return menhir_run9
                            (counter$3,menhir_env$0,menhir_stack$0,_f4_)}
                  return caml_trampoline_return
                          (menhir_run9,[0,menhir_env$0,menhir_stack$0,_f4_]);
                 case 14:
                  var _f5_=36;
                  if(counter < 50)
                   {var counter$2=counter + 1 | 0;
                    return menhir_run10
                            (counter$2,menhir_env$0,menhir_stack$0,_f5_)}
                  return caml_trampoline_return
                          (menhir_run10,[0,menhir_env$0,menhir_stack$0,_f5_]);
                 case 20:
                  var _f6_=36;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run12
                            (counter$0,menhir_env$0,menhir_stack$0,_f6_)}
                  return caml_trampoline_return
                          (menhir_run12,[0,menhir_env$0,menhir_stack$0,_f6_])
                 }
              else
               switch(tok[0])
                {case 1:
                  var v=tok[1],_f7_=menhir_env$0[2][11],_f8_=36;
                  if(counter < 50)
                   {var counter$5=counter + 1 | 0;
                    return menhir_run7
                            (counter$5,menhir_env$0,menhir_stack$0,_f8_,v,_f7_)}
                  return caml_trampoline_return
                          (menhir_run7,[0,menhir_env$0,menhir_stack$0,_f8_,v,_f7_]);
                 case 2:
                  var v$0=tok[1],_f9_=menhir_env$0[2][11],_f__=36;
                  if(counter < 50)
                   {var counter$1=counter + 1 | 0;
                    return menhir_run11
                            (counter$1,menhir_env$0,menhir_stack$0,_f__,v$0,_f9_)}
                  return caml_trampoline_return
                          (menhir_run11,[0,menhir_env$0,menhir_stack$0,_f__,v$0,_f9_])
                 }
              if(menhir_env$0[4])throw [0,Assert_failure,_cy_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack$0,36)},
           menhir_run78=
            function(counter,menhir_env,menhir_stack,menhir_s,id,startpos)
             {var menhir_env$0=menhir_discard(menhir_env),v=[0,id];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return menhir_goto_arg
                        (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
              return caml_trampoline_return
                      (menhir_goto_arg,[0,menhir_env$0,menhir_stack,menhir_s,v])},
           menhir_run79=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_stack$0=[0,menhir_stack,menhir_s],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3];
              if(typeof tok === "number")
               {if(16 === tok)
                 {var _fY_=menhir_env$0[2][11],_fZ_=6;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_run5
                            (counter$0,menhir_env$0,menhir_stack$0,_fZ_,_fY_)}
                  return caml_trampoline_return
                          (menhir_run5,[0,menhir_env$0,menhir_stack$0,_fZ_,_fY_])}}
              else
               if(1 === tok[0])
                {var v=tok[1],_f0_=menhir_env$0[2][11],_f1_=6;
                 if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return menhir_run4
                           (counter$1,menhir_env$0,menhir_stack$0,_f1_,v,_f0_)}
                 return caml_trampoline_return
                         (menhir_run4,[0,menhir_env$0,menhir_stack$0,_f1_,v,_f0_])}
              if(menhir_env$0[4])throw [0,Assert_failure,_cz_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack$0,6)},
           menhir_reduce26$0=
            function(counter,menhir_env$11,menhir_stack$9,menhir_s$7)
             {var menhir_stack=menhir_stack$9,menhir_s=menhir_s$7,v=0;
              for(;;)
               {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
                if(38 <= menhir_s)
                 {if(! (39 <= menhir_s))
                   {var
                     xs=menhir_stack$0[3],
                     match=menhir_stack$0[1],
                     menhir_s$2=match[2],
                     menhir_stack$3=match[1],
                     v$5=[0,0,xs],
                     menhir_stack=menhir_stack$3,
                     menhir_s=menhir_s$2,
                     v=v$5;
                    continue}}
                else
                 {var switch$0=0;
                  if(! (5 <= menhir_s))
                   switch(menhir_s)
                    {case 4:switch$0 = 1;break;
                     case 1:
                     case 2:break;
                     default:
                      if(menhir_env$11[4])throw [0,Assert_failure,_cD_];
                      var tok$1=menhir_env$11[3];
                      if(typeof tok$1 === "number")
                       {if(18 === tok$1)
                         {var
                           menhir_env$0=menhir_discard(menhir_env$11),
                           tok$2=menhir_env$0[3];
                          if(typeof tok$2 === "number")
                           switch(tok$2)
                            {case 23:
                              var
                               menhir_s$5=menhir_stack$0[2],
                               menhir_stack$6=menhir_stack$0[1];
                              return menhir_goto_headers
                                      (menhir_env$0,menhir_stack$6,menhir_s$5,0);
                             case 24:
                              var
                               menhir_s$6=menhir_stack$0[2],
                               menhir_stack$7=menhir_stack$0[1];
                              return menhir_goto_headers
                                      (menhir_env$0,menhir_stack$7,menhir_s$6,0)
                             }
                          else
                           if(2 === tok$2[0])
                            {var
                              id=tok$2[1],
                              menhir_env$1=menhir_discard(menhir_env$0),
                              tok$3=menhir_env$1[3];
                             if(typeof tok$3 === "number" && 21 === tok$3)
                              {var
                                menhir_env$2=menhir_discard(menhir_env$1),
                                tok$4=menhir_env$2[3];
                               if(typeof tok$4 === "number")
                                {if(8 === tok$4)
                                  {var menhir_env$3=menhir_discard(menhir_env$2),v$6=[0,id,0];
                                   if(counter < 50)
                                    {var counter$8=counter + 1 | 0;
                                     return menhir_goto_definition
                                             (counter$8,menhir_env$3,menhir_stack$0,v$6)}
                                   return caml_trampoline_return
                                           (menhir_goto_definition,[0,menhir_env$3,menhir_stack$0,v$6])}}
                               else
                                switch(tok$4[0])
                                 {case 0:
                                   var
                                    v$7=tok$4[1],
                                    menhir_env$4=menhir_discard(menhir_env$2),
                                    v$8=[0,id,[0,v$7]];
                                   if(counter < 50)
                                    {var counter$9=counter + 1 | 0;
                                     return menhir_goto_definition
                                             (counter$9,menhir_env$4,menhir_stack$0,v$8)}
                                   return caml_trampoline_return
                                           (menhir_goto_definition,[0,menhir_env$4,menhir_stack$0,v$8]);
                                  case 1:
                                   var
                                    v$9=tok$4[1],
                                    menhir_env$5=menhir_discard(menhir_env$2),
                                    v$10=[0,id,[1,v$9]];
                                   if(counter < 50)
                                    {var counter$10=counter + 1 | 0;
                                     return menhir_goto_definition
                                             (counter$10,menhir_env$5,menhir_stack$0,v$10)}
                                   return caml_trampoline_return
                                           (menhir_goto_definition,
                                            [0,menhir_env$5,menhir_stack$0,v$10]);
                                  case 3:
                                   var
                                    v$11=tok$4[1],
                                    menhir_env$6=menhir_discard(menhir_env$2),
                                    v$12=[0,id,[2,v$11]];
                                   if(counter < 50)
                                    {var counter$11=counter + 1 | 0;
                                     return menhir_goto_definition
                                             (counter$11,menhir_env$6,menhir_stack$0,v$12)}
                                   return caml_trampoline_return
                                           (menhir_goto_definition,
                                            [0,menhir_env$6,menhir_stack$0,v$12])
                                  }
                               if(menhir_env$2[4])throw [0,Assert_failure,_cG_];
                               menhir_env$2[4] = 1;
                               throw eRR}
                             if(menhir_env$1[4])throw [0,Assert_failure,_cH_];
                             menhir_env$1[4] = 1;
                             throw eRR}
                          if(menhir_env$0[4])throw [0,Assert_failure,_cF_];
                          menhir_env$0[4] = 1;
                          var
                           menhir_s$4=menhir_stack$0[2],
                           menhir_stack$5=menhir_stack$0[1];
                          return menhir_errorcase
                                  (menhir_env$0,menhir_stack$5,menhir_s$4)}}
                      else
                       if(2 === tok$1[0])
                        {var
                          v$13=tok$1[1],
                          startpos$0=menhir_env$11[2][11],
                          menhir_stack$8=[0,menhir_stack$0,v$13,startpos$0],
                          menhir_env$7=menhir_discard(menhir_env$11),
                          tok$5=menhir_env$7[3];
                         if(typeof tok$5 === "number")
                          {if(17 === tok$5)
                            {var
                              menhir_env$8=menhir_discard(menhir_env$7),
                              tok$6=menhir_env$8[3];
                             if(typeof tok$6 === "number" && 21 === tok$6)
                              {var
                                menhir_env$9=menhir_discard(menhir_env$8),
                                tok$7=menhir_env$9[3];
                               if(typeof tok$7 === "number")
                                switch(tok$7)
                                 {case 6:
                                   var _fG_=2;
                                   if(counter < 50)
                                    {var counter$25=counter + 1 | 0;
                                     return menhir_run6
                                             (counter$25,menhir_env$9,menhir_stack$8,_fG_)}
                                   return caml_trampoline_return
                                           (menhir_run6,[0,menhir_env$9,menhir_stack$8,_fG_]);
                                  case 9:
                                   var _fH_=2;
                                   if(counter < 50)
                                    {var counter$21=counter + 1 | 0;
                                     return menhir_run8
                                             (counter$21,menhir_env$9,menhir_stack$8,_fH_)}
                                   return caml_trampoline_return
                                           (menhir_run8,[0,menhir_env$9,menhir_stack$8,_fH_]);
                                  case 12:
                                   var _fI_=2;
                                   if(counter < 50)
                                    {var counter$19=counter + 1 | 0;
                                     return menhir_run9
                                             (counter$19,menhir_env$9,menhir_stack$8,_fI_)}
                                   return caml_trampoline_return
                                           (menhir_run9,[0,menhir_env$9,menhir_stack$8,_fI_]);
                                  case 14:
                                   var _fJ_=2;
                                   if(counter < 50)
                                    {var counter$17=counter + 1 | 0;
                                     return menhir_run10
                                             (counter$17,menhir_env$9,menhir_stack$8,_fJ_)}
                                   return caml_trampoline_return
                                           (menhir_run10,[0,menhir_env$9,menhir_stack$8,_fJ_]);
                                  case 20:
                                   var _fK_=2;
                                   if(counter < 50)
                                    {var counter$13=counter + 1 | 0;
                                     return menhir_run12
                                             (counter$13,menhir_env$9,menhir_stack$8,_fK_)}
                                   return caml_trampoline_return
                                           (menhir_run12,[0,menhir_env$9,menhir_stack$8,_fK_])
                                  }
                               else
                                switch(tok$7[0])
                                 {case 1:
                                   var v$14=tok$7[1],_fL_=menhir_env$9[2][11],_fM_=2;
                                   if(counter < 50)
                                    {var counter$23=counter + 1 | 0;
                                     return menhir_run7
                                             (counter$23,menhir_env$9,menhir_stack$8,_fM_,v$14,_fL_)}
                                   return caml_trampoline_return
                                           (menhir_run7,[0,menhir_env$9,menhir_stack$8,_fM_,v$14,_fL_]);
                                  case 2:
                                   var v$15=tok$7[1],_fN_=menhir_env$9[2][11],_fO_=2;
                                   if(counter < 50)
                                    {var counter$15=counter + 1 | 0;
                                     return menhir_run11
                                             (counter$15,menhir_env$9,menhir_stack$8,_fO_,v$15,_fN_)}
                                   return caml_trampoline_return
                                           (menhir_run11,
                                            [0,menhir_env$9,menhir_stack$8,_fO_,v$15,_fN_])
                                  }
                               if(menhir_env$9[4])throw [0,Assert_failure,_cI_];
                               menhir_env$9[4] = 1;
                               return menhir_errorcase(menhir_env$9,menhir_stack$8,2)}
                             if(menhir_env$8[4])throw [0,Assert_failure,_cJ_];
                             menhir_env$8[4] = 1;
                             throw eRR}
                           if(21 === tok$5)
                            {var
                              menhir_env$10=menhir_discard(menhir_env$7),
                              tok$8=menhir_env$10[3];
                             if(typeof tok$8 === "number")
                              switch(tok$8)
                               {case 6:
                                 var _fP_=1;
                                 if(counter < 50)
                                  {var counter$24=counter + 1 | 0;
                                   return menhir_run6
                                           (counter$24,menhir_env$10,menhir_stack$8,_fP_)}
                                 return caml_trampoline_return
                                         (menhir_run6,[0,menhir_env$10,menhir_stack$8,_fP_]);
                                case 9:
                                 var _fQ_=1;
                                 if(counter < 50)
                                  {var counter$20=counter + 1 | 0;
                                   return menhir_run8
                                           (counter$20,menhir_env$10,menhir_stack$8,_fQ_)}
                                 return caml_trampoline_return
                                         (menhir_run8,[0,menhir_env$10,menhir_stack$8,_fQ_]);
                                case 12:
                                 var _fR_=1;
                                 if(counter < 50)
                                  {var counter$18=counter + 1 | 0;
                                   return menhir_run9
                                           (counter$18,menhir_env$10,menhir_stack$8,_fR_)}
                                 return caml_trampoline_return
                                         (menhir_run9,[0,menhir_env$10,menhir_stack$8,_fR_]);
                                case 14:
                                 var _fS_=1;
                                 if(counter < 50)
                                  {var counter$16=counter + 1 | 0;
                                   return menhir_run10
                                           (counter$16,menhir_env$10,menhir_stack$8,_fS_)}
                                 return caml_trampoline_return
                                         (menhir_run10,[0,menhir_env$10,menhir_stack$8,_fS_]);
                                case 20:
                                 var _fT_=1;
                                 if(counter < 50)
                                  {var counter$12=counter + 1 | 0;
                                   return menhir_run12
                                           (counter$12,menhir_env$10,menhir_stack$8,_fT_)}
                                 return caml_trampoline_return
                                         (menhir_run12,[0,menhir_env$10,menhir_stack$8,_fT_])
                                }
                             else
                              switch(tok$8[0])
                               {case 1:
                                 var v$16=tok$8[1],_fU_=menhir_env$10[2][11],_fV_=1;
                                 if(counter < 50)
                                  {var counter$22=counter + 1 | 0;
                                   return menhir_run7
                                           (counter$22,menhir_env$10,menhir_stack$8,_fV_,v$16,_fU_)}
                                 return caml_trampoline_return
                                         (menhir_run7,
                                          [0,menhir_env$10,menhir_stack$8,_fV_,v$16,_fU_]);
                                case 2:
                                 var v$17=tok$8[1],_fW_=menhir_env$10[2][11],_fX_=1;
                                 if(counter < 50)
                                  {var counter$14=counter + 1 | 0;
                                   return menhir_run11
                                           (counter$14,menhir_env$10,menhir_stack$8,_fX_,v$17,_fW_)}
                                 return caml_trampoline_return
                                         (menhir_run11,
                                          [0,menhir_env$10,menhir_stack$8,_fX_,v$17,_fW_])
                                }
                             if(menhir_env$10[4])throw [0,Assert_failure,_cK_];
                             menhir_env$10[4] = 1;
                             return menhir_errorcase(menhir_env$10,menhir_stack$8,1)}}
                         if(menhir_env$7[4])throw [0,Assert_failure,_cL_];
                         menhir_env$7[4] = 1;
                         throw eRR}
                      if(menhir_env$11[4])throw [0,Assert_failure,_cE_];
                      menhir_env$11[4] = 1;
                      var
                       menhir_s$3=menhir_stack$0[2],
                       menhir_stack$4=menhir_stack$0[1];
                      return menhir_errorcase
                              (menhir_env$11,menhir_stack$4,menhir_s$3)}
                  if(! switch$0)return menhir_fail(0)}
                if(menhir_env$11[4])throw [0,Assert_failure,_cA_];
                var tok=menhir_env$11[3];
                if(typeof tok === "number")
                 switch(tok)
                  {case 16:
                    var _fu_=menhir_env$11[2][11],_fv_=37;
                    if(counter < 50)
                     {var counter$2=counter + 1 | 0;
                      return menhir_run5
                              (counter$2,menhir_env$11,menhir_stack$0,_fv_,_fu_)}
                    return caml_trampoline_return
                            (menhir_run5,[0,menhir_env$11,menhir_stack$0,_fv_,_fu_]);
                   case 24:
                    var
                     menhir_s$0=menhir_stack$0[2],
                     menhir_stack$1=menhir_stack$0[1];
                    return menhir_goto_ast
                            (menhir_env$11,menhir_stack$1,menhir_s$0,0)
                   }
                else
                 switch(tok[0])
                  {case 1:
                    var v$0=tok[1],_fw_=menhir_env$11[2][11],_fx_=37;
                    if(counter < 50)
                     {var counter$5=counter + 1 | 0;
                      return menhir_run4
                              (counter$5,menhir_env$11,menhir_stack$0,_fx_,v$0,_fw_)}
                    return caml_trampoline_return
                            (menhir_run4,[0,menhir_env$11,menhir_stack$0,_fx_,v$0,_fw_]);
                   case 2:
                    var
                     v$1=tok[1],
                     startpos=menhir_env$11[2][11],
                     menhir_stack$2=[0,menhir_stack$0,37,v$1,startpos],
                     menhir_env=menhir_discard(menhir_env$11),
                     tok$0=menhir_env[3];
                    if(typeof tok$0 === "number")
                     switch(tok$0)
                      {case 15:
                        var _fy_=14;
                        if(counter < 50)
                         {var counter$4=counter + 1 | 0;
                          return menhir_run54
                                  (counter$4,menhir_env,menhir_stack$2,_fy_)}
                        return caml_trampoline_return
                                (menhir_run54,[0,menhir_env,menhir_stack$2,_fy_]);
                       case 16:
                        var _fz_=menhir_env[2][11],_fA_=14;
                        if(counter < 50)
                         {var counter$3=counter + 1 | 0;
                          return menhir_run5
                                  (counter$3,menhir_env,menhir_stack$2,_fA_,_fz_)}
                        return caml_trampoline_return
                                (menhir_run5,[0,menhir_env,menhir_stack$2,_fA_,_fz_]);
                       case 19:
                        var _fB_=14;
                        if(counter < 50)
                         {var counter$0=counter + 1 | 0;
                          return menhir_run79
                                  (counter$0,menhir_env,menhir_stack$2,_fB_)}
                        return caml_trampoline_return
                                (menhir_run79,[0,menhir_env,menhir_stack$2,_fB_]);
                       case 17:
                       case 23:
                       case 24:
                        var menhir_s$1=14,v$2=0;
                        if(counter < 50)
                         {var counter$7=counter + 1 | 0;
                          return menhir_goto_loption_separated_
                                  (counter$7,menhir_env,menhir_stack$2,menhir_s$1,v$2)}
                        return caml_trampoline_return
                                (menhir_goto_loption_separated_,
                                 [0,menhir_env,menhir_stack$2,menhir_s$1,v$2])
                       }
                    else
                     switch(tok$0[0])
                      {case 1:
                        var v$3=tok$0[1],_fC_=menhir_env[2][11],_fD_=14;
                        if(counter < 50)
                         {var counter$6=counter + 1 | 0;
                          return menhir_run4
                                  (counter$6,menhir_env,menhir_stack$2,_fD_,v$3,_fC_)}
                        return caml_trampoline_return
                                (menhir_run4,[0,menhir_env,menhir_stack$2,_fD_,v$3,_fC_]);
                       case 2:
                        var v$4=tok$0[1],_fE_=menhir_env[2][11],_fF_=14;
                        if(counter < 50)
                         {var counter$1=counter + 1 | 0;
                          return menhir_run78
                                  (counter$1,menhir_env,menhir_stack$2,_fF_,v$4,_fE_)}
                        return caml_trampoline_return
                                (menhir_run78,[0,menhir_env,menhir_stack$2,_fF_,v$4,_fE_])
                       }
                    if(menhir_env[4])throw [0,Assert_failure,_cC_];
                    menhir_env[4] = 1;
                    return menhir_errorcase(menhir_env,menhir_stack$2,14)
                   }
                if(menhir_env$11[4])throw [0,Assert_failure,_cB_];
                menhir_env$11[4] = 1;
                return menhir_errorcase(menhir_env$11,menhir_stack$0,37)}},
           menhir_run1$0=
            function(counter,menhir_env,menhir_stack,menhir_s)
             {var
               menhir_env$0=menhir_env,
               menhir_stack$0=menhir_stack,
               menhir_s$0=menhir_s;
              for(;;)
               {var
                 menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok=menhir_env$1[3],
                 switch$0=0;
                if(typeof tok === "number")
                 switch(tok)
                  {case 23:
                    var
                     menhir_env$0=menhir_env$1,
                     menhir_stack$0=menhir_stack$1,
                     menhir_s$0=38;
                    continue;
                   case 16:
                   case 18:
                   case 24:switch$0 = 1;break
                   }
                else
                 switch(tok[0]){case 0:case 3:break;default:switch$0 = 1}
                if(switch$0)
                 {var _ft_=38;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return menhir_reduce26$0
                            (counter$0,menhir_env$1,menhir_stack$1,_ft_)}
                  return caml_trampoline_return
                          (menhir_reduce26$0,[0,menhir_env$1,menhir_stack$1,_ft_])}
                if(menhir_env$1[4])throw [0,Assert_failure,_cM_];
                menhir_env$1[4] = 1;
                return menhir_errorcase(menhir_env$1,menhir_stack$1,38)}},
           menhir_reduce26=
            function(menhir_env,menhir_stack,menhir_s)
             {return caml_trampoline
                      (menhir_reduce26$0(0,menhir_env,menhir_stack,menhir_s))},
           menhir_run1=
            function(menhir_env,menhir_stack,menhir_s)
             {return caml_trampoline
                      (menhir_run1$0(0,menhir_env,menhir_stack,menhir_s))},
           ast=
            function(lexer,lexbuf)
             {var
               menhir_env=[0,lexer,lexbuf,0,0],
               menhir_stack=[0,0,menhir_env[2][12]],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3],
               switch$0=0;
              if(typeof tok === "number")
               switch(tok)
                {case 23:return menhir_run1(menhir_env$0,menhir_stack,39);
                 case 16:
                 case 24:switch$0 = 1;break
                 }
              else
               switch(tok[0]){case 0:case 3:break;default:switch$0 = 1}
              if(switch$0)
               return menhir_reduce26(menhir_env$0,menhir_stack,39);
              if(menhir_env$0[4])throw [0,Assert_failure,_cN_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,39)},
           headers=
            function(lexer,lexbuf)
             {var
               menhir_env=[0,lexer,lexbuf,0,0],
               menhir_stack=[0,0,menhir_env[2][12]],
               menhir_env$0=menhir_discard(menhir_env),
               tok=menhir_env$0[3],
               switch$0=0;
              if(typeof tok === "number")
               switch(tok)
                {case 23:return menhir_run1(menhir_env$0,menhir_stack,3);
                 case 18:switch$0 = 1;break
                 }
              else
               if(2 === tok[0])switch$0 = 1;
              if(switch$0)return menhir_reduce26(menhir_env$0,menhir_stack,3);
              if(menhir_env$0[4])throw [0,Assert_failure,_cO_];
              menhir_env$0[4] = 1;
              return menhir_errorcase(menhir_env$0,menhir_stack,3)},
           Parser=[0,eRR,headers,ast];
          caml_register_global(461,Parser,"Parser");
          var
           SyntaxError=[248,cst_Lexer_SyntaxError,caml_fresh_oo_id(0)],
           next_line=
            function(lexbuf)
             {var pos=lexbuf[12];
              lexbuf[12] = [0,pos[1],pos[2] + 1 | 0,lexbuf[6],pos[4]];
              return 0},
           eof_reached=function(lexbuf){lexbuf[9] = 1;return 0},
           read_comment$0=
            function(counter,lexbuf)
             {var _fs_=82;
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return ocaml_lex_read_comment_rec$0(counter$0,lexbuf,_fs_)}
              return caml_trampoline_return
                      (ocaml_lex_read_comment_rec$0,[0,lexbuf,_fs_])},
           ocaml_lex_read_comment_rec$0=
            function(counter,lexbuf,ocaml_lex_state)
             {var ocaml_lex_state$0=ocaml_lex_state;
              for(;;)
               {var
                 ocaml_lex_state$1=
                  caml_call3
                   (Stdlib_lexing[20],
                    ocaml_lex_tables,
                    ocaml_lex_state$0,
                    lexbuf);
                if(2 < ocaml_lex_state$1 >>> 0)
                 {caml_call1(lexbuf[1],lexbuf);
                  var ocaml_lex_state$0=ocaml_lex_state$1;
                  continue}
                switch(ocaml_lex_state$1)
                 {case 0:next_line(lexbuf);return 23;
                  case 1:eof_reached(lexbuf);return 24;
                  default:
                   if(counter < 50)
                    {var counter$0=counter + 1 | 0;
                     return read_comment$0(counter$0,lexbuf)}
                   return caml_trampoline_return(read_comment$0,[0,lexbuf])}}},
           read_comment=
            function(lexbuf){return caml_trampoline(read_comment$0(0,lexbuf))},
           ocaml_lex_read_comment_rec=
            function(lexbuf,ocaml_lex_state)
             {return caml_trampoline
                      (ocaml_lex_read_comment_rec$0(0,lexbuf,ocaml_lex_state))},
           read_string$0=
            function(counter,buf,lexbuf)
             {var _fr_=68;
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return ocaml_lex_read_string_rec$0(counter$0,buf,lexbuf,_fr_)}
              return caml_trampoline_return
                      (ocaml_lex_read_string_rec$0,[0,buf,lexbuf,_fr_])},
           ocaml_lex_read_string_rec$0=
            function(counter,buf,lexbuf,ocaml_lex_state)
             {var ocaml_lex_state$0=ocaml_lex_state;
              for(;;)
               {var
                 ocaml_lex_state$1=
                  caml_call3
                   (Stdlib_lexing[20],
                    ocaml_lex_tables,
                    ocaml_lex_state$0,
                    lexbuf);
                if(11 < ocaml_lex_state$1 >>> 0)
                 {caml_call1(lexbuf[1],lexbuf);
                  var ocaml_lex_state$0=ocaml_lex_state$1;
                  continue}
                switch(ocaml_lex_state$1)
                 {case 0:return [0,caml_call1(Stdlib_buffer[2],buf)];
                  case 1:
                   caml_call2(Stdlib_buffer[10],buf,47);
                   if(counter < 50)
                    {var counter$0=counter + 1 | 0;
                     return read_string$0(counter$0,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 2:
                   caml_call2(Stdlib_buffer[10],buf,92);
                   if(counter < 50)
                    {var counter$1=counter + 1 | 0;
                     return read_string$0(counter$1,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 3:
                   caml_call2(Stdlib_buffer[10],buf,8);
                   if(counter < 50)
                    {var counter$2=counter + 1 | 0;
                     return read_string$0(counter$2,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 4:
                   caml_call2(Stdlib_buffer[10],buf,12);
                   if(counter < 50)
                    {var counter$3=counter + 1 | 0;
                     return read_string$0(counter$3,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 5:
                   caml_call2(Stdlib_buffer[10],buf,10);
                   if(counter < 50)
                    {var counter$4=counter + 1 | 0;
                     return read_string$0(counter$4,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 6:
                   caml_call2(Stdlib_buffer[10],buf,13);
                   if(counter < 50)
                    {var counter$5=counter + 1 | 0;
                     return read_string$0(counter$5,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 7:
                   caml_call2(Stdlib_buffer[10],buf,9);
                   if(counter < 50)
                    {var counter$6=counter + 1 | 0;
                     return read_string$0(counter$6,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 8:
                   var _fp_=caml_call1(Stdlib_lexing[8],lexbuf);
                   caml_call2(Stdlib_buffer[14],buf,_fp_);
                   if(counter < 50)
                    {var counter$7=counter + 1 | 0;
                     return read_string$0(counter$7,buf,lexbuf)}
                   return caml_trampoline_return(read_string$0,[0,buf,lexbuf]);
                  case 9:throw [0,SyntaxError,cst_String_cannot_be_multiline];
                  case 10:throw [0,SyntaxError,cst_String_is_not_terminated];
                  default:
                   var _fq_=caml_call1(Stdlib_lexing[8],lexbuf);
                   throw [0,
                          SyntaxError,
                          caml_call2(Stdlib[28],cst_Illegal_string_character,_fq_)]}}},
           read_string=
            function(buf,lexbuf)
             {return caml_trampoline(read_string$0(0,buf,lexbuf))},
           ocaml_lex_read_string_rec=
            function(buf,lexbuf,ocaml_lex_state)
             {return caml_trampoline
                      (ocaml_lex_read_string_rec$0(0,buf,lexbuf,ocaml_lex_state))},
           read$0=
            function(counter,lexbuf)
             {var _fo_=0;
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return ocaml_lex_read_rec$0(counter$0,lexbuf,_fo_)}
              return caml_trampoline_return
                      (ocaml_lex_read_rec$0,[0,lexbuf,_fo_])},
           ocaml_lex_read_rec$0=
            function(counter,lexbuf,ocaml_lex_state)
             {var ocaml_lex_state$0=ocaml_lex_state;
              for(;;)
               {var
                 ocaml_lex_state$1=
                  caml_call3
                   (Stdlib_lexing[20],
                    ocaml_lex_tables,
                    ocaml_lex_state$0,
                    lexbuf);
                if(40 < ocaml_lex_state$1 >>> 0)
                 {caml_call1(lexbuf[1],lexbuf);
                  var ocaml_lex_state$0=ocaml_lex_state$1;
                  continue}
                switch(ocaml_lex_state$1)
                 {case 0:return 24;
                  case 1:return 18;
                  case 2:return 8;
                  case 3:return _cP_;
                  case 4:return _cQ_;
                  case 5:return 13;
                  case 6:return 2;
                  case 7:return 22;
                  case 8:return 10;
                  case 9:return 28;
                  case 10:return 29;
                  case 11:return read_comment(lexbuf);
                  case 12:
                   if(counter < 50)
                    {var counter$0=counter + 1 | 0;
                     return read$0(counter$0,lexbuf)}
                   return caml_trampoline_return(read$0,[0,lexbuf]);
                  case 13:
                   next_line(lexbuf);
                   if(counter < 50)
                    {var counter$1=counter + 1 | 0;
                     return read$0(counter$1,lexbuf)}
                   return caml_trampoline_return(read$0,[0,lexbuf]);
                  case 14:next_line(lexbuf);return 23;
                  case 15:
                   return [1,
                           uint32_of_str(caml_call1(Stdlib_lexing[8],lexbuf))];
                  case 16:return [2,caml_call1(Stdlib_lexing[8],lexbuf)];
                  case 17:
                   return read_string(caml_call1(Stdlib_buffer[1],17),lexbuf);
                  case 18:return 21;
                  case 19:return 19;
                  case 20:return 15;
                  case 21:return 4;
                  case 22:return 16;
                  case 23:return 5;
                  case 24:return 26;
                  case 25:return 20;
                  case 26:return 17;
                  case 27:return 27;
                  case 28:return 14;
                  case 29:return 3;
                  case 30:return 6;
                  case 31:return 12;
                  case 32:return 1;
                  case 33:return 25;
                  case 34:return 11;
                  case 35:return 30;
                  case 36:return 7;
                  case 37:return 0;
                  case 38:return 9;
                  case 39:eof_reached(lexbuf);return 24;
                  default:
                   var _fn_=caml_call1(Stdlib_lexing[8],lexbuf);
                   throw [0,
                          SyntaxError,
                          caml_call2(Stdlib[28],cst_Unexpected_char,_fn_)]}}},
           read=function(lexbuf){return caml_trampoline(read$0(0,lexbuf))},
           ocaml_lex_read_rec=
            function(lexbuf,ocaml_lex_state)
             {return caml_trampoline
                      (ocaml_lex_read_rec$0(0,lexbuf,ocaml_lex_state))},
           Lexer=
            [0,
             SyntaxError,
             next_line,
             eof_reached,
             ocaml_lex_tables,
             read,
             ocaml_lex_read_rec,
             read_string,
             ocaml_lex_read_string_rec,
             read_comment,
             ocaml_lex_read_comment_rec];
          caml_register_global(464,Lexer,"Lexer");
          var
           InvalidContent=[248,cst_Parse_InvalidContent,caml_fresh_oo_id(0)],
           print_position=
            function(fmt,pos)
             {return caml_call5
                      (Stdlib_format[125],
                       fmt,
                       _cR_,
                       pos[1],
                       pos[2],
                       (pos[4] - pos[3] | 0) + 1 | 0)},
           print_lexbuf_pos=
            function(fmt,lexbuf){return print_position(fmt,lexbuf[12])},
           parse_with_error=
            function(f,lexbuf)
             {try
               {var _fm_=caml_call1(f,lexbuf);return _fm_}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                if(exn[1] === SyntaxError)
                 {var msg=exn[2];
                  throw [0,
                         InvalidContent,
                         caml_call4
                          (Stdlib_format[129],_cS_,print_lexbuf_pos,lexbuf,msg)]}
                if(exn === eRR)
                 throw [0,
                        InvalidContent,
                        caml_call3(Stdlib_format[129],_cT_,print_lexbuf_pos,lexbuf)];
                throw exn}},
           from_lexbuf=
            function(headers$0,lexbuf)
             {var
               headers$1=
                headers$0
                 ?parse_with_error
                   (function(_fl_){return headers(read,_fl_)},lexbuf)
                 :0,
               ast$0=
                parse_with_error(function(_fk_){return ast(read,_fk_)},lexbuf);
              return [0,headers$1,ast$0]},
           from_filename=
            function(headers,filename)
             {var
               channel=caml_call1(Stdlib[79],filename),
               lexbuf=caml_call2(Stdlib_lexing[2],0,channel),
               _fj_=lexbuf[12];
              lexbuf[12] = [0,filename,_fj_[2],_fj_[3],_fj_[4]];
              var res=from_lexbuf(headers,lexbuf);
              caml_call1(Stdlib[93],channel);
              return res},
           from_str=
            function(headers,str)
             {return from_lexbuf(headers,caml_call2(Stdlib_lexing[3],0,str))},
           parsed_ast_to_arm=
            function(optimize,env,lst)
             {try
               {var
                 _fg_=to_arm(env,lst),
                 _fh_=optimize?tweak_arm:do_not_tweak_arm,
                 _fi_=_fh_(_fg_);
                return _fi_}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                if(exn[1] === CommandError)
                 {var pos=exn[2];
                  throw [0,
                         InvalidContent,
                         caml_call3(Stdlib_format[129],_cU_,print_position,pos)]}
                throw exn}},
           parsed_content_to_arm=
            function(fmt,optimize,env,param)
             {var
               lst=param[2],
               headers=param[1],
               env$0=concat_env(env,env_from_headers(fmt,headers));
              return parsed_ast_to_arm(optimize,env$0,lst)},
           Parse=
            [0,
             InvalidContent,
             from_lexbuf,
             from_str,
             from_filename,
             parsed_ast_to_arm,
             parsed_content_to_arm];
          caml_register_global(465,Parse,"Parse");
          var
           StrMap$0=caml_call1(Stdlib_map[1],[0,Stdlib_string[33]]),
           parse=
            function(lexbuf)
             {lexbuf[9] = 0;
              var main_file=from_lexbuf(1,lexbuf),acc=StrMap$0[1];
              for(;;)
               {if(lexbuf[9])return [0,main_file,acc];
                var
                 match=from_lexbuf(1,lexbuf),
                 arm=match[2],
                 headers=match[1],
                 match$0=get_param(headers,cst_filename);
                if(typeof match$0 === "number")
                 var fn=caml_call1(Stdlib[2],cst_Please_specify_the_filenam);
                else
                 if(0 === match$0[0])
                  var fn$0=match$0[1],fn=fn$0;
                 else
                  var fn=caml_call1(Stdlib[2],cst_Invalid_headers);
                var
                 acc$0=caml_call3(StrMap$0[4],fn,[0,headers,arm],acc),
                 acc=acc$0;
                continue}},
           from_filename$0=
            function(filename)
             {var
               channel=caml_call1(Stdlib[79],filename),
               lexbuf=caml_call2(Stdlib_lexing[2],0,channel),
               _ff_=lexbuf[12];
              lexbuf[12] = [0,filename,_ff_[2],_ff_[3],_ff_[4]];
              var res=parse(lexbuf);
              caml_call1(Stdlib[93],channel);
              return res},
           from_str$0=
            function(str){return parse(caml_call2(Stdlib_lexing[3],0,str))},
           main_file=function(param){var mf=param[1];return mf},
           get_file=
            function(name,param)
             {var files=param[2];return caml_call2(StrMap$0[28],name,files)},
           Fs=[0,from_str$0,from_filename$0,main_file,get_file];
          caml_register_global(466,Fs,"Fs");
          var
           load_from_dir=
            function(env,dirname)
             {try
               {var
                 _e6_=enumerate_files(dirname,cst_txt),
                 _e7_=
                  function(x)
                   {var
                     path=caml_call2(Stdlib_filename[4],dirname,x),
                     _fc_=caml_call1(Stdlib_filename[13],x),
                     str=caml_call1(Stdlib_filename[11],_fc_),
                     i=runtime.caml_int_of_string(str),
                     arm=
                      parsed_content_to_arm(dummy_fmt,0,env,from_filename(0,path));
                    function _fd_(arm)
                     {var _fe_=arm_to_binary(arm);
                      return preferred_code
                              (caml_call2(Stdlib_list[17],codes_for_command,_fe_))}
                    var codes=caml_call2(Stdlib_list[17],_fd_,arm);
                    return [0,i,codes]},
                 _e8_=caml_call2(Stdlib_list[17],_e7_,_e6_),
                 _e9_=
                  function(param,_fb_)
                   {var j=_fb_[1],i=param[1];
                    return runtime.caml_int_compare(i,j)},
                 _e__=caml_call2(Stdlib_list[53],_e9_,_e8_),
                 _e$_=function(x){return [0,x,0]}(_e__);
                return _e$_}
              catch(_fa_)
               {_fa_ = caml_wrap_exception(_fa_);
                if(_fa_ === CannotOptimize)
                 return caml_call1(Stdlib[2],cst_Exit_codes_cannot_be_tweak);
                throw _fa_}},
           load_from_parsed_file=
            function(fmt,env,param)
             {var
               arm=param[2],
               h=param[1],
               _e3_=parsed_content_to_arm(fmt,1,env,[0,h,arm]);
              function _e4_(arm)
               {var _e5_=arm_to_binary(arm);
                return preferred_code
                        (caml_call2(Stdlib_list[17],codes_for_command,_e5_))}
              var
               codes=caml_call2(Stdlib_list[17],_e4_,_e3_),
               match=get_param(h,cst_start);
              if(typeof match === "number")
               return [0,0,[0,codes]];
              else
               {if(1 === match[0])
                 {var i=match[1];
                  return [0,[0,[0,uint32_to_int(i),codes],0],0]}
                return caml_call1(Stdlib[2],cst_Exit_code_has_invalid_head)}},
           load_from_file=
            function(fmt,env,filename)
             {var
               match=from_filename(1,filename),
               ast=match[2],
               headers=match[1];
              return [0,
                      headers,
                      load_from_parsed_file(fmt,env,[0,headers,ast])]},
           NoExitCode=[248,cst_Exit_NoExitCode,caml_fresh_oo_id(0)],
           get_preferred=
            function(param,i)
             {var default$0=param[2],lst=param[1];
              try
               {var
                 aux=
                  function(lst)
                   {var lst$0=lst;
                    for(;;)
                     {if(lst$0)
                       {var match=lst$0[1],c=match[2],j=match[1];
                        if(runtime.caml_lessequal(i,j))return [0,j,c];
                        var lst$1=lst$0[2],lst$0=lst$1;
                        continue}
                      throw NoExitCode}},
                 _e1_=aux(lst);
                return _e1_}
              catch(_e2_)
               {_e2_ = caml_wrap_exception(_e2_);
                if(_e2_ === NoExitCode)
                 {if(default$0){var c=default$0[1];return [0,i,c]}
                  throw NoExitCode}
                throw _e2_}},
           Exit=
            [0,
             load_from_dir,
             load_from_file,
             load_from_parsed_file,
             NoExitCode,
             get_preferred];
          caml_register_global(467,Exit,"Exit");
          var
           string_of_uchar=
            function(uchar)
             {var buffer=caml_call1(Stdlib_buffer[1],4);
              caml_call2(Uutf[23][1],buffer,uchar);
              return caml_call1(Stdlib_buffer[2],buffer)},
           decompose_into_uchars=
            function(str)
             {var _eY_=0;
              function _eZ_(acc,param,uc)
               {if(852405675 <= uc[1]){var uc$0=uc[2];return [0,uc$0,acc]}
                throw Stdlib[8]}
              var _e0_=caml_call5(Uutf[22][2],0,0,_eZ_,_eY_,str);
              return caml_call1(Stdlib_list[9],_e0_)},
           main$1=
            function(fmt)
             {caml_call2(Stdlib_format[125],fmt,_cV_);
              var _eX_=caml_call2(Stdlib_format[125],fmt,_cW_);
              caml_call2(Stdlib_list[15],_eX_,acc);
              caml_call2(Stdlib_format[125],fmt,_cX_);
              return [0,main_1$1]},
           main_1$1=
            function(fmt,str)
             {function aux2(lst)
               {var lst$0=lst;
                for(;;)
                 {if(lst$0)
                   {var _eW_=lst$0[2];
                    if(_eW_)
                     {var lst$1=_eW_[2],b=_eW_[1],a=lst$0[1];
                      caml_call4(Stdlib_format[125],fmt,_cY_,b,a);
                      var lst$0=lst$1;
                      continue}
                    throw [0,Assert_failure,_cZ_]}
                  return 0}}
              function aux4(lst)
               {var lst$0=lst;
                for(;;)
                 {if(lst$0)
                   {var _eT_=lst$0[2];
                    if(_eT_)
                     {var _eU_=_eT_[2];
                      if(_eU_)
                       {var _eV_=_eU_[2];
                        if(_eV_)
                         {var lst$1=_eV_[2],d=_eV_[1],c=_eU_[1],b=_eT_[1],a=lst$0[1];
                          caml_call6(Stdlib_format[125],fmt,_c0_,d,c,b,a);
                          var lst$0=lst$1;
                          continue}}}
                    throw [0,Assert_failure,_c1_]}
                  return 0}}
              try
               {var
                 _eP_=decompose_into_uchars(str),
                 _eQ_=caml_call2(Stdlib_list[17],string_of_uchar,_eP_),
                 encoding=
                  caml_call2(Stdlib_list[17],encode_writable_char,_eQ_),
                 encoding$0=caml_call2(Stdlib[37],encoding,[0,eof,0]);
                caml_call2(Stdlib_format[125],fmt,_c3_);
                var _eR_=caml_call2(Stdlib_format[125],fmt,_c4_);
                caml_call2(Stdlib_list[15],_eR_,encoding$0);
                var
                 n=caml_call1(Stdlib_list[1],encoding$0),
                 encoding$1=
                  0 === (n % 2 | 0)
                   ?encoding$0
                   :caml_call2(Stdlib[37],encoding$0,_c9_);
                caml_call2(Stdlib_format[125],fmt,_c5_);
                aux2(encoding$1);
                var
                 n$0=caml_call1(Stdlib_list[1],encoding$1),
                 encoding$2=
                  0 === (n$0 % 4 | 0)
                   ?encoding$1
                   :caml_call2(Stdlib[37],encoding$1,_c8_);
                caml_call2(Stdlib_format[125],fmt,_c6_);
                aux4(encoding$2);
                caml_call2(Stdlib_format[125],fmt,_c7_)}
              catch(_eS_)
               {_eS_ = caml_wrap_exception(_eS_);
                if(_eS_ !== Stdlib[8])throw _eS_;
                caml_call2(Stdlib_format[125],fmt,_c2_)}
              return 0},
           Encoder_common=
            [0,string_of_uchar,decompose_into_uchars,main$1,main_1$1];
          caml_register_global(469,Encoder_common,"Encoder_common");
          var Constants=[0,33703148,100];
          caml_register_global(470,Constants,"Constants");
          var
           BoxFittingError=[248,cst_Boxes_BoxFittingError,caml_fresh_oo_id(0)],
           default_fillers=[0,_db_,_da_,_c$_,_c__],
           nb_boxes=14,
           no_eof=
            function(codes)
             {function _eO_(c){return c !== 255?1:0}
              return caml_call2(Stdlib_list[30],_eO_,codes)},
           pad_nb=
            function(fillers,pos$0,nb)
             {if(0 <= nb)
               {if(0 === nb)return 0;
                var pos=pos$0 % 9 | 0,n=caml_call1(Stdlib_list[1],nop_code);
                if((pos + n | 0) <= 8)
                 var code=nop_code;
                else
                 var
                  _eM_=8 - pos | 0,
                  code=caml_check_bound(fillers,_eM_)[1 + _eM_];
                var
                 m=caml_call1(Stdlib_list[1],code),
                 _eN_=pad_nb(fillers,pos$0 + m | 0,nb - m | 0);
                return caml_call2(Stdlib[37],code,_eN_)}
              return caml_call1(Stdlib[2],cst_Invalid_starting_position)},
           fit_code_at_pos=
            function(opt,fillers,pos,codes$9)
             {if(opt)var sth=opt[1],next=sth;else var next=_dd_;
              var pos$0=pos % 9 | 0,n$0=caml_call1(Stdlib_list[1],codes$9);
              if(no_eof(codes$9))
               var is_ok_here=(pos$0 + n$0 | 0) <= 8?1:0;
              else
               {var codes=codes$9;
                for(;;)
                 {if(codes)
                   {var c=codes[1],codes$0=codes[2];
                    if(c !== 255){var codes=codes$0;continue}
                    if(codes$0)
                     {var codes$1=codes$0[2],c$0=codes$0[1];
                      if(c$0 === 255)
                       {var codes$2=[0,c$0,codes$1],codes=codes$2;continue}}
                    var codes$3=codes[2],_eD_=no_eof(codes$3)}
                  else
                   var _eD_=1;
                  if(! _eD_)
                   throw [0,BoxFittingError,cst_Some_codes_cannot_be_posit];
                  var
                   n=caml_call1(Stdlib_list[1],codes$9),
                   codes$4=caml_call1(Stdlib_list[9],codes$9),
                   acc=0,
                   codes$5=codes$4;
                  for(;;)
                   {if(! codes$5)throw [0,Assert_failure,_dc_];
                    var c$1=codes$5[1];
                    if(c$1 !== 255)
                     {var
                       codes$6=codes$5[2],
                       acc$0=acc + 1 | 0,
                       acc=acc$0,
                       codes$5=codes$6;
                      continue}
                    var i=(n - 1 | 0) - acc | 0;
                    if(next)
                     {var next$0=next[1],acc$1=0,codes$7=next$0;
                      for(;;)
                       {if(codes$7)
                         {var codes$8=codes$7[2],c$2=codes$7[1];
                          if(c$2 === 255)
                           {var acc$2=acc$1 + 1 | 0,acc$1=acc$2,codes$7=codes$8;
                            continue}}
                        var j=acc$1;
                        break}}
                    else
                     var j=0;
                    var _eE_=(pos$0 + i | 0) === 8?1:0;
                    if(_eE_)
                     var _eF_=_eE_;
                    else
                     {var
                       _eG_=i === (n$0 - 1 | 0)?1:0,
                       _eH_=_eG_?((pos$0 + i | 0) + 1 | 0) === 8?1:0:_eG_;
                      if(_eH_)
                       var _eF_=_eH_;
                      else
                       {var
                         _eI_=i === (n$0 - 1 | 0)?1:0,
                         _eJ_=_eI_?((pos$0 + i | 0) + j | 0) === 8?1:0:_eI_;
                        if(_eJ_)
                         var _eF_=_eJ_;
                        else
                         {var _eK_=0 === next?1:0;
                          if(_eK_)
                           var
                            _eL_=i === (n$0 - 1 | 0)?1:0,
                            _eF_=_eL_?(pos$0 + i | 0) <= 8?1:0:_eL_;
                          else
                           var _eF_=_eK_}}}
                    var is_ok_here=_eF_;
                    break}
                  break}}
              if(is_ok_here)return codes$9;
              if((pos$0 + n$0 | 0) <= 8)
               var nop_code$0=nop_code;
              else
               var
                _eC_=8 - pos$0 | 0,
                nop_code$0=caml_check_bound(fillers,_eC_)[1 + _eC_];
              var
               m=caml_call1(Stdlib_list[1],nop_code$0),
               _eB_=fit_code_at_pos([0,next],fillers,pos$0 + m | 0,codes$9);
              return caml_call2(Stdlib[37],nop_code$0,_eB_)},
           add_codes_after=
            function(opt,fillers,res,codes)
             {if(opt)var sth=opt[1],final$0=sth;else var final$0=0;
              var acc=res,codes$0=codes;
              for(;;)
               {if(codes$0)
                 {var _ey_=codes$0[2],_ez_=codes$0[1];
                  if(_ey_)
                   {var
                     codes$1=_ey_[2],
                     c2=_ey_[1],
                     nc=
                      fit_code_at_pos
                       ([0,[0,c2]],fillers,caml_call1(Stdlib_list[1],acc),_ez_),
                     codes$2=[0,c2,codes$1],
                     acc$0=caml_call2(Stdlib[37],acc,nc),
                     acc=acc$0,
                     codes$0=codes$2;
                    continue}
                  var
                   next=final$0?0:_de_,
                   _eA_=
                    fit_code_at_pos
                     ([0,next],fillers,caml_call1(Stdlib_list[1],acc),_ez_);
                  return caml_call2(Stdlib[37],acc,_eA_)}
                return acc}},
           split_raw_into_boxes=
            function(opt,raw)
             {if(opt)var sth=opt[1],fill_last=sth;else var fill_last=0;
              var finished=0,current=0,codes=raw,i=0;
              for(;;)
               {if(codes)
                 {var c=codes[1],codes$0=codes[2];
                  if(i === 8)
                   {if(c !== 255)
                     throw [0,BoxFittingError,cst_Result_is_inconsistent_Ple];
                    var
                     finished$0=[0,current,finished],
                     finished=finished$0,
                     current=0,
                     codes=codes$0,
                     i=0;
                    continue}
                  if(c === 255)
                   {var i$0=i + 1 | 0,codes=codes$0,i=i$0;continue}
                  var codes$1=codes[2];
                  if(caml_call1(Stdlib_list[1],current) !== i)
                   throw [0,BoxFittingError,cst_Result_is_inconsistent_Ple$0];
                  var
                   i$1=i + 1 | 0,
                   current$0=[0,c,current],
                   current=current$0,
                   codes=codes$1,
                   i=i$1;
                  continue}
                if(0 === i)
                 var _ew_=finished;
                else
                 {var n=caml_call1(Stdlib_list[1],current),switch$0=0;
                  if(fill_last && n === i)
                   {var
                     _eu_=function(param){return space},
                     _ev_=caml_call2(Stdlib_list[10],8 - n | 0,_eu_),
                     current$1=caml_call2(Stdlib[37],_ev_,current);
                    switch$0 = 1}
                  if(! switch$0)var current$1=current;
                  var _ew_=[0,current$1,finished]}
                var _ex_=caml_call2(Stdlib_list[17],Stdlib_list[9],_ew_);
                return caml_call1(Stdlib_list[9],_ex_)}},
           fit_codes_into_boxes=
            function(opt,_eq_,_ep_,_eo_,codes)
             {if(opt)var sth=opt[1],fill_last=sth;else var fill_last=1;
              if(_eq_)
               var sth$0=_eq_[1],fillers=sth$0;
              else
               var fillers=default_fillers;
              if(_ep_)var sth$1=_ep_[1],start=sth$1;else var start=0;
              if(_eo_)var sth$2=_eo_[1],exit=sth$2;else var exit=0;
              var
               padding=pad_nb(fillers,0,start),
               res=add_codes_after([0,0 === exit?1:0],fillers,padding,codes);
              if(exit)
               var
                exit$0=exit[1],
                i=caml_call1(Stdlib_list[1],res),
                match=get_preferred(exit$0,i),
                ecode=match[2],
                j=match[1],
                padding$0=pad_nb(fillers,i,j - i | 0),
                res$0=caml_call2(Stdlib[37],res,padding$0),
                res$1=add_codes_after(_df_,fillers,res$0,ecode);
              else
               var res$1=res;
              var res$2=split_raw_into_boxes([0,fill_last],res$1);
              function _er_(i,lst)
               {if(is_full_of_spaces(lst))
                 {var
                   y=caml_call1(Stdlib_list[1],nop_code2),
                   x=(- i | 0) * 9 | 0,
                   result=caml_mod(x,y),
                   pos=0 <= result?result:result + y | 0,
                   _es_=function(param){return space},
                   prefix=caml_call2(Stdlib_list[10],pos,_es_),
                   suffix_len=
                    (caml_call1(Stdlib_list[1],lst) - pos | 0)
                    -
                    y
                    |
                    0;
                  if(0 <= suffix_len)
                   {var
                     _et_=function(param){return space},
                     suffix=caml_call2(Stdlib_list[10],suffix_len,_et_);
                    return caml_call1
                            (Stdlib_list[13],[0,prefix,[0,nop_code2,[0,suffix,0]]])}
                  return lst}
                return lst}
              return caml_call2(Stdlib_list[18],_er_,res$2)},
           pp_boxes_names=
            function(fmt,lst)
             {function pp_box(i,codes)
               {var chars=codes_to_chars(codes);
                return caml_call7
                        (Stdlib_format[125],
                         fmt,
                         _dg_,
                         i + 1 | 0,
                         pp_chars,
                         chars,
                         pp_chars_raw,
                         chars)}
              return caml_call2(Stdlib_list[16],pp_box,lst)},
           pp_box_raw=
            function(fmt,lst)
             {function _ek_(param){return eof}
              var
               _el_=9 - caml_call1(Stdlib_list[1],lst) | 0,
               pad=caml_call2(Stdlib_list[10],_el_,_ek_),
               _em_=caml_call2(Stdlib[37],lst,pad),
               _en_=caml_call2(Stdlib_format[125],fmt,_dh_);
              return caml_call2(Stdlib_list[15],_en_,_em_)},
           Boxes=
            [0,
             BoxFittingError,
             default_fillers,
             fit_codes_into_boxes,
             split_raw_into_boxes,
             pp_boxes_names,
             pp_box_raw,
             nb_boxes];
          caml_register_global(471,Boxes,"Boxes");
          var
           pp_hex=
            function(fmt,i){return caml_call3(Stdlib_format[125],fmt,_di_,i)},
           cond_to_str=
            function(c)
             {switch(c)
               {case 0:return cst_EQ$0;
                case 1:return cst_NE$0;
                case 2:return cst_CS$0;
                case 3:return cst_HS$0;
                case 4:return cst_CC$0;
                case 5:return cst_LO$0;
                case 6:return cst_MI$0;
                case 7:return cst_PL$0;
                case 8:return cst_VS$0;
                case 9:return cst_VC$0;
                case 10:return cst_HI$0;
                case 11:return cst_LS$0;
                case 12:return cst_GE$0;
                case 13:return cst_LT$0;
                case 14:return cst_GT$0;
                case 15:return cst_LE$0;
                default:return cst$3}},
           ldr_str_type_to_str=
            function(t)
             {switch(t)
               {case 0:return cst_B$1;
                case 1:return cst_SB$0;
                case 2:return cst_H$0;
                case 3:return cst_SH$0;
                case 4:return cst$4;
                case 5:return cst_T$0;
                default:return cst_BT$0}},
           sign_to_str=function(sign){return sign === 0?cst$5:cst$6},
           s_to_str=function(s){return s?cst_S$1:cst$7},
           print_register=
            function(fmt,r){return caml_call3(Stdlib_format[125],fmt,_dj_,r)},
           print_immediate=
            function(fmt,i){return caml_call3(Stdlib_format[125],fmt,_dk_,i)},
           print_operand=
            function(fmt,op)
             {switch(op[0])
               {case 0:var i=op[1];return print_immediate(fmt,i);
                case 1:
                 var r=op[1];
                 return caml_call4
                         (Stdlib_format[125],fmt,_dl_,print_register,r);
                default:return caml_call1(Stdlib[2],cst_Not_implemented$3)}},
           print_immediate_offset=
            function(fmt,param)
             {var i=param[2],s=param[1],_ej_=sign_to_str(s);
              return caml_call4(Stdlib_format[125],fmt,_dm_,_ej_,i)},
           print_register_offset=
            function(fmt,param)
             {var
               addr_typ=param[2],
               ro=param[1],
               str=1 === addr_typ?cst$9:cst$10;
              switch(ro[0])
               {case 0:
                 var _ef_=ro[1];
                 if(2 <= addr_typ)
                  {var i=ro[3],s=ro[2];
                   return caml_call6
                           (Stdlib_format[125],
                            fmt,
                            _dn_,
                            print_register,
                            _ef_,
                            print_immediate_offset,
                            [0,s,i])}
                 var i$0=ro[3],s$0=ro[2];
                 return caml_call7
                         (Stdlib_format[125],
                          fmt,
                          _do_,
                          print_register,
                          _ef_,
                          print_immediate_offset,
                          [0,s$0,i$0],
                          str);
                case 1:
                 var _eg_=ro[1];
                 if(2 <= addr_typ)
                  {var ro$0=ro[3],s$1=ro[2],_eh_=sign_to_str(s$1);
                   return caml_call7
                           (Stdlib_format[125],
                            fmt,
                            _dp_,
                            print_register,
                            _eg_,
                            _eh_,
                            print_register,
                            ro$0)}
                 var ro$1=ro[3],s$2=ro[2],_ei_=sign_to_str(s$2);
                 return caml_call8
                         (Stdlib_format[125],
                          fmt,
                          _dq_,
                          print_register,
                          _eg_,
                          _ei_,
                          print_register,
                          ro$1,
                          str);
                default:return caml_call1(Stdlib[2],cst_Not_implemented$4)}},
           pp_arm=
            function(fmt,arm)
             {switch(arm[0])
               {case 0:var i=arm[1];return pp_hex(fmt,i);
                case 1:
                 var
                  ro=arm[4],
                  rd=arm[3],
                  cond=arm[2],
                  typ=arm[1],
                  _dZ_=ldr_str_type_to_str(typ),
                  _d0_=cond_to_str(cond);
                 return caml_call8
                         (Stdlib_format[125],
                          fmt,
                          _dr_,
                          _d0_,
                          _dZ_,
                          print_register,
                          rd,
                          print_register_offset,
                          ro);
                case 2:
                 var
                  ro$0=arm[4],
                  rd$0=arm[3],
                  cond$0=arm[2],
                  typ$0=arm[1],
                  _d1_=ldr_str_type_to_str(typ$0),
                  _d2_=cond_to_str(cond$0);
                 return caml_call8
                         (Stdlib_format[125],
                          fmt,
                          _ds_,
                          _d2_,
                          _d1_,
                          print_register,
                          rd$0,
                          print_register_offset,
                          ro$0);
                case 3:
                 var
                  rs=arm[4],
                  rd$1=arm[3],
                  cond$1=arm[2],
                  s=arm[1],
                  _d3_=s_to_str(s),
                  _d4_=cond_to_str(cond$1);
                 return caml_call8
                         (Stdlib_format[125],
                          fmt,
                          _dt_,
                          _d4_,
                          _d3_,
                          print_register,
                          rd$1,
                          print_operand,
                          rs);
                case 4:
                 var
                  rs$0=arm[4],
                  rd$2=arm[3],
                  cond$2=arm[2],
                  s$0=arm[1],
                  _d5_=s_to_str(s$0),
                  _d6_=cond_to_str(cond$2);
                 return caml_call8
                         (Stdlib_format[125],
                          fmt,
                          _du_,
                          _d6_,
                          _d5_,
                          print_register,
                          rd$2,
                          print_operand,
                          rs$0);
                case 5:
                 var
                  op2=arm[5],
                  rn=arm[4],
                  rd$3=arm[3],
                  cond$3=arm[2],
                  s$1=arm[1],
                  _d7_=s_to_str(s$1),
                  _d8_=cond_to_str(cond$3);
                 return caml_call10
                         (Stdlib_format[125],
                          fmt,
                          _dv_,
                          _d8_,
                          _d7_,
                          print_register,
                          rd$3,
                          print_register,
                          rn,
                          print_operand,
                          op2);
                case 6:
                 var
                  op2$0=arm[5],
                  rn$0=arm[4],
                  rd$4=arm[3],
                  cond$4=arm[2],
                  s$2=arm[1],
                  _d9_=s_to_str(s$2),
                  _d__=cond_to_str(cond$4);
                 return caml_call10
                         (Stdlib_format[125],
                          fmt,
                          _dw_,
                          _d__,
                          _d9_,
                          print_register,
                          rd$4,
                          print_register,
                          rn$0,
                          print_operand,
                          op2$0);
                case 7:
                 var
                  op2$1=arm[5],
                  rn$1=arm[4],
                  rd$5=arm[3],
                  cond$5=arm[2],
                  s$3=arm[1],
                  _d$_=s_to_str(s$3),
                  _ea_=cond_to_str(cond$5);
                 return caml_call10
                         (Stdlib_format[125],
                          fmt,
                          _dx_,
                          _ea_,
                          _d$_,
                          print_register,
                          rd$5,
                          print_register,
                          rn$1,
                          print_operand,
                          op2$1);
                case 8:
                 var
                  op2$2=arm[5],
                  rn$2=arm[4],
                  rd$6=arm[3],
                  cond$6=arm[2],
                  s$4=arm[1],
                  _eb_=s_to_str(s$4),
                  _ec_=cond_to_str(cond$6);
                 return caml_call10
                         (Stdlib_format[125],
                          fmt,
                          _dy_,
                          _ec_,
                          _eb_,
                          print_register,
                          rd$6,
                          print_register,
                          rn$2,
                          print_operand,
                          op2$2);
                default:
                 var
                  target=arm[3],
                  cond$7=arm[2],
                  l=arm[1],
                  _ed_=cond_to_str(cond$7),
                  _ee_=l?cst_L$1:cst$8;
                 return caml_call6
                         (Stdlib_format[125],
                          fmt,
                          _dz_,
                          _ee_,
                          _ed_,
                          print_immediate,
                          target)}},
           Arm_printer=[0,pp_arm,pp_hex];
          caml_register_global(472,Arm_printer,"Arm_printer");
          var
           treat_command=
            function(fmt,arm)
             {var
               hexs=arm_to_binary(arm),
               codes=caml_call2(Stdlib_list[17],codes_for_command,hexs),
               code=preferred_code(codes),
               hex=command_for_codes(code),
               chars=codes_to_chars(code);
              caml_call8
               (Stdlib_format[125],
                fmt,
                _dA_,
                pp_chars,
                chars,
                pp_hex,
                hex,
                pp_arm,
                arm);
              return code},
           main$2=
            function(fmt,env,param,parsed,exit)
             {var
               headers2=param[2],
               headers=param[1],
               match=get_param(headers,cst_onlyraw);
              if(typeof match === "number")
               var onlyraw=0;
              else
               if(2 === match[0])
                var b$0=match[1],onlyraw=b$0;
               else
                var onlyraw=caml_call1(Stdlib[2],cst_Invalid_headers$3);
              var _dN_=onlyraw?0 !== exit?1:0:onlyraw;
              if(_dN_)caml_call1(Stdlib[2],cst_Only_raw_mode_does_not_sup);
              var match$0=get_param(headers,cst_start$0);
              if(typeof match$0 === "number")
               var start=0;
              else
               if(1 === match$0[0])
                var i=match$0[1],start=uint32_to_int(i);
               else
                var start=caml_call1(Stdlib[2],cst_Invalid_headers$2);
              function _dO_(n)
               {var
                 header_name=caml_call2(Stdlib_format[128],_dB_,n + 1 | 0),
                 match=get_param(headers,header_name);
                if(typeof match === "number")
                 return caml_check_bound(default_fillers,n)[1 + n];
                else
                 {if(1 === match[0])
                   {var i=match[1],codes=codes_for_command(i);
                    if(caml_call2(Stdlib_list[7],codes,n) !== 255)
                     caml_call1(Stdlib[2],cst_Invalid_filler);
                    return codes}
                  return caml_call1(Stdlib[2],cst_Invalid_headers$0)}}
              var
               fillers=caml_call2(Stdlib_array[2],4,_dO_),
               match$1=get_param(headers,cst_fill),
               match$2=get_param(headers2,cst_fill$0),
               switch$0=0;
              if(typeof match$1 === "number")
               if(typeof match$2 === "number")
                var fill_last=1;
               else
                if(2 === match$2[0])
                 {var b=match$2[1];switch$0 = 2}
                else
                 switch$0 = 1;
              else
               if(2 === match$1[0])
                {var _dW_=match$1[1];
                 if(typeof match$2 === "number")
                  {var b=_dW_;switch$0 = 2}
                 else
                  if(2 === match$2[0])
                   var
                    b2=match$2[1],
                    b1=
                     _dW_ === b2
                      ?_dW_
                      :caml_call1(Stdlib[2],cst_The_fill_header_has_a_diff),
                    fill_last=b1;
                  else
                   switch$0 = 1}
               else
                switch$0 = 1;
              switch(switch$0)
               {case 1:
                 var fill_last=caml_call1(Stdlib[2],cst_Invalid_headers$1);
                 break;
                case 2:var fill_last=b;break
                }
              var _dP_=parsed_ast_to_arm(1,env,parsed);
              function _dQ_(_dY_){return treat_command(fmt,_dY_)}
              var res=caml_call2(Stdlib_list[17],_dQ_,_dP_);
              if(onlyraw)
               {var
                 _dR_=function(param){return 0},
                 start$0=caml_call2(Stdlib_list[10],start,_dR_),
                 res$0=caml_call1(Stdlib_list[13],[0,start$0,res]);
                caml_call2(Stdlib_format[125],fmt,_dC_);
                var _dS_=caml_call2(Stdlib_format[125],fmt,_dD_);
                caml_call2(Stdlib_list[15],_dS_,res$0);
                return caml_call2(Stdlib_format[125],fmt,_dE_)}
              try
               {var
                 boxes_codes=
                  fit_codes_into_boxes
                   ([0,fill_last],[0,fillers],[0,start],[0,exit],res);
                caml_call4
                 (Stdlib_format[125],fmt,_dG_,pp_boxes_names,boxes_codes);
                var size=caml_call1(Stdlib_list[1],boxes_codes);
                if(14 < size)
                 caml_call4(Stdlib_format[125],fmt,_dH_,size,nb_boxes);
                var _dT_=function(c){return 1 - is_code_writable(c)};
                if(caml_call2(Stdlib_list[31],_dT_,boxes_codes))
                 caml_call2(Stdlib_format[125],fmt,_dI_);
                else
                 if(caml_call2(Stdlib_list[31],is_full_of_spaces,boxes_codes))
                  caml_call2(Stdlib_format[125],fmt,_dM_);
                caml_call2(Stdlib_format[125],fmt,_dJ_);
                var _dU_=caml_call3(Stdlib_format[125],fmt,_dK_,pp_box_raw);
                caml_call2(Stdlib_list[15],_dU_,boxes_codes);
                var _dV_=caml_call2(Stdlib_format[125],fmt,_dL_);
                return _dV_}
              catch(_dX_)
               {_dX_ = caml_wrap_exception(_dX_);
                if(_dX_ === NoExitCode)
                 return caml_call2(Stdlib_format[125],fmt,_dF_);
                throw _dX_}},
           Ace_common=[0,treat_command,main$2];
          caml_register_global(473,Ace_common,"Ace_common");
          return}
        var
         i$3=caml_call1(Stdlib_int32[6],i$2),
         acc$2=[0,i$2,acc$1],
         acc$1=acc$2,
         i$2=i$3;
        continue}}}
  (function(){return this}()));


//# 1 ".js/js_of_ocaml/js_of_ocaml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_exn_with_js_backtrace=runtime.caml_exn_with_js_backtrace,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_get=runtime.caml_js_get,
     caml_js_html_escape=runtime.caml_js_html_escape,
     caml_js_set=runtime.caml_js_set,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsbytes_of_string=runtime.caml_jsbytes_of_string,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_array=runtime.caml_string_of_array,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseFloat=caml_string_of_jsbytes("parseFloat"),
     cst_parseInt=caml_string_of_jsbytes("parseInt"),
     cst_Js_of_ocaml_Js_Error=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     cst_jsError=caml_string_of_jsbytes("jsError"),
     cst_can_t_retrieve_file_name_n=
      caml_string_of_jsbytes("can't retrieve file name: not implemented"),
     cst_endings=caml_string_of_jsbytes("endings"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_loadstart=caml_string_of_jsbytes("loadstart"),
     cst_progress=caml_string_of_jsbytes("progress"),
     cst_abort=caml_string_of_jsbytes("abort"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_load=caml_string_of_jsbytes("load"),
     cst_loadend=caml_string_of_jsbytes("loadend"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_area$1=caml_string_of_jsbytes("area"),
     cst_audio$1=caml_string_of_jsbytes("audio"),
     cst_base$1=caml_string_of_jsbytes("base"),
     cst_blockquote$1=caml_string_of_jsbytes("blockquote"),
     cst_body$1=caml_string_of_jsbytes("body"),
     cst_br$1=caml_string_of_jsbytes("br"),
     cst_button$1=caml_string_of_jsbytes("button"),
     cst_canvas$1=caml_string_of_jsbytes("canvas"),
     cst_caption$1=caml_string_of_jsbytes("caption"),
     cst_col$1=caml_string_of_jsbytes("col"),
     cst_colgroup$1=caml_string_of_jsbytes("colgroup"),
     cst_del$1=caml_string_of_jsbytes("del"),
     cst_div$1=caml_string_of_jsbytes("div"),
     cst_dl$1=caml_string_of_jsbytes("dl"),
     cst_embed$1=caml_string_of_jsbytes("embed"),
     cst_fieldset$1=caml_string_of_jsbytes("fieldset"),
     cst_form$1=caml_string_of_jsbytes("form"),
     cst_frame$1=caml_string_of_jsbytes("frame"),
     cst_frameset$1=caml_string_of_jsbytes("frameset"),
     cst_h1$1=caml_string_of_jsbytes("h1"),
     cst_h2$1=caml_string_of_jsbytes("h2"),
     cst_h3$1=caml_string_of_jsbytes("h3"),
     cst_h4$1=caml_string_of_jsbytes("h4"),
     cst_h5$1=caml_string_of_jsbytes("h5"),
     cst_h6$1=caml_string_of_jsbytes("h6"),
     cst_head$1=caml_string_of_jsbytes("head"),
     cst_hr$1=caml_string_of_jsbytes("hr"),
     cst_html$1=caml_string_of_jsbytes("html"),
     cst_iframe$1=caml_string_of_jsbytes("iframe"),
     cst_img$1=caml_string_of_jsbytes("img"),
     cst_input$2=caml_string_of_jsbytes("input"),
     cst_ins$1=caml_string_of_jsbytes("ins"),
     cst_label$1=caml_string_of_jsbytes("label"),
     cst_legend$1=caml_string_of_jsbytes("legend"),
     cst_li$1=caml_string_of_jsbytes("li"),
     cst_link$1=caml_string_of_jsbytes("link"),
     cst_map$1=caml_string_of_jsbytes("map"),
     cst_meta$1=caml_string_of_jsbytes("meta"),
     cst_object$1=caml_string_of_jsbytes("object"),
     cst_ol$1=caml_string_of_jsbytes("ol"),
     cst_optgroup$1=caml_string_of_jsbytes("optgroup"),
     cst_option$1=caml_string_of_jsbytes("option"),
     cst_p$1=caml_string_of_jsbytes("p"),
     cst_param$1=caml_string_of_jsbytes("param"),
     cst_pre$1=caml_string_of_jsbytes("pre"),
     cst_q$1=caml_string_of_jsbytes("q"),
     cst_script$1=caml_string_of_jsbytes("script"),
     cst_select$2=caml_string_of_jsbytes("select"),
     cst_style$1=caml_string_of_jsbytes("style"),
     cst_table$1=caml_string_of_jsbytes("table"),
     cst_tbody$1=caml_string_of_jsbytes("tbody"),
     cst_td$1=caml_string_of_jsbytes("td"),
     cst_textarea$1=caml_string_of_jsbytes("textarea"),
     cst_tfoot$1=caml_string_of_jsbytes("tfoot"),
     cst_th$1=caml_string_of_jsbytes("th"),
     cst_thead$1=caml_string_of_jsbytes("thead"),
     cst_title$1=caml_string_of_jsbytes("title"),
     cst_tr$1=caml_string_of_jsbytes("tr"),
     cst_ul$1=caml_string_of_jsbytes("ul"),
     cst_video$1=caml_string_of_jsbytes("video"),
     cst_KeyH=caml_string_of_jsbytes("KeyH"),
     cst_Digit6=caml_string_of_jsbytes("Digit6"),
     cst_BrowserRefresh=caml_string_of_jsbytes("BrowserRefresh"),
     cst_Backslash=caml_string_of_jsbytes("Backslash"),
     cst_AltLeft=caml_string_of_jsbytes("AltLeft"),
     cst_AltRight=caml_string_of_jsbytes("AltRight"),
     cst_ArrowDown=caml_string_of_jsbytes("ArrowDown"),
     cst_ArrowLeft=caml_string_of_jsbytes("ArrowLeft"),
     cst_ArrowRight=caml_string_of_jsbytes("ArrowRight"),
     cst_ArrowUp=caml_string_of_jsbytes("ArrowUp"),
     cst_Backquote=caml_string_of_jsbytes("Backquote"),
     cst_Backspace=caml_string_of_jsbytes("Backspace"),
     cst_BracketLeft=caml_string_of_jsbytes("BracketLeft"),
     cst_BracketRight=caml_string_of_jsbytes("BracketRight"),
     cst_BrowserBack=caml_string_of_jsbytes("BrowserBack"),
     cst_BrowserFavorites=caml_string_of_jsbytes("BrowserFavorites"),
     cst_BrowserForward=caml_string_of_jsbytes("BrowserForward"),
     cst_BrowserHome=caml_string_of_jsbytes("BrowserHome"),
     cst_Delete=caml_string_of_jsbytes("Delete"),
     cst_BrowserSearch=caml_string_of_jsbytes("BrowserSearch"),
     cst_BrowserStop=caml_string_of_jsbytes("BrowserStop"),
     cst_CapsLock=caml_string_of_jsbytes("CapsLock"),
     cst_Comma=caml_string_of_jsbytes("Comma"),
     cst_ContextMenu=caml_string_of_jsbytes("ContextMenu"),
     cst_ControlLeft=caml_string_of_jsbytes("ControlLeft"),
     cst_ControlRight=caml_string_of_jsbytes("ControlRight"),
     cst_Digit0=caml_string_of_jsbytes("Digit0"),
     cst_Digit1=caml_string_of_jsbytes("Digit1"),
     cst_Digit2=caml_string_of_jsbytes("Digit2"),
     cst_Digit3=caml_string_of_jsbytes("Digit3"),
     cst_Digit4=caml_string_of_jsbytes("Digit4"),
     cst_Digit5=caml_string_of_jsbytes("Digit5"),
     cst_F6=caml_string_of_jsbytes("F6"),
     cst_F1=caml_string_of_jsbytes("F1"),
     cst_Digit7=caml_string_of_jsbytes("Digit7"),
     cst_Digit8=caml_string_of_jsbytes("Digit8"),
     cst_Digit9=caml_string_of_jsbytes("Digit9"),
     cst_End=caml_string_of_jsbytes("End"),
     cst_Enter=caml_string_of_jsbytes("Enter"),
     cst_Equal=caml_string_of_jsbytes("Equal"),
     cst_Escape=caml_string_of_jsbytes("Escape"),
     cst_F10=caml_string_of_jsbytes("F10"),
     cst_F11=caml_string_of_jsbytes("F11"),
     cst_F12=caml_string_of_jsbytes("F12"),
     cst_F2=caml_string_of_jsbytes("F2"),
     cst_F3=caml_string_of_jsbytes("F3"),
     cst_F4=caml_string_of_jsbytes("F4"),
     cst_F5=caml_string_of_jsbytes("F5"),
     cst_KeyA=caml_string_of_jsbytes("KeyA"),
     cst_F7=caml_string_of_jsbytes("F7"),
     cst_F8=caml_string_of_jsbytes("F8"),
     cst_F9=caml_string_of_jsbytes("F9"),
     cst_Home=caml_string_of_jsbytes("Home"),
     cst_Insert=caml_string_of_jsbytes("Insert"),
     cst_IntlBackslash=caml_string_of_jsbytes("IntlBackslash"),
     cst_IntlYen=caml_string_of_jsbytes("IntlYen"),
     cst_KeyB=caml_string_of_jsbytes("KeyB"),
     cst_KeyC=caml_string_of_jsbytes("KeyC"),
     cst_KeyD=caml_string_of_jsbytes("KeyD"),
     cst_KeyE=caml_string_of_jsbytes("KeyE"),
     cst_KeyF=caml_string_of_jsbytes("KeyF"),
     cst_KeyG=caml_string_of_jsbytes("KeyG"),
     cst_Numpad4=caml_string_of_jsbytes("Numpad4"),
     cst_KeyX=caml_string_of_jsbytes("KeyX"),
     cst_KeyP=caml_string_of_jsbytes("KeyP"),
     cst_KeyI=caml_string_of_jsbytes("KeyI"),
     cst_KeyJ=caml_string_of_jsbytes("KeyJ"),
     cst_KeyK=caml_string_of_jsbytes("KeyK"),
     cst_KeyL=caml_string_of_jsbytes("KeyL"),
     cst_KeyM=caml_string_of_jsbytes("KeyM"),
     cst_KeyN=caml_string_of_jsbytes("KeyN"),
     cst_KeyO=caml_string_of_jsbytes("KeyO"),
     cst_KeyQ=caml_string_of_jsbytes("KeyQ"),
     cst_KeyR=caml_string_of_jsbytes("KeyR"),
     cst_KeyS=caml_string_of_jsbytes("KeyS"),
     cst_KeyT=caml_string_of_jsbytes("KeyT"),
     cst_KeyU=caml_string_of_jsbytes("KeyU"),
     cst_KeyV=caml_string_of_jsbytes("KeyV"),
     cst_KeyW=caml_string_of_jsbytes("KeyW"),
     cst_MetaRight=caml_string_of_jsbytes("MetaRight"),
     cst_KeyY=caml_string_of_jsbytes("KeyY"),
     cst_KeyZ=caml_string_of_jsbytes("KeyZ"),
     cst_MediaPlayPause=caml_string_of_jsbytes("MediaPlayPause"),
     cst_MediaStop=caml_string_of_jsbytes("MediaStop"),
     cst_MediaTrackNext=caml_string_of_jsbytes("MediaTrackNext"),
     cst_MediaTrackPrevious=caml_string_of_jsbytes("MediaTrackPrevious"),
     cst_MetaLeft=caml_string_of_jsbytes("MetaLeft"),
     cst_Minus=caml_string_of_jsbytes("Minus"),
     cst_NumLock=caml_string_of_jsbytes("NumLock"),
     cst_Numpad0=caml_string_of_jsbytes("Numpad0"),
     cst_Numpad1=caml_string_of_jsbytes("Numpad1"),
     cst_Numpad2=caml_string_of_jsbytes("Numpad2"),
     cst_Numpad3=caml_string_of_jsbytes("Numpad3"),
     cst_PageUp=caml_string_of_jsbytes("PageUp"),
     cst_NumpadDivide=caml_string_of_jsbytes("NumpadDivide"),
     cst_Numpad5=caml_string_of_jsbytes("Numpad5"),
     cst_Numpad6=caml_string_of_jsbytes("Numpad6"),
     cst_Numpad7=caml_string_of_jsbytes("Numpad7"),
     cst_Numpad8=caml_string_of_jsbytes("Numpad8"),
     cst_Numpad9=caml_string_of_jsbytes("Numpad9"),
     cst_NumpadAdd=caml_string_of_jsbytes("NumpadAdd"),
     cst_NumpadDecimal=caml_string_of_jsbytes("NumpadDecimal"),
     cst_NumpadEnter=caml_string_of_jsbytes("NumpadEnter"),
     cst_NumpadEqual=caml_string_of_jsbytes("NumpadEqual"),
     cst_NumpadMultiply=caml_string_of_jsbytes("NumpadMultiply"),
     cst_NumpadSubtract=caml_string_of_jsbytes("NumpadSubtract"),
     cst_OSLeft=caml_string_of_jsbytes("OSLeft"),
     cst_OSRight=caml_string_of_jsbytes("OSRight"),
     cst_PageDown=caml_string_of_jsbytes("PageDown"),
     cst_ShiftRight=caml_string_of_jsbytes("ShiftRight"),
     cst_Pause=caml_string_of_jsbytes("Pause"),
     cst_Period=caml_string_of_jsbytes("Period"),
     cst_PrintScreen=caml_string_of_jsbytes("PrintScreen"),
     cst_Quote=caml_string_of_jsbytes("Quote"),
     cst_ScrollLock=caml_string_of_jsbytes("ScrollLock"),
     cst_Semicolon=caml_string_of_jsbytes("Semicolon"),
     cst_ShiftLeft=caml_string_of_jsbytes("ShiftLeft"),
     cst_Slash=caml_string_of_jsbytes("Slash"),
     cst_Space=caml_string_of_jsbytes("Space"),
     cst_Tab=caml_string_of_jsbytes("Tab"),
     cst_VolumeDown=caml_string_of_jsbytes("VolumeDown"),
     cst_VolumeMute=caml_string_of_jsbytes("VolumeMute"),
     cst_VolumeUp=caml_string_of_jsbytes("VolumeUp"),
     cst_mouseout$0=caml_string_of_jsbytes("mouseout"),
     cst_mouseover$0=caml_string_of_jsbytes("mouseover"),
     cst_video$0=caml_string_of_jsbytes("video"),
     cst_audio$0=caml_string_of_jsbytes("audio"),
     cst_ul$0=caml_string_of_jsbytes("ul"),
     cst_tr$0=caml_string_of_jsbytes("tr"),
     cst_title$0=caml_string_of_jsbytes("title"),
     cst_thead$0=caml_string_of_jsbytes("thead"),
     cst_th$0=caml_string_of_jsbytes("th"),
     cst_tfoot$0=caml_string_of_jsbytes("tfoot"),
     cst_textarea$0=caml_string_of_jsbytes("textarea"),
     cst_td$0=caml_string_of_jsbytes("td"),
     cst_tbody$0=caml_string_of_jsbytes("tbody"),
     cst_table$0=caml_string_of_jsbytes("table"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_select$1=caml_string_of_jsbytes("select"),
     cst_script$0=caml_string_of_jsbytes("script"),
     cst_q$0=caml_string_of_jsbytes("q"),
     cst_pre$0=caml_string_of_jsbytes("pre"),
     cst_param$0=caml_string_of_jsbytes("param"),
     cst_p$0=caml_string_of_jsbytes("p"),
     cst_option$0=caml_string_of_jsbytes("option"),
     cst_optgroup$0=caml_string_of_jsbytes("optgroup"),
     cst_ol$0=caml_string_of_jsbytes("ol"),
     cst_object$0=caml_string_of_jsbytes("object"),
     cst_meta$0=caml_string_of_jsbytes("meta"),
     cst_map$0=caml_string_of_jsbytes("map"),
     cst_link$0=caml_string_of_jsbytes("link"),
     cst_li$0=caml_string_of_jsbytes("li"),
     cst_legend$0=caml_string_of_jsbytes("legend"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_ins$0=caml_string_of_jsbytes("ins"),
     cst_input$1=caml_string_of_jsbytes("input"),
     cst_img$0=caml_string_of_jsbytes("img"),
     cst_iframe$0=caml_string_of_jsbytes("iframe"),
     cst_html$0=caml_string_of_jsbytes("html"),
     cst_hr$0=caml_string_of_jsbytes("hr"),
     cst_head$0=caml_string_of_jsbytes("head"),
     cst_h6$0=caml_string_of_jsbytes("h6"),
     cst_h5$0=caml_string_of_jsbytes("h5"),
     cst_h4$0=caml_string_of_jsbytes("h4"),
     cst_h3$0=caml_string_of_jsbytes("h3"),
     cst_h2$0=caml_string_of_jsbytes("h2"),
     cst_h1$0=caml_string_of_jsbytes("h1"),
     cst_frame$0=caml_string_of_jsbytes("frame"),
     cst_frameset$0=caml_string_of_jsbytes("frameset"),
     cst_form$0=caml_string_of_jsbytes("form"),
     cst_embed$0=caml_string_of_jsbytes("embed"),
     cst_fieldset$0=caml_string_of_jsbytes("fieldset"),
     cst_dl$0=caml_string_of_jsbytes("dl"),
     cst_div$0=caml_string_of_jsbytes("div"),
     cst_del$0=caml_string_of_jsbytes("del"),
     cst_colgroup$0=caml_string_of_jsbytes("colgroup"),
     cst_col$0=caml_string_of_jsbytes("col"),
     cst_caption$0=caml_string_of_jsbytes("caption"),
     cst_canvas$0=caml_string_of_jsbytes("canvas"),
     cst_button$0=caml_string_of_jsbytes("button"),
     cst_br$0=caml_string_of_jsbytes("br"),
     cst_body$0=caml_string_of_jsbytes("body"),
     cst_blockquote$0=caml_string_of_jsbytes("blockquote"),
     cst_base$0=caml_string_of_jsbytes("base"),
     cst_area$0=caml_string_of_jsbytes("area"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_canvas=caml_string_of_jsbytes("canvas"),
     cst_video=caml_string_of_jsbytes("video"),
     cst_audio=caml_string_of_jsbytes("audio"),
     cst_iframe=caml_string_of_jsbytes("iframe"),
     cst_frame=caml_string_of_jsbytes("frame"),
     cst_frameset=caml_string_of_jsbytes("frameset"),
     cst_address=caml_string_of_jsbytes("address"),
     cst_noscript=caml_string_of_jsbytes("noscript"),
     cst_dt=caml_string_of_jsbytes("dt"),
     cst_dd=caml_string_of_jsbytes("dd"),
     cst_abbr=caml_string_of_jsbytes("abbr"),
     cst_var=caml_string_of_jsbytes("var"),
     cst_kbd=caml_string_of_jsbytes("kbd"),
     cst_samp=caml_string_of_jsbytes("samp"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_dfn=caml_string_of_jsbytes("dfn"),
     cst_cite=caml_string_of_jsbytes("cite"),
     cst_strong=caml_string_of_jsbytes("strong"),
     cst_em=caml_string_of_jsbytes("em"),
     cst_small=caml_string_of_jsbytes("small"),
     cst_big=caml_string_of_jsbytes("big"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_i=caml_string_of_jsbytes("i"),
     cst_tt=caml_string_of_jsbytes("tt"),
     cst_span=caml_string_of_jsbytes("span"),
     cst_sup=caml_string_of_jsbytes("sup"),
     cst_sub=caml_string_of_jsbytes("sub"),
     cst_td=caml_string_of_jsbytes("td"),
     cst_th=caml_string_of_jsbytes("th"),
     cst_tr=caml_string_of_jsbytes("tr"),
     cst_tbody=caml_string_of_jsbytes("tbody"),
     cst_tfoot=caml_string_of_jsbytes("tfoot"),
     cst_thead=caml_string_of_jsbytes("thead"),
     cst_colgroup=caml_string_of_jsbytes("colgroup"),
     cst_col=caml_string_of_jsbytes("col"),
     cst_caption=caml_string_of_jsbytes("caption"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_script=caml_string_of_jsbytes("script"),
     cst_area=caml_string_of_jsbytes("area"),
     cst_map=caml_string_of_jsbytes("map"),
     cst_param=caml_string_of_jsbytes("param"),
     cst_object=caml_string_of_jsbytes("object"),
     cst_img=caml_string_of_jsbytes("img"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_del=caml_string_of_jsbytes("del"),
     cst_ins=caml_string_of_jsbytes("ins"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_br=caml_string_of_jsbytes("br"),
     cst_pre=caml_string_of_jsbytes("pre"),
     cst_blockquote=caml_string_of_jsbytes("blockquote"),
     cst_q=caml_string_of_jsbytes("q"),
     cst_h6=caml_string_of_jsbytes("h6"),
     cst_h5=caml_string_of_jsbytes("h5"),
     cst_h4=caml_string_of_jsbytes("h4"),
     cst_h3=caml_string_of_jsbytes("h3"),
     cst_h2=caml_string_of_jsbytes("h2"),
     cst_h1=caml_string_of_jsbytes("h1"),
     cst_p=caml_string_of_jsbytes("p"),
     cst_embed=caml_string_of_jsbytes("embed"),
     cst_div=caml_string_of_jsbytes("div"),
     cst_li=caml_string_of_jsbytes("li"),
     cst_dl=caml_string_of_jsbytes("dl"),
     cst_ol=caml_string_of_jsbytes("ol"),
     cst_ul=caml_string_of_jsbytes("ul"),
     cst_legend=caml_string_of_jsbytes("legend"),
     cst_fieldset=caml_string_of_jsbytes("fieldset"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_textarea=caml_string_of_jsbytes("textarea"),
     cst_input$0=caml_string_of_jsbytes("input"),
     cst_select$0=caml_string_of_jsbytes("select"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_optgroup=caml_string_of_jsbytes("optgroup"),
     cst_form=caml_string_of_jsbytes("form"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_base=caml_string_of_jsbytes("base"),
     cst_meta=caml_string_of_jsbytes("meta"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_link=caml_string_of_jsbytes("link"),
     cst_head=caml_string_of_jsbytes("head"),
     cst_html=caml_string_of_jsbytes("html"),
     cst_click=caml_string_of_jsbytes("click"),
     cst_copy=caml_string_of_jsbytes("copy"),
     cst_cut=caml_string_of_jsbytes("cut"),
     cst_paste=caml_string_of_jsbytes("paste"),
     cst_dblclick=caml_string_of_jsbytes("dblclick"),
     cst_mousedown=caml_string_of_jsbytes("mousedown"),
     cst_mouseup=caml_string_of_jsbytes("mouseup"),
     cst_mouseover=caml_string_of_jsbytes("mouseover"),
     cst_mousemove=caml_string_of_jsbytes("mousemove"),
     cst_mouseout=caml_string_of_jsbytes("mouseout"),
     cst_keypress=caml_string_of_jsbytes("keypress"),
     cst_keydown=caml_string_of_jsbytes("keydown"),
     cst_keyup=caml_string_of_jsbytes("keyup"),
     cst_mousewheel=caml_string_of_jsbytes("mousewheel"),
     cst_DOMMouseScroll=caml_string_of_jsbytes("DOMMouseScroll"),
     cst_touchstart=caml_string_of_jsbytes("touchstart"),
     cst_touchmove=caml_string_of_jsbytes("touchmove"),
     cst_touchend=caml_string_of_jsbytes("touchend"),
     cst_touchcancel=caml_string_of_jsbytes("touchcancel"),
     cst_dragstart=caml_string_of_jsbytes("dragstart"),
     cst_dragend=caml_string_of_jsbytes("dragend"),
     cst_dragenter=caml_string_of_jsbytes("dragenter"),
     cst_dragover=caml_string_of_jsbytes("dragover"),
     cst_dragleave=caml_string_of_jsbytes("dragleave"),
     cst_drag=caml_string_of_jsbytes("drag"),
     cst_drop=caml_string_of_jsbytes("drop"),
     cst_hashchange=caml_string_of_jsbytes("hashchange"),
     cst_change=caml_string_of_jsbytes("change"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_timeupdate=caml_string_of_jsbytes("timeupdate"),
     cst_submit=caml_string_of_jsbytes("submit"),
     cst_scroll=caml_string_of_jsbytes("scroll"),
     cst_focus=caml_string_of_jsbytes("focus"),
     cst_blur=caml_string_of_jsbytes("blur"),
     cst_load$0=caml_string_of_jsbytes("load"),
     cst_unload=caml_string_of_jsbytes("unload"),
     cst_beforeunload=caml_string_of_jsbytes("beforeunload"),
     cst_resize=caml_string_of_jsbytes("resize"),
     cst_orientationchange=caml_string_of_jsbytes("orientationchange"),
     cst_popstate=caml_string_of_jsbytes("popstate"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_abort$0=caml_string_of_jsbytes("abort"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_online=caml_string_of_jsbytes("online"),
     cst_offline=caml_string_of_jsbytes("offline"),
     cst_checking=caml_string_of_jsbytes("checking"),
     cst_noupdate=caml_string_of_jsbytes("noupdate"),
     cst_downloading=caml_string_of_jsbytes("downloading"),
     cst_progress$0=caml_string_of_jsbytes("progress"),
     cst_updateready=caml_string_of_jsbytes("updateready"),
     cst_cached=caml_string_of_jsbytes("cached"),
     cst_obsolete=caml_string_of_jsbytes("obsolete"),
     cst_DOMContentLoaded=caml_string_of_jsbytes("DOMContentLoaded"),
     cst_animationstart=caml_string_of_jsbytes("animationstart"),
     cst_animationend=caml_string_of_jsbytes("animationend"),
     cst_animationiteration=caml_string_of_jsbytes("animationiteration"),
     cst_animationcancel=caml_string_of_jsbytes("animationcancel"),
     cst_canplay=caml_string_of_jsbytes("canplay"),
     cst_canplaythrough=caml_string_of_jsbytes("canplaythrough"),
     cst_durationchange=caml_string_of_jsbytes("durationchange"),
     cst_emptied=caml_string_of_jsbytes("emptied"),
     cst_ended=caml_string_of_jsbytes("ended"),
     cst_gotpointercapture=caml_string_of_jsbytes("gotpointercapture"),
     cst_loadeddata=caml_string_of_jsbytes("loadeddata"),
     cst_loadedmetadata=caml_string_of_jsbytes("loadedmetadata"),
     cst_loadstart$0=caml_string_of_jsbytes("loadstart"),
     cst_lostpointercapture=caml_string_of_jsbytes("lostpointercapture"),
     cst_pause=caml_string_of_jsbytes("pause"),
     cst_play=caml_string_of_jsbytes("play"),
     cst_playing=caml_string_of_jsbytes("playing"),
     cst_pointerenter=caml_string_of_jsbytes("pointerenter"),
     cst_pointercancel=caml_string_of_jsbytes("pointercancel"),
     cst_pointerdown=caml_string_of_jsbytes("pointerdown"),
     cst_pointerleave=caml_string_of_jsbytes("pointerleave"),
     cst_pointermove=caml_string_of_jsbytes("pointermove"),
     cst_pointerout=caml_string_of_jsbytes("pointerout"),
     cst_pointerover=caml_string_of_jsbytes("pointerover"),
     cst_pointerup=caml_string_of_jsbytes("pointerup"),
     cst_ratechange=caml_string_of_jsbytes("ratechange"),
     cst_seeked=caml_string_of_jsbytes("seeked"),
     cst_seeking=caml_string_of_jsbytes("seeking"),
     cst_stalled=caml_string_of_jsbytes("stalled"),
     cst_suspend=caml_string_of_jsbytes("suspend"),
     cst_volumechange=caml_string_of_jsbytes("volumechange"),
     cst_waiting=caml_string_of_jsbytes("waiting"),
     cst_Js_of_ocaml_Dom_html_Canva=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_html.Canvas_not_available"),
     cst_checkbox=caml_string_of_jsbytes("checkbox"),
     cst_file=caml_string_of_jsbytes("file"),
     cst_password=caml_string_of_jsbytes("password"),
     cst_radio=caml_string_of_jsbytes("radio"),
     cst_reset=caml_string_of_jsbytes("reset"),
     cst_submit$0=caml_string_of_jsbytes("submit"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_readystatechange=caml_string_of_jsbytes("readystatechange"),
     cst_loadstart$1=caml_string_of_jsbytes("loadstart"),
     cst_progress$1=caml_string_of_jsbytes("progress"),
     cst_abort$1=caml_string_of_jsbytes("abort"),
     cst_error$1=caml_string_of_jsbytes("error"),
     cst_load$1=caml_string_of_jsbytes("load"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_loadend$0=caml_string_of_jsbytes("loadend"),
     cst_Worker_onmessage_is_undefi$0=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_onmessage_is_undefi=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_import_scripts_is_u=
      caml_string_of_jsbytes("Worker.import_scripts is undefined"),
     cst_webglcontextlost=caml_string_of_jsbytes("webglcontextlost"),
     cst_webglcontextrestored=caml_string_of_jsbytes("webglcontextrestored"),
     cst_webglcontextcreationerror=
      caml_string_of_jsbytes("webglcontextcreationerror"),
     cst_g=caml_string_of_jsbytes("g"),
     cst=caml_string_of_jsbytes("[\\][()\\\\|+*.?{}^$]"),
     cst$37=caml_string_of_jsbytes(""),
     cst$13=caml_string_of_jsbytes(""),
     cst$21=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes("#"),
     cst$15=caml_string_of_jsbytes("?"),
     cst$20=caml_string_of_jsbytes(""),
     cst$16=caml_string_of_jsbytes("/"),
     cst$17=caml_string_of_jsbytes("/"),
     cst$19=caml_string_of_jsbytes(":"),
     cst$18=caml_string_of_jsbytes(""),
     cst_http$1=caml_string_of_jsbytes("http://"),
     cst$22=caml_string_of_jsbytes(""),
     cst$30=caml_string_of_jsbytes(""),
     cst$23=caml_string_of_jsbytes("#"),
     cst$24=caml_string_of_jsbytes("?"),
     cst$29=caml_string_of_jsbytes(""),
     cst$25=caml_string_of_jsbytes("/"),
     cst$26=caml_string_of_jsbytes("/"),
     cst$28=caml_string_of_jsbytes(":"),
     cst$27=caml_string_of_jsbytes(""),
     cst_https$1=caml_string_of_jsbytes("https://"),
     cst$31=caml_string_of_jsbytes(""),
     cst$36=caml_string_of_jsbytes(""),
     cst$32=caml_string_of_jsbytes("#"),
     cst$33=caml_string_of_jsbytes("?"),
     cst$35=caml_string_of_jsbytes(""),
     cst$34=caml_string_of_jsbytes("/"),
     cst_file$2=caml_string_of_jsbytes("file://"),
     cst$12=caml_string_of_jsbytes(""),
     cst$11=caml_string_of_jsbytes(""),
     cst$10=caml_string_of_jsbytes(""),
     cst$9=caml_string_of_jsbytes(""),
     cst$8=caml_string_of_jsbytes(""),
     cst$7=caml_string_of_jsbytes(""),
     cst$6=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes("="),
     cst$5=caml_string_of_jsbytes("&"),
     cst$2=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_file$0=caml_string_of_jsbytes("file"),
     cst_file$1=caml_string_of_jsbytes("file:"),
     cst_http=caml_string_of_jsbytes("http"),
     cst_http$0=caml_string_of_jsbytes("http:"),
     cst_https=caml_string_of_jsbytes("https"),
     cst_https$0=caml_string_of_jsbytes("https:"),
     cst$1=caml_string_of_jsbytes(" "),
     cst_2B=caml_string_of_jsbytes("%2B"),
     cst_Js_of_ocaml_Url_Local_exn=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Local_exn"),
     cst$0=caml_string_of_jsbytes("+"),
     cst_Js_of_ocaml_Url_Not_an_htt=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Not_an_http_protocol"),
     cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0=
      caml_string_of_jsbytes
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     cst_Ff_Ii_Ll_Ee=
      caml_string_of_jsbytes
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     s=caml_string_of_jsbytes("3.9.0"),
     git_version=caml_string_of_jsbytes(""),
     cst$38=caml_string_of_jsbytes(""),
     cst$41=caml_string_of_jsbytes("+"),
     cst_Jstable_keys=caml_string_of_jsbytes("Jstable.keys"),
     dummy_string=caml_string_of_jsbytes(""),
     dummy_int64=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     cst_is_not_a_valid_length$0=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_d_d_deg_grad_rad_turns=
      caml_string_of_jsbytes("^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$"),
     cst_length_conversion_error$0=
      caml_string_of_jsbytes("length conversion error: "),
     cst_deg$0=caml_string_of_jsbytes("deg"),
     cst_grad$0=caml_string_of_jsbytes("grad"),
     cst_rad$0=caml_string_of_jsbytes("rad"),
     cst_turns$0=caml_string_of_jsbytes("turns"),
     cst_deg=caml_string_of_jsbytes("deg"),
     cst_grad=caml_string_of_jsbytes("grad"),
     cst_rad=caml_string_of_jsbytes("rad"),
     cst_turns=caml_string_of_jsbytes("turns"),
     cst_is_not_a_valid_length=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_d_d_s_S=caml_string_of_jsbytes("^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$"),
     cst_length_conversion_error=
      caml_string_of_jsbytes("length conversion error: "),
     cst_pc$0=caml_string_of_jsbytes("pc"),
     cst_ch$0=caml_string_of_jsbytes("ch"),
     cst_cm$0=caml_string_of_jsbytes("cm"),
     cst_em$1=caml_string_of_jsbytes("em"),
     cst_ex$0=caml_string_of_jsbytes("ex"),
     cst_gd$0=caml_string_of_jsbytes("gd"),
     cst_in$0=caml_string_of_jsbytes("in"),
     cst_mm$0=caml_string_of_jsbytes("mm"),
     cst_pt$0=caml_string_of_jsbytes("pt"),
     cst_px$0=caml_string_of_jsbytes("px"),
     cst_rem$0=caml_string_of_jsbytes("rem"),
     cst_vh$0=caml_string_of_jsbytes("vh"),
     cst_vm$0=caml_string_of_jsbytes("vm"),
     cst_vw$0=caml_string_of_jsbytes("vw"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_em$0=caml_string_of_jsbytes("em"),
     cst_ex=caml_string_of_jsbytes("ex"),
     cst_px=caml_string_of_jsbytes("px"),
     cst_gd=caml_string_of_jsbytes("gd"),
     cst_rem=caml_string_of_jsbytes("rem"),
     cst_vw=caml_string_of_jsbytes("vw"),
     cst_vh=caml_string_of_jsbytes("vh"),
     cst_vm=caml_string_of_jsbytes("vm"),
     cst_ch=caml_string_of_jsbytes("ch"),
     cst_mm=caml_string_of_jsbytes("mm"),
     cst_cm=caml_string_of_jsbytes("cm"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_pt=caml_string_of_jsbytes("pt"),
     cst_pc=caml_string_of_jsbytes("pc"),
     cst$40=caml_string_of_jsbytes("): "),
     cst_color_conversion_error$0=
      caml_string_of_jsbytes("color conversion error ("),
     cst$39=caml_string_of_jsbytes("): "),
     cst_color_conversion_error=
      caml_string_of_jsbytes("color conversion error ("),
     cst_is_not_a_valid_color$0=
      caml_string_of_jsbytes(" is not a valid color"),
     cst_rgba_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgba_d_d_d_d_d$0=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_hsla_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgb=caml_string_of_jsbytes("rgb"),
     cst_rgba=caml_string_of_jsbytes("rgba"),
     cst_rgb$0=caml_string_of_jsbytes("rgb"),
     cst_rgba$0=caml_string_of_jsbytes("rgba"),
     cst_hsl=caml_string_of_jsbytes("hsl"),
     cst_hsla=caml_string_of_jsbytes("hsla"),
     cst_rgb_s_d_s_d_s_d=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     cst_rgb_s_d_s_d_s_d$0=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d$0=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_hsl_s_d_s_d_s_d=
      caml_string_of_jsbytes("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_hsla_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_is_not_a_valid_color=caml_string_of_jsbytes(" is not a valid color"),
     cst_is_out_of_valid_range=
      caml_string_of_jsbytes(" is out of valid range"),
     partial=[8,[0,0,0],0,0,[12,41,0]],
     partial$0=[12,41,0],
     partial$1=[0,0,0],
     cst_lightgrey$0=caml_string_of_jsbytes("lightgrey"),
     cst_darkslategray$0=caml_string_of_jsbytes("darkslategray"),
     cst_cornsilk$0=caml_string_of_jsbytes("cornsilk"),
     cst_blue$0=caml_string_of_jsbytes("blue"),
     cst_aliceblue$0=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite$0=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua$0=caml_string_of_jsbytes("aqua"),
     cst_aquamarine$0=caml_string_of_jsbytes("aquamarine"),
     cst_azure$0=caml_string_of_jsbytes("azure"),
     cst_beige$0=caml_string_of_jsbytes("beige"),
     cst_bisque$0=caml_string_of_jsbytes("bisque"),
     cst_black$0=caml_string_of_jsbytes("black"),
     cst_blanchedalmond$0=caml_string_of_jsbytes("blanchedalmond"),
     cst_blueviolet$0=caml_string_of_jsbytes("blueviolet"),
     cst_brown$0=caml_string_of_jsbytes("brown"),
     cst_burlywood$0=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue$0=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse$0=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate$0=caml_string_of_jsbytes("chocolate"),
     cst_coral$0=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue$0=caml_string_of_jsbytes("cornflowerblue"),
     cst_darkkhaki$0=caml_string_of_jsbytes("darkkhaki"),
     cst_crimson$0=caml_string_of_jsbytes("crimson"),
     cst_cyan$0=caml_string_of_jsbytes("cyan"),
     cst_darkblue$0=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan$0=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod$0=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray$0=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen$0=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey$0=caml_string_of_jsbytes("darkgrey"),
     cst_darkmagenta$0=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen$0=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange$0=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid$0=caml_string_of_jsbytes("darkorchid"),
     cst_darkred$0=caml_string_of_jsbytes("darkred"),
     cst_darksalmon$0=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen$0=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue$0=caml_string_of_jsbytes("darkslateblue"),
     cst_greenyellow$0=caml_string_of_jsbytes("greenyellow"),
     cst_floralwhite$0=caml_string_of_jsbytes("floralwhite"),
     cst_darkslategrey$0=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise$0=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet$0=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink$0=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue$0=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray$0=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey$0=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue$0=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick$0=caml_string_of_jsbytes("firebrick"),
     cst_forestgreen$0=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia$0=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro$0=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite$0=caml_string_of_jsbytes("ghostwhite"),
     cst_gold$0=caml_string_of_jsbytes("gold"),
     cst_goldenrod$0=caml_string_of_jsbytes("goldenrod"),
     cst_gray$0=caml_string_of_jsbytes("gray"),
     cst_green$0=caml_string_of_jsbytes("green"),
     cst_lavenderblush$0=caml_string_of_jsbytes("lavenderblush"),
     cst_grey$0=caml_string_of_jsbytes("grey"),
     cst_honeydew$0=caml_string_of_jsbytes("honeydew"),
     cst_hotpink$0=caml_string_of_jsbytes("hotpink"),
     cst_indianred$0=caml_string_of_jsbytes("indianred"),
     cst_indigo$0=caml_string_of_jsbytes("indigo"),
     cst_ivory$0=caml_string_of_jsbytes("ivory"),
     cst_khaki$0=caml_string_of_jsbytes("khaki"),
     cst_lavender$0=caml_string_of_jsbytes("lavender"),
     cst_lawngreen$0=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon$0=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue$0=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral$0=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan$0=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow$0=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray$0=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen$0=caml_string_of_jsbytes("lightgreen"),
     cst_paleturquoise$0=caml_string_of_jsbytes("paleturquoise"),
     cst_mediumslateblue$0=caml_string_of_jsbytes("mediumslateblue"),
     cst_limegreen$0=caml_string_of_jsbytes("limegreen"),
     cst_lightpink$0=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon$0=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen$0=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue$0=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray$0=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey$0=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue$0=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow$0=caml_string_of_jsbytes("lightyellow"),
     cst_lime$0=caml_string_of_jsbytes("lime"),
     cst_linen$0=caml_string_of_jsbytes("linen"),
     cst_magenta$0=caml_string_of_jsbytes("magenta"),
     cst_maroon$0=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine$0=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue$0=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid$0=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple$0=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen$0=caml_string_of_jsbytes("mediumseagreen"),
     cst_navy$0=caml_string_of_jsbytes("navy"),
     cst_mediumspringgreen$0=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise$0=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred$0=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue$0=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream$0=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose$0=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin$0=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite$0=caml_string_of_jsbytes("navajowhite"),
     cst_oldlace$0=caml_string_of_jsbytes("oldlace"),
     cst_olive$0=caml_string_of_jsbytes("olive"),
     cst_olivedrab$0=caml_string_of_jsbytes("olivedrab"),
     cst_orange$0=caml_string_of_jsbytes("orange"),
     cst_orangered$0=caml_string_of_jsbytes("orangered"),
     cst_orchid$0=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod$0=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen$0=caml_string_of_jsbytes("palegreen"),
     cst_skyblue$0=caml_string_of_jsbytes("skyblue"),
     cst_rosybrown$0=caml_string_of_jsbytes("rosybrown"),
     cst_palevioletred$0=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip$0=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff$0=caml_string_of_jsbytes("peachpuff"),
     cst_peru$0=caml_string_of_jsbytes("peru"),
     cst_pink$0=caml_string_of_jsbytes("pink"),
     cst_plum$0=caml_string_of_jsbytes("plum"),
     cst_powderblue$0=caml_string_of_jsbytes("powderblue"),
     cst_purple$0=caml_string_of_jsbytes("purple"),
     cst_red$0=caml_string_of_jsbytes("red"),
     cst_royalblue$0=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown$0=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon$0=caml_string_of_jsbytes("salmon"),
     cst_sandybrown$0=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen$0=caml_string_of_jsbytes("seagreen"),
     cst_seashell$0=caml_string_of_jsbytes("seashell"),
     cst_sienna$0=caml_string_of_jsbytes("sienna"),
     cst_silver$0=caml_string_of_jsbytes("silver"),
     cst_thistle$0=caml_string_of_jsbytes("thistle"),
     cst_slateblue$0=caml_string_of_jsbytes("slateblue"),
     cst_slategray$0=caml_string_of_jsbytes("slategray"),
     cst_slategrey$0=caml_string_of_jsbytes("slategrey"),
     cst_snow$0=caml_string_of_jsbytes("snow"),
     cst_springgreen$0=caml_string_of_jsbytes("springgreen"),
     cst_steelblue$0=caml_string_of_jsbytes("steelblue"),
     cst_tan$0=caml_string_of_jsbytes("tan"),
     cst_teal$0=caml_string_of_jsbytes("teal"),
     cst_tomato$0=caml_string_of_jsbytes("tomato"),
     cst_turquoise$0=caml_string_of_jsbytes("turquoise"),
     cst_violet$0=caml_string_of_jsbytes("violet"),
     cst_wheat$0=caml_string_of_jsbytes("wheat"),
     cst_white$0=caml_string_of_jsbytes("white"),
     cst_whitesmoke$0=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow$0=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen$0=caml_string_of_jsbytes("yellowgreen"),
     cst_is_not_a_valid_color_name=
      caml_string_of_jsbytes(" is not a valid color name"),
     cst_aliceblue=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua=caml_string_of_jsbytes("aqua"),
     cst_aquamarine=caml_string_of_jsbytes("aquamarine"),
     cst_azure=caml_string_of_jsbytes("azure"),
     cst_beige=caml_string_of_jsbytes("beige"),
     cst_bisque=caml_string_of_jsbytes("bisque"),
     cst_black=caml_string_of_jsbytes("black"),
     cst_blanchedalmond=caml_string_of_jsbytes("blanchedalmond"),
     cst_blue=caml_string_of_jsbytes("blue"),
     cst_blueviolet=caml_string_of_jsbytes("blueviolet"),
     cst_brown=caml_string_of_jsbytes("brown"),
     cst_burlywood=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate=caml_string_of_jsbytes("chocolate"),
     cst_coral=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue=caml_string_of_jsbytes("cornflowerblue"),
     cst_cornsilk=caml_string_of_jsbytes("cornsilk"),
     cst_crimson=caml_string_of_jsbytes("crimson"),
     cst_cyan=caml_string_of_jsbytes("cyan"),
     cst_darkblue=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey=caml_string_of_jsbytes("darkgrey"),
     cst_darkkhaki=caml_string_of_jsbytes("darkkhaki"),
     cst_darkmagenta=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid=caml_string_of_jsbytes("darkorchid"),
     cst_darkred=caml_string_of_jsbytes("darkred"),
     cst_darksalmon=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue=caml_string_of_jsbytes("darkslateblue"),
     cst_darkslategray=caml_string_of_jsbytes("darkslategray"),
     cst_darkslategrey=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick=caml_string_of_jsbytes("firebrick"),
     cst_floralwhite=caml_string_of_jsbytes("floralwhite"),
     cst_forestgreen=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite=caml_string_of_jsbytes("ghostwhite"),
     cst_gold=caml_string_of_jsbytes("gold"),
     cst_goldenrod=caml_string_of_jsbytes("goldenrod"),
     cst_gray=caml_string_of_jsbytes("gray"),
     cst_grey=caml_string_of_jsbytes("grey"),
     cst_green=caml_string_of_jsbytes("green"),
     cst_greenyellow=caml_string_of_jsbytes("greenyellow"),
     cst_honeydew=caml_string_of_jsbytes("honeydew"),
     cst_hotpink=caml_string_of_jsbytes("hotpink"),
     cst_indianred=caml_string_of_jsbytes("indianred"),
     cst_indigo=caml_string_of_jsbytes("indigo"),
     cst_ivory=caml_string_of_jsbytes("ivory"),
     cst_khaki=caml_string_of_jsbytes("khaki"),
     cst_lavender=caml_string_of_jsbytes("lavender"),
     cst_lavenderblush=caml_string_of_jsbytes("lavenderblush"),
     cst_lawngreen=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen=caml_string_of_jsbytes("lightgreen"),
     cst_lightgrey=caml_string_of_jsbytes("lightgrey"),
     cst_lightpink=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow=caml_string_of_jsbytes("lightyellow"),
     cst_lime=caml_string_of_jsbytes("lime"),
     cst_limegreen=caml_string_of_jsbytes("limegreen"),
     cst_linen=caml_string_of_jsbytes("linen"),
     cst_magenta=caml_string_of_jsbytes("magenta"),
     cst_maroon=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen=caml_string_of_jsbytes("mediumseagreen"),
     cst_mediumslateblue=caml_string_of_jsbytes("mediumslateblue"),
     cst_mediumspringgreen=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite=caml_string_of_jsbytes("navajowhite"),
     cst_navy=caml_string_of_jsbytes("navy"),
     cst_oldlace=caml_string_of_jsbytes("oldlace"),
     cst_olive=caml_string_of_jsbytes("olive"),
     cst_olivedrab=caml_string_of_jsbytes("olivedrab"),
     cst_orange=caml_string_of_jsbytes("orange"),
     cst_orangered=caml_string_of_jsbytes("orangered"),
     cst_orchid=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen=caml_string_of_jsbytes("palegreen"),
     cst_paleturquoise=caml_string_of_jsbytes("paleturquoise"),
     cst_palevioletred=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff=caml_string_of_jsbytes("peachpuff"),
     cst_peru=caml_string_of_jsbytes("peru"),
     cst_pink=caml_string_of_jsbytes("pink"),
     cst_plum=caml_string_of_jsbytes("plum"),
     cst_powderblue=caml_string_of_jsbytes("powderblue"),
     cst_purple=caml_string_of_jsbytes("purple"),
     cst_red=caml_string_of_jsbytes("red"),
     cst_rosybrown=caml_string_of_jsbytes("rosybrown"),
     cst_royalblue=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon=caml_string_of_jsbytes("salmon"),
     cst_sandybrown=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen=caml_string_of_jsbytes("seagreen"),
     cst_seashell=caml_string_of_jsbytes("seashell"),
     cst_sienna=caml_string_of_jsbytes("sienna"),
     cst_silver=caml_string_of_jsbytes("silver"),
     cst_skyblue=caml_string_of_jsbytes("skyblue"),
     cst_slateblue=caml_string_of_jsbytes("slateblue"),
     cst_slategray=caml_string_of_jsbytes("slategray"),
     cst_slategrey=caml_string_of_jsbytes("slategrey"),
     cst_snow=caml_string_of_jsbytes("snow"),
     cst_springgreen=caml_string_of_jsbytes("springgreen"),
     cst_steelblue=caml_string_of_jsbytes("steelblue"),
     cst_tan=caml_string_of_jsbytes("tan"),
     cst_teal=caml_string_of_jsbytes("teal"),
     cst_thistle=caml_string_of_jsbytes("thistle"),
     cst_tomato=caml_string_of_jsbytes("tomato"),
     cst_turquoise=caml_string_of_jsbytes("turquoise"),
     cst_violet=caml_string_of_jsbytes("violet"),
     cst_wheat=caml_string_of_jsbytes("wheat"),
     cst_white=caml_string_of_jsbytes("white"),
     cst_whitesmoke=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen=caml_string_of_jsbytes("yellowgreen"),
     cst_vkern$0=caml_string_of_jsbytes("vkern"),
     cst_view$0=caml_string_of_jsbytes("view"),
     cst_use$0=caml_string_of_jsbytes("use"),
     cst_tspan$0=caml_string_of_jsbytes("tspan"),
     cst_tref$0=caml_string_of_jsbytes("tref"),
     cst_title$3=caml_string_of_jsbytes("title"),
     cst_textpath$0=caml_string_of_jsbytes("textpath"),
     cst_text$1=caml_string_of_jsbytes("text"),
     cst_symbol$0=caml_string_of_jsbytes("symbol"),
     cst_switch$0=caml_string_of_jsbytes("switch"),
     cst_svg$0=caml_string_of_jsbytes("svg"),
     cst_style$3=caml_string_of_jsbytes("style"),
     cst_stop$0=caml_string_of_jsbytes("stop"),
     cst_set$0=caml_string_of_jsbytes("set"),
     cst_script$3=caml_string_of_jsbytes("script"),
     cst_rect$0=caml_string_of_jsbytes("rect"),
     cst_radialgradient$0=caml_string_of_jsbytes("radialgradient"),
     cst_polyline$0=caml_string_of_jsbytes("polyline"),
     cst_polygon$0=caml_string_of_jsbytes("polygon"),
     cst_pattern$0=caml_string_of_jsbytes("pattern"),
     cst_path$0=caml_string_of_jsbytes("path"),
     cst_mpath$0=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph$0=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata$0=caml_string_of_jsbytes("metadata"),
     cst_mask$0=caml_string_of_jsbytes("mask"),
     cst_lineargradient$0=caml_string_of_jsbytes("lineargradient"),
     cst_line$0=caml_string_of_jsbytes("line"),
     cst_image$0=caml_string_of_jsbytes("image"),
     cst_hkern$0=caml_string_of_jsbytes("hkern"),
     cst_glyphref$0=caml_string_of_jsbytes("glyphref"),
     cst_glyph$0=caml_string_of_jsbytes("glyph"),
     cst_g$1=caml_string_of_jsbytes("g"),
     cst_foreignobject=caml_string_of_jsbytes("foreignobject"),
     cst_font_face_uri$0=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src$0=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name$0=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format$0=caml_string_of_jsbytes("font-face-format"),
     cst_font_face$0=caml_string_of_jsbytes("font-face"),
     cst_font$0=caml_string_of_jsbytes("font"),
     cst_filter$0=caml_string_of_jsbytes("filter"),
     cst_ellipse$0=caml_string_of_jsbytes("ellipse"),
     cst_desc$0=caml_string_of_jsbytes("desc"),
     cst_defs$0=caml_string_of_jsbytes("defs"),
     cst_cursor$0=caml_string_of_jsbytes("cursor"),
     cst_clippath$0=caml_string_of_jsbytes("clippath"),
     cst_circle$0=caml_string_of_jsbytes("circle"),
     cst_animatetransform$0=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion$0=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor$0=caml_string_of_jsbytes("animatecolor"),
     cst_animate$0=caml_string_of_jsbytes("animate"),
     cst_altglyphitem$0=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef$0=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph$0=caml_string_of_jsbytes("altglyph"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_vkern=caml_string_of_jsbytes("vkern"),
     cst_view=caml_string_of_jsbytes("view"),
     cst_use=caml_string_of_jsbytes("use"),
     cst_tspan=caml_string_of_jsbytes("tspan"),
     cst_tref=caml_string_of_jsbytes("tref"),
     cst_title$2=caml_string_of_jsbytes("title"),
     cst_textpath=caml_string_of_jsbytes("textpath"),
     cst_text$0=caml_string_of_jsbytes("text"),
     cst_symbol=caml_string_of_jsbytes("symbol"),
     cst_switch=caml_string_of_jsbytes("switch"),
     cst_svg=caml_string_of_jsbytes("svg"),
     cst_style$2=caml_string_of_jsbytes("style"),
     cst_stop=caml_string_of_jsbytes("stop"),
     cst_set=caml_string_of_jsbytes("set"),
     cst_script$2=caml_string_of_jsbytes("script"),
     cst_rect=caml_string_of_jsbytes("rect"),
     cst_radialgradient=caml_string_of_jsbytes("radialgradient"),
     cst_polyline=caml_string_of_jsbytes("polyline"),
     cst_polygon=caml_string_of_jsbytes("polygon"),
     cst_pattern=caml_string_of_jsbytes("pattern"),
     cst_path=caml_string_of_jsbytes("path"),
     cst_mpath=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata=caml_string_of_jsbytes("metadata"),
     cst_mask=caml_string_of_jsbytes("mask"),
     cst_lineargradient=caml_string_of_jsbytes("lineargradient"),
     cst_line=caml_string_of_jsbytes("line"),
     cst_image=caml_string_of_jsbytes("image"),
     cst_hkern=caml_string_of_jsbytes("hkern"),
     cst_glyphref=caml_string_of_jsbytes("glyphref"),
     cst_glyph=caml_string_of_jsbytes("glyph"),
     cst_g$0=caml_string_of_jsbytes("g"),
     cst_foreignObject=caml_string_of_jsbytes("foreignObject"),
     cst_font_face_uri=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format=caml_string_of_jsbytes("font-face-format"),
     cst_font_face=caml_string_of_jsbytes("font-face"),
     cst_font=caml_string_of_jsbytes("font"),
     cst_filter=caml_string_of_jsbytes("filter"),
     cst_ellipse=caml_string_of_jsbytes("ellipse"),
     cst_desc=caml_string_of_jsbytes("desc"),
     cst_defs=caml_string_of_jsbytes("defs"),
     cst_cursor=caml_string_of_jsbytes("cursor"),
     cst_clippath=caml_string_of_jsbytes("clippath"),
     cst_circle=caml_string_of_jsbytes("circle"),
     cst_animatetransform=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor=caml_string_of_jsbytes("animatecolor"),
     cst_animate=caml_string_of_jsbytes("animate"),
     cst_altglyphitem=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph=caml_string_of_jsbytes("altglyph"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_Js_of_ocaml_Dom_svg_SVGErr=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_svg.SVGError"),
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib=global_data.Stdlib,
     Stdlib_callback=global_data.Stdlib__callback,
     Stdlib_printexc=global_data.Stdlib__printexc,
     Assert_failure=global_data.Assert_failure,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_printf=global_data.Stdlib__printf,
     Js_of_ocaml=[0];
    caml_register_global(1632,Js_of_ocaml,"Js_of_ocaml__");
    var
     Poly=[0],
     _f_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom.ml"),351,67],
     _g_=[0,caml_string_of_jsbytes("transparent")],
     _h_=[0,caml_string_of_jsbytes("native")],
     _l_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2816,58],
     _k_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2815,61],
     _j_=
      [0,
       [11,
        caml_string_of_jsbytes("getElementById_exn: "),
        [3,0,[11,caml_string_of_jsbytes(" not found"),0]]],
       caml_string_of_jsbytes("getElementById_exn: %S not found")],
     _n_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/form.ml"),177,13],
     _m_=[0,1],
     _o_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/regexp.ml"),34,64],
     _p_=[0,caml_string_of_jsbytes(""),0],
     _cj_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ck_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cl_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cm_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b7_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b8_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b9_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b__=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b$_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ca_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cb_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cc_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cd_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ce_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cf_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cg_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ch_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ci_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b6_=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("aliceblue"),
         caml_string_of_jsbytes("antiquewhite"),
         caml_string_of_jsbytes("aqua"),
         caml_string_of_jsbytes("aquamarine"),
         caml_string_of_jsbytes("azure"),
         caml_string_of_jsbytes("beige"),
         caml_string_of_jsbytes("bisque"),
         caml_string_of_jsbytes("black"),
         caml_string_of_jsbytes("blanchedalmond"),
         caml_string_of_jsbytes("blue"),
         caml_string_of_jsbytes("blueviolet"),
         caml_string_of_jsbytes("brown"),
         caml_string_of_jsbytes("burlywood"),
         caml_string_of_jsbytes("cadetblue"),
         caml_string_of_jsbytes("chartreuse"),
         caml_string_of_jsbytes("chocolate"),
         caml_string_of_jsbytes("coral"),
         caml_string_of_jsbytes("cornflowerblue"),
         caml_string_of_jsbytes("cornsilk"),
         caml_string_of_jsbytes("crimson"),
         caml_string_of_jsbytes("cyan"),
         caml_string_of_jsbytes("darkblue"),
         caml_string_of_jsbytes("darkcyan"),
         caml_string_of_jsbytes("darkgoldenrod"),
         caml_string_of_jsbytes("darkgray"),
         caml_string_of_jsbytes("darkgreen"),
         caml_string_of_jsbytes("darkgrey"),
         caml_string_of_jsbytes("darkkhaki"),
         caml_string_of_jsbytes("darkmagenta"),
         caml_string_of_jsbytes("darkolivegreen"),
         caml_string_of_jsbytes("darkorange"),
         caml_string_of_jsbytes("darkorchid"),
         caml_string_of_jsbytes("darkred"),
         caml_string_of_jsbytes("darksalmon"),
         caml_string_of_jsbytes("darkseagreen"),
         caml_string_of_jsbytes("darkslateblue"),
         caml_string_of_jsbytes("darkslategray"),
         caml_string_of_jsbytes("darkslategrey"),
         caml_string_of_jsbytes("darkturquoise"),
         caml_string_of_jsbytes("darkviolet"),
         caml_string_of_jsbytes("deeppink"),
         caml_string_of_jsbytes("deepskyblue"),
         caml_string_of_jsbytes("dimgray"),
         caml_string_of_jsbytes("dimgrey"),
         caml_string_of_jsbytes("dodgerblue"),
         caml_string_of_jsbytes("firebrick"),
         caml_string_of_jsbytes("floralwhite"),
         caml_string_of_jsbytes("forestgreen"),
         caml_string_of_jsbytes("fuchsia"),
         caml_string_of_jsbytes("gainsboro"),
         caml_string_of_jsbytes("ghostwhite"),
         caml_string_of_jsbytes("gold"),
         caml_string_of_jsbytes("goldenrod"),
         caml_string_of_jsbytes("gray"),
         caml_string_of_jsbytes("green"),
         caml_string_of_jsbytes("greenyellow"),
         caml_string_of_jsbytes("grey"),
         caml_string_of_jsbytes("honeydew"),
         caml_string_of_jsbytes("hotpink"),
         caml_string_of_jsbytes("indianred"),
         caml_string_of_jsbytes("indigo"),
         caml_string_of_jsbytes("ivory"),
         caml_string_of_jsbytes("khaki"),
         caml_string_of_jsbytes("lavender"),
         caml_string_of_jsbytes("lavenderblush"),
         caml_string_of_jsbytes("lawngreen"),
         caml_string_of_jsbytes("lemonchiffon"),
         caml_string_of_jsbytes("lightblue"),
         caml_string_of_jsbytes("lightcoral"),
         caml_string_of_jsbytes("lightcyan"),
         caml_string_of_jsbytes("lightgoldenrodyellow"),
         caml_string_of_jsbytes("lightgray"),
         caml_string_of_jsbytes("lightgreen"),
         caml_string_of_jsbytes("lightgrey"),
         caml_string_of_jsbytes("lightpink"),
         caml_string_of_jsbytes("lightsalmon"),
         caml_string_of_jsbytes("lightseagreen"),
         caml_string_of_jsbytes("lightskyblue"),
         caml_string_of_jsbytes("lightslategray"),
         caml_string_of_jsbytes("lightslategrey"),
         caml_string_of_jsbytes("lightsteelblue"),
         caml_string_of_jsbytes("lightyellow"),
         caml_string_of_jsbytes("lime"),
         caml_string_of_jsbytes("limegreen"),
         caml_string_of_jsbytes("linen"),
         caml_string_of_jsbytes("magenta"),
         caml_string_of_jsbytes("maroon"),
         caml_string_of_jsbytes("mediumaquamarine"),
         caml_string_of_jsbytes("mediumblue"),
         caml_string_of_jsbytes("mediumorchid"),
         caml_string_of_jsbytes("mediumpurple"),
         caml_string_of_jsbytes("mediumseagreen"),
         caml_string_of_jsbytes("mediumslateblue"),
         caml_string_of_jsbytes("mediumspringgreen"),
         caml_string_of_jsbytes("mediumturquoise"),
         caml_string_of_jsbytes("mediumvioletred"),
         caml_string_of_jsbytes("midnightblue"),
         caml_string_of_jsbytes("mintcream"),
         caml_string_of_jsbytes("mistyrose"),
         caml_string_of_jsbytes("moccasin"),
         caml_string_of_jsbytes("navajowhite"),
         caml_string_of_jsbytes("navy"),
         caml_string_of_jsbytes("oldlace"),
         caml_string_of_jsbytes("olive"),
         caml_string_of_jsbytes("olivedrab"),
         caml_string_of_jsbytes("orange"),
         caml_string_of_jsbytes("orangered"),
         caml_string_of_jsbytes("orchid"),
         caml_string_of_jsbytes("palegoldenrod"),
         caml_string_of_jsbytes("palegreen"),
         caml_string_of_jsbytes("paleturquoise"),
         caml_string_of_jsbytes("palevioletred"),
         caml_string_of_jsbytes("papayawhip"),
         caml_string_of_jsbytes("peachpuff"),
         caml_string_of_jsbytes("peru"),
         caml_string_of_jsbytes("pink"),
         caml_string_of_jsbytes("plum"),
         caml_string_of_jsbytes("powderblue"),
         caml_string_of_jsbytes("purple"),
         caml_string_of_jsbytes("red"),
         caml_string_of_jsbytes("rosybrown"),
         caml_string_of_jsbytes("royalblue"),
         caml_string_of_jsbytes("saddlebrown"),
         caml_string_of_jsbytes("salmon"),
         caml_string_of_jsbytes("sandybrown"),
         caml_string_of_jsbytes("seagreen"),
         caml_string_of_jsbytes("seashell"),
         caml_string_of_jsbytes("sienna"),
         caml_string_of_jsbytes("silver"),
         caml_string_of_jsbytes("skyblue"),
         caml_string_of_jsbytes("slateblue"),
         caml_string_of_jsbytes("slategray"),
         caml_string_of_jsbytes("slategrey"),
         caml_string_of_jsbytes("snow"),
         caml_string_of_jsbytes("springgreen"),
         caml_string_of_jsbytes("steelblue"),
         caml_string_of_jsbytes("tan"),
         caml_string_of_jsbytes("teal"),
         caml_string_of_jsbytes("thistle"),
         caml_string_of_jsbytes("tomato"),
         caml_string_of_jsbytes("turquoise"),
         caml_string_of_jsbytes("violet"),
         caml_string_of_jsbytes("wheat"),
         caml_string_of_jsbytes("white"),
         caml_string_of_jsbytes("whitesmoke"),
         caml_string_of_jsbytes("yellow"),
         caml_string_of_jsbytes("yellowgreen")]),
     _b5_=
      [0,
       [12,35,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,0]]]],
       caml_string_of_jsbytes("#%02X%02X%02X")],
     _bZ_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,0,0,0,[12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("rgb(%d,%d,%d)")],
     _b0_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,
         0,
         0,
         0,
         [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]]],
       caml_string_of_jsbytes("rgb(%d%%,%d%%,%d%%)")],
     _b1_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,44,[8,[0,0,0],0,0,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d,%d,%d,%f)")],
     _b2_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,44,partial]]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d%%,%d%%,%d%%,%f)")],
     _b3_=
      [0,
       [11,
        caml_string_of_jsbytes("hsl("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("hsl(%d,%d%%,%d%%)")],
     _b4_=
      [0,
       [11,
        caml_string_of_jsbytes("hsla("),
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,
            37,
            [12,44,[4,0,0,0,[12,37,[12,44,[8,partial$1,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes("hsla(%d,%d%%,%d%%,%f)")],
     _w_=[0,240,248,255],
     _x_=[0,250,235,215],
     _y_=[0,0,255,255],
     _z_=[0,127,255,212],
     _A_=[0,240,255,255],
     _B_=[0,245,245,220],
     _C_=[0,255,228,196],
     _D_=[0,0,0,0],
     _E_=[0,255,235,205],
     _F_=[0,0,0,255],
     _G_=[0,138,43,226],
     _H_=[0,165,42,42],
     _I_=[0,222,184,135],
     _J_=[0,95,158,160],
     _K_=[0,127,255,0],
     _L_=[0,210,105,30],
     _M_=[0,255,127,80],
     _N_=[0,100,149,237],
     _O_=[0,255,248,220],
     _P_=[0,220,20,60],
     _Q_=[0,0,255,255],
     _R_=[0,0,0,139],
     _S_=[0,0,139,139],
     _T_=[0,184,134,11],
     _U_=[0,169,169,169],
     _V_=[0,0,100,0],
     _W_=[0,169,169,169],
     _X_=[0,189,183,107],
     _Y_=[0,139,0,139],
     _Z_=[0,85,107,47],
     ___=[0,255,140,0],
     _$_=[0,153,50,204],
     _aa_=[0,139,0,0],
     _ab_=[0,233,150,122],
     _ac_=[0,143,188,143],
     _ad_=[0,72,61,139],
     _ae_=[0,47,79,79],
     _af_=[0,47,79,79],
     _ag_=[0,0,206,209],
     _ah_=[0,148,0,211],
     _ai_=[0,255,20,147],
     _aj_=[0,0,191,255],
     _ak_=[0,105,105,105],
     _al_=[0,105,105,105],
     _am_=[0,30,144,255],
     _an_=[0,178,34,34],
     _ao_=[0,255,250,240],
     _ap_=[0,34,139,34],
     _aq_=[0,255,0,255],
     _ar_=[0,220,220,220],
     _as_=[0,248,248,255],
     _at_=[0,255,215,0],
     _au_=[0,218,165,32],
     _av_=[0,128,128,128],
     _aw_=[0,128,128,128],
     _ax_=[0,0,128,0],
     _ay_=[0,173,255,47],
     _az_=[0,240,255,240],
     _aA_=[0,255,105,180],
     _aB_=[0,205,92,92],
     _aC_=[0,75,0,130],
     _aD_=[0,255,255,240],
     _aE_=[0,240,230,140],
     _aF_=[0,230,230,250],
     _aG_=[0,255,240,245],
     _aH_=[0,124,252,0],
     _aI_=[0,255,250,205],
     _aJ_=[0,173,216,230],
     _aK_=[0,240,128,128],
     _aL_=[0,224,255,255],
     _aM_=[0,250,250,210],
     _aN_=[0,211,211,211],
     _aO_=[0,144,238,144],
     _aP_=[0,211,211,211],
     _aQ_=[0,255,182,193],
     _aR_=[0,255,160,122],
     _aS_=[0,32,178,170],
     _aT_=[0,135,206,250],
     _aU_=[0,119,136,153],
     _aV_=[0,119,136,153],
     _aW_=[0,176,196,222],
     _aX_=[0,255,255,224],
     _aY_=[0,0,255,0],
     _aZ_=[0,50,205,50],
     _a0_=[0,250,240,230],
     _a1_=[0,255,0,255],
     _a2_=[0,128,0,0],
     _a3_=[0,102,205,170],
     _a4_=[0,0,0,205],
     _a5_=[0,186,85,211],
     _a6_=[0,147,112,219],
     _a7_=[0,60,179,113],
     _a8_=[0,123,104,238],
     _a9_=[0,0,250,154],
     _a__=[0,72,209,204],
     _a$_=[0,199,21,133],
     _ba_=[0,25,25,112],
     _bb_=[0,245,255,250],
     _bc_=[0,255,228,225],
     _bd_=[0,255,228,181],
     _be_=[0,255,222,173],
     _bf_=[0,0,0,128],
     _bg_=[0,253,245,230],
     _bh_=[0,128,128,0],
     _bi_=[0,107,142,35],
     _bj_=[0,255,165,0],
     _bk_=[0,255,69,0],
     _bl_=[0,218,112,214],
     _bm_=[0,238,232,170],
     _bn_=[0,152,251,152],
     _bo_=[0,175,238,238],
     _bp_=[0,219,112,147],
     _bq_=[0,255,239,213],
     _br_=[0,255,218,185],
     _bs_=[0,205,133,63],
     _bt_=[0,255,192,203],
     _bu_=[0,221,160,221],
     _bv_=[0,176,224,230],
     _bw_=[0,128,0,128],
     _bx_=[0,255,0,0],
     _by_=[0,188,143,143],
     _bz_=[0,65,105,225],
     _bA_=[0,139,69,19],
     _bB_=[0,250,128,114],
     _bC_=[0,244,164,96],
     _bD_=[0,46,139,87],
     _bE_=[0,255,245,238],
     _bF_=[0,160,82,45],
     _bG_=[0,192,192,192],
     _bH_=[0,135,206,235],
     _bI_=[0,106,90,205],
     _bJ_=[0,112,128,144],
     _bK_=[0,112,128,144],
     _bL_=[0,255,250,250],
     _bM_=[0,0,255,127],
     _bN_=[0,70,130,180],
     _bO_=[0,210,180,140],
     _bP_=[0,0,128,128],
     _bQ_=[0,216,191,216],
     _bR_=[0,255,99,71],
     _bS_=[0,64,224,208],
     _bT_=[0,238,130,238],
     _bU_=[0,245,222,179],
     _bV_=[0,255,255,255],
     _bW_=[0,245,245,245],
     _bX_=[0,255,255,0],
     _bY_=[0,154,205,50];
    function symbol(x,y){return x < y?1:0}
    function symbol$0(x,y){return x <= y?1:0}
    function symbol$1(x,y){return x !== y?1:0}
    function symbol$2(x,y){return x === y?1:0}
    function symbol$3(x,y){return y < x?1:0}
    function symbol$4(x,y){return y <= x?1:0}
    var compare=runtime.caml_int_compare;
    function equal(x,y){return x === y?1:0}
    function max(x,y){return y <= x?x:y}
    function min(x,y){return x <= y?x:y}
    var
     Int_replace_polymorphic_compar=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
     make=Stdlib_string[1],
     init=Stdlib_string[2],
     copy=Stdlib_string[3],
     sub=Stdlib_string[4],
     fill=Stdlib_string[5],
     blit=Stdlib_string[6],
     concat=Stdlib_string[7],
     iter=Stdlib_string[8],
     iteri=Stdlib_string[9],
     map=Stdlib_string[10],
     mapi=Stdlib_string[11],
     trim=Stdlib_string[12],
     escaped=Stdlib_string[13],
     index=Stdlib_string[14],
     index_opt=Stdlib_string[15],
     rindex=Stdlib_string[16],
     rindex_opt=Stdlib_string[17],
     index_from=Stdlib_string[18],
     index_from_opt=Stdlib_string[19],
     rindex_from=Stdlib_string[20],
     rindex_from_opt=Stdlib_string[21],
     contains=Stdlib_string[22],
     contains_from=Stdlib_string[23],
     rcontains_from=Stdlib_string[24],
     uppercase=Stdlib_string[25],
     lowercase=Stdlib_string[26],
     capitalize=Stdlib_string[27],
     uncapitalize=Stdlib_string[28],
     uppercase_ascii=Stdlib_string[29],
     lowercase_ascii=Stdlib_string[30],
     capitalize_ascii=Stdlib_string[31],
     uncapitalize_ascii=Stdlib_string[32],
     compare$0=Stdlib_string[33],
     split_on_char=Stdlib_string[35],
     to_seq=Stdlib_string[36],
     to_seqi=Stdlib_string[37],
     of_seq=Stdlib_string[38];
    function equal$0(x,y){return runtime.caml_string_equal(x,y)}
    var
     String=
      [0,
       make,
       init,
       copy,
       sub,
       fill,
       blit,
       concat,
       iter,
       iteri,
       map,
       mapi,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$0,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       equal$0],
     chr=Stdlib_char[1],
     escaped$0=Stdlib_char[2],
     lowercase$0=Stdlib_char[3],
     uppercase$0=Stdlib_char[4],
     lowercase_ascii$0=Stdlib_char[5],
     uppercase_ascii$0=Stdlib_char[6],
     compare$1=Stdlib_char[7];
    function equal$1(x,y){return x === y?1:0}
    var
     Char=
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       equal$1],
     symbol$5=Int_replace_polymorphic_compar[1],
     symbol$6=Int_replace_polymorphic_compar[2],
     symbol$7=Int_replace_polymorphic_compar[3],
     symbol$8=Int_replace_polymorphic_compar[4],
     symbol$9=Int_replace_polymorphic_compar[5],
     symbol$10=Int_replace_polymorphic_compar[6],
     compare$2=Int_replace_polymorphic_compar[7],
     equal$2=Int_replace_polymorphic_compar[8],
     max$0=Int_replace_polymorphic_compar[9],
     min$0=Int_replace_polymorphic_compar[10],
     Js_of_ocaml_Import=
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
    caml_register_global(1635,Js_of_ocaml_Import,"Js_of_ocaml__Import");
    var
     global=joo_global_object,
     Unsafe=[0,global],
     no_handler=null,
     t39=undefined;
    function return$0(_gH_){return _gH_}
    function map$0(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function bind(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function test(x){return 1 - (x == no_handler?1:0)}
    function iter$0(x,f)
     {var _gG_=1 - (x == no_handler?1:0);return _gG_?caml_call1(f,x):_gG_}
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x == no_handler?caml_call1(f,0):x}
    function option(x){if(x){var x$0=x[1];return x$0}return no_handler}
    function to_option(x)
     {function _gF_(x){return [0,x]}
      return case$0(x,function(param){return 0},_gF_)}
    var
     Opt=
      [0,
       no_handler,
       return$0,
       map$0,
       bind,
       test,
       iter$0,
       case$0,
       get,
       option,
       to_option];
    function return$1(_gE_){return _gE_}
    function map$1(x,f){return x === t39?t39:caml_call1(f,x)}
    function bind$0(x,f){return x === t39?t39:caml_call1(f,x)}
    function test$0(x){return x !== t39?1:0}
    function iter$1(x,f)
     {var _gD_=x !== t39?1:0;return _gD_?caml_call1(f,x):_gD_}
    function case$1(x,f,g){return x === t39?caml_call1(f,0):caml_call1(g,x)}
    function get$0(x,f){return x === t39?caml_call1(f,0):x}
    function option$0(x){if(x){var x$0=x[1];return x$0}return t39}
    function to_option$0(x)
     {function _gC_(x){return [0,x]}
      return case$1(x,function(param){return 0},_gC_)}
    var
     Optdef=
      [0,
       t39,
       return$1,
       map$1,
       bind$0,
       test$0,
       iter$1,
       case$1,
       get$0,
       option$0,
       to_option$0];
    function coerce(x,f,g)
     {function _gA_(param){return caml_call1(g,x)}
      var _gB_=caml_call1(f,x);
      return caml_call2(Opt[8],_gB_,_gA_)}
    function coerce_opt(x,f,g)
     {function _gy_(param){return caml_call1(g,x)}
      var _gz_=caml_call2(Opt[4],x,f);
      return caml_call2(Opt[8],_gz_,_gy_)}
    var
     t25=true,
     t4=false,
     string_constr=Unsafe[1].String,
     t11=Unsafe[1].RegExp,
     t4$0=Unsafe[1].Object;
    function object_keys(t3){return t4$0.keys(t3)}
    var
     array_length=Unsafe[1].Array,
     array_get=caml_js_get,
     array_set=caml_js_set;
    function array_map(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call1(f,x)}))}
    function array_mapi(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call2(f,idx,x)}))}
    function str_array(_gx_){return _gx_}
    function match_result(_gw_){return _gw_}
    var
     t121=Unsafe[1].Date,
     math=Unsafe[1].Math,
     Error=[248,cst_Js_of_ocaml_Js_Error,caml_fresh_oo_id(0)],
     error_constr=Unsafe[1].Error;
    caml_call2(Stdlib_callback[2],cst_jsError,[0,Error,{}]);
    function raise_js_error(exn){throw exn}
    var JSON=Unsafe[1].JSON;
    function decodeURI(s){return Unsafe[1].decodeURI(s)}
    function decodeURIComponent(s){return Unsafe[1].decodeURIComponent(s)}
    function encodeURI(s){return Unsafe[1].encodeURI(s)}
    function encodeURIComponent(s){return Unsafe[1].encodeURIComponent(s)}
    function escape(s){return Unsafe[1].escape(s)}
    function unescape(s){return Unsafe[1].unescape(s)}
    function isNaN(i){return Unsafe[1].isNaN(i) | 0}
    function parseInt(s)
     {var s$0=Unsafe[1].parseInt(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseInt):s$0}
    function parseFloat(s)
     {var s$0=Unsafe[1].parseFloat(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseFloat):s$0}
    function _a_(param)
     {if(param[1] === Error)
       {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
      return 0}
    caml_call1(Stdlib_printexc[9],_a_);
    function _b_(e)
     {return e instanceof array_length
              ?0
              :[0,caml_string_of_jsstring(e.toString())]}
    caml_call1(Stdlib_printexc[9],_b_);
    function string_of_error(e){return caml_string_of_jsstring(e.toString())}
    function export_js(field,x)
     {return runtime.caml_js_export_var(0)[field] = x}
    function export$0(field,x)
     {return export_js(caml_jsstring_of_string(field),x)}
    function export_all(obj)
     {var
       t25=object_keys(obj),
       t24=
        caml_js_wrap_callback
         (function(key,param,_gv_){return export_js(key,obj[key])});
      return t25.forEach(t24)}
    var _c_=runtime.caml_js_error_of_exception,_d_=caml_exn_with_js_backtrace;
    function _e_(_gu_){return _gu_}
    var
     Js_of_ocaml_Js=
      [0,
       no_handler,
       function(_gt_){return _gt_},
       t39,
       _e_,
       Opt,
       Optdef,
       t25,
       t4,
       string_constr,
       t11,
       t11,
       t11,
       object_keys,
       array_length,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       t121,
       t121,
       t121,
       t121,
       t121,
       t121,
       t121,
       t121,
       t121,
       math,
       error_constr,
       string_of_error,
       raise_js_error,
       _d_,
       _c_,
       Error,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe];
    caml_register_global(1639,Js_of_ocaml_Js,"Js_of_ocaml__Js");
    function list_of_nodeList(nodeList)
     {var length=nodeList.length,acc=0,i=0;
      for(;;)
       {if(caml_call2(symbol$5,i,length))
         {var _gs_=nodeList.item(i),match=caml_call1(Opt[10],_gs_);
          if(match)
           {var e=match[1],i$0=i + 1 | 0,acc$0=[0,e,acc],acc=acc$0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        return caml_call1(Stdlib_list[9],acc)}}
    var
     disconnected=1,
     preceding=2,
     following=4,
     contains$0=8,
     contained_by=16,
     implementation_specific=32;
    function has(t,mask){return caml_call2(symbol$8,t & mask,mask)}
    function add(x,y){return x | y}
    var
     DocumentPosition=
      [0,
       disconnected,
       preceding,
       following,
       contains$0,
       contained_by,
       implementation_specific,
       has,
       add,
       add];
    function appendChild(p,n){p.appendChild(n);return 0}
    function removeChild(p,n){p.removeChild(n);return 0}
    function replaceChild(p,n,o){p.replaceChild(n,o);return 0}
    function insertBefore(p,n,o){p.insertBefore(n,o);return 0}
    function nodeType(e)
     {var match=e.nodeType;
      if(match)
       {var switcher=match - 1 | 0;
        switch(switcher)
         {case 0:return [0,e];case 1:return [1,e];case 2:case 3:return [2,e]}}
      return [3,e]}
    function cast(e,t){return e.nodeType === t?e:no_handler}
    function element(e){return cast(e,1)}
    function text(e)
     {if(3 !== e.nodeType && 4 !== e.nodeType)return no_handler;return e}
    function attr(e){return cast(e,2)}
    function handler(f)
     {return function(e)
       {if(caml_call1(Opt[5],e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function full_handler(f)
     {return runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0,e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call2(f,this$0,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var e$0=event,res$0=caml_call2(f,this$0,e$0);
                 if(1 - (res$0 | 0))e$0.returnValue = res$0;
                 return res$0})}
    function invoke_handler(f,this$0,event){return f.call(this$0,event)}
    function eventTarget(e)
     {function _gp_(param)
       {function _gr_(param){throw Stdlib[8]}
        return caml_call2(Opt[8],e.srcElement,_gr_)}
      var target=caml_call2(Opt[8],e.target,_gp_);
      if(target instanceof Unsafe[1].Node)
       {if(3 === target.nodeType)
         {var _gq_=function(param){throw [0,Assert_failure,_f_]};
          return caml_call2(Opt[8],target.parentNode,_gq_)}
        return target}
      return target}
    function make$0(s){return caml_jsstring_of_string(s)}
    var Event=[0,make$0];
    function addEventListenerWithOptions(t50,t47,capture,once,passive,t48)
     {if(t50.addEventListener === t39)
       {var
         t34="on".concat(t47),
         t35=
          function(e)
           {var _gm_=[0,t48,e,[0]];
            return function(_gn_,_go_)
             {return runtime.caml_js_call(_gm_,_gn_,_go_)}};
        t50.attachEvent(t34,t35);
        return function(param){return t50.detachEvent(t34,t35)}}
      var t49={};
      function iter(t,f){if(t){var b=t[1];return caml_call1(f,b)}return 0}
      iter(capture,function(b){return t49.capture = b});
      iter(once,function(b){return t49.once = b});
      iter(passive,function(b){return t49.passive = b});
      t50.addEventListener(t47,t48,t49);
      return function(param){return t50.removeEventListener(t47,t48,t49)}}
    function addEventListener(e,typ,h,capt)
     {return addEventListenerWithOptions(e,typ,[0,capt],0,0,h)}
    function removeEventListener(id){return caml_call1(id,0)}
    function preventDefault(ev)
     {return caml_call1(Optdef[5],ev.preventDefault)
              ?ev.preventDefault()
              :ev.returnValue = ! ! 0}
    function createCustomEvent(bubbles,cancelable,detail,t62)
     {function opt_iter(f,param)
       {if(param){var x=param[1];return caml_call1(f,x)}return 0}
      var t63={};
      opt_iter(function(x){return t63.bubbles = ! ! x},bubbles);
      opt_iter(function(x){return t63.cancelable = ! ! x},cancelable);
      opt_iter(function(x){return t63.detail = x},detail);
      var t64=Unsafe[1].CustomEvent;
      return new t64(t62,t63)}
    var
     Js_of_ocaml_Dom=
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0,element,text,attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
    caml_register_global(1642,Js_of_ocaml_Dom,"Js_of_ocaml__Dom");
    var
     arrayBuffer=Unsafe[1].ArrayBuffer,
     int8Array_inBuffer=Unsafe[1].Int8Array,
     t11$0=Unsafe[1].Uint8Array,
     int16Array_inBuffer=Unsafe[1].Int16Array,
     uint16Array_inBuffer=Unsafe[1].Uint16Array,
     int32Array_inBuffer=Unsafe[1].Int32Array,
     uint32Array_inBuffer=Unsafe[1].Uint32Array,
     float32Array_inBuffer=Unsafe[1].Float32Array,
     float64Array_inBuffer=Unsafe[1].Float64Array,
     set=caml_js_set;
    function get$1(a,i){return a[i]}
    function unsafe_get(a,i){return a[i]}
    var dataView=Unsafe[1].DataView;
    function of_arrayBuffer(ab)
     {var uint8=new t11$0(ab);return caml_string_of_array(uint8)}
    var
     Js_of_ocaml_Typed_array=
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       runtime.caml_ba_to_typed_array,
       runtime.caml_ba_from_typed_array,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       t11$0,
       t11$0,
       t11$0,
       t11$0,
       t11$0,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       set,
       get$1,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0,of_arrayBuffer,caml_string_of_array]];
    caml_register_global
     (1643,Js_of_ocaml_Typed_array,"Js_of_ocaml__Typed_array");
    var t3=Unsafe[1].Blob;
    function filter_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function blob_raw(contentType,endings,a)
     {var _gi_=0;
      if(endings)
       var _gj_=116179762 <= endings[1]?_g_:_h_,_gk_=_gj_;
      else
       var _gk_=0;
      var
       _gl_=[0,[0,cst_type,contentType],[0,[0,cst_endings,_gk_],_gi_]],
       options=
        filter_map
         (function(param)
           {var v=param[2],name=param[1];
            if(v)
             {var v$0=v[1];return [0,[0,name,caml_jsstring_of_string(v$0)]]}
            return 0},
          _gl_),
       options$0=
        options
         ?runtime.caml_js_object(caml_call1(Stdlib_array[12],options))
         :t39,
       t1=caml_js_from_array(a);
      return new t3(t1,options$0)}
    function blob_from_string(contentType,endings,s)
     {return blob_raw(contentType,endings,[0,caml_jsstring_of_string(s)])}
    function blob_from_any(contentType,endings,l)
     {function _gg_(param)
       {var _gh_=param[1];
        if(155580615 === _gh_){var s=param[2];return s}
        if(486041214 <= _gh_)
         {if(1037850489 <= _gh_){var a=param[2];return a}
          var a$0=param[2];
          return a$0}
        if(288368849 <= _gh_)
         {var s$0=param[2];return caml_jsstring_of_string(s$0)}
        var b=param[2];
        return b}
      var l$0=caml_call2(Stdlib_list[17],_gg_,l);
      return blob_raw(contentType,endings,caml_call1(Stdlib_array[12],l$0))}
    function filename(file)
     {var match=caml_call1(Optdef[10],file.name);
      if(match){var name=match[1];return name}
      var match$0=caml_call1(Optdef[10],file.fileName);
      if(match$0){var name$0=match$0[1];return name$0}
      return caml_call1(Stdlib[2],cst_can_t_retrieve_file_name_n)}
    var doc_constr=Unsafe[1].Document;
    function document(e){return e instanceof doc_constr?e:no_handler}
    function blob(e){return e instanceof t3?e:no_handler}
    function string(e){return typeof e === "string"?e:no_handler}
    function arrayBuffer$0(e){return e instanceof arrayBuffer?e:no_handler}
    var
     loadstart=caml_call1(Event[1],cst_loadstart),
     progress=caml_call1(Event[1],cst_progress),
     abort=caml_call1(Event[1],cst_abort),
     error=caml_call1(Event[1],cst_error),
     load=caml_call1(Event[1],cst_load),
     loadend=caml_call1(Event[1],cst_loadend),
     ReaderEvent=[0,loadstart,progress,abort,error,load,loadend],
     fileReader=Unsafe[1].FileReader,
     Js_of_ocaml_File=
      [0,
       blob_from_string,
       blob_from_any,
       [0,document,blob,function(_gf_){return _gf_},string,arrayBuffer$0],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
    caml_register_global(1645,Js_of_ocaml_File,"Js_of_ocaml__File");
    var
     onIE=runtime.caml_js_on_ie(0) | 0,
     click=caml_call1(Event[1],cst_click),
     copy$0=caml_call1(Event[1],cst_copy),
     cut=caml_call1(Event[1],cst_cut),
     paste=caml_call1(Event[1],cst_paste),
     dblclick=caml_call1(Event[1],cst_dblclick),
     mousedown=caml_call1(Event[1],cst_mousedown),
     mouseup=caml_call1(Event[1],cst_mouseup),
     mouseover=caml_call1(Event[1],cst_mouseover),
     mousemove=caml_call1(Event[1],cst_mousemove),
     mouseout=caml_call1(Event[1],cst_mouseout),
     keypress=caml_call1(Event[1],cst_keypress),
     keydown=caml_call1(Event[1],cst_keydown),
     keyup=caml_call1(Event[1],cst_keyup),
     mousewheel=caml_call1(Event[1],cst_mousewheel),
     DOMMouseScroll=caml_call1(Event[1],cst_DOMMouseScroll),
     touchstart=caml_call1(Event[1],cst_touchstart),
     touchmove=caml_call1(Event[1],cst_touchmove),
     touchend=caml_call1(Event[1],cst_touchend),
     touchcancel=caml_call1(Event[1],cst_touchcancel),
     dragstart=caml_call1(Event[1],cst_dragstart),
     dragend=caml_call1(Event[1],cst_dragend),
     dragenter=caml_call1(Event[1],cst_dragenter),
     dragover=caml_call1(Event[1],cst_dragover),
     dragleave=caml_call1(Event[1],cst_dragleave),
     drag=caml_call1(Event[1],cst_drag),
     drop=caml_call1(Event[1],cst_drop),
     hashchange=caml_call1(Event[1],cst_hashchange),
     change=caml_call1(Event[1],cst_change),
     input=caml_call1(Event[1],cst_input),
     timeupdate=caml_call1(Event[1],cst_timeupdate),
     submit=caml_call1(Event[1],cst_submit),
     scroll=caml_call1(Event[1],cst_scroll),
     focus=caml_call1(Event[1],cst_focus),
     blur=caml_call1(Event[1],cst_blur),
     load$0=caml_call1(Event[1],cst_load$0),
     unload=caml_call1(Event[1],cst_unload),
     beforeunload=caml_call1(Event[1],cst_beforeunload),
     resize=caml_call1(Event[1],cst_resize),
     orientationchange=caml_call1(Event[1],cst_orientationchange),
     popstate=caml_call1(Event[1],cst_popstate),
     error$0=caml_call1(Event[1],cst_error$0),
     abort$0=caml_call1(Event[1],cst_abort$0),
     select=caml_call1(Event[1],cst_select),
     online=caml_call1(Event[1],cst_online),
     offline=caml_call1(Event[1],cst_offline),
     checking=caml_call1(Event[1],cst_checking),
     noupdate=caml_call1(Event[1],cst_noupdate),
     downloading=caml_call1(Event[1],cst_downloading),
     progress$0=caml_call1(Event[1],cst_progress$0),
     updateready=caml_call1(Event[1],cst_updateready),
     cached=caml_call1(Event[1],cst_cached),
     obsolete=caml_call1(Event[1],cst_obsolete),
     domContentLoaded=caml_call1(Event[1],cst_DOMContentLoaded),
     animationstart=caml_call1(Event[1],cst_animationstart),
     animationend=caml_call1(Event[1],cst_animationend),
     animationiteration=caml_call1(Event[1],cst_animationiteration),
     animationcancel=caml_call1(Event[1],cst_animationcancel),
     canplay=caml_call1(Event[1],cst_canplay),
     canplaythrough=caml_call1(Event[1],cst_canplaythrough),
     durationchange=caml_call1(Event[1],cst_durationchange),
     emptied=caml_call1(Event[1],cst_emptied),
     ended=caml_call1(Event[1],cst_ended),
     gotpointercapture=caml_call1(Event[1],cst_gotpointercapture),
     loadeddata=caml_call1(Event[1],cst_loadeddata),
     loadedmetadata=caml_call1(Event[1],cst_loadedmetadata),
     loadstart$0=caml_call1(Event[1],cst_loadstart$0),
     lostpointercapture=caml_call1(Event[1],cst_lostpointercapture),
     pause=caml_call1(Event[1],cst_pause),
     play=caml_call1(Event[1],cst_play),
     playing=caml_call1(Event[1],cst_playing),
     pointerenter=caml_call1(Event[1],cst_pointerenter),
     pointercancel=caml_call1(Event[1],cst_pointercancel),
     pointerdown=caml_call1(Event[1],cst_pointerdown),
     pointerleave=caml_call1(Event[1],cst_pointerleave),
     pointermove=caml_call1(Event[1],cst_pointermove),
     pointerout=caml_call1(Event[1],cst_pointerout),
     pointerover=caml_call1(Event[1],cst_pointerover),
     pointerup=caml_call1(Event[1],cst_pointerup),
     ratechange=caml_call1(Event[1],cst_ratechange),
     seeked=caml_call1(Event[1],cst_seeked),
     seeking=caml_call1(Event[1],cst_seeking),
     stalled=caml_call1(Event[1],cst_stalled),
     suspend=caml_call1(Event[1],cst_suspend),
     volumechange=caml_call1(Event[1],cst_volumechange),
     waiting=caml_call1(Event[1],cst_waiting),
     make$1=Event[1],
     Event$0=
      [0,
       click,
       copy$0,
       cut,
       paste,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       mousewheel,
       DOMMouseScroll,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       hashchange,
       change,
       input,
       timeupdate,
       submit,
       scroll,
       focus,
       blur,
       load$0,
       unload,
       beforeunload,
       resize,
       orientationchange,
       popstate,
       error$0,
       abort$0,
       select,
       online,
       offline,
       checking,
       noupdate,
       downloading,
       progress$0,
       updateready,
       cached,
       obsolete,
       domContentLoaded,
       animationstart,
       animationend,
       animationiteration,
       animationcancel,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       gotpointercapture,
       loadeddata,
       loadedmetadata,
       loadstart$0,
       lostpointercapture,
       pause,
       play,
       playing,
       pointerenter,
       pointercancel,
       pointerdown,
       pointerleave,
       pointermove,
       pointerout,
       pointerover,
       pointerup,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       make$1],
     d="2d";
    function location_origin(loc)
     {function _gd_(o){return o}
      function _ge_(param)
       {var t8=loc.protocol,t7=loc.hostname,port=loc.port;
        if
         (caml_call2(symbol$8,t8.length,0)
          &&
          caml_call2(symbol$8,t7.length,0))
         return "";
        var t13=t8.concat("//",t7);
        if(caml_call2(symbol$9,port.length,0))
         {var t12=loc.port;return t13.concat(":",t12)}
        return t13}
      return caml_call3(Optdef[7],loc.origin,_ge_,_gd_)}
    var _i_=Unsafe[1],t22=_i_.document;
    function getElementById(id)
     {function _ga_(pnode){return pnode}
      function _gb_(param){throw Stdlib[8]}
      var t15=caml_jsstring_of_string(id),_gc_=t22.getElementById(t15);
      return caml_call3(Opt[7],_gc_,_gb_,_ga_)}
    function getElementById_exn(id)
     {function _f8_(pnode){return pnode}
      function _f9_(param)
       {var _f$_=caml_call2(Stdlib_printf[4],_j_,id);
        return caml_call1(Stdlib[2],_f$_)}
      var t17=caml_jsstring_of_string(id),_f__=t22.getElementById(t17);
      return caml_call3(Opt[7],_f__,_f9_,_f8_)}
    function getElementById_opt(id)
     {var t19=caml_jsstring_of_string(id),_f7_=t22.getElementById(t19);
      return caml_call1(Opt[10],_f7_)}
    function getElementById_coerce(id,coerce)
     {function _f3_(e)
       {var _f6_=caml_call1(coerce,e);return caml_call1(Opt[10],_f6_)}
      function _f4_(param){return 0}
      var t21=caml_jsstring_of_string(id),_f5_=t22.getElementById(t21);
      return caml_call3(Opt[7],_f5_,_f4_,_f3_)}
    function opt_iter(x,f){if(x){var v=x[1];return caml_call1(f,v)}return 0}
    function createElement(t24,name)
     {var t23=caml_jsstring_of_string(name);return t24.createElement(t23)}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc,elt)
     {for(;;)
       {if(0 === type && 0 === name)return createElement(doc,elt);
        var _fX_=createElementSyntax[1];
        if(785140586 === _fX_)
         {try
           {var
             el=t22.createElement('<input name="x">'),
             _f0_=el.tagName.toLowerCase() === "input"?1:0,
             _f1_=_f0_?el.name === "x"?1:0:_f0_,
             _fY_=_f1_}
          catch(_f2_){var _fY_=0}
          var _fZ_=_fY_?982028505:-1003883683;
          createElementSyntax[1] = _fZ_;
          continue}
        if(982028505 <= _fX_)
         {var t40=new array_length();
          t40.push("<",caml_jsstring_of_string(elt));
          opt_iter
           (type,
            function(t)
             {var t34=caml_js_html_escape(t);
              t40.push(' type="',t34,'"');
              return 0});
          opt_iter
           (name,
            function(n)
             {var t38=caml_js_html_escape(n);
              t40.push(' name="',t38,'"');
              return 0});
          t40.push(">");
          return doc.createElement(t40.join(""))}
        var res=createElement(doc,elt);
        opt_iter(type,function(t){return res.type = t});
        opt_iter(name,function(n){return res.name = n});
        return res}}
    function createHtml(doc){return unsafeCreateElement(doc,cst_html)}
    function createHead(doc){return unsafeCreateElement(doc,cst_head)}
    function createLink(doc){return unsafeCreateElement(doc,cst_link)}
    function createTitle(doc){return unsafeCreateElement(doc,cst_title)}
    function createMeta(doc){return unsafeCreateElement(doc,cst_meta)}
    function createBase(doc){return unsafeCreateElement(doc,cst_base)}
    function createStyle(doc){return unsafeCreateElement(doc,cst_style)}
    function createBody(doc){return unsafeCreateElement(doc,cst_body)}
    function createForm(doc){return unsafeCreateElement(doc,cst_form)}
    function createOptgroup(doc){return unsafeCreateElement(doc,cst_optgroup)}
    function createOption(doc){return unsafeCreateElement(doc,cst_option)}
    function createSelect(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_select$0)}
    function createInput(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_input$0)}
    function createTextarea(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_textarea)}
    function createButton(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_button)}
    function createLabel(doc){return unsafeCreateElement(doc,cst_label)}
    function createFieldset(doc){return unsafeCreateElement(doc,cst_fieldset)}
    function createLegend(doc){return unsafeCreateElement(doc,cst_legend)}
    function createUl(doc){return unsafeCreateElement(doc,cst_ul)}
    function createOl(doc){return unsafeCreateElement(doc,cst_ol)}
    function createDl(doc){return unsafeCreateElement(doc,cst_dl)}
    function createLi(doc){return unsafeCreateElement(doc,cst_li)}
    function createDiv(doc){return unsafeCreateElement(doc,cst_div)}
    function createEmbed(doc){return unsafeCreateElement(doc,cst_embed)}
    function createP(doc){return unsafeCreateElement(doc,cst_p)}
    function createH1(doc){return unsafeCreateElement(doc,cst_h1)}
    function createH2(doc){return unsafeCreateElement(doc,cst_h2)}
    function createH3(doc){return unsafeCreateElement(doc,cst_h3)}
    function createH4(doc){return unsafeCreateElement(doc,cst_h4)}
    function createH5(doc){return unsafeCreateElement(doc,cst_h5)}
    function createH6(doc){return unsafeCreateElement(doc,cst_h6)}
    function createQ(doc){return unsafeCreateElement(doc,cst_q)}
    function createBlockquote(doc)
     {return unsafeCreateElement(doc,cst_blockquote)}
    function createPre(doc){return unsafeCreateElement(doc,cst_pre)}
    function createBr(doc){return unsafeCreateElement(doc,cst_br)}
    function createHr(doc){return unsafeCreateElement(doc,cst_hr)}
    function createIns(doc){return unsafeCreateElement(doc,cst_ins)}
    function createDel(doc){return unsafeCreateElement(doc,cst_del)}
    function createA(doc){return unsafeCreateElement(doc,cst_a)}
    function createImg(doc){return unsafeCreateElement(doc,cst_img)}
    function createObject(doc){return unsafeCreateElement(doc,cst_object)}
    function createParam(doc){return unsafeCreateElement(doc,cst_param)}
    function createMap(doc){return unsafeCreateElement(doc,cst_map)}
    function createArea(doc){return unsafeCreateElement(doc,cst_area)}
    function createScript(doc){return unsafeCreateElement(doc,cst_script)}
    function createTable(doc){return unsafeCreateElement(doc,cst_table)}
    function createCaption(doc){return unsafeCreateElement(doc,cst_caption)}
    function createCol(doc){return unsafeCreateElement(doc,cst_col)}
    function createColgroup(doc){return unsafeCreateElement(doc,cst_colgroup)}
    function createThead(doc){return unsafeCreateElement(doc,cst_thead)}
    function createTfoot(doc){return unsafeCreateElement(doc,cst_tfoot)}
    function createTbody(doc){return unsafeCreateElement(doc,cst_tbody)}
    function createTr(doc){return unsafeCreateElement(doc,cst_tr)}
    function createTh(doc){return unsafeCreateElement(doc,cst_th)}
    function createTd(doc){return unsafeCreateElement(doc,cst_td)}
    function createSub(doc){return createElement(doc,cst_sub)}
    function createSup(doc){return createElement(doc,cst_sup)}
    function createSpan(doc){return createElement(doc,cst_span)}
    function createTt(doc){return createElement(doc,cst_tt)}
    function createI(doc){return createElement(doc,cst_i)}
    function createB(doc){return createElement(doc,cst_b)}
    function createBig(doc){return createElement(doc,cst_big)}
    function createSmall(doc){return createElement(doc,cst_small)}
    function createEm(doc){return createElement(doc,cst_em)}
    function createStrong(doc){return createElement(doc,cst_strong)}
    function createCite(doc){return createElement(doc,cst_cite)}
    function createDfn(doc){return createElement(doc,cst_dfn)}
    function createCode(doc){return createElement(doc,cst_code)}
    function createSamp(doc){return createElement(doc,cst_samp)}
    function createKbd(doc){return createElement(doc,cst_kbd)}
    function createVar(doc){return createElement(doc,cst_var)}
    function createAbbr(doc){return createElement(doc,cst_abbr)}
    function createDd(doc){return createElement(doc,cst_dd)}
    function createDt(doc){return createElement(doc,cst_dt)}
    function createNoscript(doc){return createElement(doc,cst_noscript)}
    function createAddress(doc){return createElement(doc,cst_address)}
    function createFrameset(doc){return unsafeCreateElement(doc,cst_frameset)}
    function createFrame(doc){return unsafeCreateElement(doc,cst_frame)}
    function createIframe(doc){return unsafeCreateElement(doc,cst_iframe)}
    function createAudio(doc){return unsafeCreateElement(doc,cst_audio)}
    function createVideo(doc){return unsafeCreateElement(doc,cst_video)}
    var
     Canvas_not_available=
      [248,cst_Js_of_ocaml_Dom_html_Canva,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var c=unsafeCreateElement(doc,cst_canvas);
      if(1 - caml_call1(Opt[5],c.getContext))throw Canvas_not_available;
      return c}
    var
     html_element=Unsafe[1].HTMLElement,
     element$0=
      html_element === t39
       ?function(e){return e.innerHTML === t39?no_handler:e}
       :function(e){return e instanceof html_element?e:no_handler};
    function unsafeCoerce(tag,e)
     {var t56=e.tagName,_fW_=caml_jsstring_of_string(tag);
      return t56.toLowerCase() === _fW_?e:no_handler}
    function a(e){return unsafeCoerce(cst_a$0,e)}
    function area(e){return unsafeCoerce(cst_area$0,e)}
    function base(e){return unsafeCoerce(cst_base$0,e)}
    function blockquote(e){return unsafeCoerce(cst_blockquote$0,e)}
    function body(e){return unsafeCoerce(cst_body$0,e)}
    function br(e){return unsafeCoerce(cst_br$0,e)}
    function button(e){return unsafeCoerce(cst_button$0,e)}
    function canvas(e){return unsafeCoerce(cst_canvas$0,e)}
    function caption(e){return unsafeCoerce(cst_caption$0,e)}
    function col(e){return unsafeCoerce(cst_col$0,e)}
    function colgroup(e){return unsafeCoerce(cst_colgroup$0,e)}
    function del(e){return unsafeCoerce(cst_del$0,e)}
    function div(e){return unsafeCoerce(cst_div$0,e)}
    function dl(e){return unsafeCoerce(cst_dl$0,e)}
    function fieldset(e){return unsafeCoerce(cst_fieldset$0,e)}
    function embed(e){return unsafeCoerce(cst_embed$0,e)}
    function form(e){return unsafeCoerce(cst_form$0,e)}
    function frameset(e){return unsafeCoerce(cst_frameset$0,e)}
    function frame(e){return unsafeCoerce(cst_frame$0,e)}
    function h1(e){return unsafeCoerce(cst_h1$0,e)}
    function h2(e){return unsafeCoerce(cst_h2$0,e)}
    function h3(e){return unsafeCoerce(cst_h3$0,e)}
    function h4(e){return unsafeCoerce(cst_h4$0,e)}
    function h5(e){return unsafeCoerce(cst_h5$0,e)}
    function h6(e){return unsafeCoerce(cst_h6$0,e)}
    function head(e){return unsafeCoerce(cst_head$0,e)}
    function hr(e){return unsafeCoerce(cst_hr$0,e)}
    function html(e){return unsafeCoerce(cst_html$0,e)}
    function iframe(e){return unsafeCoerce(cst_iframe$0,e)}
    function img(e){return unsafeCoerce(cst_img$0,e)}
    function input$0(e){return unsafeCoerce(cst_input$1,e)}
    function ins(e){return unsafeCoerce(cst_ins$0,e)}
    function label(e){return unsafeCoerce(cst_label$0,e)}
    function legend(e){return unsafeCoerce(cst_legend$0,e)}
    function li(e){return unsafeCoerce(cst_li$0,e)}
    function link(e){return unsafeCoerce(cst_link$0,e)}
    function map$2(e){return unsafeCoerce(cst_map$0,e)}
    function meta(e){return unsafeCoerce(cst_meta$0,e)}
    function object(e){return unsafeCoerce(cst_object$0,e)}
    function ol(e){return unsafeCoerce(cst_ol$0,e)}
    function optgroup(e){return unsafeCoerce(cst_optgroup$0,e)}
    function option$1(e){return unsafeCoerce(cst_option$0,e)}
    function p(e){return unsafeCoerce(cst_p$0,e)}
    function param(e){return unsafeCoerce(cst_param$0,e)}
    function pre(e){return unsafeCoerce(cst_pre$0,e)}
    function q(e){return unsafeCoerce(cst_q$0,e)}
    function script(e){return unsafeCoerce(cst_script$0,e)}
    function select$0(e){return unsafeCoerce(cst_select$1,e)}
    function style(e){return unsafeCoerce(cst_style$0,e)}
    function table(e){return unsafeCoerce(cst_table$0,e)}
    function tbody(e){return unsafeCoerce(cst_tbody$0,e)}
    function td(e){return unsafeCoerce(cst_td$0,e)}
    function textarea(e){return unsafeCoerce(cst_textarea$0,e)}
    function tfoot(e){return unsafeCoerce(cst_tfoot$0,e)}
    function th(e){return unsafeCoerce(cst_th$0,e)}
    function thead(e){return unsafeCoerce(cst_thead$0,e)}
    function title(e){return unsafeCoerce(cst_title$0,e)}
    function tr(e){return unsafeCoerce(cst_tr$0,e)}
    function ul(e){return unsafeCoerce(cst_ul$0,e)}
    function audio(e){return unsafeCoerce(cst_audio$0,e)}
    function video(e){return unsafeCoerce(cst_video$0,e)}
    function unsafeCoerceEvent(constr,ev)
     {if(constr !== t39 && ev instanceof constr)return ev;return no_handler}
    function mouseEvent(ev){return unsafeCoerceEvent(Unsafe[1].MouseEvent,ev)}
    function keyboardEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].KeyboardEvent,ev)}
    function wheelEvent(ev){return unsafeCoerceEvent(Unsafe[1].WheelEvent,ev)}
    function mouseScrollEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MouseScrollEvent,ev)}
    function popStateEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].PopStateEvent,ev)}
    function eventRelatedTarget(e)
     {function _fT_(param)
       {var match=caml_string_of_jsstring(e.type);
        if(caml_string_notequal(match,cst_mouseout$0))
         {if(caml_string_notequal(match,cst_mouseover$0))return no_handler;
          var _fU_=function(param){throw [0,Assert_failure,_k_]};
          return caml_call2(Optdef[8],e.fromElement,_fU_)}
        function _fV_(param){throw [0,Assert_failure,_l_]}
        return caml_call2(Optdef[8],e.toElement,_fV_)}
      return caml_call2(Optdef[8],e.relatedTarget,_fT_)}
    function eventAbsolutePosition(e)
     {var body=t22.body,html=t22.documentElement;
      return [0,
              (e.clientX + body.scrollLeft | 0) + html.scrollLeft | 0,
              (e.clientY + body.scrollTop | 0) + html.scrollTop | 0]}
    function eventAbsolutePosition$0(e)
     {function _fP_(x)
       {function _fR_(y){return [0,x,y]}
        function _fS_(param){return eventAbsolutePosition(e)}
        return caml_call3(Optdef[7],e.pageY,_fS_,_fR_)}
      function _fQ_(param){return eventAbsolutePosition(e)}
      return caml_call3(Optdef[7],e.pageX,_fQ_,_fP_)}
    function elementClientPosition(e)
     {var r=e.getBoundingClientRect(),body=t22.body,html=t22.documentElement;
      return [0,
              ((r.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
              ((r.top | 0) - body.clientTop | 0) - html.clientTop | 0]}
    function getDocumentScroll(param)
     {var body=t22.body,html=t22.documentElement;
      return [0,
              body.scrollLeft + html.scrollLeft | 0,
              body.scrollTop + html.scrollTop | 0]}
    function buttonPressed(ev)
     {function _fN_(x){return x}
      function _fO_(param)
       {var match=ev.button,switcher=match - 1 | 0;
        if(! (3 < switcher >>> 0))
         switch(switcher)
          {case 0:return 1;case 1:return 3;case 2:break;default:return 2}
        return 0}
      return caml_call3(Optdef[7],ev.which,_fO_,_fN_)}
    function addMousewheelEventListenerWith(e,capture,once,passive,h)
     {var t95=createDiv(t22);
      t95.setAttribute("onmousewheel","return;");
      if(typeof t95.onmousewheel === "function")
       {var
         _fJ_=
          handler
           (function(e)
             {function _fL_(param){return 0}
              var
               dx=
                (- caml_call2(Optdef[8],e.wheelDeltaX,_fL_) | 0) / 40 | 0;
              function _fM_(param){return e.wheelDelta}
              var
               dy=
                (- caml_call2(Optdef[8],e.wheelDeltaY,_fM_) | 0) / 40 | 0;
              return caml_call3(h,e,dx,dy)});
        return addEventListenerWithOptions
                (e,Event$0[14],capture,once,passive,_fJ_)}
      var
       _fK_=
        handler
         (function(e)
           {var d=e.detail;
            return e.axis === e.HORIZONTAL
                    ?caml_call3(h,e,d,0)
                    :caml_call3(h,e,0,d)});
      return addEventListenerWithOptions
              (e,Event$0[15],capture,once,passive,_fK_)}
    function addMousewheelEventListener(e,h,capt)
     {return addMousewheelEventListenerWith(e,[0,capt],0,0,h)}
    function f(v)
     {var
       match=caml_string_of_jsstring(v),
       switch$0=caml_string_compare(match,cst_KeyH);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 8;
        var switch$1=caml_string_compare(match,cst_Numpad4);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 72;
          var switch$2=caml_string_compare(match,cst_PageUp);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 98;
            var switch$3=caml_string_compare(match,cst_ShiftRight);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 91;
              if(! caml_string_notequal(match,cst_Slash))return 55;
              if(! caml_string_notequal(match,cst_Space))return 41;
              if(! caml_string_notequal(match,cst_Tab))return 39;
              if(! caml_string_notequal(match,cst_VolumeDown))return 103;
              if(! caml_string_notequal(match,cst_VolumeMute))return 102;
              if(! caml_string_notequal(match,cst_VolumeUp))return 104}
            else
             {if(! caml_string_notequal(match,cst_Pause))return 123;
              if(! caml_string_notequal(match,cst_Period))return 54;
              if(! caml_string_notequal(match,cst_PrintScreen))return 120;
              if(! caml_string_notequal(match,cst_Quote))return 50;
              if(! caml_string_notequal(match,cst_ScrollLock))return 119;
              if(! caml_string_notequal(match,cst_Semicolon))return 49;
              if(! caml_string_notequal(match,cst_ShiftLeft))return 90}}
          else
           {var switch$4=caml_string_compare(match,cst_NumpadDivide);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 84;
              if(! caml_string_notequal(match,cst_NumpadEnter))return 83;
              if(! caml_string_notequal(match,cst_NumpadEqual))return 82;
              if(! caml_string_notequal(match,cst_NumpadMultiply))return 78;
              if(! caml_string_notequal(match,cst_NumpadSubtract))return 79;
              if(! caml_string_notequal(match,cst_OSLeft))return 117;
              if(! caml_string_notequal(match,cst_OSRight))return 118;
              if(! caml_string_notequal(match,cst_PageDown))return 99}
            else
             {if(! caml_string_notequal(match,cst_Numpad5))return 73;
              if(! caml_string_notequal(match,cst_Numpad6))return 74;
              if(! caml_string_notequal(match,cst_Numpad7))return 75;
              if(! caml_string_notequal(match,cst_Numpad8))return 76;
              if(! caml_string_notequal(match,cst_Numpad9))return 77;
              if(! caml_string_notequal(match,cst_NumpadAdd))return 80;
              if(! caml_string_notequal(match,cst_NumpadDecimal))return 81}}}
        else
         {var switch$5=caml_string_compare(match,cst_KeyX);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 24;
            var switch$6=caml_string_compare(match,cst_MetaRight);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 89;
              if(! caml_string_notequal(match,cst_Minus))return 37;
              if(! caml_string_notequal(match,cst_NumLock))return 85;
              if(! caml_string_notequal(match,cst_Numpad0))return 68;
              if(! caml_string_notequal(match,cst_Numpad1))return 69;
              if(! caml_string_notequal(match,cst_Numpad2))return 70;
              if(! caml_string_notequal(match,cst_Numpad3))return 71}
            else
             {if(! caml_string_notequal(match,cst_KeyY))return 25;
              if(! caml_string_notequal(match,cst_KeyZ))return 26;
              if(! caml_string_notequal(match,cst_MediaPlayPause))return 107;
              if(! caml_string_notequal(match,cst_MediaStop))return 108;
              if(! caml_string_notequal(match,cst_MediaTrackNext))return 106;
              if(! caml_string_notequal(match,cst_MediaTrackPrevious))
               return 105;
              if(! caml_string_notequal(match,cst_MetaLeft))return 88}}
          else
           {var switch$7=caml_string_compare(match,cst_KeyP);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 16;
              if(! caml_string_notequal(match,cst_KeyQ))return 17;
              if(! caml_string_notequal(match,cst_KeyR))return 18;
              if(! caml_string_notequal(match,cst_KeyS))return 19;
              if(! caml_string_notequal(match,cst_KeyT))return 20;
              if(! caml_string_notequal(match,cst_KeyU))return 21;
              if(! caml_string_notequal(match,cst_KeyV))return 22;
              if(! caml_string_notequal(match,cst_KeyW))return 23}
            else
             {if(! caml_string_notequal(match,cst_KeyI))return 9;
              if(! caml_string_notequal(match,cst_KeyJ))return 10;
              if(! caml_string_notequal(match,cst_KeyK))return 11;
              if(! caml_string_notequal(match,cst_KeyL))return 12;
              if(! caml_string_notequal(match,cst_KeyM))return 13;
              if(! caml_string_notequal(match,cst_KeyN))return 14;
              if(! caml_string_notequal(match,cst_KeyO))return 15}}}}
      else
       {var switch$8=caml_string_compare(match,cst_Digit6);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 33;
          var switch$9=caml_string_compare(match,cst_F6);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 61;
            var switch$10=caml_string_compare(match,cst_KeyA);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 1;
              if(! caml_string_notequal(match,cst_KeyB))return 2;
              if(! caml_string_notequal(match,cst_KeyC))return 3;
              if(! caml_string_notequal(match,cst_KeyD))return 4;
              if(! caml_string_notequal(match,cst_KeyE))return 5;
              if(! caml_string_notequal(match,cst_KeyF))return 6;
              if(! caml_string_notequal(match,cst_KeyG))return 7}
            else
             {if(! caml_string_notequal(match,cst_F7))return 62;
              if(! caml_string_notequal(match,cst_F8))return 63;
              if(! caml_string_notequal(match,cst_F9))return 64;
              if(! caml_string_notequal(match,cst_Home))return 100;
              if(! caml_string_notequal(match,cst_Insert))return 44;
              if(! caml_string_notequal(match,cst_IntlBackslash))return 121;
              if(! caml_string_notequal(match,cst_IntlYen))return 122}}
          else
           {var switch$11=caml_string_compare(match,cst_F1);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 56;
              if(! caml_string_notequal(match,cst_F10))return 65;
              if(! caml_string_notequal(match,cst_F11))return 66;
              if(! caml_string_notequal(match,cst_F12))return 67;
              if(! caml_string_notequal(match,cst_F2))return 57;
              if(! caml_string_notequal(match,cst_F3))return 58;
              if(! caml_string_notequal(match,cst_F4))return 59;
              if(! caml_string_notequal(match,cst_F5))return 60}
            else
             {if(! caml_string_notequal(match,cst_Digit7))return 34;
              if(! caml_string_notequal(match,cst_Digit8))return 35;
              if(! caml_string_notequal(match,cst_Digit9))return 36;
              if(! caml_string_notequal(match,cst_End))return 101;
              if(! caml_string_notequal(match,cst_Enter))return 40;
              if(! caml_string_notequal(match,cst_Equal))return 38;
              if(! caml_string_notequal(match,cst_Escape))return 42}}}
        else
         {var switch$12=caml_string_compare(match,cst_BrowserRefresh);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 113;
            var switch$13=caml_string_compare(match,cst_Delete);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 45;
              if(! caml_string_notequal(match,cst_Digit0))return 27;
              if(! caml_string_notequal(match,cst_Digit1))return 28;
              if(! caml_string_notequal(match,cst_Digit2))return 29;
              if(! caml_string_notequal(match,cst_Digit3))return 30;
              if(! caml_string_notequal(match,cst_Digit4))return 31;
              if(! caml_string_notequal(match,cst_Digit5))return 32}
            else
             {if(! caml_string_notequal(match,cst_BrowserSearch))return 110;
              if(! caml_string_notequal(match,cst_BrowserStop))return 114;
              if(! caml_string_notequal(match,cst_CapsLock))return 46;
              if(! caml_string_notequal(match,cst_Comma))return 53;
              if(! caml_string_notequal(match,cst_ContextMenu))return 109;
              if(! caml_string_notequal(match,cst_ControlLeft))return 86;
              if(! caml_string_notequal(match,cst_ControlRight))return 87}}
          else
           {var switch$14=caml_string_compare(match,cst_Backslash);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 52;
              if(! caml_string_notequal(match,cst_Backspace))return 43;
              if(! caml_string_notequal(match,cst_BracketLeft))return 47;
              if(! caml_string_notequal(match,cst_BracketRight))return 48;
              if(! caml_string_notequal(match,cst_BrowserBack))return 116;
              if(! caml_string_notequal(match,cst_BrowserFavorites))
               return 112;
              if(! caml_string_notequal(match,cst_BrowserForward))return 115;
              if(! caml_string_notequal(match,cst_BrowserHome))return 111}
            else
             {if(! caml_string_notequal(match,cst_AltLeft))return 92;
              if(! caml_string_notequal(match,cst_AltRight))return 93;
              if(! caml_string_notequal(match,cst_ArrowDown))return 97;
              if(! caml_string_notequal(match,cst_ArrowLeft))return 94;
              if(! caml_string_notequal(match,cst_ArrowRight))return 95;
              if(! caml_string_notequal(match,cst_ArrowUp))return 96;
              if(! caml_string_notequal(match,cst_Backquote))return 51}}}}
      return 0}
    function try_key_code_left(param)
     {if(19 <= param)
       {if(91 === param)return 88}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 90;case 1:return 86;default:return 92}}
      return 0}
    function try_key_code_right(param)
     {if(19 <= param)
       {if(91 === param)return 89}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 91;case 1:return 87;default:return 93}}
      return 0}
    function try_key_code_numpad(param)
     {if(47 <= param)
       {var switcher=param - 96 | 0;
        if(! (15 < switcher >>> 0))
         switch(switcher)
          {case 0:return 68;
           case 1:return 69;
           case 2:return 70;
           case 3:return 71;
           case 4:return 72;
           case 5:return 73;
           case 6:return 74;
           case 7:return 75;
           case 8:return 76;
           case 9:return 77;
           case 10:return 78;
           case 11:return 80;
           case 12:break;
           case 13:return 79;
           case 14:return 81;
           default:return 84}}
      else
       if(12 <= param)
        {var switcher$0=param - 12 | 0;
         switch(switcher$0)
          {case 0:return 73;
           case 1:return 83;
           case 21:return 77;
           case 22:return 71;
           case 23:return 69;
           case 24:return 75;
           case 25:return 72;
           case 26:return 76;
           case 27:return 74;
           case 28:return 70;
           case 33:return 68;
           case 34:return 81
           }}
      return 0}
    function try_key_code_normal(param)
     {var switcher=param - 8 | 0;
      if(! (214 < switcher >>> 0))
       {var _fI_=switcher;
        if(67 <= _fI_)
         switch(_fI_)
          {case 67:return 11;
           case 68:return 12;
           case 69:return 13;
           case 70:return 14;
           case 71:return 15;
           case 72:return 16;
           case 73:return 17;
           case 74:return 18;
           case 75:return 19;
           case 76:return 20;
           case 77:return 21;
           case 78:return 22;
           case 79:return 23;
           case 80:return 24;
           case 81:return 25;
           case 82:return 26;
           case 85:return 109;
           case 104:return 56;
           case 105:return 57;
           case 106:return 58;
           case 107:return 59;
           case 108:return 60;
           case 109:return 61;
           case 110:return 62;
           case 111:return 63;
           case 112:return 64;
           case 113:return 65;
           case 114:return 66;
           case 115:return 67;
           case 137:return 119;
           case 178:return 49;
           case 179:return 38;
           case 180:return 53;
           case 181:return 37;
           case 182:return 54;
           case 183:return 55;
           case 184:return 51;
           case 211:return 47;
           case 212:return 52;
           case 213:return 48;
           case 214:return 50
           }
        else
         switch(_fI_)
          {case 0:return 43;
           case 1:return 39;
           case 5:return 40;
           case 11:return 123;
           case 12:return 46;
           case 19:return 42;
           case 24:return 41;
           case 25:return 98;
           case 26:return 99;
           case 27:return 101;
           case 28:return 100;
           case 29:return 94;
           case 30:return 96;
           case 31:return 95;
           case 32:return 97;
           case 34:return 120;
           case 37:return 44;
           case 38:return 45;
           case 40:return 27;
           case 41:return 28;
           case 42:return 29;
           case 43:return 30;
           case 44:return 31;
           case 45:return 32;
           case 46:return 33;
           case 47:return 34;
           case 48:return 35;
           case 49:return 36;
           case 57:return 1;
           case 58:return 2;
           case 59:return 3;
           case 60:return 4;
           case 61:return 5;
           case 62:return 6;
           case 63:return 7;
           case 64:return 8;
           case 65:return 9;
           case 66:return 10
           }}
      return 0}
    function make_unidentified(param){return 0}
    function run_next(value,f,v){return v?v:caml_call1(f,value)}
    function symbol$11(x,f){return caml_call1(f,x)}
    function of_event(evt)
     {var _fB_=evt.keyCode;
      function _fC_(_fH_){return run_next(_fB_,try_key_code_normal,_fH_)}
      var match=evt.location,switcher=match - 1 | 0;
      if(2 < switcher >>> 0)
       var _fD_=make_unidentified;
      else
       switch(switcher)
        {case 0:
          var
           _fy_=evt.keyCode,
           _fD_=function(_fF_){return run_next(_fy_,try_key_code_left,_fF_)};
          break;
         case 1:
          var
           _fz_=evt.keyCode,
           _fD_=function(_fE_){return run_next(_fz_,try_key_code_right,_fE_)};
          break;
         default:
          var
           _fA_=evt.keyCode,
           _fD_=function(_fG_){return run_next(_fA_,try_key_code_numpad,_fG_)}}
      var value=evt.code;
      return symbol$11
              (symbol$11
                (symbol$11
                  (0,
                   function(v)
                    {return v?v:caml_call3(Optdef[7],value,make_unidentified,f)}),
                 _fD_),
               _fC_)}
    function char_of_int(value)
     {if(caml_call2(symbol$5,0,value))
       try
        {var _fw_=[0,caml_call1(Stdlib_uchar[8],value)];return _fw_}
       catch(_fx_){return 0}
      return 0}
    function empty_string(param){return ""}
    function none(param){return 0}
    function of_event$0(evt)
     {var t109=caml_call2(Optdef[8],evt.key,empty_string),match=t109.length;
      return 0 === match
              ?caml_call3(Optdef[7],evt.charCode,none,char_of_int)
              :1 === match?char_of_int(t109.charCodeAt(0) | 0):0}
    function element$1(_fv_){return _fv_}
    function tagged(e)
     {var t111=e.tagName,tag=caml_string_of_jsbytes(t111.toLowerCase());
      if(caml_call2(symbol$8,caml_ml_string_length(tag),0))return [61,e];
      var match=runtime.caml_string_unsafe_get(tag,0),switcher=match - 97 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:
          return caml_string_notequal(tag,cst_a$1)
                  ?caml_string_notequal(tag,cst_area$1)
                    ?caml_string_notequal(tag,cst_audio$1)?[61,e]:[2,e]
                    :[1,e]
                  :[0,e];
         case 1:
          return caml_string_notequal(tag,cst_base$1)
                  ?caml_string_notequal(tag,cst_blockquote$1)
                    ?caml_string_notequal(tag,cst_body$1)
                      ?caml_string_notequal(tag,cst_br$1)
                        ?caml_string_notequal(tag,cst_button$1)?[61,e]:[7,e]
                        :[6,e]
                      :[5,e]
                    :[4,e]
                  :[3,e];
         case 2:
          return caml_string_notequal(tag,cst_canvas$1)
                  ?caml_string_notequal(tag,cst_caption$1)
                    ?caml_string_notequal(tag,cst_col$1)
                      ?caml_string_notequal(tag,cst_colgroup$1)?[61,e]:[11,e]
                      :[10,e]
                    :[9,e]
                  :[8,e];
         case 3:
          return caml_string_notequal(tag,cst_del$1)
                  ?caml_string_notequal(tag,cst_div$1)
                    ?caml_string_notequal(tag,cst_dl$1)?[61,e]:[14,e]
                    :[13,e]
                  :[12,e];
         case 4:return caml_string_notequal(tag,cst_embed$1)?[61,e]:[15,e];
         case 5:
          return caml_string_notequal(tag,cst_fieldset$1)
                  ?caml_string_notequal(tag,cst_form$1)
                    ?caml_string_notequal(tag,cst_frame$1)
                      ?caml_string_notequal(tag,cst_frameset$1)?[61,e]:[18,e]
                      :[19,e]
                    :[17,e]
                  :[16,e];
         case 7:
          return caml_string_notequal(tag,cst_h1$1)
                  ?caml_string_notequal(tag,cst_h2$1)
                    ?caml_string_notequal(tag,cst_h3$1)
                      ?caml_string_notequal(tag,cst_h4$1)
                        ?caml_string_notequal(tag,cst_h5$1)
                          ?caml_string_notequal(tag,cst_h6$1)
                            ?caml_string_notequal(tag,cst_head$1)
                              ?caml_string_notequal(tag,cst_hr$1)
                                ?caml_string_notequal(tag,cst_html$1)?[61,e]:[28,e]
                                :[27,e]
                              :[26,e]
                            :[25,e]
                          :[24,e]
                        :[23,e]
                      :[22,e]
                    :[21,e]
                  :[20,e];
         case 8:
          return caml_string_notequal(tag,cst_iframe$1)
                  ?caml_string_notequal(tag,cst_img$1)
                    ?caml_string_notequal(tag,cst_input$2)
                      ?caml_string_notequal(tag,cst_ins$1)?[61,e]:[32,e]
                      :[31,e]
                    :[30,e]
                  :[29,e];
         case 11:
          return caml_string_notequal(tag,cst_label$1)
                  ?caml_string_notequal(tag,cst_legend$1)
                    ?caml_string_notequal(tag,cst_li$1)
                      ?caml_string_notequal(tag,cst_link$1)?[61,e]:[36,e]
                      :[35,e]
                    :[34,e]
                  :[33,e];
         case 12:
          return caml_string_notequal(tag,cst_map$1)
                  ?caml_string_notequal(tag,cst_meta$1)?[61,e]:[38,e]
                  :[37,e];
         case 14:
          return caml_string_notequal(tag,cst_object$1)
                  ?caml_string_notequal(tag,cst_ol$1)
                    ?caml_string_notequal(tag,cst_optgroup$1)
                      ?caml_string_notequal(tag,cst_option$1)?[61,e]:[42,e]
                      :[41,e]
                    :[40,e]
                  :[39,e];
         case 15:
          return caml_string_notequal(tag,cst_p$1)
                  ?caml_string_notequal(tag,cst_param$1)
                    ?caml_string_notequal(tag,cst_pre$1)?[61,e]:[45,e]
                    :[44,e]
                  :[43,e];
         case 16:return caml_string_notequal(tag,cst_q$1)?[61,e]:[46,e];
         case 18:
          return caml_string_notequal(tag,cst_script$1)
                  ?caml_string_notequal(tag,cst_select$2)
                    ?caml_string_notequal(tag,cst_style$1)?[61,e]:[49,e]
                    :[48,e]
                  :[47,e];
         case 19:
          return caml_string_notequal(tag,cst_table$1)
                  ?caml_string_notequal(tag,cst_tbody$1)
                    ?caml_string_notequal(tag,cst_td$1)
                      ?caml_string_notequal(tag,cst_textarea$1)
                        ?caml_string_notequal(tag,cst_tfoot$1)
                          ?caml_string_notequal(tag,cst_th$1)
                            ?caml_string_notequal(tag,cst_thead$1)
                              ?caml_string_notequal(tag,cst_title$1)
                                ?caml_string_notequal(tag,cst_tr$1)?[61,e]:[58,e]
                                :[57,e]
                              :[56,e]
                            :[55,e]
                          :[54,e]
                        :[53,e]
                      :[52,e]
                    :[51,e]
                  :[50,e];
         case 20:return caml_string_notequal(tag,cst_ul$1)?[61,e]:[59,e];
         case 21:return caml_string_notequal(tag,cst_video$1)?[61,e]:[60,e]
         }
      return [61,e]}
    function opt_tagged(e)
     {function _ft_(e){return [0,tagged(e)]}
      function _fu_(param){return 0}
      return caml_call3(Opt[7],e,_fu_,_ft_)}
    function taggedEvent(ev)
     {function _fe_(ev){return [0,ev]}
      function _ff_(param)
       {function _fh_(ev){return [1,ev]}
        function _fi_(param)
         {function _fk_(ev){return [2,ev]}
          function _fl_(param)
           {function _fn_(ev){return [3,ev]}
            function _fo_(param)
             {function _fq_(ev){return [4,ev]}
              function _fr_(param){return [5,ev]}
              var _fs_=popStateEvent(ev);
              return caml_call3(Opt[7],_fs_,_fr_,_fq_)}
            var _fp_=mouseScrollEvent(ev);
            return caml_call3(Opt[7],_fp_,_fo_,_fn_)}
          var _fm_=wheelEvent(ev);
          return caml_call3(Opt[7],_fm_,_fl_,_fk_)}
        var _fj_=keyboardEvent(ev);
        return caml_call3(Opt[7],_fj_,_fi_,_fh_)}
      var _fg_=mouseEvent(ev);
      return caml_call3(Opt[7],_fg_,_ff_,_fe_)}
    function opt_taggedEvent(ev)
     {function _fc_(ev){return [0,taggedEvent(ev)]}
      function _fd_(param){return 0}
      return caml_call3(Opt[7],ev,_fd_,_fc_)}
    function stopPropagation(ev)
     {function _fa_(param){return ev.stopPropagation()}
      function _fb_(param){return ev.cancelBubble = t25}
      return caml_call3(Optdef[7],ev.stopPropagation,_fb_,_fa_)}
    var
     requestAnimationFrame=
      runtime.caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             _i_.requestAnimationFrame,
             [0,
              _i_.mozRequestAnimationFrame,
              [0,
               _i_.webkitRequestAnimationFrame,
               [0,
                _i_.oRequestAnimationFrame,
                [0,_i_.msRequestAnimationFrame,0]]]]];
          try
           {var
             _e9_=function(c){return caml_call1(Optdef[5],c)},
             req=caml_call2(Stdlib_list[36],_e9_,l),
             _e__=function(callback){return req(callback)};
            return _e__}
          catch(_e$_)
           {_e$_ = caml_wrap_exception(_e$_);
            if(_e$_ === Stdlib[8])
             {var
               now=function(param){var t122=new t121();return t122.getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0.?0.:dt;
                last[1] = t;
                _i_.setTimeout(callback,dt$0);
                return 0}}
            throw _e$_}});
    function hasPushState(param)
     {return caml_call1(Optdef[5],_i_.history.pushState)}
    function hasPlaceholder(param)
     {var i=createInput(0,0,t22);return caml_call1(Optdef[5],i.placeholder)}
    function hasRequired(param)
     {var i=createInput(0,0,t22);return caml_call1(Optdef[5],i.required)}
    var overflow_limit=2147483000.;
    function setTimeout(callback,d)
     {var id=[0,0];
      function loop(step,param)
       {if(2147483000. < step)
         var remain=step - 2147483000.,step$0=overflow_limit;
        else
         var remain=0.,step$0=step;
        var
         cb=remain == 0.?callback:function(_e8_){return loop(remain,_e8_)},
         t130=caml_js_wrap_callback(cb);
        id[1] = [0,_i_.setTimeout(t130,step$0)];
        return 0}
      loop(d,0);
      return id}
    function clearTimeout(id)
     {var _e7_=id[1];
      if(_e7_){var x=_e7_[1];id[1] = 0;return _i_.clearTimeout(x)}
      return 0}
    function js_array_of_collection(c){return [].slice.call(c)}
    var
     Js_of_ocaml_Dom_html=
      [0,
       d,
       t22,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       _i_,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       Event$0,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0,of_event,try_key_code_normal],
       [0,of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$1,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element$0,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map$2,
        meta,
        object,
        ol,
        optgroup,
        option$1,
        p,
        param,
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       runtime.caml_js_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
    caml_register_global(1648,Js_of_ocaml_Dom_html,"Js_of_ocaml__Dom_html");
    var formData=Unsafe[1].FormData,formData_form=Unsafe[1].FormData;
    function filter_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map$0(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function have_content(elt)
     {var
       _e5_=caml_call2(symbol$9,elt.name.length,0),
       _e6_=_e5_?1 - (elt.disabled | 0):_e5_;
      return _e6_}
    function form_elements(get,form)
     {var length=form.elements.length;
      function _eT_(i)
       {var t34=form.elements,_e4_=t34.item(i);
        return caml_call1(Opt[10],_e4_)}
      var
       _eU_=caml_call2(Stdlib_array[2],length,_eT_),
       elements=caml_call1(Stdlib_array[11],_eU_);
      function _eV_(param)
       {if(param)
         {var v=param[1],match$3=tagged(v);
          switch(match$3[0])
           {case 31:
             var v$0=match$3[1];
             if(get)var sth=get[1],get$0=sth;else var get$0=0;
             if(have_content(v$0))
              {var
                name$1=caml_string_of_jsstring(v$0.name),
                value=v$0.value,
                t20=v$0.type,
                match=caml_string_of_jsbytes(t20.toLowerCase());
               if(caml_string_notequal(match,cst_checkbox))
                {if(! caml_string_notequal(match,cst_file))
                  {if(get$0)return [0,[0,name$1,[0,-976970511,value]],0];
                   var match$0=caml_call1(Optdef[10],v$0.files);
                   if(match$0)
                    {var list=match$0[1];
                     if(caml_call2(symbol$8,list.length,0))
                      return [0,[0,name$1,[0,-976970511,""]],0];
                     var match$1=caml_call1(Optdef[10],v$0.multiple);
                     if(match$1 && match$1[1])
                      {var
                        _eZ_=function(t28){return list.item(t28)},
                        _e0_=caml_call2(Stdlib_array[2],list.length,_eZ_),
                        _e1_=caml_call1(Stdlib_array[11],_e0_);
                       return filter_map$0
                               (function(f)
                                 {var match=caml_call1(Opt[10],f);
                                  if(match)
                                   {var file=match[1];return [0,[0,name$1,[0,781515420,file]]]}
                                  return 0},
                                _e1_)}
                     var _e2_=list.item(0),match$2=caml_call1(Opt[10],_e2_);
                     if(match$2)
                      {var file=match$2[1];
                       return [0,[0,name$1,[0,781515420,file]],0]}
                     return 0}
                   return 0}
                 var switch$0=0;
                 if(caml_string_notequal(match,cst_password))
                  {if(caml_string_notequal(match,cst_radio))
                    {var switch$1=0;
                     if
                      (caml_string_notequal(match,cst_reset)
                       &&
                       caml_string_notequal(match,cst_submit$0))
                      {if(caml_string_notequal(match,cst_text))
                        return [0,[0,name$1,[0,-976970511,value]],0];
                       switch$0 = 1;
                       switch$1 = 1}
                     if(! switch$1)return 0}}
                 else
                  switch$0 = 1;
                 if(switch$0)return [0,[0,name$1,[0,-976970511,value]],0]}
               return v$0.checked | 0?[0,[0,name$1,[0,-976970511,value]],0]:0}
             return 0;
            case 48:
             var v$1=match$3[1];
             if(have_content(v$1))
              {var name$0=caml_string_of_jsstring(v$1.name);
               if(v$1.multiple | 0)
                {var
                  _eX_=
                   function(i)
                    {var t13=v$1.options,_e3_=t13.item(i);
                     return caml_call1(Opt[10],_e3_)},
                  options=caml_call2(Stdlib_array[2],v$1.options.length,_eX_),
                  _eY_=caml_call1(Stdlib_array[11],options);
                 return filter_map$0
                         (function(param)
                           {if(param)
                             {var e=param[1];
                              return e.selected | 0
                                      ?[0,[0,name$0,[0,-976970511,e.value]]]
                                      :0}
                            return 0},
                          _eY_)}
               return [0,[0,name$0,[0,-976970511,v$1.value]],0]}
             return 0;
            case 53:
             var v$2=match$3[1];
             if(have_content(v$2))
              {var name=caml_string_of_jsstring(v$2.name);
               return [0,[0,name,[0,-976970511,v$2.value]],0]}
             return 0;
            default:return 0}}
        return 0}
      var
       _eW_=caml_call2(Stdlib_list[17],_eV_,elements),
       contents=caml_call1(Stdlib_list[14],_eW_);
      return contents}
    function append(form_contents,form_elt)
     {if(891486873 <= form_contents[1])
       {var list=form_contents[2];list[1] = [0,form_elt,list[1]];return 0}
      var f=form_contents[2],_eR_=form_elt[2],_eS_=form_elt[1];
      if(781515420 <= _eR_[1])
       {var file=_eR_[2],t38=caml_jsstring_of_string(_eS_);
        return f.append(t38,file)}
      var s=_eR_[2],t35=caml_jsstring_of_string(_eS_);
      return f.append(t35,s)}
    function empty_form_contents(param)
     {var match=caml_call1(Optdef[10],formData);
      if(match){var constr=match[1];return [0,808620462,new constr()]}
      return [0,891486873,[0,0]]}
    function post_form_contents(form)
     {var contents=empty_form_contents(0),_eO_=form_elements(0,form);
      function _eP_(_eQ_){return append(contents,_eQ_)}
      caml_call2(Stdlib_list[15],_eP_,_eO_);
      return contents}
    function get_form_contents(form)
     {var _eL_=form_elements(_m_,form);
      function _eM_(param)
       {var _eN_=param[2];
        if(typeof _eN_ !== "number" && -976970511 === _eN_[1])
         {var s=_eN_[2],name=param[1];
          return [0,name,caml_string_of_jsstring(s)]}
        throw [0,Assert_failure,_n_]}
      return caml_call2(Stdlib_list[17],_eM_,_eL_)}
    var
     Js_of_ocaml_Form=
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
    caml_register_global(1649,Js_of_ocaml_Form,"Js_of_ocaml__Form");
    var
     readystatechange=caml_call1(Event[1],cst_readystatechange),
     loadstart$1=caml_call1(Event[1],cst_loadstart$1),
     progress$1=caml_call1(Event[1],cst_progress$1),
     abort$1=caml_call1(Event[1],cst_abort$1),
     error$1=caml_call1(Event[1],cst_error$1),
     load$1=caml_call1(Event[1],cst_load$1),
     timeout=caml_call1(Event[1],cst_timeout),
     loadend$0=caml_call1(Event[1],cst_loadend$0),
     Event$1=
      [0,
       readystatechange,
       loadstart$1,
       progress$1,
       abort$1,
       error$1,
       load$1,
       timeout,
       loadend$0],
     Js_of_ocaml_XmlHttpRequest=[0,runtime.caml_xmlhttprequest_create,Event$1];
    caml_register_global
     (1650,Js_of_ocaml_XmlHttpRequest,"Js_of_ocaml__XmlHttpRequest");
    var t2=Unsafe[1].Worker;
    function create(script)
     {var t1=caml_jsstring_of_string(script);return new t2(t1)}
    function import_scripts(scripts)
     {if(Unsafe[1].importScripts === t39)
       caml_call1(Stdlib[1],cst_Worker_import_scripts_is_u);
      var _eI_=caml_call1(Stdlib_array[12],scripts);
      function _eJ_(s){return caml_jsstring_of_string(s)}
      var _eK_=caml_call2(Stdlib_array[15],_eJ_,_eI_);
      return runtime.caml_js_fun_call(Unsafe[1].importScripts,_eK_)}
    function set_onmessage(handler)
     {if(Unsafe[1].onmessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi);
      function js_handler(ev){return caml_call1(handler,ev.data)}
      return Unsafe[1].onmessage = caml_js_wrap_callback(js_handler)}
    function post_message(t10)
     {if(Unsafe[1].postMessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi$0);
      return Unsafe[1].postMessage(t10)}
    var
     Js_of_ocaml_Worker=
      [0,create,import_scripts,set_onmessage,post_message];
    caml_register_global(1651,Js_of_ocaml_Worker,"Js_of_ocaml__Worker");
    var webSocket=Unsafe[1].WebSocket;
    function is_supported(param){return caml_call1(Optdef[5],webSocket)}
    var Js_of_ocaml_WebSockets=[0,webSocket,webSocket,webSocket,is_supported];
    caml_register_global
     (1652,Js_of_ocaml_WebSockets,"Js_of_ocaml__WebSockets");
    var
     defaultContextAttributes=
      {"alpha":t25,
       "depth":t25,
       "stencil":t4,
       "antialias":t25,
       "premultipliedAlpha":t4,
       "preserveDrawingBuffer":t4,
       "preferLowPowerToHighPerformance":t4,
       "failIfMajorPerformanceCaveat":t4},
     webglcontextlost=caml_call1(Event$0[86],cst_webglcontextlost),
     webglcontextrestored=caml_call1(Event$0[86],cst_webglcontextrestored),
     webglcontextcreationerror=
      caml_call1(Event$0[86],cst_webglcontextcreationerror),
     Event$2=
      [0,webglcontextlost,webglcontextrestored,webglcontextcreationerror];
    function getContext(t3)
     {var ctx=t3.getContext("webgl");
      return caml_call1(Opt[5],ctx)?ctx:t3.getContext("experimental-webgl")}
    function getContextWithAttributes(t9,t8)
     {var ctx=t9.getContext("webgl",t8);
      return caml_call1(Opt[5],ctx)?ctx:t9.getContext("experimental-webgl",t8)}
    var
     Js_of_ocaml_WebGL=
      [0,defaultContextAttributes,Event$2,getContext,getContextWithAttributes];
    caml_register_global(1653,Js_of_ocaml_WebGL,"Js_of_ocaml__WebGL");
    function regexp(s)
     {var t0=caml_jsbytes_of_string(s);return new t11(t0,"g")}
    function regexp_case_fold(s)
     {var t3=caml_jsbytes_of_string(s);return new t11(t3,"gi")}
    function regexp_with_flag(s,f)
     {var
       t7=caml_jsstring_of_string(caml_call2(Stdlib[28],cst_g,f)),
       t6=caml_jsbytes_of_string(s);
      return new t11(t6,t7)}
    function blunt_str_array_get(a,i)
     {function _eH_(param){throw [0,Assert_failure,_o_]}
      return caml_string_of_jsbytes(caml_call2(Optdef[8],a[i],_eH_))}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var
       t11=caml_jsbytes_of_string(s),
       _eF_=r.exec(t11),
       _eG_=caml_call2(Opt[3],_eF_,match_result);
      return caml_call1(Opt[10],_eG_)}
    function search_forward(r,s,i)
     {r.lastIndex = i;
      var t15=caml_jsbytes_of_string(s);
      function _eC_(res){return [0,res.index,res]}
      var _eD_=r.exec(t15),_eE_=caml_call2(Opt[3],_eD_,_eC_);
      return caml_call1(Opt[10],_eE_)}
    function matched_string(r){return blunt_str_array_get(r,0)}
    function matched_group(r,i)
     {var _eB_=caml_call2(Optdef[3],r[i],caml_string_of_jsbytes);
      return caml_call1(Optdef[10],_eB_)}
    var t21=new t11("[$]","g");
    function quote_repl(s)
     {var t23=caml_jsbytes_of_string(s);return t23.replace(t21,"$$$$")}
    function global_replace(r,s,s_by)
     {r.lastIndex = 0;
      var t27=quote_repl(s_by),t28=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t28.replace(r,t27))}
    function replace_first(r,s,s_by)
     {var
       match=r.ignoreCase | 0,
       match$0=r.multiline | 0,
       flags=match?match$0?"mi":"i":match$0?"m":"",
       t32=r.source,
       t35=new t11(t32,flags),
       t36=quote_repl(s_by),
       t37=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t37.replace(t35,t36))}
    function list_of_js_array(a)
     {var idx$1=a.length - 1 | 0,accu=0,idx=idx$1;
      for(;;)
       {if(caml_call2(symbol$5,idx,0))return accu;
        var
         idx$0=idx - 1 | 0,
         accu$0=[0,blunt_str_array_get(a,idx),accu],
         accu=accu$0,
         idx=idx$0;
        continue}}
    function split(r,s)
     {r.lastIndex = 0;
      var t42=caml_jsbytes_of_string(s);
      return list_of_js_array(t42.split(r))}
    function bounded_split(r,s,i)
     {r.lastIndex = 0;
      var t47=caml_jsbytes_of_string(s);
      return list_of_js_array(t47.split(r,i))}
    var t48=regexp(cst);
    function quote(s)
     {var t50=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t50.replace(t48,"\\$&"))}
    function regexp_string(s){return regexp(quote(s))}
    function regexp_string_case_fold(s){return regexp_case_fold(quote(s))}
    var
     Js_of_ocaml_Regexp=
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_forward,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
    caml_register_global(1654,Js_of_ocaml_Regexp,"Js_of_ocaml__Regexp");
    var Local_exn=[248,cst_Js_of_ocaml_Url_Local_exn,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    var plus_re=regexp_string(cst$0),t14=new t11("\\+","g");
    function urldecode_js_string_string(s)
     {t14.lastIndex = 0;
      return caml_string_of_jsbytes(unescape(s.replace(t14," ")))}
    function urldecode(s)
     {return caml_string_of_jsbytes
              (unescape
                (caml_jsbytes_of_string(global_replace(plus_re,s,cst$1))))}
    function urlencode(opt,s)
     {if(opt)var sth=opt[1],with_plus=sth;else var with_plus=1;
      if(with_plus)
       {var s$0=caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)));
        return global_replace(plus_re,s$0,cst_2B)}
      return caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)))}
    var
     Not_an_http_protocol=
      [248,cst_Js_of_ocaml_Url_Not_an_htt,caml_fresh_oo_id(0)],
     default_http_port=80,
     default_https_port=443;
    function path_of_path_string(s)
     {var l=caml_ml_string_length(s);
      function aux(i)
       {try
         {var _ez_=caml_call3(String[18],s,i,47),j=_ez_}
        catch(_eA_)
         {_eA_ = caml_wrap_exception(_eA_);
          if(_eA_ !== Stdlib[8])throw _eA_;
          var j=l}
        var word=caml_call3(String[4],s,i,j - i | 0);
        return caml_call2(symbol$10,j,l)?[0,word,0]:[0,word,aux(j + 1 | 0)]}
      var a=aux(0);
      if(a && ! caml_string_notequal(a[1],cst$2))
       {var _ey_=a[2];
        if(! _ey_)return 0;
        if(! caml_string_notequal(_ey_[1],cst$3) && ! _ey_[2])return _p_}
      return a}
    function encode_arguments(l)
     {function _et_(param)
       {var
         v=param[2],
         n=param[1],
         _ev_=urlencode(0,v),
         _ew_=caml_call2(Stdlib[28],cst$4,_ev_),
         _ex_=urlencode(0,n);
        return caml_call2(Stdlib[28],_ex_,_ew_)}
      var _eu_=caml_call2(Stdlib_list[17],_et_,l);
      return caml_call2(String[7],cst$5,_eu_)}
    function decode_arguments_js_string(s)
     {var
       t0=caml_jsstring_of_string(caml_call2(String[1],1,38)),
       arr=s.split(t0),
       len=arr.length;
      function aux(acc,idx)
       {var idx$0=idx;
        for(;;)
         {if(caml_call2(symbol$5,idx$0,0))return acc;
          try
           {var
             _el_=idx$0 - 1 | 0,
             _em_=
              function(s)
               {function _er_(param)
                 {var
                   y=param[2],
                   x=param[1],
                   _es_=urldecode_js_string_string(y);
                  return [0,urldecode_js_string_string(x),_es_]}
                var
                 t2=caml_jsstring_of_string(caml_call2(String[1],1,61)),
                 t5=s.indexOf(t2);
                if(caml_call2(symbol$5,t5,0))
                 var _eq_=t39;
                else
                 var
                  t7=t5 + 1 | 0,
                  _ep_=s.slice(t7),
                  _eq_=[0,s.slice(0,t5),_ep_];
                return caml_call3(Optdef[7],_eq_,interrupt,_er_)},
             _en_=
              aux
               ([0,caml_call3(Optdef[7],arr[idx$0],interrupt,_em_),acc],_el_);
            return _en_}
          catch(_eo_)
           {_eo_ = caml_wrap_exception(_eo_);
            if(_eo_ === Local_exn)
             {var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
            throw _eo_}}}
      return aux(0,len - 1 | 0)}
    function decode_arguments(s)
     {return decode_arguments_js_string(caml_jsbytes_of_string(s))}
    var
     t19=caml_jsbytes_of_string(cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0),
     t24=new t11(t19),
     t21$0=caml_jsbytes_of_string(cst_Ff_Ii_Ll_Ee),
     t26=new t11(t21$0);
    function url_of_js_string(s)
     {function _d4_(res)
       {var
         prot_string=caml_call2(Optdef[8],res[1],interrupt),
         match=caml_string_of_jsbytes(prot_string.toLowerCase());
        if
         (caml_string_notequal(match,cst_file$0)
          &&
          caml_string_notequal(match,cst_file$1))
         {var switch$0=0;
          if
           (caml_string_notequal(match,cst_http)
            &&
            caml_string_notequal(match,cst_http$0))
           {var switch$1=0;
            if
             (caml_string_notequal(match,cst_https)
              &&
              caml_string_notequal(match,cst_https$0))
             switch$1 = 1;
            if(! switch$1){var ssl=1;switch$0 = 2}}
          else
           switch$0 = 1;
          var switch$2=0;
          switch(switch$0)
           {case 1:var ssl=0;switch$2 = 1;break;
            case 0:break;
            default:switch$2 = 1}
          if(switch$2)
           {var
             _ec_=function(param){return caml_jsbytes_of_string(cst$7)},
             path_str=
              urldecode_js_string_string(caml_call2(Optdef[8],res[6],_ec_)),
             _ed_=function(param){return caml_jsbytes_of_string(cst$8)},
             _ee_=
              urldecode_js_string_string(caml_call2(Optdef[8],res[10],_ed_)),
             _ef_=function(param){return caml_jsbytes_of_string(cst$9)},
             _eg_=
              decode_arguments_js_string(caml_call2(Optdef[8],res[8],_ef_)),
             _eh_=path_of_path_string(path_str),
             _ei_=function(param){return caml_jsbytes_of_string(cst$10)},
             s=caml_string_of_jsbytes(caml_call2(Optdef[8],res[4],_ei_)),
             _ej_=
              caml_string_notequal(s,cst$6)?caml_int_of_string(s):ssl?443:80,
             url=
              [0,
               urldecode_js_string_string
                (caml_call2(Optdef[8],res[2],interrupt)),
               _ej_,
               _eh_,
               path_str,
               _eg_,
               _ee_],
             _ek_=ssl?[1,url]:[0,url];
            return [0,_ek_]}}
        throw Not_an_http_protocol}
      function _d5_(param)
       {function _d7_(res)
         {var
           path_str=
            urldecode_js_string_string(caml_call2(Optdef[8],res[2],interrupt));
          function _d__(param){return caml_jsbytes_of_string(cst$11)}
          var _d$_=caml_string_of_jsbytes(caml_call2(Optdef[8],res[6],_d__));
          function _ea_(param){return caml_jsbytes_of_string(cst$12)}
          var
           _eb_=
            decode_arguments_js_string(caml_call2(Optdef[8],res[4],_ea_));
          return [0,[2,[0,path_of_path_string(path_str),path_str,_eb_,_d$_]]]}
        function _d8_(param){return 0}
        var _d9_=t26.exec(s);
        return caml_call3(Opt[7],_d9_,_d8_,_d7_)}
      var _d6_=t24.exec(s);
      return caml_call3(Opt[7],_d6_,_d5_,_d4_)}
    function url_of_string(s)
     {return url_of_js_string(caml_jsbytes_of_string(s))}
    function string_of_url(param)
     {switch(param[0])
       {case 0:
         var
          match=param[1],
          frag=match[6],
          args=match[5],
          path=match[3],
          port=match[2],
          host=match[1];
         if(caml_string_notequal(frag,cst$13))
          var _dr_=urlencode(0,frag),_ds_=caml_call2(Stdlib[28],cst$14,_dr_);
         else
          var _ds_=cst$21;
         if(args)
          var
           _dt_=encode_arguments(args),
           _du_=caml_call2(Stdlib[28],cst$15,_dt_);
         else
          var _du_=cst$20;
         var
          _dv_=caml_call2(Stdlib[28],_du_,_ds_),
          _dw_=function(x){return urlencode(0,x)},
          _dx_=caml_call2(Stdlib_list[17],_dw_,path),
          _dy_=caml_call2(String[7],cst$16,_dx_),
          _dz_=caml_call2(Stdlib[28],_dy_,_dv_),
          _dA_=caml_call2(Stdlib[28],cst$17,_dz_);
         if(80 === port)
          var _dB_=cst$18;
         else
          var
           _dF_=caml_call1(Stdlib[33],port),
           _dB_=caml_call2(Stdlib[28],cst$19,_dF_);
         var
          _dC_=caml_call2(Stdlib[28],_dB_,_dA_),
          _dD_=urlencode(0,host),
          _dE_=caml_call2(Stdlib[28],_dD_,_dC_);
         return caml_call2(Stdlib[28],cst_http$1,_dE_);
        case 1:
         var
          match$0=param[1],
          frag$0=match$0[6],
          args$0=match$0[5],
          path$0=match$0[3],
          port$0=match$0[2],
          host$0=match$0[1];
         if(caml_string_notequal(frag$0,cst$22))
          var
           _dG_=urlencode(0,frag$0),
           _dH_=caml_call2(Stdlib[28],cst$23,_dG_);
         else
          var _dH_=cst$30;
         if(args$0)
          var
           _dI_=encode_arguments(args$0),
           _dJ_=caml_call2(Stdlib[28],cst$24,_dI_);
         else
          var _dJ_=cst$29;
         var
          _dK_=caml_call2(Stdlib[28],_dJ_,_dH_),
          _dL_=function(x){return urlencode(0,x)},
          _dM_=caml_call2(Stdlib_list[17],_dL_,path$0),
          _dN_=caml_call2(String[7],cst$25,_dM_),
          _dO_=caml_call2(Stdlib[28],_dN_,_dK_),
          _dP_=caml_call2(Stdlib[28],cst$26,_dO_);
         if(443 === port$0)
          var _dQ_=cst$27;
         else
          var
           _dU_=caml_call1(Stdlib[33],port$0),
           _dQ_=caml_call2(Stdlib[28],cst$28,_dU_);
         var
          _dR_=caml_call2(Stdlib[28],_dQ_,_dP_),
          _dS_=urlencode(0,host$0),
          _dT_=caml_call2(Stdlib[28],_dS_,_dR_);
         return caml_call2(Stdlib[28],cst_https$1,_dT_);
        default:
         var
          match$1=param[1],
          frag$1=match$1[4],
          args$1=match$1[3],
          path$1=match$1[1];
         if(caml_string_notequal(frag$1,cst$31))
          var
           _dV_=urlencode(0,frag$1),
           _dW_=caml_call2(Stdlib[28],cst$32,_dV_);
         else
          var _dW_=cst$36;
         if(args$1)
          var
           _dX_=encode_arguments(args$1),
           _dY_=caml_call2(Stdlib[28],cst$33,_dX_);
         else
          var _dY_=cst$35;
         var
          _dZ_=caml_call2(Stdlib[28],_dY_,_dW_),
          _d0_=function(x){return urlencode(0,x)},
          _d1_=caml_call2(Stdlib_list[17],_d0_,path$1),
          _d2_=caml_call2(String[7],cst$34,_d1_),
          _d3_=caml_call2(Stdlib[28],_d2_,_dZ_);
         return caml_call2(Stdlib[28],cst_file$2,_d3_)}}
    var _q_=caml_call1(Optdef[2],_i_.location);
    if(caml_call1(Optdef[5],_q_))
     var _r_=_i_.location;
    else
     var
      t42=function(param,_dq_){return 0},
      t41=function(param,_dp_){return 0},
      t40=function(param){return 0},
      _r_=
       {"href":"",
        "protocol":"",
        "host":"",
        "hostname":"",
        "port":"",
        "pathname":"",
        "search":"",
        "hash":"",
        "origin":t39,
        "reload":caml_js_wrap_meth_callback(t40),
        "replace":caml_js_wrap_meth_callback(t41),
        "assign":caml_js_wrap_meth_callback(t42)};
    var
     host=urldecode_js_string_string(_r_.hostname),
     protocol=urldecode_js_string_string(_r_.protocol),
     _s_=0,
     port=
      function(param)
        {try
          {var _dn_=[0,caml_int_of_string(caml_string_of_jsbytes(_r_.port))];
           return _dn_}
         catch(_do_)
          {_do_ = caml_wrap_exception(_do_);
           if(_do_[1] === Stdlib[7])return 0;
           throw _do_}}
       (_s_),
     path_string=urldecode_js_string_string(_r_.pathname),
     path=path_of_path_string(path_string),
     t49=_r_.search;
    if(t49.charAt(0) === "?")
     var t52=_r_.search,_t_=t52.slice(1);
    else
     var _t_=_r_.search;
    var arguments$0=decode_arguments_js_string(_t_);
    function get_fragment(param)
     {function _dk_(res){return caml_string_of_jsstring(res[1])}
      function _dl_(param){return cst$37}
      var t57=new t11("#(.*)"),t58=_r_.href,_dm_=t58.match(t57);
      return caml_call3(Opt[7],_dm_,_dl_,_dk_)}
    function set_fragment(s)
     {return _r_.hash = caml_jsbytes_of_string(urlencode(0,s))}
    function get$2(param){return url_of_js_string(_r_.href)}
    function set$0(u)
     {return _r_.href = caml_jsbytes_of_string(string_of_url(u))}
    var
     as_string=urldecode_js_string_string(_r_.href),
     Js_of_ocaml_Url=
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get$2,
        set$0,
        as_string]];
    caml_register_global(1656,Js_of_ocaml_Url,"Js_of_ocaml__Url");
    var Js_of_ocaml_Lib_version=[0,s,git_version];
    caml_register_global
     (1657,Js_of_ocaml_Lib_version,"Js_of_ocaml__Lib_version");
    function update_file(name,content)
     {var oc=caml_call1(Stdlib[60],name);
      caml_call2(Stdlib[66],oc,content);
      return caml_call1(Stdlib[76],oc)}
    function set_channel_flusher(out_channel,f)
     {var
       f$0=
        caml_js_wrap_callback
         (function(s){return caml_call1(f,caml_string_of_jsbytes(s))});
      return runtime.caml_ml_set_channel_output(out_channel,f$0)}
    function set_channel_filler(in_channel,f)
     {var f$0=caml_js_wrap_callback(f);
      return runtime.caml_ml_set_channel_refill(in_channel,f$0)}
    function mount(path,f)
     {return runtime.caml_mount_autoload
              (path,
               caml_js_wrap_callback
                (function(prefix,path){return caml_call2(f,prefix,path)}))}
    function unmount(path){return runtime.caml_unmount(path)}
    if(caml_call2(String[38],git_version,cst$38))
     var js_of_ocaml_version=s;
    else
     var
      _cn_=caml_call2(Stdlib[28],cst$41,git_version),
      js_of_ocaml_version=caml_call2(Stdlib[28],s,_cn_);
    var
     _u_=runtime.caml_create_file,
     _v_=runtime.caml_read_file_content,
     Js_of_ocaml_Sys_js=
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_dj_){return runtime.caml_list_mount_point(_dj_)},
       unmount,
       mount,
       _v_,
       _u_,
       update_file,
       js_of_ocaml_version];
    caml_register_global(1658,Js_of_ocaml_Sys_js,"Js_of_ocaml__Sys_js");
    function empty_resize_observer_options(param){return {}}
    var t2$0=Unsafe[1].ResizeObserver;
    function is_supported$0(param){return caml_call1(Optdef[5],t2$0)}
    function observe(node,f,box,param)
     {var t1=caml_js_wrap_callback(f),t4=new t2$0(t1);
      if(box)
       {var box$0=box[1],t8={};t8.box = box$0;t4.observe(node,t8)}
      else
       t4.observe(node);
      return t4}
    var
     Js_of_ocaml_ResizeObserver=
      [0,empty_resize_observer_options,t2$0,is_supported$0,observe];
    caml_register_global
     (1659,Js_of_ocaml_ResizeObserver,"Js_of_ocaml__ResizeObserver");
    function empty_mutation_observer_init(param){return {}}
    var t2$1=Unsafe[1].MutationObserver;
    function is_supported$1(param){return caml_call1(Optdef[5],t2$1)}
    function observe$0
     (node,
      f,
      child_list,
      attributes,
      character_data,
      subtree,
      attribute_old_value,
      character_data_old_value,
      attribute_filter,
      param)
     {function opt_iter(x,f)
       {if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
      var t1=caml_js_wrap_callback(f),t19=new t2$1(t1),t18={};
      opt_iter(child_list,function(v){return t18.childList = v});
      opt_iter(attributes,function(v){return t18.attributes = v});
      opt_iter(character_data,function(v){return t18.characterData = v});
      opt_iter(subtree,function(v){return t18.subtree = v});
      opt_iter
       (attribute_old_value,function(v){return t18.attributeOldValue = v});
      opt_iter
       (character_data_old_value,
        function(v){return t18.characterDataOldValue = v});
      opt_iter
       (attribute_filter,
        function(l)
         {return t18.attributeFilter
                 =
                 caml_js_from_array(caml_call1(Stdlib_array[12],l))});
      t19.observe(node,t18);
      return t19}
    var
     Js_of_ocaml_MutationObserver=
      [0,empty_mutation_observer_init,t2$1,is_supported$1,observe$0];
    caml_register_global
     (1660,Js_of_ocaml_MutationObserver,"Js_of_ocaml__MutationObserver");
    var t1=Unsafe[1].Object;
    function create$0(param){return new t1()}
    function add$0(t,k,v){return t[k.concat("_")] = v}
    function remove(t,k){return delete t[k.concat("_")]}
    function find(t,k){return t[k.concat("_")]}
    function keys(t)
     {var
       t10=Unsafe[1].Object,
       key_array=t10.keys(t),
       res=[0,0],
       _df_=key_array.length - 1 | 0,
       _de_=0;
      if(! (_df_ < 0))
       {var i=_de_;
        for(;;)
         {var
           _dg_=function(param){return caml_call1(Stdlib[2],cst_Jstable_keys)},
           t15=caml_call2(Optdef[8],key_array[i],_dg_),
           t14=t15.length - 1 | 0,
           _dh_=res[1];
          res[1] = [0,t15.substring(0,t14),_dh_];
          var _di_=i + 1 | 0;
          if(_df_ !== i){var i=_di_;continue}
          break}}
      return caml_call1(Stdlib_list[9],res[1])}
    var Js_of_ocaml_Jstable=[0,create$0,add$0,remove,find,keys];
    caml_register_global(1661,Js_of_ocaml_Jstable,"Js_of_ocaml__Jstable");
    var t12=Unsafe[1].JSON;
    function reviver(this$0,key,value)
     {if(typeof value == typeof "foo")return caml_string_of_jsbytes(value);
      if
       (value instanceof array_length
        &&
        4
        ===
        value.length
        &&
        255
        ===
        value[0])
       return runtime.caml_int64_create_lo_mi_hi(value[1],value[2],value[3]);
      return value}
    var t3$0=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(t2){return t12.parse(t2,t3$0)}
    var
     mlString_constr=dummy_string.constructor,
     mlInt64_constr=dummy_int64.constructor;
    function t11$1(key,value)
     {return value instanceof mlString_constr
              ?caml_jsbytes_of_string(value)
              :value instanceof mlInt64_constr
                ?caml_js_from_array([0,255,value.lo,value.mi,value.hi])
                :value}
    function output(t10){return t12.stringify(t10,t11$1)}
    var Js_of_ocaml_Json=[0,output,unsafe_input];
    caml_register_global(1662,Js_of_ocaml_Json,"Js_of_ocaml__Json");
    function string_of_name(param)
     {var _dd_=param;
      if(74 <= _dd_)
       {if(111 <= _dd_)
         switch(_dd_)
          {case 111:return cst_palevioletred;
           case 112:return cst_papayawhip;
           case 113:return cst_peachpuff;
           case 114:return cst_peru;
           case 115:return cst_pink;
           case 116:return cst_plum;
           case 117:return cst_powderblue;
           case 118:return cst_purple;
           case 119:return cst_red;
           case 120:return cst_rosybrown;
           case 121:return cst_royalblue;
           case 122:return cst_saddlebrown;
           case 123:return cst_salmon;
           case 124:return cst_sandybrown;
           case 125:return cst_seagreen;
           case 126:return cst_seashell;
           case 127:return cst_sienna;
           case 128:return cst_silver;
           case 129:return cst_skyblue;
           case 130:return cst_slateblue;
           case 131:return cst_slategray;
           case 132:return cst_slategrey;
           case 133:return cst_snow;
           case 134:return cst_springgreen;
           case 135:return cst_steelblue;
           case 136:return cst_tan;
           case 137:return cst_teal;
           case 138:return cst_thistle;
           case 139:return cst_tomato;
           case 140:return cst_turquoise;
           case 141:return cst_violet;
           case 142:return cst_wheat;
           case 143:return cst_white;
           case 144:return cst_whitesmoke;
           case 145:return cst_yellow;
           default:return cst_yellowgreen}
        switch(_dd_)
         {case 74:return cst_lightpink;
          case 75:return cst_lightsalmon;
          case 76:return cst_lightseagreen;
          case 77:return cst_lightskyblue;
          case 78:return cst_lightslategray;
          case 79:return cst_lightslategrey;
          case 80:return cst_lightsteelblue;
          case 81:return cst_lightyellow;
          case 82:return cst_lime;
          case 83:return cst_limegreen;
          case 84:return cst_linen;
          case 85:return cst_magenta;
          case 86:return cst_maroon;
          case 87:return cst_mediumaquamarine;
          case 88:return cst_mediumblue;
          case 89:return cst_mediumorchid;
          case 90:return cst_mediumpurple;
          case 91:return cst_mediumseagreen;
          case 92:return cst_mediumslateblue;
          case 93:return cst_mediumspringgreen;
          case 94:return cst_mediumturquoise;
          case 95:return cst_mediumvioletred;
          case 96:return cst_midnightblue;
          case 97:return cst_mintcream;
          case 98:return cst_mistyrose;
          case 99:return cst_moccasin;
          case 100:return cst_navajowhite;
          case 101:return cst_navy;
          case 102:return cst_oldlace;
          case 103:return cst_olive;
          case 104:return cst_olivedrab;
          case 105:return cst_orange;
          case 106:return cst_orangered;
          case 107:return cst_orchid;
          case 108:return cst_palegoldenrod;
          case 109:return cst_palegreen;
          default:return cst_paleturquoise}}
      if(37 <= _dd_)
       switch(_dd_)
        {case 37:return cst_darkslategrey;
         case 38:return cst_darkturquoise;
         case 39:return cst_darkviolet;
         case 40:return cst_deeppink;
         case 41:return cst_deepskyblue;
         case 42:return cst_dimgray;
         case 43:return cst_dimgrey;
         case 44:return cst_dodgerblue;
         case 45:return cst_firebrick;
         case 46:return cst_floralwhite;
         case 47:return cst_forestgreen;
         case 48:return cst_fuchsia;
         case 49:return cst_gainsboro;
         case 50:return cst_ghostwhite;
         case 51:return cst_gold;
         case 52:return cst_goldenrod;
         case 53:return cst_gray;
         case 54:return cst_grey;
         case 55:return cst_green;
         case 56:return cst_greenyellow;
         case 57:return cst_honeydew;
         case 58:return cst_hotpink;
         case 59:return cst_indianred;
         case 60:return cst_indigo;
         case 61:return cst_ivory;
         case 62:return cst_khaki;
         case 63:return cst_lavender;
         case 64:return cst_lavenderblush;
         case 65:return cst_lawngreen;
         case 66:return cst_lemonchiffon;
         case 67:return cst_lightblue;
         case 68:return cst_lightcoral;
         case 69:return cst_lightcyan;
         case 70:return cst_lightgoldenrodyellow;
         case 71:return cst_lightgray;
         case 72:return cst_lightgreen;
         default:return cst_lightgrey}
      switch(_dd_)
       {case 0:return cst_aliceblue;
        case 1:return cst_antiquewhite;
        case 2:return cst_aqua;
        case 3:return cst_aquamarine;
        case 4:return cst_azure;
        case 5:return cst_beige;
        case 6:return cst_bisque;
        case 7:return cst_black;
        case 8:return cst_blanchedalmond;
        case 9:return cst_blue;
        case 10:return cst_blueviolet;
        case 11:return cst_brown;
        case 12:return cst_burlywood;
        case 13:return cst_cadetblue;
        case 14:return cst_chartreuse;
        case 15:return cst_chocolate;
        case 16:return cst_coral;
        case 17:return cst_cornflowerblue;
        case 18:return cst_cornsilk;
        case 19:return cst_crimson;
        case 20:return cst_cyan;
        case 21:return cst_darkblue;
        case 22:return cst_darkcyan;
        case 23:return cst_darkgoldenrod;
        case 24:return cst_darkgray;
        case 25:return cst_darkgreen;
        case 26:return cst_darkgrey;
        case 27:return cst_darkkhaki;
        case 28:return cst_darkmagenta;
        case 29:return cst_darkolivegreen;
        case 30:return cst_darkorange;
        case 31:return cst_darkorchid;
        case 32:return cst_darkred;
        case 33:return cst_darksalmon;
        case 34:return cst_darkseagreen;
        case 35:return cst_darkslateblue;
        default:return cst_darkslategray}}
    function name_of_string(s)
     {var switch$0=caml_string_compare(s,cst_lightgrey$0);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 73;
        var switch$1=caml_string_compare(s,cst_paleturquoise$0);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 110;
          var switch$2=caml_string_compare(s,cst_skyblue$0);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 129;
            var switch$3=caml_string_compare(s,cst_thistle$0);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 138;
              if(! caml_string_notequal(s,cst_tomato$0))return 139;
              if(! caml_string_notequal(s,cst_turquoise$0))return 140;
              if(! caml_string_notequal(s,cst_violet$0))return 141;
              if(! caml_string_notequal(s,cst_wheat$0))return 142;
              if(! caml_string_notequal(s,cst_white$0))return 143;
              if(! caml_string_notequal(s,cst_whitesmoke$0))return 144;
              if(! caml_string_notequal(s,cst_yellow$0))return 145;
              if(! caml_string_notequal(s,cst_yellowgreen$0))return 146}
            else
             {if(! caml_string_notequal(s,cst_slateblue$0))return 130;
              if(! caml_string_notequal(s,cst_slategray$0))return 131;
              if(! caml_string_notequal(s,cst_slategrey$0))return 132;
              if(! caml_string_notequal(s,cst_snow$0))return 133;
              if(! caml_string_notequal(s,cst_springgreen$0))return 134;
              if(! caml_string_notequal(s,cst_steelblue$0))return 135;
              if(! caml_string_notequal(s,cst_tan$0))return 136;
              if(! caml_string_notequal(s,cst_teal$0))return 137}}
          else
           {var switch$4=caml_string_compare(s,cst_rosybrown$0);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 120;
              if(! caml_string_notequal(s,cst_royalblue$0))return 121;
              if(! caml_string_notequal(s,cst_saddlebrown$0))return 122;
              if(! caml_string_notequal(s,cst_salmon$0))return 123;
              if(! caml_string_notequal(s,cst_sandybrown$0))return 124;
              if(! caml_string_notequal(s,cst_seagreen$0))return 125;
              if(! caml_string_notequal(s,cst_seashell$0))return 126;
              if(! caml_string_notequal(s,cst_sienna$0))return 127;
              if(! caml_string_notequal(s,cst_silver$0))return 128}
            else
             {if(! caml_string_notequal(s,cst_palevioletred$0))return 111;
              if(! caml_string_notequal(s,cst_papayawhip$0))return 112;
              if(! caml_string_notequal(s,cst_peachpuff$0))return 113;
              if(! caml_string_notequal(s,cst_peru$0))return 114;
              if(! caml_string_notequal(s,cst_pink$0))return 115;
              if(! caml_string_notequal(s,cst_plum$0))return 116;
              if(! caml_string_notequal(s,cst_powderblue$0))return 117;
              if(! caml_string_notequal(s,cst_purple$0))return 118;
              if(! caml_string_notequal(s,cst_red$0))return 119}}}
        else
         {var switch$5=caml_string_compare(s,cst_mediumslateblue$0);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 92;
            var switch$6=caml_string_compare(s,cst_navy$0);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 101;
              if(! caml_string_notequal(s,cst_oldlace$0))return 102;
              if(! caml_string_notequal(s,cst_olive$0))return 103;
              if(! caml_string_notequal(s,cst_olivedrab$0))return 104;
              if(! caml_string_notequal(s,cst_orange$0))return 105;
              if(! caml_string_notequal(s,cst_orangered$0))return 106;
              if(! caml_string_notequal(s,cst_orchid$0))return 107;
              if(! caml_string_notequal(s,cst_palegoldenrod$0))return 108;
              if(! caml_string_notequal(s,cst_palegreen$0))return 109}
            else
             {if(! caml_string_notequal(s,cst_mediumspringgreen$0))return 93;
              if(! caml_string_notequal(s,cst_mediumturquoise$0))return 94;
              if(! caml_string_notequal(s,cst_mediumvioletred$0))return 95;
              if(! caml_string_notequal(s,cst_midnightblue$0))return 96;
              if(! caml_string_notequal(s,cst_mintcream$0))return 97;
              if(! caml_string_notequal(s,cst_mistyrose$0))return 98;
              if(! caml_string_notequal(s,cst_moccasin$0))return 99;
              if(! caml_string_notequal(s,cst_navajowhite$0))return 100}}
          else
           {var switch$7=caml_string_compare(s,cst_limegreen$0);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 83;
              if(! caml_string_notequal(s,cst_linen$0))return 84;
              if(! caml_string_notequal(s,cst_magenta$0))return 85;
              if(! caml_string_notequal(s,cst_maroon$0))return 86;
              if(! caml_string_notequal(s,cst_mediumaquamarine$0))return 87;
              if(! caml_string_notequal(s,cst_mediumblue$0))return 88;
              if(! caml_string_notequal(s,cst_mediumorchid$0))return 89;
              if(! caml_string_notequal(s,cst_mediumpurple$0))return 90;
              if(! caml_string_notequal(s,cst_mediumseagreen$0))return 91}
            else
             {if(! caml_string_notequal(s,cst_lightpink$0))return 74;
              if(! caml_string_notequal(s,cst_lightsalmon$0))return 75;
              if(! caml_string_notequal(s,cst_lightseagreen$0))return 76;
              if(! caml_string_notequal(s,cst_lightskyblue$0))return 77;
              if(! caml_string_notequal(s,cst_lightslategray$0))return 78;
              if(! caml_string_notequal(s,cst_lightslategrey$0))return 79;
              if(! caml_string_notequal(s,cst_lightsteelblue$0))return 80;
              if(! caml_string_notequal(s,cst_lightyellow$0))return 81;
              if(! caml_string_notequal(s,cst_lime$0))return 82}}}}
      else
       {var switch$8=caml_string_compare(s,cst_darkslategray$0);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 36;
          var switch$9=caml_string_compare(s,cst_greenyellow$0);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 56;
            var switch$10=caml_string_compare(s,cst_lavenderblush$0);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 64;
              if(! caml_string_notequal(s,cst_lawngreen$0))return 65;
              if(! caml_string_notequal(s,cst_lemonchiffon$0))return 66;
              if(! caml_string_notequal(s,cst_lightblue$0))return 67;
              if(! caml_string_notequal(s,cst_lightcoral$0))return 68;
              if(! caml_string_notequal(s,cst_lightcyan$0))return 69;
              if(! caml_string_notequal(s,cst_lightgoldenrodyellow$0))
               return 70;
              if(! caml_string_notequal(s,cst_lightgray$0))return 71;
              if(! caml_string_notequal(s,cst_lightgreen$0))return 72}
            else
             {if(! caml_string_notequal(s,cst_grey$0))return 54;
              if(! caml_string_notequal(s,cst_honeydew$0))return 57;
              if(! caml_string_notequal(s,cst_hotpink$0))return 58;
              if(! caml_string_notequal(s,cst_indianred$0))return 59;
              if(! caml_string_notequal(s,cst_indigo$0))return 60;
              if(! caml_string_notequal(s,cst_ivory$0))return 61;
              if(! caml_string_notequal(s,cst_khaki$0))return 62;
              if(! caml_string_notequal(s,cst_lavender$0))return 63}}
          else
           {var switch$11=caml_string_compare(s,cst_floralwhite$0);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 46;
              if(! caml_string_notequal(s,cst_forestgreen$0))return 47;
              if(! caml_string_notequal(s,cst_fuchsia$0))return 48;
              if(! caml_string_notequal(s,cst_gainsboro$0))return 49;
              if(! caml_string_notequal(s,cst_ghostwhite$0))return 50;
              if(! caml_string_notequal(s,cst_gold$0))return 51;
              if(! caml_string_notequal(s,cst_goldenrod$0))return 52;
              if(! caml_string_notequal(s,cst_gray$0))return 53;
              if(! caml_string_notequal(s,cst_green$0))return 55}
            else
             {if(! caml_string_notequal(s,cst_darkslategrey$0))return 37;
              if(! caml_string_notequal(s,cst_darkturquoise$0))return 38;
              if(! caml_string_notequal(s,cst_darkviolet$0))return 39;
              if(! caml_string_notequal(s,cst_deeppink$0))return 40;
              if(! caml_string_notequal(s,cst_deepskyblue$0))return 41;
              if(! caml_string_notequal(s,cst_dimgray$0))return 42;
              if(! caml_string_notequal(s,cst_dimgrey$0))return 43;
              if(! caml_string_notequal(s,cst_dodgerblue$0))return 44;
              if(! caml_string_notequal(s,cst_firebrick$0))return 45}}}
        else
         {var switch$12=caml_string_compare(s,cst_cornsilk$0);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 18;
            var switch$13=caml_string_compare(s,cst_darkkhaki$0);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 27;
              if(! caml_string_notequal(s,cst_darkmagenta$0))return 28;
              if(! caml_string_notequal(s,cst_darkolivegreen$0))return 29;
              if(! caml_string_notequal(s,cst_darkorange$0))return 30;
              if(! caml_string_notequal(s,cst_darkorchid$0))return 31;
              if(! caml_string_notequal(s,cst_darkred$0))return 32;
              if(! caml_string_notequal(s,cst_darksalmon$0))return 33;
              if(! caml_string_notequal(s,cst_darkseagreen$0))return 34;
              if(! caml_string_notequal(s,cst_darkslateblue$0))return 35}
            else
             {if(! caml_string_notequal(s,cst_crimson$0))return 19;
              if(! caml_string_notequal(s,cst_cyan$0))return 20;
              if(! caml_string_notequal(s,cst_darkblue$0))return 21;
              if(! caml_string_notequal(s,cst_darkcyan$0))return 22;
              if(! caml_string_notequal(s,cst_darkgoldenrod$0))return 23;
              if(! caml_string_notequal(s,cst_darkgray$0))return 24;
              if(! caml_string_notequal(s,cst_darkgreen$0))return 25;
              if(! caml_string_notequal(s,cst_darkgrey$0))return 26}}
          else
           {var switch$14=caml_string_compare(s,cst_blue$0);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 9;
              if(! caml_string_notequal(s,cst_blueviolet$0))return 10;
              if(! caml_string_notequal(s,cst_brown$0))return 11;
              if(! caml_string_notequal(s,cst_burlywood$0))return 12;
              if(! caml_string_notequal(s,cst_cadetblue$0))return 13;
              if(! caml_string_notequal(s,cst_chartreuse$0))return 14;
              if(! caml_string_notequal(s,cst_chocolate$0))return 15;
              if(! caml_string_notequal(s,cst_coral$0))return 16;
              if(! caml_string_notequal(s,cst_cornflowerblue$0))return 17}
            else
             {if(! caml_string_notequal(s,cst_aliceblue$0))return 0;
              if(! caml_string_notequal(s,cst_antiquewhite$0))return 1;
              if(! caml_string_notequal(s,cst_aqua$0))return 2;
              if(! caml_string_notequal(s,cst_aquamarine$0))return 3;
              if(! caml_string_notequal(s,cst_azure$0))return 4;
              if(! caml_string_notequal(s,cst_beige$0))return 5;
              if(! caml_string_notequal(s,cst_bisque$0))return 6;
              if(! caml_string_notequal(s,cst_black$0))return 7;
              if(! caml_string_notequal(s,cst_blanchedalmond$0))return 8}}}}
      var _dc_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color_name);
      throw [0,Stdlib[6],_dc_]}
    function rgb_of_name(param)
     {var _db_=param;
      if(74 <= _db_)
       {if(111 <= _db_)
         switch(_db_)
          {case 111:return _bp_;
           case 112:return _bq_;
           case 113:return _br_;
           case 114:return _bs_;
           case 115:return _bt_;
           case 116:return _bu_;
           case 117:return _bv_;
           case 118:return _bw_;
           case 119:return _bx_;
           case 120:return _by_;
           case 121:return _bz_;
           case 122:return _bA_;
           case 123:return _bB_;
           case 124:return _bC_;
           case 125:return _bD_;
           case 126:return _bE_;
           case 127:return _bF_;
           case 128:return _bG_;
           case 129:return _bH_;
           case 130:return _bI_;
           case 131:return _bJ_;
           case 132:return _bK_;
           case 133:return _bL_;
           case 134:return _bM_;
           case 135:return _bN_;
           case 136:return _bO_;
           case 137:return _bP_;
           case 138:return _bQ_;
           case 139:return _bR_;
           case 140:return _bS_;
           case 141:return _bT_;
           case 142:return _bU_;
           case 143:return _bV_;
           case 144:return _bW_;
           case 145:return _bX_;
           default:return _bY_}
        switch(_db_)
         {case 74:return _aQ_;
          case 75:return _aR_;
          case 76:return _aS_;
          case 77:return _aT_;
          case 78:return _aU_;
          case 79:return _aV_;
          case 80:return _aW_;
          case 81:return _aX_;
          case 82:return _aY_;
          case 83:return _aZ_;
          case 84:return _a0_;
          case 85:return _a1_;
          case 86:return _a2_;
          case 87:return _a3_;
          case 88:return _a4_;
          case 89:return _a5_;
          case 90:return _a6_;
          case 91:return _a7_;
          case 92:return _a8_;
          case 93:return _a9_;
          case 94:return _a__;
          case 95:return _a$_;
          case 96:return _ba_;
          case 97:return _bb_;
          case 98:return _bc_;
          case 99:return _bd_;
          case 100:return _be_;
          case 101:return _bf_;
          case 102:return _bg_;
          case 103:return _bh_;
          case 104:return _bi_;
          case 105:return _bj_;
          case 106:return _bk_;
          case 107:return _bl_;
          case 108:return _bm_;
          case 109:return _bn_;
          default:return _bo_}}
      if(37 <= _db_)
       switch(_db_)
        {case 37:return _af_;
         case 38:return _ag_;
         case 39:return _ah_;
         case 40:return _ai_;
         case 41:return _aj_;
         case 42:return _ak_;
         case 43:return _al_;
         case 44:return _am_;
         case 45:return _an_;
         case 46:return _ao_;
         case 47:return _ap_;
         case 48:return _aq_;
         case 49:return _ar_;
         case 50:return _as_;
         case 51:return _at_;
         case 52:return _au_;
         case 53:return _av_;
         case 54:return _aw_;
         case 55:return _ax_;
         case 56:return _ay_;
         case 57:return _az_;
         case 58:return _aA_;
         case 59:return _aB_;
         case 60:return _aC_;
         case 61:return _aD_;
         case 62:return _aE_;
         case 63:return _aF_;
         case 64:return _aG_;
         case 65:return _aH_;
         case 66:return _aI_;
         case 67:return _aJ_;
         case 68:return _aK_;
         case 69:return _aL_;
         case 70:return _aM_;
         case 71:return _aN_;
         case 72:return _aO_;
         default:return _aP_}
      switch(_db_)
       {case 0:return _w_;
        case 1:return _x_;
        case 2:return _y_;
        case 3:return _z_;
        case 4:return _A_;
        case 5:return _B_;
        case 6:return _C_;
        case 7:return _D_;
        case 8:return _E_;
        case 9:return _F_;
        case 10:return _G_;
        case 11:return _H_;
        case 12:return _I_;
        case 13:return _J_;
        case 14:return _K_;
        case 15:return _L_;
        case 16:return _M_;
        case 17:return _N_;
        case 18:return _O_;
        case 19:return _P_;
        case 20:return _Q_;
        case 21:return _R_;
        case 22:return _S_;
        case 23:return _T_;
        case 24:return _U_;
        case 25:return _V_;
        case 26:return _W_;
        case 27:return _X_;
        case 28:return _Y_;
        case 29:return _Z_;
        case 30:return ___;
        case 31:return _$_;
        case 32:return _aa_;
        case 33:return _ab_;
        case 34:return _ac_;
        case 35:return _ad_;
        default:return _ae_}}
    function rgb(a,r,g,b)
     {if(a){var a$0=a[1];return [3,[0,r,g,b,a$0]]}return [1,[0,r,g,b]]}
    function hsl(a,h,s,l)
     {if(a){var a$0=a[1];return [6,[0,h,s,l,a$0]]}return [5,[0,h,s,l]]}
    function string_of_t(param)
     {switch(param[0])
       {case 0:var n=param[1];return string_of_name(n);
        case 1:
         var match=param[1],b=match[3],g=match[2],r=match[1];
         return caml_call4(Stdlib_printf[4],_bZ_,r,g,b);
        case 2:
         var match$0=param[1],b$0=match$0[3],g$0=match$0[2],r$0=match$0[1];
         return caml_call4(Stdlib_printf[4],_b0_,r$0,g$0,b$0);
        case 3:
         var
          match$1=param[1],
          a=match$1[4],
          b$1=match$1[3],
          g$1=match$1[2],
          r$1=match$1[1];
         return caml_call5(Stdlib_printf[4],_b1_,r$1,g$1,b$1,a);
        case 4:
         var
          match$2=param[1],
          a$0=match$2[4],
          b$2=match$2[3],
          g$2=match$2[2],
          r$2=match$2[1];
         return caml_call5(Stdlib_printf[4],_b2_,r$2,g$2,b$2,a$0);
        case 5:
         var match$3=param[1],l=match$3[3],s=match$3[2],h=match$3[1];
         return caml_call4(Stdlib_printf[4],_b3_,h,s,l);
        default:
         var
          match$4=param[1],
          a$1=match$4[4],
          l$0=match$4[3],
          s$0=match$4[2],
          h$0=match$4[1];
         return caml_call5(Stdlib_printf[4],_b4_,h$0,s$0,l$0,a$1)}}
    function hex_of_rgb(param)
     {var blue=param[3],green=param[2],red=param[1];
      function in_range(i)
       {var
         _c9_=caml_call2(symbol$5,i,0),
         _c__=_c9_ || caml_call2(symbol$9,i,255);
        if(_c__)
         {var
           _c$_=caml_call1(Stdlib[33],i),
           _da_=caml_call2(Stdlib[28],_c$_,cst_is_out_of_valid_range);
          throw [0,Stdlib[6],_da_]}
        return _c__}
      in_range(red);
      in_range(green);
      in_range(blue);
      return caml_call4(Stdlib_printf[4],_b5_,red,green,blue)}
    function js_t_of_js_string(s)
     {var
       t0=caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d),
       t13=new t11(t0),
       t2=caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d$0),
       t17=new t11(t2),
       t4=caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d),
       t15=new t11(t4),
       t6=caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d$0),
       t19=new t11(t6),
       t8=caml_jsbytes_of_string(cst_hsl_s_d_s_d_s_d),
       t21=new t11(t8),
       t10=caml_jsbytes_of_string(cst_hsla_s_d_s_d_s_d_d_d),
       t23=new t11(t10);
      if
       (!
        (t13.test(s) | 0)
        &&
        !
        (t15.test(s) | 0)
        &&
        !
        (t17.test(s) | 0)
        &&
        !
        (t19.test(s) | 0)
        &&
        !
        (t21.test(s) | 0)
        &&
        !
        (t23.test(s) | 0))
       {var _c6_=caml_string_of_jsstring(s);
        if(caml_call2(Stdlib_list[34],_c6_,_b6_))return s;
        var
         _c7_=caml_string_of_jsstring(s),
         _c8_=caml_call2(Stdlib[28],_c7_,cst_is_not_a_valid_color);
        throw [0,Stdlib[6],_c8_]}
      return s}
    function js(c)
     {if(0 === c[0])
       {var n=c[1];return caml_jsstring_of_string(string_of_name(n))}
      return caml_jsstring_of_string(string_of_t(c))}
    function ml(c)
     {var s=caml_string_of_jsstring(c);
      try
       {var _cT_=[0,name_of_string(s)];return _cT_}
      catch(_cU_)
       {_cU_ = caml_wrap_exception(_cU_);
        if(_cU_[1] === Stdlib[6])
         {var
           fail=
            function(param)
             {var _c5_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color$0);
              throw [0,Stdlib[6],_c5_]},
           re_rgb=regexp(cst_rgba_d_d_d_d_d),
           re_rgb_pct=regexp(cst_rgba_d_d_d_d_d$0),
           re_hsl=regexp(cst_hsla_d_d_d_d_d),
           i_of_s_o=
            function(param)
             {if(param)
               {var i=param[1];
                try
                 {var _c3_=caml_int_of_string(i);return _c3_}
                catch(_c4_)
                 {_c4_ = caml_wrap_exception(_c4_);
                  if(_c4_[1] === Stdlib[6])
                   var s=_c4_[2];
                  else
                   {if(_c4_[1] !== Stdlib[7])throw _c4_;var s=_c4_[2]}
                  var
                   _c0_=caml_call2(Stdlib[28],cst$39,s),
                   _c1_=caml_call2(Stdlib[28],i,_c0_),
                   _c2_=caml_call2(Stdlib[28],cst_color_conversion_error,_c1_);
                  throw [0,Stdlib[6],_c2_]}}
              return fail(0)},
           f_of_s=
            function(f)
             {try
               {var _cY_=caml_float_of_string(f);return _cY_}
              catch(_cZ_)
               {_cZ_ = caml_wrap_exception(_cZ_);
                if(_cZ_[1] === Stdlib[6])
                 var s=_cZ_[2];
                else
                 {if(_cZ_[1] !== Stdlib[7])throw _cZ_;var s=_cZ_[2]}
                var
                 _cV_=caml_call2(Stdlib[28],cst$40,s),
                 _cW_=caml_call2(Stdlib[28],f,_cV_),
                 _cX_=caml_call2(Stdlib[28],cst_color_conversion_error$0,_cW_);
                throw [0,Stdlib[6],_cX_]}},
           match=string_match(re_rgb,s,0);
          if(match)
           {var
             r=match[1],
             red=matched_group(r,2),
             green=matched_group(r,3),
             blue=matched_group(r,4),
             alpha=matched_group(r,5),
             match$0=matched_group(r,1);
            if(match$0)
             {var _cB_=match$0[1];
              if(! caml_string_notequal(_cB_,cst_rgb))
               {if(alpha)return fail(0);
                var _cF_=i_of_s_o(blue),_cG_=i_of_s_o(green);
                return [1,[0,i_of_s_o(red),_cG_,_cF_]]}
              if(! caml_string_notequal(_cB_,cst_rgba))
               {if(alpha)
                 {var
                   a=alpha[1],
                   _cC_=f_of_s(a),
                   _cD_=i_of_s_o(blue),
                   _cE_=i_of_s_o(green);
                  return [3,[0,i_of_s_o(red),_cE_,_cD_,_cC_]]}
                return fail(0)}}
            return fail(0)}
          var match$1=string_match(re_rgb_pct,s,0);
          if(match$1)
           {var
             r$0=match$1[1],
             red$0=matched_group(r$0,2),
             green$0=matched_group(r$0,3),
             blue$0=matched_group(r$0,4),
             alpha$0=matched_group(r$0,5),
             match$2=matched_group(r$0,1);
            if(match$2)
             {var _cH_=match$2[1];
              if(! caml_string_notequal(_cH_,cst_rgb$0))
               {if(alpha$0)return fail(0);
                var _cL_=i_of_s_o(blue$0),_cM_=i_of_s_o(green$0);
                return [2,[0,i_of_s_o(red$0),_cM_,_cL_]]}
              if(! caml_string_notequal(_cH_,cst_rgba$0))
               {if(alpha$0)
                 {var
                   a$0=alpha$0[1],
                   _cI_=f_of_s(a$0),
                   _cJ_=i_of_s_o(blue$0),
                   _cK_=i_of_s_o(green$0);
                  return [4,[0,i_of_s_o(red$0),_cK_,_cJ_,_cI_]]}
                return fail(0)}}
            return fail(0)}
          var match$3=string_match(re_hsl,s,0);
          if(match$3)
           {var
             r$1=match$3[1],
             red$1=matched_group(r$1,2),
             green$1=matched_group(r$1,3),
             blue$1=matched_group(r$1,4),
             alpha$1=matched_group(r$1,5),
             match$4=matched_group(r$1,1);
            if(match$4)
             {var _cN_=match$4[1];
              if(! caml_string_notequal(_cN_,cst_hsl))
               {if(alpha$1)return fail(0);
                var _cR_=i_of_s_o(blue$1),_cS_=i_of_s_o(green$1);
                return [5,[0,i_of_s_o(red$1),_cS_,_cR_]]}
              if(! caml_string_notequal(_cN_,cst_hsla))
               {if(alpha$1)
                 {var
                   a$1=alpha$1[1],
                   _cO_=f_of_s(a$1),
                   _cP_=i_of_s_o(blue$1),
                   _cQ_=i_of_s_o(green$1);
                  return [6,[0,i_of_s_o(red$1),_cQ_,_cP_,_cO_]]}
                return fail(0)}}
            return fail(0)}
          return fail(0)}
        throw _cU_}}
    function string_of_t$0(param)
     {if(typeof param === "number")
       return cst_0;
      else
       switch(param[0])
        {case 0:
          var f=param[1];return caml_call3(Stdlib_printf[4],_b7_,f,cst_em$0);
         case 1:
          var f$0=param[1];
          return caml_call3(Stdlib_printf[4],_b8_,f$0,cst_ex);
         case 2:
          var f$1=param[1];
          return caml_call3(Stdlib_printf[4],_b9_,f$1,cst_px);
         case 3:
          var f$2=param[1];
          return caml_call3(Stdlib_printf[4],_b__,f$2,cst_gd);
         case 4:
          var f$3=param[1];
          return caml_call3(Stdlib_printf[4],_b$_,f$3,cst_rem);
         case 5:
          var f$4=param[1];
          return caml_call3(Stdlib_printf[4],_ca_,f$4,cst_vw);
         case 6:
          var f$5=param[1];
          return caml_call3(Stdlib_printf[4],_cb_,f$5,cst_vh);
         case 7:
          var f$6=param[1];
          return caml_call3(Stdlib_printf[4],_cc_,f$6,cst_vm);
         case 8:
          var f$7=param[1];
          return caml_call3(Stdlib_printf[4],_cd_,f$7,cst_ch);
         case 9:
          var f$8=param[1];
          return caml_call3(Stdlib_printf[4],_ce_,f$8,cst_mm);
         case 10:
          var f$9=param[1];
          return caml_call3(Stdlib_printf[4],_cf_,f$9,cst_cm);
         case 11:
          var f$10=param[1];
          return caml_call3(Stdlib_printf[4],_cg_,f$10,cst_in);
         case 12:
          var f$11=param[1];
          return caml_call3(Stdlib_printf[4],_ch_,f$11,cst_pt);
         default:
          var f$12=param[1];
          return caml_call3(Stdlib_printf[4],_ci_,f$12,cst_pc)}}
    function js$0(t){return caml_jsstring_of_string(string_of_t$0(t))}
    function ml$0(t)
     {var s=caml_string_of_jsstring(t);
      if(caml_call2(String[38],s,cst_0$0))return 0;
      function fail(param)
       {var _cA_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length);
        throw [0,Stdlib[6],_cA_]}
      var re=regexp(cst_d_d_s_S),match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cy_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _cx_=caml_call2(Stdlib[28],cst_length_conversion_error,s$0);
              throw [0,Stdlib[6],_cx_]}
            throw exn}
          var f$0=_cy_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cz_=match$1[1],switch$0=caml_string_compare(_cz_,cst_pc$0);
          if(0 <= switch$0)
           {if(! (0 < switch$0))return [13,f$0];
            if(! caml_string_notequal(_cz_,cst_pt$0))return [12,f$0];
            if(! caml_string_notequal(_cz_,cst_px$0))return [2,f$0];
            if(! caml_string_notequal(_cz_,cst_rem$0))return [4,f$0];
            if(! caml_string_notequal(_cz_,cst_vh$0))return [6,f$0];
            if(! caml_string_notequal(_cz_,cst_vm$0))return [7,f$0];
            if(! caml_string_notequal(_cz_,cst_vw$0))return [5,f$0]}
          else
           {if(! caml_string_notequal(_cz_,cst_ch$0))return [8,f$0];
            if(! caml_string_notequal(_cz_,cst_cm$0))return [10,f$0];
            if(! caml_string_notequal(_cz_,cst_em$1))return [0,f$0];
            if(! caml_string_notequal(_cz_,cst_ex$0))return [1,f$0];
            if(! caml_string_notequal(_cz_,cst_gd$0))return [3,f$0];
            if(! caml_string_notequal(_cz_,cst_in$0))return [11,f$0];
            if(! caml_string_notequal(_cz_,cst_mm$0))return [9,f$0]}
          return fail(0)}
        return fail(0)}
      return fail(0)}
    var Length=[0,string_of_t$0,js$0,ml$0];
    function string_of_t$1(param)
     {switch(param[0])
       {case 0:
         var f=param[1];return caml_call3(Stdlib_printf[4],_cj_,f,cst_deg);
        case 1:
         var f$0=param[1];
         return caml_call3(Stdlib_printf[4],_ck_,f$0,cst_grad);
        case 2:
         var f$1=param[1];
         return caml_call3(Stdlib_printf[4],_cl_,f$1,cst_rad);
        default:
         var f$2=param[1];
         return caml_call3(Stdlib_printf[4],_cm_,f$2,cst_turns)}}
    function js$1(t){return caml_jsstring_of_string(string_of_t$1(t))}
    function ml$1(j)
     {var s=caml_string_of_jsstring(j),re=regexp(cst_d_d_deg_grad_rad_turns);
      function fail(param)
       {var _cw_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length$0);
        throw [0,Stdlib[6],_cw_]}
      var match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cu_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _ct_=caml_call2(Stdlib[28],cst_length_conversion_error$0,s$0);
              throw [0,Stdlib[6],_ct_]}
            throw exn}
          var f$0=_cu_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cv_=match$1[1];
          if(! caml_string_notequal(_cv_,cst_deg$0))return [0,f$0];
          if(! caml_string_notequal(_cv_,cst_grad$0))return [1,f$0];
          if(! caml_string_notequal(_cv_,cst_rad$0))return [2,f$0];
          if(! caml_string_notequal(_cv_,cst_turns$0))return [3,f$0]}
        return fail(0)}
      return fail(0)}
    var
     Angle=[0,string_of_t$1,js$1,ml$1],
     Js_of_ocaml_CSS=
      [0,
       [0,
        string_of_name,
        rgb_of_name,
        hex_of_rgb,
        rgb,
        hsl,
        string_of_t,
        js,
        ml,
        js_t_of_js_string],
       Length,
       Angle];
    caml_register_global(1663,Js_of_ocaml_CSS,"Js_of_ocaml__CSS");
    function listen(opt,target,typ,cb)
     {if(opt)var sth=opt[1],capture=sth;else var capture=0;
      var _cs_=! ! capture;
      return addEventListener
              (target,
               typ,
               full_handler(function(n,e){return ! ! caml_call2(cb,n,e)}),
               _cs_)}
    var Js_of_ocaml_Dom_events=[0,Event$0,listen,removeEventListener];
    caml_register_global
     (1664,Js_of_ocaml_Dom_events,"Js_of_ocaml__Dom_events");
    var
     t0="http://www.w3.org/2000/svg",
     SVGError=[248,cst_Js_of_ocaml_Dom_svg_SVGErr,caml_fresh_oo_id(0)];
    function createElement$0(t2,name)
     {var t1=caml_jsstring_of_string(name);
      return t2.createElementNS("http://www.w3.org/2000/svg",t1)}
    function unsafeCreateElement$0(doc,name){return createElement$0(doc,name)}
    function createA$0(doc){return unsafeCreateElement$0(doc,cst_a$2)}
    function createAltGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_altglyph)}
    function createAltGlyphDef(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphdef)}
    function createAltGlyphItem(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphitem)}
    function createAnimate(doc){return unsafeCreateElement$0(doc,cst_animate)}
    function createAnimateColor(doc)
     {return unsafeCreateElement$0(doc,cst_animatecolor)}
    function createAnimateMotion(doc)
     {return unsafeCreateElement$0(doc,cst_animatemotion)}
    function createAnimateTransform(doc)
     {return unsafeCreateElement$0(doc,cst_animatetransform)}
    function createCircle(doc){return unsafeCreateElement$0(doc,cst_circle)}
    function createClipPath(doc)
     {return unsafeCreateElement$0(doc,cst_clippath)}
    function createCursor(doc){return unsafeCreateElement$0(doc,cst_cursor)}
    function createDefs(doc){return unsafeCreateElement$0(doc,cst_defs)}
    function createDesc(doc){return unsafeCreateElement$0(doc,cst_desc)}
    function createEllipse(doc){return unsafeCreateElement$0(doc,cst_ellipse)}
    function createFilter(doc){return unsafeCreateElement$0(doc,cst_filter)}
    function createFont(doc){return unsafeCreateElement$0(doc,cst_font)}
    function createFontFace(doc)
     {return unsafeCreateElement$0(doc,cst_font_face)}
    function createFontFaceFormat(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_format)}
    function createFontFaceName(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_name)}
    function createFontFaceSrc(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_src)}
    function createFontFaceUri(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_uri)}
    function createForeignObject(doc)
     {return unsafeCreateElement$0(doc,cst_foreignObject)}
    function createG(doc){return unsafeCreateElement$0(doc,cst_g$0)}
    function createGlyph(doc){return unsafeCreateElement$0(doc,cst_glyph)}
    function createGlyphRef(doc)
     {return unsafeCreateElement$0(doc,cst_glyphref)}
    function createhkern(doc){return unsafeCreateElement$0(doc,cst_hkern)}
    function createImage(doc){return unsafeCreateElement$0(doc,cst_image)}
    function createLineElement(doc)
     {return unsafeCreateElement$0(doc,cst_line)}
    function createLinearElement(doc)
     {return unsafeCreateElement$0(doc,cst_lineargradient)}
    function createMask(doc){return unsafeCreateElement$0(doc,cst_mask)}
    function createMetaData(doc)
     {return unsafeCreateElement$0(doc,cst_metadata)}
    function createMissingGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_missing_glyph)}
    function createMPath(doc){return unsafeCreateElement$0(doc,cst_mpath)}
    function createPath(doc){return unsafeCreateElement$0(doc,cst_path)}
    function createPattern(doc){return unsafeCreateElement$0(doc,cst_pattern)}
    function createPolygon(doc){return unsafeCreateElement$0(doc,cst_polygon)}
    function createPolyline(doc)
     {return unsafeCreateElement$0(doc,cst_polyline)}
    function createRadialgradient(doc)
     {return unsafeCreateElement$0(doc,cst_radialgradient)}
    function createRect(doc){return unsafeCreateElement$0(doc,cst_rect)}
    function createScript$0(doc)
     {return unsafeCreateElement$0(doc,cst_script$2)}
    function createSet(doc){return unsafeCreateElement$0(doc,cst_set)}
    function createStop(doc){return unsafeCreateElement$0(doc,cst_stop)}
    function createStyle$0(doc){return unsafeCreateElement$0(doc,cst_style$2)}
    function createSvg(doc){return unsafeCreateElement$0(doc,cst_svg)}
    function createSwitch(doc){return unsafeCreateElement$0(doc,cst_switch)}
    function createSymbol(doc){return unsafeCreateElement$0(doc,cst_symbol)}
    function createTextElement(doc)
     {return unsafeCreateElement$0(doc,cst_text$0)}
    function createTextpath(doc)
     {return unsafeCreateElement$0(doc,cst_textpath)}
    function createTitle$0(doc){return unsafeCreateElement$0(doc,cst_title$2)}
    function createTref(doc){return unsafeCreateElement$0(doc,cst_tref)}
    function createTspan(doc){return unsafeCreateElement$0(doc,cst_tspan)}
    function createUse(doc){return unsafeCreateElement$0(doc,cst_use)}
    function createView(doc){return unsafeCreateElement$0(doc,cst_view)}
    function createvkern(doc){return unsafeCreateElement$0(doc,cst_vkern)}
    var svg_element=Unsafe[1].SVGElement,document$0=Unsafe[1].document;
    function getElementById$0(id)
     {function _cp_(e){if(e instanceof svg_element)return e;throw Stdlib[8]}
      function _cq_(param){throw Stdlib[8]}
      var
       t6=caml_jsstring_of_string(id),
       t7=Unsafe[1].document,
       _cr_=t7.getElementById(t6);
      return caml_call3(Opt[7],_cr_,_cq_,_cp_)}
    function element$2(e){return e instanceof svg_element?e:no_handler}
    function unsafeCoerce$0(e,tag)
     {var t9=e.tagName,_co_=caml_jsstring_of_string(tag);
      return t9.toLowerCase() === _co_?e:no_handler}
    function a$0(e){return unsafeCoerce$0(e,cst_a$3)}
    function altGlyph(e){return unsafeCoerce$0(e,cst_altglyph$0)}
    function altGlyphDef(e){return unsafeCoerce$0(e,cst_altglyphdef$0)}
    function altGlyphItem(e){return unsafeCoerce$0(e,cst_altglyphitem$0)}
    function animate(e){return unsafeCoerce$0(e,cst_animate$0)}
    function animateColor(e){return unsafeCoerce$0(e,cst_animatecolor$0)}
    function animateMotion(e){return unsafeCoerce$0(e,cst_animatemotion$0)}
    function animateTransform(e)
     {return unsafeCoerce$0(e,cst_animatetransform$0)}
    function circle(e){return unsafeCoerce$0(e,cst_circle$0)}
    function clipPath(e){return unsafeCoerce$0(e,cst_clippath$0)}
    function cursor(e){return unsafeCoerce$0(e,cst_cursor$0)}
    function defs(e){return unsafeCoerce$0(e,cst_defs$0)}
    function desc(e){return unsafeCoerce$0(e,cst_desc$0)}
    function ellipse(e){return unsafeCoerce$0(e,cst_ellipse$0)}
    function filter(e){return unsafeCoerce$0(e,cst_filter$0)}
    function font(e){return unsafeCoerce$0(e,cst_font$0)}
    function fontFace(e){return unsafeCoerce$0(e,cst_font_face$0)}
    function fontFaceFormat(e)
     {return unsafeCoerce$0(e,cst_font_face_format$0)}
    function fontFaceName(e){return unsafeCoerce$0(e,cst_font_face_name$0)}
    function fontFaceSrc(e){return unsafeCoerce$0(e,cst_font_face_src$0)}
    function fontFaceUri(e){return unsafeCoerce$0(e,cst_font_face_uri$0)}
    function foreignObject(e){return unsafeCoerce$0(e,cst_foreignobject)}
    function g(e){return unsafeCoerce$0(e,cst_g$1)}
    function glyph(e){return unsafeCoerce$0(e,cst_glyph$0)}
    function glyphRef(e){return unsafeCoerce$0(e,cst_glyphref$0)}
    function hkern(e){return unsafeCoerce$0(e,cst_hkern$0)}
    function image(e){return unsafeCoerce$0(e,cst_image$0)}
    function lineElement(e){return unsafeCoerce$0(e,cst_line$0)}
    function linearElement(e){return unsafeCoerce$0(e,cst_lineargradient$0)}
    function mask(e){return unsafeCoerce$0(e,cst_mask$0)}
    function metaData(e){return unsafeCoerce$0(e,cst_metadata$0)}
    function missingGlyph(e){return unsafeCoerce$0(e,cst_missing_glyph$0)}
    function mPath(e){return unsafeCoerce$0(e,cst_mpath$0)}
    function path$0(e){return unsafeCoerce$0(e,cst_path$0)}
    function pattern(e){return unsafeCoerce$0(e,cst_pattern$0)}
    function polygon(e){return unsafeCoerce$0(e,cst_polygon$0)}
    function polyline(e){return unsafeCoerce$0(e,cst_polyline$0)}
    function radialgradient(e){return unsafeCoerce$0(e,cst_radialgradient$0)}
    function rect(e){return unsafeCoerce$0(e,cst_rect$0)}
    function script$0(e){return unsafeCoerce$0(e,cst_script$3)}
    function set$1(e){return unsafeCoerce$0(e,cst_set$0)}
    function stop(e){return unsafeCoerce$0(e,cst_stop$0)}
    function style$0(e){return unsafeCoerce$0(e,cst_style$3)}
    function svg(e){return unsafeCoerce$0(e,cst_svg$0)}
    function switch$0(e){return unsafeCoerce$0(e,cst_switch$0)}
    function symbol$12(e){return unsafeCoerce$0(e,cst_symbol$0)}
    function textElement(e){return unsafeCoerce$0(e,cst_text$1)}
    function textpath(e){return unsafeCoerce$0(e,cst_textpath$0)}
    function title$0(e){return unsafeCoerce$0(e,cst_title$3)}
    function tref(e){return unsafeCoerce$0(e,cst_tref$0)}
    function tspan(e){return unsafeCoerce$0(e,cst_tspan$0)}
    function use(e){return unsafeCoerce$0(e,cst_use$0)}
    function view(e){return unsafeCoerce$0(e,cst_view$0)}
    function vkern(e){return unsafeCoerce$0(e,cst_vkern$0)}
    var
     Js_of_ocaml_Dom_svg=
      [0,
       t0,
       SVGError,
       createElement$0,
       createA$0,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createPattern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript$0,
       createSet,
       createStop,
       createStyle$0,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle$0,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       document$0,
       getElementById$0,
       [0,
        element$2,
        a$0,
        altGlyph,
        altGlyphDef,
        altGlyphItem,
        animate,
        animateColor,
        animateMotion,
        animateTransform,
        circle,
        clipPath,
        cursor,
        defs,
        desc,
        ellipse,
        filter,
        font,
        fontFace,
        fontFaceFormat,
        fontFaceName,
        fontFaceSrc,
        fontFaceUri,
        foreignObject,
        g,
        glyph,
        glyphRef,
        hkern,
        image,
        lineElement,
        linearElement,
        mask,
        metaData,
        missingGlyph,
        mPath,
        path$0,
        pattern,
        polygon,
        polyline,
        radialgradient,
        rect,
        script$0,
        set$1,
        stop,
        style$0,
        svg,
        switch$0,
        symbol$12,
        textElement,
        textpath,
        title$0,
        tref,
        tspan,
        use,
        view,
        vkern]];
    caml_register_global(1665,Js_of_ocaml_Dom_svg,"Js_of_ocaml__Dom_svg");
    function withCredentials(b)
     {var init={};init.withCredentials = ! ! b;return init}
    var
     eventSource=Unsafe[1].EventSource,
     eventSource_options=Unsafe[1].EventSource,
     Js_of_ocaml_EventSource=
      [0,withCredentials,eventSource,eventSource_options,addEventListener];
    caml_register_global
     (1666,Js_of_ocaml_EventSource,"Js_of_ocaml__EventSource");
    var
     console=runtime.caml_js_get_console(0),
     Js_of_ocaml_Firebug=[0,console];
    caml_register_global(1667,Js_of_ocaml_Firebug,"Js_of_ocaml__Firebug");
    function empty_position_options(param){return {}}
    var
     x=Unsafe[1].navigator,
     geolocation=caml_call1(Optdef[5],x)?x.geolocation:x;
    function is_supported$2(param){return caml_call1(Optdef[5],geolocation)}
    var
     Js_of_ocaml_Geolocation=
      [0,empty_position_options,geolocation,is_supported$2];
    caml_register_global
     (1668,Js_of_ocaml_Geolocation,"Js_of_ocaml__Geolocation");
    function empty_intersection_observer_op(param){return {}}
    var intersectionObserver_unsafe=Unsafe[1].IntersectionObserver;
    function is_supported$3(param)
     {return caml_call1(Optdef[5],intersectionObserver_unsafe)}
    var
     Js_of_ocaml_IntersectionObserv=
      [0,
       empty_intersection_observer_op,
       is_supported$3,
       intersectionObserver_unsafe];
    caml_register_global
     (1669,Js_of_ocaml_IntersectionObserv,"Js_of_ocaml__IntersectionObserver");
    function object_options(param){return {"localeMatcher":"best fit"}}
    function options(param)
     {return {"localeMatcher":"best fit",
              "usage":"sort",
              "sensitivity":"variant",
              "ignorePunctuation":t4,
              "numeric":t4,
              "caseFirst":"false"}}
    var Collator=[0,object_options,options];
    function options$0(param)
     {return {"localeMatcher":"best fit",
              "timeZone":t39,
              "hour12":t39,
              "hourCycle":t39,
              "formatMatcher":"best fit",
              "weekday":t39,
              "era":t39,
              "year":t39,
              "month":t39,
              "day":t39,
              "hour":t39,
              "minute":t39,
              "second":t39,
              "timeZoneName":t39}}
    var DateTimeFormat=[0,object_options,options$0];
    function options$1(param)
     {return {"localeMatcher":"best fit",
              "style":"decimal",
              "currency":t39,
              "currencyDisplay":t39,
              "useGrouping":t25,
              "minimumIntegerDigits":t39,
              "minimumFractionDigits":t39,
              "maximumFractionDigits":t39,
              "minimumSignificantDigits":t39,
              "maximumSignificantDigits":t39}}
    var NumberFormat=[0,object_options,options$1];
    function options$2(param)
     {return {"localeMatcher":"best fit","type":"cardinal"}}
    var
     PluralRules=[0,object_options,options$2],
     intl=Unsafe[1].Intl,
     collator_constr=Unsafe[1].Intl.Collator,
     dateTimeFormat_constr=Unsafe[1].Intl.DateTimeFormat,
     numberFormat_constr=Unsafe[1].Intl.NumberFormat,
     pluralRules_constr=Unsafe[1].Intl.PluralRules;
    function is_supported$4(param){return caml_call1(Optdef[5],intl)}
    var
     Js_of_ocaml_Intl=
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       pluralRules_constr,
       is_supported$4];
    caml_register_global(1670,Js_of_ocaml_Intl,"Js_of_ocaml__Intl");
    var Js_of_ocaml$0=[0];
    caml_register_global(1671,Js_of_ocaml$0,"Js_of_ocaml");
    return}
  (function(){return this}()));


//# 1 ".seed_tools_js.eobjs/byte/dune__exe__Seed_tools_js.cmo.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_enter=caml_string_of_jsbytes("enter"),
     cst_click=caml_string_of_jsbytes("click"),
     cst=caml_string_of_jsbytes("\n"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_output=caml_string_of_jsbytes("output"),
     cst_load=caml_string_of_jsbytes("load"),
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Stdlib_option=global_data.Stdlib__option,
     Seed_tools_common=global_data.Seed_tools_common,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib_format=global_data.Stdlib__format,
     Stdlib_printexc=global_data.Stdlib__printexc,
     cont=[0,0],
     buffer=caml_call1(Stdlib_buffer[1],1000),
     fmt=caml_call1(Stdlib_format[109],buffer);
    function update_output(param)
     {var
       content=caml_call1(Stdlib_buffer[2],buffer),
       _i_=
        caml_call2
         (Js_of_ocaml_Dom_html[5],cst_output,Js_of_ocaml_Dom_html[117][55]),
       output=caml_call1(Stdlib_option[4],_i_);
      return output.value = runtime.caml_jsstring_of_string(content)}
    function execute_and_print_continuation(c)
     {try
       {var c$1=caml_call1(c,fmt);
        caml_call2(Stdlib_format[36],fmt,0);
        var c$0=c$1}
      catch(e)
       {e = caml_wrap_exception(e);
        var _h_=caml_call1(Stdlib_printexc[1],e);
        caml_call2(Stdlib_buffer[14],buffer,_h_);
        var c$0=0}
      update_output(0);
      return c$0}
    function is_blank_str(s)
     {var i$1=runtime.caml_ml_string_length(s) - 1 | 0,i=i$1;
      for(;;)
       {if(0 <= i)
         {var c=runtime.caml_string_get(s,i);
          if(32 !== c && 9 !== c && 10 !== c && 13 !== c)return 0;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        return 1}}
    function get_input(param)
     {var
       _g_=
        caml_call2
         (Js_of_ocaml_Dom_html[5],cst_input,Js_of_ocaml_Dom_html[117][33]),
       input=caml_call1(Stdlib_option[4],_g_),
       res=runtime.caml_string_of_jsstring(input.value);
      input.value = "";
      return res}
    function enter(param)
     {var input=get_input(0);
      if(1 - is_blank_str(input))
       {var _f_=cont[1];
        if(_f_)
         {var c=_f_[1];
          caml_call2(Stdlib_buffer[14],buffer,input);
          caml_call2(Stdlib_buffer[10],buffer,10);
          update_output(0);
          cont[1]
          =
          execute_and_print_continuation
           (function(fmt){return caml_call2(c,fmt,input)});
          if(0 === cont[1])
           {caml_call2(Stdlib_buffer[14],buffer,cst);
            update_output(0);
            cont[1] = execute_and_print_continuation(Seed_tools_common[1])}}}
      return Js_of_ocaml_Js[7]}
    function init(param)
     {var
       _c_=
        caml_call2
         (Js_of_ocaml_Dom_html[5],cst_enter,Js_of_ocaml_Dom_html[117][9]),
       enter_button=caml_call1(Stdlib_option[4],_c_),
       _d_=caml_call1(Js_of_ocaml_Dom_html[10],enter),
       _e_=caml_call1(Js_of_ocaml_Dom_html[15][86],cst_click);
      caml_call4(Js_of_ocaml_Dom_html[17],enter_button,_e_,_d_,! ! 0);
      cont[1] = execute_and_print_continuation(Seed_tools_common[1]);
      return Js_of_ocaml_Js[8]}
    var
     _a_=caml_call1(Js_of_ocaml_Dom_html[10],init),
     _b_=caml_call1(Js_of_ocaml_Dom_html[15][86],cst_load);
    caml_call4(Js_of_ocaml_Dom_html[17],Js_of_ocaml_Dom_html[8],_b_,_a_,! ! 0);
    var
     Dune_exe_Seed_tools_js=
      [0,
       cont,
       buffer,
       fmt,
       update_output,
       execute_and_print_continuation,
       is_blank_str,
       get_input,
       enter,
       init];
    runtime.caml_register_global
     (17,Dune_exe_Seed_tools_js,"Dune__exe__Seed_tools_js");
    return}
  (function(){return this}()));


//# 1 ".js/stdlib/std_exit.cmo.js"
(function(joo_global_object)
   {"use strict";
    var runtime=joo_global_object.jsoo_runtime;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    var global_data=runtime.caml_get_global_data(),Stdlib=global_data.Stdlib;
    caml_call1(Stdlib[103],0);
    var Std_exit=[0];
    runtime.caml_register_global(1,Std_exit,"Std_exit");
    return}
  (function(){return this}()));


//# sourceMappingURL=data:application/json;base64,